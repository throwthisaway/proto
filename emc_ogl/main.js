
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'asset', true, true);
var fileData0 = [];
fileData0.push.apply(fileData0, [80, 78, 84, 83, 48, 3, 0, 0, 68, 0, 0, 0, 250, 253, 243, 193, 0, 38, 132, 64, 102, 102, 134, 191, 78, 208, 182, 192, 48, 147, 52, 65, 102, 102, 134, 191, 148, 17, 211, 64, 112, 62, 205, 64, 102, 102, 134, 191, 54, 8, 120, 65, 96, 251, 110, 64, 102, 102, 134, 191, 171, 50, 1, 66, 148, 179, 13, 65, 102, 102, 134, 191, 126, 254, 41, 66, 224, 115, 169, 64, 102, 102, 134, 191, 60, 8, 76, 194, 72, 84, 1, 65, 102, 102, 134, 191, 137, 149, 37, 194, 80, 131, 51, 64, 102, 102, 134, 191, 19, 240, 175, 193, 160, 16, 147, 63, 102, 102, 134, 191, 62, 136, 101, 66, 64, 17, 66, 65, 102, 102, 134, 191, 84, 95, 146, 66, 16, 105, 184, 64, 102, 102, 134, 191, 205, 98, 166, 66, 184, 53, 249, 64, 102, 102, 134, 191, 184, 200, 188, 66, 188, 114, 51, 65, 102, 102, 134, 191, 41, 158, 137, 194, 32, 21, 87, 65, 102, 102, 134, 191, 84, 108, 174, 194, 44, 157, 25, 65, 102, 102, 134, 191, 238, 202, 205, 66, 9, 141, 143, 189, 102, 102, 134, 191, 0, 0, 200, 194, 48, 2, 19, 189, 102, 102, 134, 191, 119, 176, 164, 194, 7, 137, 79, 64, 102, 102, 134, 191, 226, 30, 111, 194, 125, 5, 187, 63, 102, 102, 134, 191, 0, 0, 52, 194, 170, 124, 182, 61, 102, 102, 134, 191, 0, 0, 24, 194, 105, 212, 217, 191, 102, 102, 134, 191, 41, 89, 208, 193, 166, 56, 228, 191, 102, 102, 134, 191, 0, 0, 168, 193, 178, 78, 111, 190, 102, 102, 134, 191, 206, 206, 132, 63, 106, 108, 14, 64, 102, 102, 134, 191, 207, 82, 47, 65, 85, 148, 158, 62, 102, 102, 134, 191, 57, 20, 152, 65, 31, 199, 107, 191, 102, 102, 134, 191, 16, 150, 23, 66, 77, 237, 233, 63, 102, 102, 134, 191, 104, 249, 49, 66, 109, 164, 26, 64, 102, 102, 134, 191, 214, 179, 131, 66, 96, 50, 113, 62, 102, 102, 134, 191, 104, 177, 151, 66, 233, 224, 14, 64, 102, 102, 134, 191, 120, 20, 171, 66, 19, 139, 149, 64, 102, 102, 134, 191, 0, 0, 206, 66, 0, 0, 0, 193, 102, 102, 134, 191, 0, 0, 200, 194, 0, 0, 0, 193, 102, 102, 134, 191, 250, 253, 243, 193, 0, 38, 132, 64, 102, 102, 134, 191, 78, 208, 182, 192, 48, 147, 52, 65, 102, 102, 134, 191, 148, 17, 211, 64, 112, 62, 205, 64, 102, 102, 134, 191, 54, 8, 120, 65, 96, 251, 110, 64, 102, 102, 134, 191, 171, 50, 1, 66, 148, 179, 13, 65, 102, 102, 134, 191, 126, 254, 41, 66, 224, 115, 169, 64, 102, 102, 134, 191, 60, 8, 76, 194, 72, 84, 1, 65, 102, 102, 134, 191, 137, 149, 37, 194, 80, 131, 51, 64, 102, 102, 134, 191, 19, 240, 175, 193, 160, 16, 147, 63, 102, 102, 134, 191, 62, 136, 101, 66, 64, 17, 66, 65, 102, 102, 134, 191, 84, 95, 146, 66, 16, 105, 184, 64, 102, 102, 134, 191, 205, 98, 166, 66, 184, 53, 249, 64, 102, 102, 134, 191, 184, 200, 188, 66, 188, 114, 51, 65, 102, 102, 134, 191, 41, 158, 137, 194, 32, 21, 87, 65, 102, 102, 134, 191, 84, 108, 174, 194, 44, 157, 25, 65, 102, 102, 134, 191, 238, 202, 205, 66, 9, 141, 143, 189, 102, 102, 134, 191, 0, 0, 200, 194, 48, 2, 19, 189, 102, 102, 134, 191, 119, 176, 164, 194, 7, 137, 79, 64, 102, 102, 134, 191, 226, 30, 111, 194, 125, 5, 187, 63, 102, 102, 134, 191, 0, 0, 52, 194, 170, 124, 182, 61, 102, 102, 134, 191, 0, 0, 24, 194, 105, 212, 217, 191, 102, 102, 134, 191, 41, 89, 208, 193, 166, 56, 228, 191, 102, 102, 134, 191, 0, 0, 168, 193, 178, 78, 111, 190, 102, 102, 134, 191, 206, 206, 132, 63, 106, 108, 14, 64, 102, 102, 134, 191, 207, 82, 47, 65, 85, 148, 158, 62, 102, 102, 134, 191, 57, 20, 152, 65, 31, 199, 107, 191, 102, 102, 134, 191, 16, 150, 23, 66, 77, 237, 233, 63, 102, 102, 134, 191, 104, 249, 49, 66, 109, 164, 26, 64, 102, 102, 134, 191, 214, 179, 131, 66, 96, 50, 113, 62, 102, 102, 134, 191, 104, 177, 151, 66, 233, 224, 14, 64, 102, 102, 134, 191, 120, 20, 171, 66, 19, 139, 149, 64, 102, 102, 134, 191, 0, 0, 206, 66, 0, 0, 0, 193, 102, 102, 134, 191, 0, 0, 206, 66, 0, 0, 240, 65, 102, 102, 134, 191, 0, 0, 200, 194, 0, 0, 0, 193, 102, 102, 134, 191, 0, 0, 200, 194, 0, 0, 240, 65, 102, 102, 134, 191, 80, 79, 76, 83, 116, 1, 0, 0, 31, 0, 0, 0, 12, 0, 0, 0, 30, 0, 0, 0, 15, 0, 0, 0, 17, 0, 0, 0, 14, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 29, 0, 0, 0, 10, 0, 0, 0, 28, 0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 13, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 27, 0, 0, 0, 5, 0, 0, 0, 26, 0, 0, 0, 22, 0, 0, 0, 8, 0, 0, 0, 21, 0, 0, 0, 7, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 3, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 30, 0, 0, 0, 11, 0, 0, 0, 29, 0, 0, 0, 2, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 30, 0, 0, 0, 29, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 26, 0, 0, 0, 4, 0, 0, 0, 25, 0, 0, 0, 18, 0, 0, 0, 17, 0, 0, 0, 32, 0, 0, 0, 29, 0, 0, 0, 28, 0, 0, 0, 31, 0, 0, 0, 6, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 19, 0, 0, 0, 18, 0, 0, 0, 32, 0, 0, 0, 31, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 23, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 9, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 20, 0, 0, 0, 19, 0, 0, 0, 32, 0, 0, 0, 24, 0, 0, 0, 23, 0, 0, 0, 22, 0, 0, 0, 21, 0, 0, 0, 20, 0, 0, 0, 32, 0, 0, 0, 27, 0, 0, 0, 26, 0, 0, 0, 28, 0, 0, 0, 24, 0, 0, 0, 22, 0, 0, 0, 21, 0, 0, 0, 24, 0, 0, 0, 21, 0, 0, 0, 32, 0, 0, 0, 28, 0, 0, 0, 26, 0, 0, 0, 25, 0, 0, 0, 25, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 28, 0, 0, 0, 25, 0, 0, 0, 32, 0, 0, 0, 76, 73, 78, 69, 0, 1, 0, 0, 32, 0, 0, 0, 47, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 47, 0, 0, 0, 46, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 46, 0, 0, 0, 39, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 40, 0, 0, 0, 33, 0, 0, 0, 53, 0, 0, 0, 54, 0, 0, 0, 33, 0, 0, 0, 41, 0, 0, 0, 54, 0, 0, 0, 55, 0, 0, 0, 41, 0, 0, 0, 34, 0, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 56, 0, 0, 0, 57, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 59, 0, 0, 0, 60, 0, 0, 0, 38, 0, 0, 0, 42, 0, 0, 0, 60, 0, 0, 0, 61, 0, 0, 0, 42, 0, 0, 0, 43, 0, 0, 0, 61, 0, 0, 0, 62, 0, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 63, 0, 0, 0, 48, 0, 0, 0, 45, 0, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 66, 0, 0, 0, 67, 0, 0, 0, 83, 85, 82, 70, 163, 2, 0, 0, 2, 0, 0, 0, 83, 82, 70, 67, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 83, 82, 70, 67, 175, 174, 46, 63, 142, 141, 13, 63, 193, 192, 192, 62, 0, 0, 0, 0, 0, 0, 0, 0, 179, 1, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 153, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 1, 0, 0, 0, 0, 0, 0, 108, 97, 110, 95, 101, 100, 103, 101, 0, 68, 101, 102, 97, 117, 108, 116, 46, 112, 114, 111, 103, 114, 97, 109, 0, 83, 73, 78, 70, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 2, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 4, 0, 0, 0, 205, 204, 204, 62, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 7, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 9, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 108, 97, 110, 100, 95, 102, 105, 108, 108, 0, 68, 101, 102, 97, 117, 108, 116, 46, 112, 114, 111, 103, 114, 97, 109, 0, 83, 73, 78, 70, 0, 0, 0, 0, 175, 174, 46, 63, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 2, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 4, 0, 0, 0, 205, 204, 204, 62, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 7, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 9, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 163, 2, 0, 0, 0, 0, 0, 0, 76, 65, 89, 82, 80, 0, 0, 0, 1, 0, 0, 0, 76, 65, 89, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 205, 205, 205, 205, 48, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 205, 205, 205, 205, 64, 0, 0, 0, 0, 0, 0, 0, 83, 69, 67, 84, 1, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 83, 69, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0]);
Module['FS_createDataFile']('/asset', 'land.mesh', fileData0, true, true);
var fileData1 = [];
fileData1.push.apply(fileData1, [80, 78, 84, 83, 192, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 143, 194, 117, 190, 102, 102, 134, 191, 10, 215, 163, 61, 10, 215, 35, 190, 102, 102, 134, 191, 205, 204, 204, 61, 210, 137, 188, 172, 102, 102, 134, 191, 10, 215, 163, 189, 143, 194, 245, 189, 102, 102, 134, 191, 10, 215, 163, 189, 210, 137, 188, 172, 102, 102, 134, 191, 10, 215, 163, 188, 210, 137, 188, 172, 102, 102, 134, 191, 0, 0, 0, 0, 205, 204, 204, 189, 102, 102, 134, 191, 10, 215, 35, 61, 210, 137, 188, 172, 102, 102, 134, 191, 10, 215, 35, 188, 195, 245, 168, 190, 102, 102, 134, 191, 205, 204, 76, 61, 174, 71, 97, 190, 102, 102, 134, 191, 204, 204, 204, 61, 210, 137, 188, 172, 102, 102, 134, 191, 10, 215, 163, 189, 210, 137, 188, 172, 102, 102, 134, 191, 10, 215, 163, 189, 41, 92, 15, 190, 102, 102, 134, 191, 144, 194, 117, 188, 210, 137, 188, 172, 102, 102, 134, 191, 9, 215, 163, 59, 10, 215, 163, 189, 102, 102, 134, 191, 235, 81, 56, 61, 210, 137, 188, 172, 102, 102, 134, 191, 80, 79, 76, 83, 72, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 10, 0, 0, 0, 12, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 76, 73, 78, 69, 96, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 11, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 83, 85, 82, 70, 166, 2, 0, 0, 2, 0, 0, 0, 83, 82, 70, 67, 224, 223, 95, 63, 235, 234, 234, 62, 189, 188, 60, 62, 0, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 0, 0, 83, 82, 70, 67, 214, 213, 85, 63, 222, 221, 93, 63, 197, 196, 68, 62, 0, 0, 0, 0, 0, 0, 0, 0, 182, 1, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 155, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 1, 0, 0, 0, 0, 0, 0, 102, 108, 97, 109, 101, 95, 101, 100, 103, 101, 0, 68, 101, 102, 97, 117, 108, 116, 46, 112, 114, 111, 103, 114, 97, 109, 0, 83, 73, 78, 70, 0, 0, 0, 0, 224, 223, 95, 63, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 2, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 4, 0, 0, 0, 205, 204, 204, 62, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 7, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 9, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 102, 108, 97, 109, 101, 95, 112, 111, 108, 121, 0, 68, 101, 102, 97, 117, 108, 116, 46, 112, 114, 111, 103, 114, 97, 109, 0, 83, 73, 78, 70, 0, 0, 0, 0, 214, 213, 85, 63, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 2, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 4, 0, 0, 0, 205, 204, 204, 62, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 7, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 9, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 166, 2, 0, 0, 0, 0, 0, 0, 76, 65, 89, 82, 160, 0, 0, 0, 2, 0, 0, 0, 76, 65, 89, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 205, 205, 205, 205, 96, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 205, 205, 205, 205, 112, 0, 0, 0, 0, 0, 0, 0, 76, 65, 89, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 205, 205, 205, 205, 128, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 205, 205, 205, 205, 144, 0, 0, 0, 0, 0, 0, 0, 83, 69, 67, 84, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 83, 69, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 83, 69, 67, 84, 1, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 83, 69, 67, 84, 0, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0]);
Module['FS_createDataFile']('/asset', 'propulsion.mesh', fileData1, true, true);
var fileData2 = [];
fileData2.push.apply(fileData2, [80, 78, 84, 83, 220, 11, 0, 0, 253, 0, 0, 0, 0, 0, 0, 63, 154, 153, 185, 63, 0, 0, 0, 128, 154, 153, 25, 63, 51, 51, 179, 63, 0, 0, 0, 128, 154, 153, 25, 63, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 191, 154, 153, 185, 63, 0, 0, 0, 128, 154, 153, 25, 191, 51, 51, 179, 63, 0, 0, 0, 128, 154, 153, 25, 191, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 192, 63, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 82, 184, 30, 64, 0, 0, 0, 128, 52, 160, 94, 62, 90, 172, 29, 64, 0, 0, 0, 128, 61, 10, 215, 62, 179, 154, 26, 64, 0, 0, 0, 128, 102, 14, 24, 63, 234, 184, 21, 64, 0, 0, 0, 128, 232, 58, 58, 63, 41, 92, 15, 64, 0, 0, 0, 128, 115, 182, 79, 63, 112, 243, 7, 64, 0, 0, 0, 128, 61, 10, 87, 63, 0, 0, 0, 64, 0, 0, 0, 128, 115, 182, 79, 63, 33, 25, 240, 63, 0, 0, 0, 128, 232, 58, 58, 63, 174, 71, 225, 63, 0, 0, 0, 128, 102, 14, 24, 63, 44, 142, 212, 63, 0, 0, 0, 128, 61, 10, 215, 62, 153, 202, 202, 63, 0, 0, 0, 128, 52, 160, 94, 62, 77, 167, 196, 63, 0, 0, 0, 128, 0, 0, 0, 0, 92, 143, 194, 63, 0, 0, 0, 128, 52, 160, 94, 190, 77, 167, 196, 63, 0, 0, 0, 128, 61, 10, 215, 190, 153, 202, 202, 63, 0, 0, 0, 128, 102, 14, 24, 191, 44, 142, 212, 63, 0, 0, 0, 128, 232, 58, 58, 191, 174, 71, 225, 63, 0, 0, 0, 128, 115, 182, 79, 191, 33, 25, 240, 63, 0, 0, 0, 128, 61, 10, 87, 191, 0, 0, 0, 64, 0, 0, 0, 128, 115, 182, 79, 191, 112, 243, 7, 64, 0, 0, 0, 128, 232, 58, 58, 191, 41, 92, 15, 64, 0, 0, 0, 128, 102, 14, 24, 191, 234, 184, 21, 64, 0, 0, 0, 128, 61, 10, 215, 190, 179, 154, 26, 64, 0, 0, 0, 128, 52, 160, 94, 190, 90, 172, 29, 64, 0, 0, 0, 128, 0, 0, 0, 63, 154, 153, 185, 63, 0, 0, 0, 128, 154, 153, 25, 63, 51, 51, 179, 63, 0, 0, 0, 128, 154, 153, 25, 63, 0, 0, 0, 0, 0, 0, 0, 128, 205, 204, 204, 62, 0, 0, 0, 0, 0, 0, 0, 128, 72, 225, 250, 62, 10, 215, 35, 190, 0, 0, 0, 128, 72, 225, 250, 62, 164, 112, 189, 190, 0, 0, 0, 128, 205, 204, 204, 62, 92, 143, 194, 190, 0, 0, 0, 128, 225, 122, 20, 63, 92, 143, 194, 190, 0, 0, 0, 128, 0, 0, 0, 191, 154, 153, 185, 63, 0, 0, 0, 128, 154, 153, 25, 191, 51, 51, 179, 63, 0, 0, 0, 128, 154, 153, 25, 191, 0, 0, 0, 0, 0, 0, 0, 128, 205, 204, 204, 190, 0, 0, 0, 0, 0, 0, 0, 128, 72, 225, 250, 190, 10, 215, 35, 190, 0, 0, 0, 128, 72, 225, 250, 190, 164, 112, 189, 190, 0, 0, 0, 128, 205, 204, 204, 190, 92, 143, 194, 190, 0, 0, 0, 128, 225, 122, 20, 191, 92, 143, 194, 190, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 192, 63, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 31, 133, 235, 62, 225, 122, 20, 64, 0, 0, 0, 128, 254, 107, 251, 62, 227, 55, 20, 64, 0, 0, 0, 128, 184, 30, 5, 63, 122, 115, 19, 64, 0, 0, 0, 128, 121, 123, 11, 63, 7, 59, 18, 64, 0, 0, 0, 128, 67, 93, 16, 63, 215, 163, 16, 64, 0, 0, 0, 128, 233, 110, 19, 63, 169, 201, 14, 64, 0, 0, 0, 128, 225, 122, 20, 63, 205, 204, 12, 64, 0, 0, 0, 128, 233, 110, 19, 63, 241, 207, 10, 64, 0, 0, 0, 128, 67, 93, 16, 63, 195, 245, 8, 64, 0, 0, 0, 128, 121, 123, 11, 63, 146, 94, 7, 64, 0, 0, 0, 128, 184, 30, 5, 63, 32, 38, 6, 64, 0, 0, 0, 128, 254, 107, 251, 62, 182, 97, 5, 64, 0, 0, 0, 128, 31, 133, 235, 62, 184, 30, 5, 64, 0, 0, 0, 128, 64, 158, 219, 62, 182, 97, 5, 64, 0, 0, 0, 128, 205, 204, 204, 62, 32, 38, 6, 64, 0, 0, 0, 128, 75, 19, 192, 62, 146, 94, 7, 64, 0, 0, 0, 128, 184, 79, 182, 62, 195, 245, 8, 64, 0, 0, 0, 128, 108, 44, 176, 62, 241, 207, 10, 64, 0, 0, 0, 128, 123, 20, 174, 62, 205, 204, 12, 64, 0, 0, 0, 128, 108, 44, 176, 62, 169, 201, 14, 64, 0, 0, 0, 128, 184, 79, 182, 62, 215, 163, 16, 64, 0, 0, 0, 128, 75, 19, 192, 62, 7, 59, 18, 64, 0, 0, 0, 128, 205, 204, 204, 62, 122, 115, 19, 64, 0, 0, 0, 128, 64, 158, 219, 62, 227, 55, 20, 64, 0, 0, 0, 128, 0, 0, 0, 0, 225, 122, 20, 64, 0, 0, 0, 128, 242, 109, 254, 60, 227, 55, 20, 64, 0, 0, 0, 128, 143, 194, 117, 61, 122, 115, 19, 64, 0, 0, 0, 128, 80, 199, 173, 61, 7, 59, 18, 64, 0, 0, 0, 128, 155, 213, 212, 61, 215, 163, 16, 64, 0, 0, 0, 128, 204, 98, 237, 61, 169, 201, 14, 64, 0, 0, 0, 128, 143, 194, 245, 61, 205, 204, 12, 64, 0, 0, 0, 128, 204, 98, 237, 61, 241, 207, 10, 64, 0, 0, 0, 128, 155, 213, 212, 61, 195, 245, 8, 64, 0, 0, 0, 128, 80, 199, 173, 61, 146, 94, 7, 64, 0, 0, 0, 128, 143, 194, 117, 61, 32, 38, 6, 64, 0, 0, 0, 128, 242, 109, 254, 60, 182, 97, 5, 64, 0, 0, 0, 128, 0, 0, 0, 0, 184, 30, 5, 64, 0, 0, 0, 128, 242, 109, 254, 188, 182, 97, 5, 64, 0, 0, 0, 128, 143, 194, 117, 189, 32, 38, 6, 64, 0, 0, 0, 128, 80, 199, 173, 189, 146, 94, 7, 64, 0, 0, 0, 128, 155, 213, 212, 189, 195, 245, 8, 64, 0, 0, 0, 128, 204, 98, 237, 189, 241, 207, 10, 64, 0, 0, 0, 128, 143, 194, 245, 189, 205, 204, 12, 64, 0, 0, 0, 128, 204, 98, 237, 189, 169, 201, 14, 64, 0, 0, 0, 128, 155, 213, 212, 189, 215, 163, 16, 64, 0, 0, 0, 128, 80, 199, 173, 189, 7, 59, 18, 64, 0, 0, 0, 128, 143, 194, 117, 189, 122, 115, 19, 64, 0, 0, 0, 128, 242, 109, 254, 188, 227, 55, 20, 64, 0, 0, 0, 128, 31, 133, 235, 190, 225, 122, 20, 64, 0, 0, 0, 128, 254, 107, 251, 190, 227, 55, 20, 64, 0, 0, 0, 128, 184, 30, 5, 191, 122, 115, 19, 64, 0, 0, 0, 128, 121, 123, 11, 191, 7, 59, 18, 64, 0, 0, 0, 128, 67, 93, 16, 191, 215, 163, 16, 64, 0, 0, 0, 128, 233, 110, 19, 191, 169, 201, 14, 64, 0, 0, 0, 128, 225, 122, 20, 191, 205, 204, 12, 64, 0, 0, 0, 128, 233, 110, 19, 191, 241, 207, 10, 64, 0, 0, 0, 128, 67, 93, 16, 191, 195, 245, 8, 64, 0, 0, 0, 128, 121, 123, 11, 191, 146, 94, 7, 64, 0, 0, 0, 128, 184, 30, 5, 191, 32, 38, 6, 64, 0, 0, 0, 128, 254, 107, 251, 190, 182, 97, 5, 64, 0, 0, 0, 128, 31, 133, 235, 190, 184, 30, 5, 64, 0, 0, 0, 128, 64, 158, 219, 190, 182, 97, 5, 64, 0, 0, 0, 128, 205, 204, 204, 190, 32, 38, 6, 64, 0, 0, 0, 128, 75, 19, 192, 190, 146, 94, 7, 64, 0, 0, 0, 128, 184, 79, 182, 190, 195, 245, 8, 64, 0, 0, 0, 128, 108, 44, 176, 190, 241, 207, 10, 64, 0, 0, 0, 128, 123, 20, 174, 190, 205, 204, 12, 64, 0, 0, 0, 128, 108, 44, 176, 190, 169, 201, 14, 64, 0, 0, 0, 128, 184, 79, 182, 190, 215, 163, 16, 64, 0, 0, 0, 128, 75, 19, 192, 190, 7, 59, 18, 64, 0, 0, 0, 128, 205, 204, 204, 190, 122, 115, 19, 64, 0, 0, 0, 128, 64, 158, 219, 190, 227, 55, 20, 64, 0, 0, 0, 128, 0, 0, 0, 0, 82, 184, 30, 64, 0, 0, 0, 128, 52, 160, 94, 62, 90, 172, 29, 64, 0, 0, 0, 128, 61, 10, 215, 62, 179, 154, 26, 64, 0, 0, 0, 128, 102, 14, 24, 63, 234, 184, 21, 64, 0, 0, 0, 128, 232, 58, 58, 63, 41, 92, 15, 64, 0, 0, 0, 128, 115, 182, 79, 63, 112, 243, 7, 64, 0, 0, 0, 128, 61, 10, 87, 63, 0, 0, 0, 64, 0, 0, 0, 128, 115, 182, 79, 63, 33, 25, 240, 63, 0, 0, 0, 128, 232, 58, 58, 63, 174, 71, 225, 63, 0, 0, 0, 128, 102, 14, 24, 63, 44, 142, 212, 63, 0, 0, 0, 128, 61, 10, 215, 62, 153, 202, 202, 63, 0, 0, 0, 128, 52, 160, 94, 62, 77, 167, 196, 63, 0, 0, 0, 128, 0, 0, 0, 0, 92, 143, 194, 63, 0, 0, 0, 128, 52, 160, 94, 190, 77, 167, 196, 63, 0, 0, 0, 128, 61, 10, 215, 190, 153, 202, 202, 63, 0, 0, 0, 128, 102, 14, 24, 191, 44, 142, 212, 63, 0, 0, 0, 128, 232, 58, 58, 191, 174, 71, 225, 63, 0, 0, 0, 128, 115, 182, 79, 191, 33, 25, 240, 63, 0, 0, 0, 128, 61, 10, 87, 191, 0, 0, 0, 64, 0, 0, 0, 128, 115, 182, 79, 191, 112, 243, 7, 64, 0, 0, 0, 128, 232, 58, 58, 191, 41, 92, 15, 64, 0, 0, 0, 128, 102, 14, 24, 191, 234, 184, 21, 64, 0, 0, 0, 128, 61, 10, 215, 190, 179, 154, 26, 64, 0, 0, 0, 128, 52, 160, 94, 190, 90, 172, 29, 64, 0, 0, 0, 128, 56, 153, 226, 190, 75, 85, 20, 64, 0, 0, 0, 128, 31, 133, 235, 190, 225, 122, 20, 64, 0, 0, 0, 128, 253, 234, 253, 190, 204, 130, 5, 64, 0, 0, 0, 128, 184, 30, 5, 191, 32, 38, 6, 64, 0, 0, 0, 128, 121, 123, 11, 191, 146, 94, 7, 64, 0, 0, 0, 128, 67, 93, 16, 191, 195, 245, 8, 64, 0, 0, 0, 128, 233, 110, 19, 191, 241, 207, 10, 64, 0, 0, 0, 128, 225, 122, 20, 191, 205, 204, 12, 64, 0, 0, 0, 128, 233, 110, 19, 191, 169, 201, 14, 64, 0, 0, 0, 128, 67, 93, 16, 191, 215, 163, 16, 64, 0, 0, 0, 128, 121, 123, 11, 191, 7, 59, 18, 64, 0, 0, 0, 128, 184, 30, 5, 191, 122, 115, 19, 64, 0, 0, 0, 128, 254, 107, 251, 190, 227, 55, 20, 64, 0, 0, 0, 128, 61, 10, 215, 190, 52, 251, 19, 64, 0, 0, 0, 128, 64, 158, 219, 190, 227, 55, 20, 64, 0, 0, 0, 128, 61, 10, 215, 190, 101, 158, 5, 64, 0, 0, 0, 128, 64, 158, 219, 190, 182, 97, 5, 64, 0, 0, 0, 128, 31, 133, 235, 190, 184, 30, 5, 64, 0, 0, 0, 128, 254, 107, 251, 190, 182, 97, 5, 64, 0, 0, 0, 128, 205, 204, 204, 190, 122, 115, 19, 64, 0, 0, 0, 128, 45, 57, 201, 190, 167, 27, 19, 64, 0, 0, 0, 128, 161, 120, 182, 190, 25, 239, 8, 64, 0, 0, 0, 128, 75, 19, 192, 190, 146, 94, 7, 64, 0, 0, 0, 128, 205, 204, 204, 190, 32, 38, 6, 64, 0, 0, 0, 128, 75, 19, 192, 190, 7, 59, 18, 64, 0, 0, 0, 128, 184, 79, 182, 190, 215, 163, 16, 64, 0, 0, 0, 128, 108, 44, 176, 190, 169, 201, 14, 64, 0, 0, 0, 128, 123, 20, 174, 190, 205, 204, 12, 64, 0, 0, 0, 128, 108, 44, 176, 190, 241, 207, 10, 64, 0, 0, 0, 128, 184, 79, 182, 190, 195, 245, 8, 64, 0, 0, 0, 128, 124, 195, 29, 189, 70, 5, 20, 64, 0, 0, 0, 128, 143, 194, 117, 189, 122, 115, 19, 64, 0, 0, 0, 128, 80, 199, 173, 189, 7, 59, 18, 64, 0, 0, 0, 128, 155, 213, 212, 189, 215, 163, 16, 64, 0, 0, 0, 128, 204, 98, 237, 189, 169, 201, 14, 64, 0, 0, 0, 128, 143, 194, 245, 189, 205, 204, 12, 64, 0, 0, 0, 128, 204, 98, 237, 189, 241, 207, 10, 64, 0, 0, 0, 128, 155, 213, 212, 189, 195, 245, 8, 64, 0, 0, 0, 128, 80, 199, 173, 189, 146, 94, 7, 64, 0, 0, 0, 128, 184, 101, 172, 189, 23, 86, 7, 64, 0, 0, 0, 128, 242, 109, 254, 188, 227, 55, 20, 64, 0, 0, 0, 128, 143, 194, 117, 189, 32, 38, 6, 64, 0, 0, 0, 128, 242, 109, 254, 188, 182, 97, 5, 64, 0, 0, 0, 128, 0, 0, 0, 0, 184, 30, 5, 64, 0, 0, 0, 128, 0, 0, 0, 0, 225, 122, 20, 64, 0, 0, 0, 128, 242, 109, 254, 60, 182, 97, 5, 64, 0, 0, 0, 128, 143, 194, 117, 61, 32, 38, 6, 64, 0, 0, 0, 128, 182, 101, 172, 61, 23, 86, 7, 64, 0, 0, 0, 128, 120, 195, 29, 61, 70, 5, 20, 64, 0, 0, 0, 128, 242, 109, 254, 60, 227, 55, 20, 64, 0, 0, 0, 128, 80, 199, 173, 61, 146, 94, 7, 64, 0, 0, 0, 128, 155, 213, 212, 61, 195, 245, 8, 64, 0, 0, 0, 128, 204, 98, 237, 61, 241, 207, 10, 64, 0, 0, 0, 128, 143, 194, 245, 61, 205, 204, 12, 64, 0, 0, 0, 128, 204, 98, 237, 61, 169, 201, 14, 64, 0, 0, 0, 128, 155, 213, 212, 61, 215, 163, 16, 64, 0, 0, 0, 128, 80, 199, 173, 61, 7, 59, 18, 64, 0, 0, 0, 128, 143, 194, 117, 61, 122, 115, 19, 64, 0, 0, 0, 128, 45, 57, 201, 62, 167, 27, 19, 64, 0, 0, 0, 128, 75, 19, 192, 62, 7, 59, 18, 64, 0, 0, 0, 128, 184, 79, 182, 62, 215, 163, 16, 64, 0, 0, 0, 128, 108, 44, 176, 62, 169, 201, 14, 64, 0, 0, 0, 128, 123, 20, 174, 62, 205, 204, 12, 64, 0, 0, 0, 128, 108, 44, 176, 62, 241, 207, 10, 64, 0, 0, 0, 128, 184, 79, 182, 62, 195, 245, 8, 64, 0, 0, 0, 128, 161, 120, 182, 62, 25, 239, 8, 64, 0, 0, 0, 128, 61, 10, 215, 62, 52, 251, 19, 64, 0, 0, 0, 128, 205, 204, 204, 62, 122, 115, 19, 64, 0, 0, 0, 128, 75, 19, 192, 62, 146, 94, 7, 64, 0, 0, 0, 128, 205, 204, 204, 62, 32, 38, 6, 64, 0, 0, 0, 128, 61, 10, 215, 62, 101, 158, 5, 64, 0, 0, 0, 128, 64, 158, 219, 62, 227, 55, 20, 64, 0, 0, 0, 128, 64, 158, 219, 62, 182, 97, 5, 64, 0, 0, 0, 128, 31, 133, 235, 62, 184, 30, 5, 64, 0, 0, 0, 128, 254, 107, 251, 62, 182, 97, 5, 64, 0, 0, 0, 128, 254, 234, 253, 62, 204, 130, 5, 64, 0, 0, 0, 128, 56, 153, 226, 62, 75, 85, 20, 64, 0, 0, 0, 128, 184, 30, 5, 63, 32, 38, 6, 64, 0, 0, 0, 128, 121, 123, 11, 63, 146, 94, 7, 64, 0, 0, 0, 128, 67, 93, 16, 63, 195, 245, 8, 64, 0, 0, 0, 128, 233, 110, 19, 63, 241, 207, 10, 64, 0, 0, 0, 128, 225, 122, 20, 63, 205, 204, 12, 64, 0, 0, 0, 128, 233, 110, 19, 63, 169, 201, 14, 64, 0, 0, 0, 128, 67, 93, 16, 63, 215, 163, 16, 64, 0, 0, 0, 128, 121, 123, 11, 63, 7, 59, 18, 64, 0, 0, 0, 128, 184, 30, 5, 63, 122, 115, 19, 64, 0, 0, 0, 128, 254, 107, 251, 62, 227, 55, 20, 64, 0, 0, 0, 128, 31, 133, 235, 62, 225, 122, 20, 64, 0, 0, 0, 128, 31, 133, 235, 62, 102, 102, 166, 63, 150, 225, 211, 44, 143, 194, 117, 62, 102, 102, 166, 63, 150, 225, 211, 44, 31, 133, 235, 62, 205, 204, 140, 63, 150, 225, 211, 44, 143, 194, 117, 62, 205, 204, 140, 63, 150, 225, 211, 44, 31, 133, 235, 62, 236, 81, 56, 63, 150, 225, 211, 44, 143, 194, 117, 62, 236, 81, 56, 63, 150, 225, 211, 44, 31, 133, 235, 62, 184, 30, 5, 63, 150, 225, 211, 44, 143, 194, 117, 62, 184, 30, 5, 63, 150, 225, 211, 44, 31, 133, 235, 62, 0, 0, 128, 63, 150, 225, 211, 44, 143, 194, 117, 62, 0, 0, 128, 63, 150, 225, 211, 44, 31, 133, 235, 62, 205, 204, 76, 63, 150, 225, 211, 44, 143, 194, 117, 62, 205, 204, 76, 63, 150, 225, 211, 44, 31, 133, 235, 62, 205, 204, 204, 62, 150, 225, 211, 44, 175, 71, 97, 62, 205, 204, 204, 62, 150, 225, 211, 44, 175, 71, 97, 62, 205, 204, 204, 61, 150, 225, 211, 44, 31, 133, 235, 62, 143, 194, 117, 62, 150, 225, 211, 44, 173, 71, 97, 62, 143, 194, 117, 62, 150, 225, 211, 44, 139, 27, 201, 171, 133, 235, 17, 64, 243, 14, 141, 153, 150, 225, 211, 172, 30, 133, 75, 64, 118, 157, 148, 154, 80, 79, 76, 83, 184, 5, 0, 0, 122, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 27, 0, 0, 0, 26, 0, 0, 0, 25, 0, 0, 0, 28, 0, 0, 0, 27, 0, 0, 0, 25, 0, 0, 0, 28, 0, 0, 0, 25, 0, 0, 0, 24, 0, 0, 0, 29, 0, 0, 0, 28, 0, 0, 0, 24, 0, 0, 0, 29, 0, 0, 0, 24, 0, 0, 0, 23, 0, 0, 0, 16, 0, 0, 0, 11, 0, 0, 0, 17, 0, 0, 0, 12, 0, 0, 0, 11, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 14, 0, 0, 0, 13, 0, 0, 0, 15, 0, 0, 0, 13, 0, 0, 0, 12, 0, 0, 0, 15, 0, 0, 0, 30, 0, 0, 0, 29, 0, 0, 0, 146, 0, 0, 0, 148, 0, 0, 0, 149, 0, 0, 0, 23, 0, 0, 0, 149, 0, 0, 0, 150, 0, 0, 0, 23, 0, 0, 0, 150, 0, 0, 0, 151, 0, 0, 0, 23, 0, 0, 0, 151, 0, 0, 0, 152, 0, 0, 0, 23, 0, 0, 0, 152, 0, 0, 0, 153, 0, 0, 0, 23, 0, 0, 0, 153, 0, 0, 0, 29, 0, 0, 0, 23, 0, 0, 0, 154, 0, 0, 0, 29, 0, 0, 0, 153, 0, 0, 0, 155, 0, 0, 0, 29, 0, 0, 0, 154, 0, 0, 0, 156, 0, 0, 0, 29, 0, 0, 0, 155, 0, 0, 0, 157, 0, 0, 0, 29, 0, 0, 0, 156, 0, 0, 0, 158, 0, 0, 0, 29, 0, 0, 0, 157, 0, 0, 0, 29, 0, 0, 0, 147, 0, 0, 0, 146, 0, 0, 0, 147, 0, 0, 0, 29, 0, 0, 0, 158, 0, 0, 0, 161, 0, 0, 0, 23, 0, 0, 0, 22, 0, 0, 0, 161, 0, 0, 0, 162, 0, 0, 0, 23, 0, 0, 0, 162, 0, 0, 0, 163, 0, 0, 0, 23, 0, 0, 0, 164, 0, 0, 0, 148, 0, 0, 0, 23, 0, 0, 0, 163, 0, 0, 0, 164, 0, 0, 0, 23, 0, 0, 0, 30, 0, 0, 0, 160, 0, 0, 0, 159, 0, 0, 0, 30, 0, 0, 0, 146, 0, 0, 0, 160, 0, 0, 0, 161, 0, 0, 0, 22, 0, 0, 0, 21, 0, 0, 0, 167, 0, 0, 0, 168, 0, 0, 0, 21, 0, 0, 0, 169, 0, 0, 0, 161, 0, 0, 0, 21, 0, 0, 0, 168, 0, 0, 0, 169, 0, 0, 0, 21, 0, 0, 0, 30, 0, 0, 0, 165, 0, 0, 0, 166, 0, 0, 0, 30, 0, 0, 0, 159, 0, 0, 0, 165, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 166, 0, 0, 0, 31, 0, 0, 0, 166, 0, 0, 0, 170, 0, 0, 0, 31, 0, 0, 0, 170, 0, 0, 0, 171, 0, 0, 0, 31, 0, 0, 0, 171, 0, 0, 0, 172, 0, 0, 0, 31, 0, 0, 0, 172, 0, 0, 0, 173, 0, 0, 0, 31, 0, 0, 0, 173, 0, 0, 0, 21, 0, 0, 0, 173, 0, 0, 0, 174, 0, 0, 0, 21, 0, 0, 0, 175, 0, 0, 0, 167, 0, 0, 0, 21, 0, 0, 0, 174, 0, 0, 0, 175, 0, 0, 0, 21, 0, 0, 0, 8, 0, 0, 0, 31, 0, 0, 0, 176, 0, 0, 0, 176, 0, 0, 0, 31, 0, 0, 0, 177, 0, 0, 0, 177, 0, 0, 0, 31, 0, 0, 0, 178, 0, 0, 0, 178, 0, 0, 0, 31, 0, 0, 0, 179, 0, 0, 0, 179, 0, 0, 0, 31, 0, 0, 0, 180, 0, 0, 0, 180, 0, 0, 0, 31, 0, 0, 0, 21, 0, 0, 0, 185, 0, 0, 0, 184, 0, 0, 0, 21, 0, 0, 0, 184, 0, 0, 0, 183, 0, 0, 0, 21, 0, 0, 0, 183, 0, 0, 0, 182, 0, 0, 0, 21, 0, 0, 0, 181, 0, 0, 0, 180, 0, 0, 0, 21, 0, 0, 0, 182, 0, 0, 0, 181, 0, 0, 0, 21, 0, 0, 0, 189, 0, 0, 0, 21, 0, 0, 0, 20, 0, 0, 0, 189, 0, 0, 0, 188, 0, 0, 0, 21, 0, 0, 0, 187, 0, 0, 0, 185, 0, 0, 0, 21, 0, 0, 0, 188, 0, 0, 0, 187, 0, 0, 0, 21, 0, 0, 0, 190, 0, 0, 0, 8, 0, 0, 0, 186, 0, 0, 0, 186, 0, 0, 0, 8, 0, 0, 0, 176, 0, 0, 0, 8, 0, 0, 0, 195, 0, 0, 0, 194, 0, 0, 0, 8, 0, 0, 0, 190, 0, 0, 0, 195, 0, 0, 0, 19, 0, 0, 0, 189, 0, 0, 0, 20, 0, 0, 0, 191, 0, 0, 0, 189, 0, 0, 0, 19, 0, 0, 0, 192, 0, 0, 0, 191, 0, 0, 0, 19, 0, 0, 0, 193, 0, 0, 0, 192, 0, 0, 0, 19, 0, 0, 0, 9, 0, 0, 0, 8, 0, 0, 0, 194, 0, 0, 0, 9, 0, 0, 0, 194, 0, 0, 0, 203, 0, 0, 0, 9, 0, 0, 0, 203, 0, 0, 0, 202, 0, 0, 0, 9, 0, 0, 0, 202, 0, 0, 0, 201, 0, 0, 0, 9, 0, 0, 0, 201, 0, 0, 0, 200, 0, 0, 0, 9, 0, 0, 0, 200, 0, 0, 0, 19, 0, 0, 0, 196, 0, 0, 0, 193, 0, 0, 0, 19, 0, 0, 0, 197, 0, 0, 0, 196, 0, 0, 0, 19, 0, 0, 0, 198, 0, 0, 0, 197, 0, 0, 0, 19, 0, 0, 0, 199, 0, 0, 0, 198, 0, 0, 0, 19, 0, 0, 0, 200, 0, 0, 0, 199, 0, 0, 0, 19, 0, 0, 0, 10, 0, 0, 0, 9, 0, 0, 0, 204, 0, 0, 0, 204, 0, 0, 0, 9, 0, 0, 0, 205, 0, 0, 0, 205, 0, 0, 0, 9, 0, 0, 0, 206, 0, 0, 0, 206, 0, 0, 0, 9, 0, 0, 0, 207, 0, 0, 0, 207, 0, 0, 0, 9, 0, 0, 0, 208, 0, 0, 0, 208, 0, 0, 0, 9, 0, 0, 0, 19, 0, 0, 0, 209, 0, 0, 0, 208, 0, 0, 0, 19, 0, 0, 0, 210, 0, 0, 0, 209, 0, 0, 0, 19, 0, 0, 0, 211, 0, 0, 0, 210, 0, 0, 0, 19, 0, 0, 0, 212, 0, 0, 0, 10, 0, 0, 0, 213, 0, 0, 0, 213, 0, 0, 0, 10, 0, 0, 0, 204, 0, 0, 0, 18, 0, 0, 0, 216, 0, 0, 0, 19, 0, 0, 0, 214, 0, 0, 0, 211, 0, 0, 0, 19, 0, 0, 0, 215, 0, 0, 0, 214, 0, 0, 0, 19, 0, 0, 0, 216, 0, 0, 0, 215, 0, 0, 0, 19, 0, 0, 0, 222, 0, 0, 0, 10, 0, 0, 0, 217, 0, 0, 0, 217, 0, 0, 0, 10, 0, 0, 0, 212, 0, 0, 0, 17, 0, 0, 0, 216, 0, 0, 0, 18, 0, 0, 0, 218, 0, 0, 0, 216, 0, 0, 0, 17, 0, 0, 0, 219, 0, 0, 0, 218, 0, 0, 0, 17, 0, 0, 0, 220, 0, 0, 0, 219, 0, 0, 0, 17, 0, 0, 0, 221, 0, 0, 0, 220, 0, 0, 0, 17, 0, 0, 0, 11, 0, 0, 0, 10, 0, 0, 0, 222, 0, 0, 0, 223, 0, 0, 0, 221, 0, 0, 0, 17, 0, 0, 0, 224, 0, 0, 0, 223, 0, 0, 0, 17, 0, 0, 0, 225, 0, 0, 0, 224, 0, 0, 0, 17, 0, 0, 0, 226, 0, 0, 0, 225, 0, 0, 0, 17, 0, 0, 0, 227, 0, 0, 0, 226, 0, 0, 0, 17, 0, 0, 0, 11, 0, 0, 0, 227, 0, 0, 0, 17, 0, 0, 0, 11, 0, 0, 0, 228, 0, 0, 0, 227, 0, 0, 0, 11, 0, 0, 0, 229, 0, 0, 0, 228, 0, 0, 0, 11, 0, 0, 0, 230, 0, 0, 0, 229, 0, 0, 0, 11, 0, 0, 0, 231, 0, 0, 0, 230, 0, 0, 0, 11, 0, 0, 0, 232, 0, 0, 0, 231, 0, 0, 0, 11, 0, 0, 0, 233, 0, 0, 0, 232, 0, 0, 0, 233, 0, 0, 0, 11, 0, 0, 0, 222, 0, 0, 0, 76, 73, 78, 69, 248, 3, 0, 0, 127, 0, 0, 0, 37, 0, 0, 0, 36, 0, 0, 0, 38, 0, 0, 0, 37, 0, 0, 0, 39, 0, 0, 0, 37, 0, 0, 0, 36, 0, 0, 0, 35, 0, 0, 0, 44, 0, 0, 0, 43, 0, 0, 0, 45, 0, 0, 0, 44, 0, 0, 0, 47, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 45, 0, 0, 0, 49, 0, 0, 0, 42, 0, 0, 0, 34, 0, 0, 0, 49, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 48, 0, 0, 0, 32, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 41, 0, 0, 0, 40, 0, 0, 0, 42, 0, 0, 0, 41, 0, 0, 0, 121, 0, 0, 0, 120, 0, 0, 0, 98, 0, 0, 0, 121, 0, 0, 0, 120, 0, 0, 0, 119, 0, 0, 0, 119, 0, 0, 0, 118, 0, 0, 0, 118, 0, 0, 0, 117, 0, 0, 0, 117, 0, 0, 0, 116, 0, 0, 0, 116, 0, 0, 0, 115, 0, 0, 0, 115, 0, 0, 0, 114, 0, 0, 0, 114, 0, 0, 0, 113, 0, 0, 0, 113, 0, 0, 0, 112, 0, 0, 0, 112, 0, 0, 0, 111, 0, 0, 0, 111, 0, 0, 0, 110, 0, 0, 0, 110, 0, 0, 0, 109, 0, 0, 0, 109, 0, 0, 0, 108, 0, 0, 0, 108, 0, 0, 0, 107, 0, 0, 0, 107, 0, 0, 0, 106, 0, 0, 0, 106, 0, 0, 0, 105, 0, 0, 0, 105, 0, 0, 0, 104, 0, 0, 0, 104, 0, 0, 0, 103, 0, 0, 0, 103, 0, 0, 0, 102, 0, 0, 0, 102, 0, 0, 0, 101, 0, 0, 0, 101, 0, 0, 0, 100, 0, 0, 0, 100, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 98, 0, 0, 0, 96, 0, 0, 0, 97, 0, 0, 0, 95, 0, 0, 0, 96, 0, 0, 0, 94, 0, 0, 0, 95, 0, 0, 0, 93, 0, 0, 0, 94, 0, 0, 0, 92, 0, 0, 0, 93, 0, 0, 0, 91, 0, 0, 0, 92, 0, 0, 0, 90, 0, 0, 0, 91, 0, 0, 0, 89, 0, 0, 0, 90, 0, 0, 0, 88, 0, 0, 0, 89, 0, 0, 0, 87, 0, 0, 0, 88, 0, 0, 0, 86, 0, 0, 0, 87, 0, 0, 0, 85, 0, 0, 0, 86, 0, 0, 0, 84, 0, 0, 0, 85, 0, 0, 0, 83, 0, 0, 0, 84, 0, 0, 0, 82, 0, 0, 0, 83, 0, 0, 0, 81, 0, 0, 0, 82, 0, 0, 0, 80, 0, 0, 0, 81, 0, 0, 0, 79, 0, 0, 0, 80, 0, 0, 0, 78, 0, 0, 0, 79, 0, 0, 0, 77, 0, 0, 0, 78, 0, 0, 0, 76, 0, 0, 0, 77, 0, 0, 0, 75, 0, 0, 0, 76, 0, 0, 0, 74, 0, 0, 0, 75, 0, 0, 0, 97, 0, 0, 0, 74, 0, 0, 0, 72, 0, 0, 0, 73, 0, 0, 0, 71, 0, 0, 0, 72, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 68, 0, 0, 0, 69, 0, 0, 0, 67, 0, 0, 0, 68, 0, 0, 0, 66, 0, 0, 0, 67, 0, 0, 0, 65, 0, 0, 0, 66, 0, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 63, 0, 0, 0, 64, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 61, 0, 0, 0, 62, 0, 0, 0, 60, 0, 0, 0, 61, 0, 0, 0, 59, 0, 0, 0, 60, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 56, 0, 0, 0, 57, 0, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 54, 0, 0, 0, 55, 0, 0, 0, 53, 0, 0, 0, 54, 0, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 73, 0, 0, 0, 50, 0, 0, 0, 124, 0, 0, 0, 123, 0, 0, 0, 125, 0, 0, 0, 124, 0, 0, 0, 126, 0, 0, 0, 125, 0, 0, 0, 127, 0, 0, 0, 126, 0, 0, 0, 128, 0, 0, 0, 127, 0, 0, 0, 129, 0, 0, 0, 128, 0, 0, 0, 130, 0, 0, 0, 129, 0, 0, 0, 131, 0, 0, 0, 130, 0, 0, 0, 132, 0, 0, 0, 131, 0, 0, 0, 133, 0, 0, 0, 132, 0, 0, 0, 134, 0, 0, 0, 133, 0, 0, 0, 135, 0, 0, 0, 134, 0, 0, 0, 136, 0, 0, 0, 135, 0, 0, 0, 137, 0, 0, 0, 136, 0, 0, 0, 138, 0, 0, 0, 137, 0, 0, 0, 139, 0, 0, 0, 138, 0, 0, 0, 140, 0, 0, 0, 139, 0, 0, 0, 141, 0, 0, 0, 140, 0, 0, 0, 142, 0, 0, 0, 141, 0, 0, 0, 143, 0, 0, 0, 142, 0, 0, 0, 144, 0, 0, 0, 143, 0, 0, 0, 145, 0, 0, 0, 144, 0, 0, 0, 122, 0, 0, 0, 145, 0, 0, 0, 123, 0, 0, 0, 122, 0, 0, 0, 234, 0, 0, 0, 235, 0, 0, 0, 236, 0, 0, 0, 237, 0, 0, 0, 235, 0, 0, 0, 237, 0, 0, 0, 238, 0, 0, 0, 239, 0, 0, 0, 240, 0, 0, 0, 241, 0, 0, 0, 239, 0, 0, 0, 241, 0, 0, 0, 242, 0, 0, 0, 243, 0, 0, 0, 244, 0, 0, 0, 245, 0, 0, 0, 243, 0, 0, 0, 245, 0, 0, 0, 247, 0, 0, 0, 246, 0, 0, 0, 246, 0, 0, 0, 249, 0, 0, 0, 250, 0, 0, 0, 249, 0, 0, 0, 247, 0, 0, 0, 250, 0, 0, 0, 250, 0, 0, 0, 248, 0, 0, 0, 251, 0, 0, 0, 252, 0, 0, 0, 83, 85, 82, 70, 154, 2, 0, 0, 2, 0, 0, 0, 83, 82, 70, 67, 193, 192, 192, 62, 217, 216, 216, 62, 226, 225, 97, 63, 0, 0, 0, 0, 0, 0, 0, 0, 165, 0, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 83, 82, 70, 67, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 170, 1, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 149, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 1, 0, 0, 0, 0, 0, 0, 98, 111, 100, 121, 0, 68, 101, 102, 97, 117, 108, 116, 46, 112, 114, 111, 103, 114, 97, 109, 0, 83, 73, 78, 70, 0, 0, 0, 0, 193, 192, 192, 62, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 2, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 4, 0, 0, 0, 205, 204, 204, 62, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 7, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 9, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 101, 100, 103, 101, 0, 68, 101, 102, 97, 117, 108, 116, 46, 112, 114, 111, 103, 114, 97, 109, 0, 83, 73, 78, 70, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 2, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 4, 0, 0, 0, 205, 204, 204, 62, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 7, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 83, 73, 78, 70, 9, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 0, 76, 65, 89, 82, 144, 0, 0, 0, 2, 0, 0, 0, 76, 65, 89, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 205, 205, 205, 205, 96, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 205, 205, 205, 205, 112, 0, 0, 0, 0, 0, 0, 0, 76, 65, 89, 82, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 205, 205, 205, 205, 144, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 205, 205, 205, 205, 128, 0, 0, 0, 0, 0, 0, 0, 83, 69, 67, 84, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 83, 69, 67, 84, 1, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 83, 69, 67, 84, 1, 0, 0, 0, 126, 0, 0, 0, 1, 0, 0, 0]);
Module['FS_createDataFile']('/asset', 'proto.mesh', fileData2, true, true);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": []});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 30624;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });
  

/* memory initializer */ allocate([60,24,0,0,46,64,0,0,176,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,24,0,0,87,65,0,0,0,0,0,0,1,0,0,0,176,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,24,0,0,60,67,0,0,248,2,0,0,0,0,0,0,60,24,0,0,129,67,0,0,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,24,0,0,55,85,0,0,60,24,0,0,228,84,0,0,240,0,0,0,0,0,0,0,20,24,0,0,166,85,0,0,60,24,0,0,124,85,0,0,8,1,0,0,0,0,0,0,60,24,0,0,89,85,0,0,16,1,0,0,0,0,0,0,20,24,0,0,76,86,0,0,60,24,0,0,201,85,0,0,48,1,0,0,0,0,0,0,20,24,0,0,193,86,0,0,60,24,0,0,113,86,0,0,72,1,0,0,0,0,0,0,20,24,0,0,113,87,0,0,60,24,0,0,238,86,0,0,96,1,0,0,0,0,0,0,20,24,0,0,230,87,0,0,60,24,0,0,150,87,0,0,120,1,0,0,0,0,0,0,60,24,0,0,178,88,0,0,176,1,0,0,0,0,0,0,60,24,0,0,164,89,0,0,176,1,0,0,0,0,0,0,20,24,0,0,177,89,0,0,60,24,0,0,190,89,0,0,176,1,0,0,0,0,0,0,20,24,0,0,208,89,0,0,60,24,0,0,221,89,0,0,176,1,0,0,0,0,0,0,60,24,0,0,233,89,0,0,200,1,0,0,0,0,0,0,60,24,0,0,10,90,0,0,224,1,0,0,0,0,0,0,60,24,0,0,80,90,0,0,224,1,0,0,0,0,0,0,60,24,0,0,44,90,0,0,0,2,0,0,0,0,0,0,60,24,0,0,114,90,0,0,240,1,0,0,0,0,0,0,60,24,0,0,151,90,0,0,240,1,0,0,0,0,0,0,60,24,0,0,66,108,0,0,184,1,0,0,0,0,0,0,20,24,0,0,89,108,0,0,60,24,0,0,114,108,0,0,80,2,0,0,0,0,0,0,60,24,0,0,137,108,0,0,88,2,0,0,0,0,0,0,60,24,0,0,172,108,0,0,88,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,24,0,0,77,109,0,0,64,2,0,0,0,0,0,0,20,24,0,0,103,109,0,0,60,24,0,0,121,109,0,0,168,2,0,0,0,0,0,0,20,24,0,0,163,109,0,0,100,24,0,0,212,109,0,0,0,0,0,0,1,0,0,0,176,2,0,0,3,244,255,255,100,24,0,0,3,110,0,0,0,0,0,0,1,0,0,0,176,2,0,0,3,244,255,255,100,24,0,0,50,110,0,0,3,0,0,0,2,0,0,0,200,2,0,0,2,0,0,0,224,2,0,0,2,8,0,0,60,24,0,0,98,110,0,0,88,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,24,0,0,222,110,0,0,32,10,0,0,0,0,0,0,100,24,0,0,244,110,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,80,9,0,0,2,0,0,0,100,24,0,0,6,111,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,88,9,0,0,2,0,0,0,100,24,0,0,40,111,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,88,9,0,0,2,0,0,0,100,24,0,0,75,111,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,88,9,0,0,2,0,0,0,60,24,0,0,110,111,0,0,160,3,0,0,0,0,0,0,60,24,0,0,144,111,0,0,160,3,0,0,0,0,0,0,100,24,0,0,179,111,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,88,9,0,0,2,0,0,0,60,24,0,0,213,111,0,0,48,3,0,0,0,0,0,0,60,24,0,0,235,111,0,0,48,3,0,0,0,0,0,0,60,24,0,0,255,111,0,0,48,3,0,0,0,0,0,0,100,24,0,0,19,112,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,80,9,0,0,2,0,0,0,60,24,0,0,37,112,0,0,48,3,0,0,0,0,0,0,60,24,0,0,58,112,0,0,48,3,0,0,0,0,0,0,100,24,0,0,79,112,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,96,9,0,0,0,0,0,0,100,24,0,0,147,112,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,120,9,0,0,0,0,0,0,100,24,0,0,215,112,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,144,9,0,0,0,0,0,0,100,24,0,0,27,113,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,168,9,0,0,0,0,0,0,100,24,0,0,95,113,0,0,0,0,0,0,3,0,0,0,48,3,0,0,2,0,0,0,192,9,0,0,2,0,0,0,200,9,0,0,0,8,0,0,100,24,0,0,164,113,0,0,0,0,0,0,3,0,0,0,48,3,0,0,2,0,0,0,192,9,0,0,2,0,0,0,208,9,0,0,0,8,0,0,100,24,0,0,233,113,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,216,9,0,0,0,8,0,0,100,24,0,0,46,114,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,216,9,0,0,0,8,0,0,100,24,0,0,115,114,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,224,9,0,0,2,0,0,0,100,24,0,0,143,114,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,224,9,0,0,2,0,0,0,100,24,0,0,171,114,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,224,9,0,0,2,0,0,0,100,24,0,0,199,114,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,224,9,0,0,2,0,0,0,100,24,0,0,227,114,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,232,9,0,0,0,0,0,0,100,24,0,0,41,115,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,240,9,0,0,0,0,0,0,100,24,0,0,111,115,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,248,9,0,0,0,0,0,0,100,24,0,0,181,115,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,0,10,0,0,0,0,0,0,100,24,0,0,251,115,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,8,10,0,0,2,0,0,0,100,24,0,0,16,116,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,8,10,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,24,0,0,108,119,0,0,20,24,0,0,85,119,0,0,100,24,0,0,63,119,0,0,0,0,0,0,1,0,0,0,24,10,0,0,0,0,0,0,100,24,0,0,16,119,0,0,0,0,0,0,1,0,0,0,24,10,0,0,0,0,0,0,100,24,0,0,250,118,0,0,0,0,0,0,1,0,0,0,16,10,0,0,0,0,0,0,100,24,0,0,203,118,0,0,0,0,0,0,1,0,0,0,16,10,0,0,0,0,0,0,20,24,0,0,184,118,0,0,20,24,0,0,150,118,0,0,20,24,0,0,116,118,0,0,20,24,0,0,95,118,0,0,20,24,0,0,74,118,0,0,20,24,0,0,49,118,0,0,20,24,0,0,24,118,0,0,20,24,0,0,255,117,0,0,20,24,0,0,230,117,0,0,20,24,0,0,206,117,0,0,20,24,0,0,225,118,0,0,20,24,0,0,38,119,0,0,20,24,0,0,129,119], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([112,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,128,191,0,0,128,191,0,0,0,0,0,0,128,63,0,0,128,191,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,63,0,0,128,63,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,64,0,0,0,0,0,0,0,200,0,0,0,4,0,0,0,5,0,0,0,56,0,0,0,248,255,255,255,200,0,0,0,6,0,0,0,7,0,0,0,192,255,255,255,192,255,255,255,200,0,0,0,8,0,0,0,9,0,0,0,252,20,0,0,96,21,0,0,156,21,0,0,176,21,0,0,196,21,0,0,216,21,0,0,136,21,0,0,116,21,0,0,36,21,0,0,16,21,0,0,64,0,0,0,0,0,0,0,248,2,0,0,10,0,0,0,11,0,0,0,56,0,0,0,248,255,255,255,248,2,0,0,12,0,0,0,13,0,0,0,192,255,255,255,192,255,255,255,248,2,0,0,14,0,0,0,15,0,0,0,64,0,0,0,0,0,0,0,200,2,0,0,16,0,0,0,17,0,0,0,192,255,255,255,192,255,255,255,200,2,0,0,18,0,0,0,19,0,0,0,56,0,0,0,0,0,0,0,224,2,0,0,20,0,0,0,21,0,0,0,200,255,255,255,200,255,255,255,224,2,0,0,22,0,0,0,23,0,0,0,0,0,0,0,216,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,0,0,0,0,80,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,255,255,127,127,255,255,127,255,255,255,127,255,255,255,127,127,0,0,128,191,0,0,128,191,0,0,0,0,0,0,128,63,0,0,128,191,0,0,0,0,0,0,128,191,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,248,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,0,0,0,0,240,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,0,0,0,0,56,1,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,0,0,0,0,48,1,0,0,62,0,0,0,63,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,0,0,0,0,104,1,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,0,0,0,0,96,1,0,0,73,0,0,0,74,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,52,0,0,0,0,0,0,0,144,1,0,0,75,0,0,0,76,0,0,0,40,0,0,0,77,0,0,0,0,0,0,0,160,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,176,1,0,0,81,0,0,0,82,0,0,0,40,0,0,0,0,0,0,0,184,1,0,0,83,0,0,0,84,0,0,0,85,0,0,0,0,0,0,0,208,1,0,0,86,0,0,0,87,0,0,0,88,0,0,0,0,0,0,0,240,1,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,0,0,0,0,32,2,0,0,89,0,0,0,97,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,0,0,0,0,48,2,0,0,89,0,0,0,101,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,56,26,0,0,168,26,0,0,168,26,0,0,96,61,0,0,24,35,0,0,24,29,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,0,108,0,0,0,210,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,108,0,0,0,202,101,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+5142);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,2,0,0,110,0,0,0,111,0,0,0,85,0,0,0,0,0,0,0,104,2,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,0,0,0,0,120,2,0,0,112,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,116,0,0,0,117,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,2,0,0,123,0,0,0,124,0,0,0,0,0,0,0,192,2,0,0,125,0,0,0,126,0,0,0,26,0,0,0,27,0,0,0,127,0,0,0,128,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,129,0,0,0,34,0,0,0,130,0,0,0,36,0,0,0,131,0,0,0,0,0,0,0,152,2,0,0,132,0,0,0,133,0,0,0,85,0,0,0,0,0,0,0,168,2,0,0,134,0,0,0,135,0,0,0,0,0,0,0,24,3,0,0,112,0,0,0,136,0,0,0,137,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,138,0,0,0,0,0,0,0,0,0,0,0,16,4,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,4,0,0,145,0,0,0,146,0,0,0,141,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,4,0,0,150,0,0,0,151,0,0,0,141,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,4,0,0,163,0,0,0,164,0,0,0,141,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,4,0,0,176,0,0,0,177,0,0,0,141,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,4,0,0,186,0,0,0,187,0,0,0,141,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,4,0,0,196,0,0,0,197,0,0,0,141,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,248,255,255,255,240,4,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,5,0,0,212,0,0,0,213,0,0,0,141,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,248,255,255,255,24,5,0,0,221,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,5,0,0,228,0,0,0,229,0,0,0,141,0,0,0,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,5,0,0,231,0,0,0,232,0,0,0,141,0,0,0,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,5,0,0,234,0,0,0,235,0,0,0,141,0,0,0,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,5,0,0,245,0,0,0,246,0,0,0,141,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,5,0,0,0,1,0,0,1,1,0,0,141,0,0,0,2,1,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,10,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,5,0,0,11,1,0,0,12,1,0,0,141,0,0,0,13,1,0,0,14,1,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,20,1,0,0,21,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,22,1,0,0,23,1,0,0,141,0,0,0,24,1,0,0,25,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,6,0,0,26,1,0,0,27,1,0,0,141,0,0,0,28,1,0,0,29,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,6,0,0,30,1,0,0,31,1,0,0,141,0,0,0,32,1,0,0,33,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,6,0,0,34,1,0,0,35,1,0,0,141,0,0,0,36,1,0,0,37,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,6,0,0,38,1,0,0,39,1,0,0,141,0,0,0,40,1,0,0,41,1,0,0,42,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,6,0,0,43,1,0,0,44,1,0,0,141,0,0,0,45,1,0,0,46,1,0,0,47,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,48,1,0,0,49,1,0,0,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,4,0,0,50,1,0,0,51,1,0,0,141,0,0,0,52,1,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,59,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,3,0,0,60,1,0,0,61,1,0,0,141,0,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,68,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,4,0,0,69,1,0,0,70,1,0,0,141,0,0,0,71,1,0,0,72,1,0,0,73,1,0,0,74,1,0,0,75,1,0,0,0,0,0,0,96,4,0,0,76,1,0,0,77,1,0,0,141,0,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,0,0,0,0,48,3,0,0,83,1,0,0,84,1,0,0,141,0,0,0,0,0,0,0,64,3,0,0,83,1,0,0,85,1,0,0,141,0,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,92,1,0,0,93,1,0,0,94,1,0,0,95,1,0,0,96,1,0,0,97,1,0,0,0,0,0,0,96,3,0,0,83,1,0,0,98,1,0,0,141,0,0,0,99,1,0,0,100,1,0,0,101,1,0,0,102,1,0,0,103,1,0,0,104,1,0,0,105,1,0,0,0,0,0,0,128,3,0,0,83,1,0,0,106,1,0,0,141,0,0,0,107,1,0,0,108,1,0,0,109,1,0,0,110,1,0,0,111,1,0,0,112,1,0,0,113,1,0,0,0,0,0,0,160,3,0,0,83,1,0,0,114,1,0,0,141,0,0,0,115,1,0,0,116,1,0,0,117,1,0,0,118,1,0,0,119,1,0,0,120,1,0,0,121,1,0,0,0,0,0,0,192,3,0,0,83,1,0,0,122,1,0,0,141,0,0,0,115,1,0,0,116,1,0,0,117,1,0,0,118,1,0,0,119,1,0,0,120,1,0,0,121,1,0,0,0,0,0,0,208,3,0,0,83,1,0,0,123,1,0,0,141,0,0,0,115,1,0,0,116,1,0,0,117,1,0,0,118,1,0,0,119,1,0,0,120,1,0,0,121,1,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,100,101,118,47,117,114,97,110,100,111,109,0,33,40,115,119,97,112,112,101,100,91,108,46,98,97,99,107,40,41,93,32,38,38,32,115,119,97,112,112,101,100,91,108,46,102,114,111,110,116,40,41,93,41,0,109,97,105,110,46,99,112,112,0,71,101,110,76,105,110,101,78,111,114,109,97,108,115,0,33,40,108,105,110,101,115,91,108,105,110,101,95,105,110,100,101,120,46,102,114,111,110,116,40,41,93,46,118,49,32,61,61,32,108,105,110,101,115,91,108,105,110,101,95,105,110,100,101,120,46,98,97,99,107,40,41,93,46,118,49,32,124,124,32,108,105,110,101,115,91,108,105,110,101,95,105,110,100,101,120,46,102,114,111,110,116,40,41,93,46,118,50,32,61,61,32,108,105,110,101,115,91,108,105,110,101,95,105,110,100,101,120,46,98,97,99,107,40,41,93,46,118,50,41,0,49,54,99,117,115,116,111,109,95,101,120,99,101,112,116,105,111,110,0,37,115,0,86,101,114,116,101,120,32,83,104,97,100,101,114,58,0,69,82,82,79,82,58,32,37,100,32,58,32,37,115,10,0,70,114,97,103,109,101,110,116,32,83,104,97,100,101,114,58,0,0,0,0,0,0,0,0,0,0,103,108,102,119,32,105,110,105,116,32,102,97,105,108,101,100,0,51,46,48,46,48,32,74,83,32,87,101,98,71,76,32,69,109,115,99,114,105,112,116,101,110,0,33,115,116,114,99,109,112,40,103,108,102,119,71,101,116,86,101,114,115,105,111,110,83,116,114,105,110,103,40,41,44,32,34,51,46,48,46,48,32,74,83,32,87,101,98,71,76,32,69,109,115,99,114,105,112,116,101,110,34,41,0,105,110,105,116,0,87,101,98,71,76,32,84,101,115,116,0,67,97,110,39,116,32,99,114,101,97,116,101,32,119,105,110,100,111,119,0,67,97,110,39,116,32,115,101,116,32,99,117,114,114,101,110,116,32,99,111,110,116,101,120,116,0,103,108,101,119,32,105,110,105,116,32,102,97,105,108,101,100,0,48,46,48,46,48,46,49,0,108,111,99,97,108,104,111,115,116,0,83,101,115,115,105,111,110,73,68,32,105,115,58,32,37,115,0,57,101,120,99,101,112,116,105,111,110,0,83,111,99,107,101,116,32,111,112,101,110,0,83,111,99,107,101,116,32,99,108,111,115,101,100,0,83,111,99,107,101,116,32,101,114,114,111,114,58,32,37,100,32,32,37,115,0,83,111,99,107,101,116,32,109,101,115,115,97,103,101,58,32,37,115,0,105,32,60,32,116,104,105,115,45,62,108,101,110,103,116,104,40,41,0,46,46,92,46,46,92,46,46,92,51,114,100,112,97,114,116,121,92,103,108,109,92,103,108,109,47,100,101,116,97,105,108,47,116,121,112,101,95,109,97,116,52,120,52,46,105,110,108,0,111,112,101,114,97,116,111,114,91,93,0,105,32,62,61,32,48,32,38,38,32,115,116,97,116,105,99,95,99,97,115,116,60,100,101,116,97,105,108,58,58,99,111,109,112,111,110,101,110,116,95,99,111,117,110,116,95,116,62,40,105,41,32,60,32,100,101,116,97,105,108,58,58,99,111,109,112,111,110,101,110,116,95,99,111,117,110,116,40,42,116,104,105,115,41,0,46,46,92,46,46,92,46,46,92,51,114,100,112,97,114,116,121,92,103,108,109,92,103,108,109,47,100,101,116,97,105,108,47,116,121,112,101,95,118,101,99,51,46,105,110,108,0,46,46,92,46,46,92,46,46,92,51,114,100,112,97,114,116,121,92,103,108,109,92,103,108,109,47,100,101,116,97,105,108,47,116,121,112,101,95,118,101,99,52,46,105,110,108,0,108,111,97,100,32,112,114,111,116,111,46,109,101,115,104,0,97,115,115,101,116,47,47,112,114,111,116,111,46,109,101,115,104,0,97,102,116,101,114,32,108,111,97,100,32,112,114,111,116,111,46,109,101,115,104,32,37,100,32,37,100,0,32,37,100,32,37,100,0,32,37,102,32,37,102,32,37,102,44,32,37,102,32,37,102,32,37,102,0,97,115,115,101,116,47,47,112,114,111,112,117,108,115,105,111,110,46,109,101,115,104,0,97,115,115,101,116,47,47,108,97,110,100,46,109,101,115,104,0,114,98,0,67,97,110,39,116,32,111,112,101,110,32,102,105,108,101,58,32,0,78,83,116,51,95,95,49,49,56,98,97,115,105,99,95,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,13,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,13,10,47,47,32,73,110,112,117,116,32,118,101,114,116,101,120,32,100,97,116,97,44,32,100,105,102,102,101,114,101,110,116,32,102,111,114,32,97,108,108,32,101,120,101,99,117,116,105,111,110,115,32,111,102,32,116,104,105,115,32,115,104,97,100,101,114,46,13,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,112,111,115,59,13,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,117,118,49,95,105,110,59,13,10,13,10,117,110,105,102,111,114,109,32,109,97,116,52,32,117,77,86,80,59,13,10,13,10,118,97,114,121,105,110,103,32,118,101,99,50,32,117,118,49,59,13,10,13,10,118,111,105,100,32,109,97,105,110,40,41,32,123,13,10,9,103,108,95,80,111,115,105,116,105,111,110,32,61,32,117,77,86,80,32,42,32,118,101,99,52,40,112,111,115,44,32,49,46,41,59,13,10,9,117,118,49,32,61,32,117,118,49,95,105,110,59,13,10,125,13,10,0,13,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,13,10,118,97,114,121,105,110,103,32,118,101,99,50,32,117,118,49,59,13,10,13,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,115,109,112,49,59,13,10,117,110,105,102,111,114,109,32,118,101,99,50,32,117,82,101,115,44,32,117,84,101,120,83,105,122,101,59,13,10,117,110,105,102,111,114,109,32,102,108,111,97,116,32,117,69,108,97,112,115,101,100,44,32,117,84,111,116,97,108,59,13,10,35,100,101,102,105,110,101,32,70,65,67,84,79,82,32,56,46,48,13,10,118,101,99,51,32,118,111,114,111,110,111,105,40,118,101,99,50,32,120,41,32,123,13,10,9,118,101,99,50,32,110,32,61,32,102,108,111,111,114,40,120,41,59,13,10,9,118,101,99,50,32,102,32,61,32,102,114,97,99,116,40,120,41,59,13,10,9,102,108,111,97,116,32,109,105,110,95,100,32,61,32,70,65,67,84,79,82,32,43,32,49,46,48,59,13,10,9,118,101,99,50,32,109,105,110,95,115,105,116,101,44,32,109,105,110,95,111,102,102,115,101,116,59,13,10,9,102,111,114,32,40,105,110,116,32,105,32,61,32,45,49,59,32,105,60,61,49,59,32,43,43,105,41,13,10,9,102,111,114,32,40,105,110,116,32,106,32,61,32,45,49,59,32,106,60,61,49,59,32,43,43,106,41,13,10,9,123,13,10,9,9,118,101,99,50,32,111,32,61,32,118,101,99,50,40,102,108,111,97,116,40,105,41,44,32,102,108,111,97,116,40,106,41,41,59,13,10,9,9,118,101,99,50,32,114,110,100,95,115,105,116,101,32,61,32,116,101,120,116,117,114,101,50,68,40,32,115,109,112,49,44,32,40,110,32,43,32,111,32,43,32,46,53,41,47,117,84,101,120,83,105,122,101,41,46,120,121,59,13,10,9,9,114,110,100,95,115,105,116,101,32,61,32,46,53,32,43,32,115,105,110,40,117,84,111,116,97,108,42,46,48,48,49,42,114,110,100,95,115,105,116,101,41,42,46,53,59,13,10,9,9,114,110,100,95,115,105,116,101,32,43,61,32,111,32,45,32,102,32,59,9,47,47,32,100,105,115,116,97,110,99,101,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,102,114,97,103,109,101,110,116,13,10,9,9,102,108,111,97,116,32,100,32,61,32,100,111,116,40,114,110,100,95,115,105,116,101,44,32,114,110,100,95,115,105,116,101,41,59,13,10,9,9,105,102,32,40,100,60,109,105,110,95,100,41,32,123,13,10,9,9,9,109,105,110,95,100,32,61,32,100,59,13,10,9,9,9,109,105,110,95,115,105,116,101,32,61,32,114,110,100,95,115,105,116,101,59,13,10,9,9,9,109,105,110,95,111,102,102,115,101,116,32,61,32,32,111,59,13,10,9,9,125,13,10,9,125,13,10,13,10,9,9,9,109,105,110,95,100,32,61,32,70,65,67,84,79,82,32,43,32,49,46,59,13,10,9,102,111,114,32,40,105,110,116,32,105,32,61,32,45,50,59,32,105,60,61,50,59,32,43,43,105,41,13,10,9,102,111,114,32,40,105,110,116,32,106,32,61,32,45,50,59,32,106,60,61,50,59,32,43,43,106,41,13,10,9,123,13,10,9,9,118,101,99,50,32,111,32,61,32,109,105,110,95,111,102,102,115,101,116,32,43,32,118,101,99,50,40,102,108,111,97,116,40,105,41,44,32,102,108,111,97,116,40,106,41,41,59,13,10,9,9,118,101,99,50,32,114,110,100,95,115,105,116,101,32,61,32,116,101,120,116,117,114,101,50,68,40,32,115,109,112,49,44,32,40,110,32,43,32,111,32,43,32,46,53,41,47,117,84,101,120,83,105,122,101,41,46,120,121,59,13,10,9,9,114,110,100,95,115,105,116,101,32,61,32,46,53,32,43,32,115,105,110,40,117,84,111,116,97,108,42,46,48,48,49,42,114,110,100,95,115,105,116,101,41,42,46,53,59,13,10,9,9,114,110,100,95,115,105,116,101,32,43,61,32,111,32,45,32,102,32,59,9,47,47,32,100,105,115,116,97,110,99,101,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,102,114,97,103,109,101,110,116,13,10,9,9,118,101,99,50,32,118,100,32,61,32,114,110,100,95,115,105,116,101,32,45,32,109,105,110,95,115,105,116,101,59,13,10,9,9,102,108,111,97,116,32,100,32,61,32,100,111,116,40,118,100,44,32,118,100,41,59,13,10,9,9,105,102,32,40,100,62,48,46,48,48,48,48,49,41,13,10,9,9,9,109,105,110,95,100,32,61,32,109,105,110,40,109,105,110,95,100,44,32,100,111,116,40,48,46,53,42,40,109,105,110,95,115,105,116,101,32,43,32,114,110,100,95,115,105,116,101,41,44,32,110,111,114,109,97,108,105,122,101,40,118,100,41,41,41,59,13,10,9,125,13,10,9,109,105,110,95,100,32,61,32,115,113,114,116,40,109,105,110,95,100,41,59,13,10,9,114,101,116,117,114,110,32,118,101,99,51,40,109,105,110,95,100,44,32,109,105,110,95,115,105,116,101,46,120,44,32,109,105,110,95,115,105,116,101,46,121,41,59,13,10,125,13,10,13,10,118,111,105,100,32,109,97,105,110,40,41,13,10,123,13,10,9,118,101,99,50,32,112,32,61,32,117,118,49,32,42,32,70,65,67,84,79,82,59,13,10,9,118,101,99,51,32,114,101,115,32,61,32,118,111,114,111,110,111,105,40,112,41,59,13,10,9,102,108,111,97,116,32,100,105,115,32,61,32,49,46,48,32,45,32,115,109,111,111,116,104,115,116,101,112,40,32,48,46,48,44,32,48,46,50,44,32,114,101,115,46,120,32,41,59,13,10,9,47,47,99,111,108,111,114,32,61,32,118,101,99,51,40,72,101,97,116,77,97,112,67,111,108,111,114,40,115,109,111,111,116,104,115,116,101,112,40,46,48,44,32,46,56,44,32,114,101,115,46,120,32,41,44,32,48,46,44,32,49,46,41,41,32,43,32,100,105,115,32,42,32,118,101,99,51,40,49,46,41,59,13,10,9,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,40,100,105,115,32,43,32,115,109,111,111,116,104,115,116,101,112,40,46,48,44,32,46,56,44,32,114,101,115,46,120,32,41,41,42,118,101,99,52,40,49,46,41,59,13,10,125,13,10,0,13,10,112,114,101,99,105,115,105,111,110,32,104,105,103,104,112,32,102,108,111,97,116,59,13,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,112,111,115,59,13,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,117,118,95,105,110,59,13,10,13,10,118,97,114,121,105,110,103,32,118,101,99,50,32,117,118,95,102,115,59,13,10,118,111,105,100,32,109,97,105,110,40,41,32,123,13,10,9,103,108,95,80,111,115,105,116,105,111,110,32,61,32,118,101,99,52,40,112,111,115,44,32], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+8980);
/* memory initializer */ allocate([49,46,48,41,59,13,10,9,117,118,95,102,115,32,61,32,117,118,95,105,110,59,13,10,125,13,10,0,13,10,112,114,101,99,105,115,105,111,110,32,104,105,103,104,112,32,102,108,111,97,116,59,13,10,118,97,114,121,105,110,103,32,118,101,99,50,32,117,118,95,102,115,59,13,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,117,83,109,112,59,13,10,117,110,105,102,111,114,109,32,118,101,99,50,32,117,83,99,114,101,101,110,83,105,122,101,59,13,10,102,108,111,97,116,32,108,101,115,115,40,102,108,111,97,116,32,118,44,32,102,108,111,97,116,32,99,109,112,41,32,123,13,10,9,114,101,116,117,114,110,32,49,46,48,32,45,32,115,116,101,112,40,118,44,32,99,109,112,41,59,13,10,125,13,10,13,10,102,108,111,97,116,32,103,101,40,102,108,111,97,116,32,118,44,32,102,108,111,97,116,32,99,109,112,41,32,123,13,10,9,114,101,116,117,114,110,32,115,116,101,112,40,118,44,32,99,109,112,41,59,13,10,125,13,10,13,10,102,108,111,97,116,32,105,110,95,98,101,116,119,101,101,110,40,102,108,111,97,116,32,118,44,32,102,108,111,97,116,32,108,44,32,102,108,111,97,116,32,117,41,32,123,13,10,9,114,101,116,117,114,110,32,40,49,46,48,32,45,32,115,116,101,112,40,118,44,32,108,41,41,32,42,32,115,116,101,112,40,118,44,32,117,41,59,13,10,125,13,10,13,10,118,111,105,100,32,109,97,105,110,40,41,32,123,13,10,9,118,101,99,50,32,102,114,97,103,109,101,110,116,95,112,111,115,32,61,32,117,83,99,114,101,101,110,83,105,122,101,32,42,32,117,118,95,102,115,59,13,10,9,47,47,118,101,99,52,32,102,114,97,103,49,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,44,32,117,118,95,102,115,46,121,41,41,44,13,10,9,47,47,9,102,114,97,103,50,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,32,43,32,49,46,48,44,32,117,118,95,102,115,46,121,41,41,44,13,10,9,47,47,9,102,114,97,103,51,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,32,43,32,49,46,48,44,32,117,118,95,102,115,46,121,32,43,32,49,46,48,41,41,44,13,10,9,47,47,9,102,114,97,103,52,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,44,32,117,118,95,102,115,46,121,32,43,32,49,46,48,41,41,59,32,47,47,42,118,101,99,52,40,117,118,95,102,115,44,32,49,46,48,44,32,49,46,48,41,59,13,10,9,47,47,118,101,99,52,32,102,114,97,103,32,61,32,109,97,120,40,102,114,97,103,49,44,32,109,97,120,40,102,114,97,103,50,44,32,109,97,120,40,102,114,97,103,51,44,32,102,114,97,103,52,41,41,41,59,13,10,13,10,9,118,101,99,52,32,102,114,97,103,49,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,44,32,117,118,95,102,115,46,121,41,41,44,13,10,9,9,102,114,97,103,50,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,32,43,32,49,46,48,44,32,117,118,95,102,115,46,121,41,41,44,13,10,9,9,102,114,97,103,51,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,32,43,32,49,46,48,44,32,117,118,95,102,115,46,121,32,43,32,49,46,48,41,41,44,13,10,9,9,102,114,97,103,52,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,44,32,117,118,95,102,115,46,121,32,43,32,49,46,48,41,41,44,13,10,9,9,102,114,97,103,53,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,32,45,32,49,46,48,44,32,117,118,95,102,115,46,121,32,43,32,49,46,48,41,41,44,13,10,9,9,102,114,97,103,54,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,32,45,32,49,46,48,44,32,117,118,95,102,115,46,121,41,41,44,13,10,9,9,102,114,97,103,55,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,32,45,32,49,46,48,44,32,117,118,95,102,115,46,121,32,45,32,49,46,48,41,41,44,13,10,9,9,102,114,97,103,56,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,44,32,117,118,95,102,115,46,121,32,45,32,49,46,48,41,41,44,13,10,9,9,102,114,97,103,57,32,61,32,116,101,120,116,117,114,101,50,68,40,117,83,109,112,44,32,118,101,99,50,40,117,118,95,102,115,46,120,32,43,32,49,46,48,44,32,117,118,95,102,115,46,121,32,45,32,49,46,48,41,41,59,13,10,13,10,9,118,101,99,52,32,102,114,97,103,32,61,32,109,97,120,40,102,114,97,103,49,44,32,109,97,120,40,102,114,97,103,50,44,32,109,97,120,40,102,114,97,103,51,44,32,109,97,120,40,102,114,97,103,52,44,32,109,97,120,40,102,114,97,103,53,44,32,109,97,120,40,102,114,97,103,54,44,32,109,97,120,40,102,114,97,103,55,44,32,109,97,120,40,102,114,97,103,56,44,32,102,114,97,103,57,41,41,41,41,41,41,41,41,59,13,10,9,118,101,99,50,32,115,99,97,110,32,61,32,109,111,100,40,102,114,97,103,109,101,110,116,95,112,111,115,44,32,52,46,48,41,59,13,10,9,102,108,111,97,116,32,107,49,32,61,32,48,46,52,44,32,107,50,32,61,32,48,46,50,59,13,10,9,118,101,99,52,32,109,97,115,107,49,32,61,32,118,101,99,52,40,49,46,48,44,32,107,49,44,32,107,50,44,32,49,46,48,41,44,13,10,9,9,109,97,115,107,50,32,61,32,118,101,99,52,40,107,49,44,32,49,46,48,44,32,107,50,44,32,49,46,48,41,44,13,10,9,9,109,97,115,107,51,32,61,32,118,101,99,52,40,107,49,44,32,107,50,44,32,49,46,48,44,32,49,46,48,41,44,13,10,9,9,109,97,115,107,52,32,61,32,118,101,99,52,40,48,46,48,44,32,107,49,44,32,107,50,44,32,49,46,48,41,32,59,13,10,9,105,102,32,40,115,99,97,110,46,120,32,60,61,32,49,46,48,41,13,10,9,9,102,114,97,103,32,42,61,32,109,97,115,107,49,59,13,10,9,101,108,115,101,32,105,102,32,40,115,99,97,110,46,120,32,60,61,32,50,46,48,41,13,10,9,9,102,114,97,103,32,42,61,32,109,97,115,107,50,59,13,10,9,101,108,115,101,32,105,102,32,40,115,99,97,110,46,120,32,60,61,32,51,46,48,41,13,10,9,9,102,114,97,103,32,42,61,32,109,97,115,107,51,59,13,10,9,101,108,115,101,13,10,9,9,102,114,97,103,32,42,61,32,109,97,115,107,52,59,13,10,9,105,102,32,40,115,99,97,110,46,121,32,62,61,32,51,46,48,41,13,10,9,9,102,114,97,103,32,42,61,32,118,101,99,52,40,48,46,53,41,59,13,10,9,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,102,114,97,103,59,13,10,125,13,10,0,83,104,97,100,101,114,32,112,114,111,103,114,97,109,32,99,111,109,112,105,108,97,116,105,111,110,47,108,105,110,107,32,101,114,114,111,114,0,117,83,109,112,0,117,83,99,114,101,101,110,83,105,122,101,0,13,10,112,114,101,99,105,115,105,111,110,32,104,105,103,104,112,32,102,108,111,97,116,59,13,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,112,111,115,59,13,10,117,110,105,102,111,114,109,32,109,97,116,52,32,117,77,86,80,59,13,10,118,111,105,100,32,109,97,105,110,40,41,32,123,13,10,9,103,108,95,80,111,115,105,116,105,111,110,32,61,32,117,77,86,80,32,42,32,118,101,99,52,40,112,111,115,44,32,49,46,48,41,59,13,10,125,13,10,0,13,10,112,114,101,99,105,115,105,111,110,32,104,105,103,104,112,32,102,108,111,97,116,59,13,10,117,110,105,102,111,114,109,32,118,101,99,51,32,117,67,111,108,59,13,10,118,111,105,100,32,109,97,105,110,40,41,32,123,13,10,9,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,118,101,99,52,40,117,67,111,108,44,32,49,46,48,41,59,13,10,125,13,10,0,117,77,86,80,0,117,67,111,108,0,13,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,13,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,112,111,115,59,13,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,117,118,49,95,105,110,59,13,10,13,10,117,110,105,102,111,114,109,32,109,97,116,52,32,117,77,86,80,59,13,10,118,97,114,121,105,110,103,32,118,101,99,50,32,117,118,49,59,13,10,13,10,118,111,105,100,32,109,97,105,110,40,41,32,123,13,10,9,103,108,95,80,111,115,105,116,105,111,110,32,61,32,117,77,86,80,32,42,32,118,101,99,52,40,112,111,115,44,32,49,46,41,59,13,10,9,117,118,49,32,61,32,117,118,49,95,105,110,59,13,10,125,13,10,0,13,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,13,10,118,97,114,121,105,110,103,32,118,101,99,50,32,117,118,49,59,13,10,13,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,115,109,112,49,59,13,10,47,47,117,110,105,102,111,114,109,32,102,108,111,97,116,32,117,69,108,97,112,115,101,100,44,32,117,84,111,116,97,108,59,13,10,13,10,118,111,105,100,32,109,97,105,110,40,41,13,10,123,13,10,9,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,116,101,120,116,117,114,101,50,68,40,32,115,109,112,49,44,32,117,118,49,41,59,13,10,125,13,10,0,115,109,112,49,0,117,69,108,97,112,115,101,100,0,117,84,111,116,97,108,0,78,83,116,51,95,95,49,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,78,83,95,54,95,95,98,105,110,100,73,77,53,83,99,101,110,101,70,118,118,69,74,80,83,51,95,69,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,55,95,69,69,70,118,118,69,69,69,0,78,83,116,51,95,95,49,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,98,97,115,101,73,70,118,118,69,69,69,0,78,83,116,51,95,95,49,54,95,95,98,105,110,100,73,77,53,83,99,101,110,101,70,118,118,69,74,80,83,49,95,69,69,69,0,78,83,116,51,95,95,49,49,56,95,95,119,101,97,107,95,114,101,115,117,108,116,95,116,121,112,101,73,77,53,83,99,101,110,101,70,118,118,69,69,69,0,78,83,116,51,95,95,49,49,52,117,110,97,114,121,95,102,117,110,99,116,105,111,110,73,80,53,83,99,101,110,101,118,69,69,0,78,83,116,51,95,95,49,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,78,83,95,54,95,95,98,105,110,100,73,77,53,83,99,101,110,101,70,118,105,80,75,99,69,74,80,83,51,95,82,78,83,95,49,50,112,108,97,99,101,104,111,108,100,101,114,115,52,95,95,112,104,73,76,105,49,69,69,69,82,78,83,65,95,73,76,105,50,69,69,69,69,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,70,95,69,69,70,118,105,83,53,95,69,69,69,0,78,83,116,51,95,95,49,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,98,97,115,101,73,70,118,105,80,75,99,69,69,69,0,78,83,116,51,95,95,49,54,95,95,98,105,110,100,73,77,53,83,99,101,110,101,70,118,105,80,75,99,69,74,80,83,49,95,82,78,83,95,49,50,112,108,97,99,101,104,111,108,100,101,114,115,52,95,95,112,104,73,76,105,49,69,69,69,82,78,83,56,95,73,76,105,50,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,56,95,95,119,101,97,107,95,114,101,115,117,108,116,95,116,121,112,101,73,77,53,83,99,101,110,101,70,118,105,80,75,99,69,69,69,0,78,83,116,51,95,95,49,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,78,83,95,54,95,95,98,105,110,100,73,77,53,83,99,101,110,101,70,118,80,75,99,105,69,74,80,83,51,95,82,78,83,95,49,50,112,108,97,99,101,104,111,108,100,101,114,115,52,95,95,112,104,73,76,105,49,69,69,69,82,78,83,65,95,73,76,105,50,69,69,69,69,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,70,95,69,69,70,118,83,53,95,105,69,69,69,0,78,83,116,51,95,95,49,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,98,97,115,101,73,70,118,80,75,99,105,69,69,69,0,78,83,116,51,95,95,49,54,95,95,98,105,110,100,73,77,53,83,99,101,110,101,70,118,80,75,99,105,69,74,80,83,49,95,82,78,83,95,49,50,112,108,97,99,101,104,111,108,100,101,114,115,52,95,95,112,104,73,76,105,49,69,69,69,82,78,83,56,95,73,76,105,50,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,56,95,95,119,101,97,107,95,114,101,115,117,108,116,95,116,121,112,101,73,77,53,83,99,101,110,101,70,118,80,75,99,105,69,69,69,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,115,111,99,107,101,116,0,110,111,32,115,117,99,104,32,104,111,115,116,0,99,111,110,110,101,99,116,32,102,97,105,108,101,100,58,32,37,100,0,99,111,110,110,101,99,116,32,102,97,105,108,101,100,0,105,110,101,116,95,112,116,111,110,32,102,97,105,108,101,100,58,32,37,100,0,105,110,101,116,95,112,116,111,110,32,102,97,105,108,101,100,0,99,111,110,110,101,99,116,58,32,37,100,0,101,114,114,111,114,0,101,114,114,111,114,95,99,97,108,108,98,97,99,107,10,0,101,114,114,111,114,32,109,101,115,115,97,103,101,58,32,37,115,10,0,78,83,116,51,95,95,49,49,55,98,97,100,95,102,117,110,99,116,105,111,110,95,99,97,108,108,69,0,111,112,101,110,95,99,97,108,108,98,97,99,107,10,0,99,108,111,115,101,95,99,97,108,108,98,97,99,107,10,0,101,114,114,110,111,32,61,61,32,69,65,71,65,73,78,0,46,47,46,46,47,101,109,99,95,115,111,99,107,101,116,47,83,111,99,107,101,116,46,104,0,109,101,115,115,97,103,101,95,99,97,108,108,98,97,99,107,0,109,101,115,115,97,103,101,32,99,97,108,108,98,97,99,107,32,37,100,32,37,115,10,0,80,79,76,83,0,80,78,84,83,0,83,85,82,70,0,86,77,80,50,0,68,86,77,80,0,76,73,78,69,0,76,65,89,82,0,40,115,105,122,101,95,116,41,110,32,60,32,109,95,110,85,86,77,97,112,115,0,46,46,92,46,46,92,77,101,115,104,76,111,97,100,101,114,92,116,121,112,101,115,46,99,112,112,0,67,114,101,97,116,101,83,117,114,102,97,99,101,85,86,115,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,83,116,57,116,121,112,101,95,105,110,102,111,0,83,116,56,98,97,100,95,99,97,115,116,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,102,58,92,80,114,111,103,114,97,109,115,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,53,46,48,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,102,58,92,80,114,111,103,114,97,109,115,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,53,46,48,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,118,101,99,116,111,114,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,80,79,83,73,88,0,114,119,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+19220);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,114,97,110,100,111,109,95,100,101,118,105,99,101,32,102,97,105,108,101,100,32,116,111,32,111,112,101,110,32,0,114,97,110,100,111,109,95,100,101,118,105,99,101,32,103,111,116,32,69,79,70,0,114,97,110,100,111,109,95,100,101,118,105,99,101,32,103,111,116,32,97,110,32,117,110,101,120,112,101,99,116,101,100,32,101,114,114,111,114,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,78,83,116,51,95,95,49,50,52,95,95,103,101,110,101,114,105,99,95,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,78,83,116,51,95,95,49,50,51,95,95,115,121,115,116,101,109,95,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,103,101,110,101,114,105,99,0,117,110,115,112,101,99,105,102,105,101,100,32,103,101,110,101,114,105,99,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,115,121,115,116,101,109,0,117,110,115,112,101,99,105,102,105,101,100,32,115,121,115,116,101,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,58,32,0,0,0,99,108,111,99,107,95,103,101,116,116,105,109,101,40,67,76,79,67,75,95,77,79,78,79,84,79,78,73,67,41,32,102,97,105,108,101,100,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,105,111,115,116,114,101,97,109,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,37,112,0,67,0,37,0,0,0,0,0,108,0,108,108,0,0,76,0,37,112,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,48,49,50,51,52,53,54,55,56,57,0,37,76,102,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,48,49,50,51,52,53,54,55,56,57,0,37,46,48,76,102,0,116,114,117,101,0,102,97,108,115,101,0,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,65,77,0,80,77,0,37,109,47,37,100,47,37,121,0,37,72,58,37,77,58,37,83,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,37,73,58,37,77,58,37,83,32,37,112,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+27082);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  
  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }var GLEW={isLinaroFork:1,extensions:null,error:{0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null},version:{1:null,2:null,3:null,4:null},errorStringConstantFromCode:function (error) {
        if (GLEW.isLinaroFork) {
          switch (error) {
            case 4:return "OpenGL ES lib expected, found OpenGL lib"; // GLEW_ERROR_NOT_GLES_VERSION
            case 5:return "OpenGL lib expected, found OpenGL ES lib"; // GLEW_ERROR_GLES_VERSION
            case 6:return "Missing EGL version"; // GLEW_ERROR_NO_EGL_VERSION
            case 7:return "EGL 1.1 and up are supported"; // GLEW_ERROR_EGL_VERSION_10_ONLY
            default:break;
          }
        }
  
        switch (error) {
          case 0:return "No error"; // GLEW_OK || GLEW_NO_ERROR
          case 1:return "Missing GL version"; // GLEW_ERROR_NO_GL_VERSION
          case 2:return "GL 1.1 and up are supported"; // GLEW_ERROR_GL_VERSION_10_ONLY
          case 3:return "GLX 1.2 and up are supported"; // GLEW_ERROR_GLX_VERSION_11_ONLY
          default:return null;
        }
      },errorString:function (error) {
        if (!GLEW.error[error]) {
          var string = GLEW.errorStringConstantFromCode(error);
          if (!string) {
            string = "Unknown error";
            error = 8; // prevent array from growing more than this
          }
          GLEW.error[error] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.error[error];
      },versionStringConstantFromCode:function (name) {
        switch (name) {
          case 1:return "1.10.0"; // GLEW_VERSION
          case 2:return "1"; // GLEW_VERSION_MAJOR
          case 3:return "10"; // GLEW_VERSION_MINOR
          case 4:return "0"; // GLEW_VERSION_MICRO
          default:return null;
        }
      },versionString:function (name) {
        if (!GLEW.version[name]) {
          var string = GLEW.versionStringConstantFromCode(name);
          if (!string)
            return 0;
          GLEW.version[name] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.version[name];
      },extensionIsSupported:function (name) {
        if (!GLEW.extensions) {
          GLEW.extensions = Pointer_stringify(_glGetString(0x1F03)).split(' ');
        }
  
        if (GLEW.extensions.indexOf(name) != -1)
          return 1;
  
        // extensions from GLEmulations do not come unprefixed
        // so, try with prefix
        return (GLEW.extensions.indexOf("GL_" + name) != -1);
      }};function _glewInit() { return 0; }

  function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  
  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return self['performance']['now'](); };
        } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return performance['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x61:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
  
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        Runtime.dynCall('vii', GLFW.active.charFunc, [GLFW.active.id, charCode]);
      },onKeyChanged:function (event, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key == -1) return;
  
        GLFW.active.keys[key] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        Runtime.dynCall('viiiii', GLFW.active.keyFunc, [GLFW.active.id, key, event.keyCode, status, GLFW.getModBits(GLFW.active)]);
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1); // GLFW_PRESS
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0); // GLFW_RELEASE
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        Runtime.dynCall('vidd', GLFW.active.cursorPosFunc, [GLFW.active.id, Browser.mouseX, Browser.mouseY]);
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active || !GLFW.active.mouseButtonFunc) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        if (status == 1) { // GLFW_PRESS
          try {
            event.target.setCapture();
          } catch (e) {}
        }
  
        // DOM and glfw have different button codes
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
  
  
        Runtime.dynCall('viiii', GLFW.active.mouseButtonFunc, [GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active)]);
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons |= (1 << event['button']);
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons &= ~(1 << event['button']);
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        Runtime.dynCall('vidd', GLFW.active.scrollFunc, [GLFW.active.id, sx, sy]);
  
        event.preventDefault();
      },onFullScreenEventChange:function () {
        if (!GLFW.active) return;
  
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
        } else {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
        }
  
        Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true); // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        Runtime.dynCall('viii', GLFW.active.windowSizeFunc, [GLFW.active.id, GLFW.active.width, GLFW.active.height]);
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullScreen();
          } else {
            GLFW.cancelFullScreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowResizeFunc) return;
  
  
        Runtime.dynCall('viii', win.windowResizeFunc, [win.id, width, height]);
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullScreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0)    // GLFW_STENCIL_BITS
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          Runtime.dynCall('vi', win.windowCloseFunc, [win.id]);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  var _emscripten_resume=true;

  function _pthread_mutex_lock() {}

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  var _acosf=Math_acos;

  function _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  
  function ___set_network_callback(event, userData, callback) {
      function _callback(data) {
        try {
          if (event === 'error') {
            var sp = Runtime.stackSave();
            var msg = allocate(intArrayFromString(data[2]), 'i8', ALLOC_STACK);
            Runtime.dynCall('viiii', callback, [data[0], data[1], msg, userData]);
            Runtime.stackRestore(sp);
          } else {
            Runtime.dynCall('vii', callback, [data, userData]);
          }
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else {
            if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
            throw e;
          }
        }
      };
  
      Module['noExitRuntime'] = true;
      Module['websocket']['on'](event, callback ? _callback : null);
    }function _emscripten_set_socket_close_callback(userData, callback) {
      ___set_network_callback('close', userData, callback);
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _glfwGetVersionString() {
      if (!GLFW.versionString) {
        GLFW.versionString = allocate(intArrayFromString("3.0.0 JS WebGL Emscripten"), 'i8', ALLOC_NORMAL);
      }
      return GLFW.versionString;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

   
  Module["_memmove"] = _memmove;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  var _emscripten_preinvoke=true;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _pthread_cond_wait() {
      return 0;
    }

  function ___cxa_guard_abort() {}

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  function _glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  var _cosf=Math_cos;

  function _glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _glDisable(x0) { GLctx.disable(x0) }

  function _glBlendFuncSeparate(x0, x1, x2, x3) { GLctx.blendFuncSeparate(x0, x1, x2, x3) }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }


  function _glfwMakeContextCurrent(winid) {}

  function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function ___lock() {}

  function _emscripten_force_exit(status) {
      Module['noExitRuntime'] = false;
      Module['exit'](status);
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  var _sqrtf=Math_sqrt;

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _glRenderbufferStorage(x0, x1, x2, x3) { GLctx.renderbufferStorage(x0, x1, x2, x3) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_set_socket_open_callback(userData, callback) {
      ___set_network_callback('open', userData, callback);
    }

  var _llvm_ctlz_i32=true;

  function _glfwSetCursorPosCallback(winid, cbfun) {
      GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glUniform3f(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3f(location, v0, v1, v2);
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  var _sinf=Math_sin;

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  var _cos=Math_cos;

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

   
  Module["_i64Add"] = _i64Add;

  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  var _emscripten_landingpad=true;

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  var _log=Math_log;

  var _emscripten_postinvoke=true;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _emscripten_set_socket_error_callback(userData, callback) {
      ___set_network_callback('error', userData, callback);
    }

  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glewGetString(name) {
      return GLEW.versionString(name);
    }

  function _glfwSetInputMode(winid, mode, value) {}

  function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_mutex_unlock() {}

  function _glewGetErrorString(error) {
      return GLEW.errorString(error);
    }

  function _glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  var _BItoD=true;

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onFullScreenEventChange();
      });
      return 1; // GL_TRUE
    }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___cxa_guard_release() {}

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.cursorEnterFunc = cbfun;
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
        case 0x1903 /* GL_RED */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
        case 0x8227 /* GL_RG */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return {
            pixels: null,
            internalFormat: 0x0
          };
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* UNSIGNED_INT_24_8_WEBGL/UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return {
            pixels: null,
            internalFormat: 0x0
          };
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
        pixels = HEAPU8.subarray((pixels),(pixels+bytes));
      } else if (type == 0x1406 /* GL_FLOAT */) {
        pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
      } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
        pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
      } else {
        pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
      }
      return {
        pixels: pixels,
        internalFormat: internalFormat
      };
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      var pixelData;
      if (pixels) {
        var data = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
        pixelData = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixelData = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _SItoD=true;

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _glfwSetWindowPos(winid, x, y) {
      GLFW.setWindowPos(winid, x, y);
    }

  function _abort() {
      Module['abort']();
    }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___unlock() {}

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _glEnable(x0) { GLctx.enable(x0) }

  function _glfwGetCurrentContext() {
      return GLFW.active.id;
    }

  var _fabs=Math_abs;

  function _emscripten_set_socket_message_callback(userData, callback) {
      ___set_network_callback('message', userData, callback);
    }

  var _sqrt=Math_sqrt;

  function _glBlendEquationSeparate(x0, x1) { GLctx.blendEquationSeparate(x0, x1) }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  var _sin=Math_sin;

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }


  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  
  
  var _htons=undefined;
  Module["_htons"] = _htons;function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};function _gethostbyname(name) {
      name = Pointer_stringify(name);
  
      // generate hostent
      var ret = _malloc(20); // XXX possibly leaked, as are others here
      var nameBuf = _malloc(name.length+1);
      writeStringToMemory(name, nameBuf);
      HEAP32[((ret)>>2)]=nameBuf;
      var aliasesBuf = _malloc(4);
      HEAP32[((aliasesBuf)>>2)]=0;
      HEAP32[(((ret)+(4))>>2)]=aliasesBuf;
      var afinet = 2;
      HEAP32[(((ret)+(8))>>2)]=afinet;
      HEAP32[(((ret)+(12))>>2)]=4;
      var addrListBuf = _malloc(12);
      HEAP32[((addrListBuf)>>2)]=addrListBuf+8;
      HEAP32[(((addrListBuf)+(4))>>2)]=0;
      HEAP32[(((addrListBuf)+(8))>>2)]=__inet_pton4_raw(DNS.lookup_name(name));
      HEAP32[(((ret)+(16))>>2)]=addrListBuf;
      return ret;
    }

  function _glfwSetErrorCallback(cbfun) {
      GLFW.errorFunc = cbfun;
    }

  function _llvm_eh_typeid_for(type) {
      return type;
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function _glTexParameterf(x0, x1, x2) { GLctx.texParameterf(x0, x1, x2) }

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glfwSetKeyCallback(winid, cbfun) {
      GLFW.setKeyCallback(winid, cbfun);
    }

  
  
  var _strlen=undefined;
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = varargs;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = HEAPF64[((argIndex)>>3)];
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[((argIndex)>>2)],
                 HEAP32[(((argIndex)+(4))>>2)]];
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[((argIndex)>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }
  
  
  
  function __emscripten_traverse_stack(args) {
      if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
      }
  
      var funstr = args.callee.toString();
      var funcname = args.callee.name;
      var str = '(';
      var first = true;
      for(i in args) {
        var a = args[i];
        if (!first) {
          str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
          str += a;
        } else {
          str += '(' + typeof a + ')';
        }
      }
      str += ')';
      var caller = args.callee.caller;
      args = caller ? caller.arguments : [];
      if (first)
        str = '';
      return [args, funcname, str];
    }function _emscripten_get_callstack_js(flags) {
      var callstack = jsStackTrace();
  
      // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everyhing up to these from the output.
      var iThisFunc = callstack.lastIndexOf('_emscripten_log');
      var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
      var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2))+1;
      callstack = callstack.slice(iNextLine);
  
      // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
      if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        Runtime.warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
      }
  
      var stack_args = null;
      if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        var stack_args = __emscripten_traverse_stack(arguments);
        while (stack_args[1].indexOf('_emscripten_') >= 0)
          stack_args = __emscripten_traverse_stack(stack_args[0]);
      }
      
      // Process all lines:
      lines = callstack.split('\n');
      callstack = '';
      var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
      var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
      var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'
      
      for(l in lines) {
        var line = lines[l];
  
        var jsSymbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;
  
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          jsSymbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            jsSymbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4]|0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
          } else {
            // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
            callstack += line + '\n';
            continue;
          }
        }
  
        // Try to demangle the symbol, but fall back to showing the original JS symbol name if not available.
        var cSymbolName = (flags & 32/*EM_LOG_DEMANGLE*/) ? demangle(jsSymbolName) : jsSymbolName;
        if (!cSymbolName) {
          cSymbolName = jsSymbolName;
        }
  
        var haveSourceMap = false;
  
        if (flags & 8/*EM_LOG_C_STACK*/) {
          var orig = emscripten_source_map.originalPositionFor({line: lineno, column: column});
          haveSourceMap = (orig && orig.source);
          if (haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
              orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/')+1);
            }
            callstack += '    at ' + cSymbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
          }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
          if (flags & 64/*EM_LOG_NO_PATHS*/) {
            file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/')+1);
          }
          callstack += (haveSourceMap ? ('     = '+jsSymbolName) : ('    at '+cSymbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }
        
        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
          if (stack_args[1] == jsSymbolName && stack_args[2].length > 0) {
            callstack = callstack.replace(/\s+$/, '');
            callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
          }
          stack_args = __emscripten_traverse_stack(stack_args[0]);
        }
      }
      // Trim extra whitespace at the end of the output.
      callstack = callstack.replace(/\s+$/, '');
      return callstack;
    }function _emscripten_log_js(flags, str) {
      if (flags & 24/*EM_LOG_C_STACK | EM_LOG_JS_STACK*/) {
        str = str.replace(/\s+$/, ''); // Ensure the message and the callstack are joined cleanly with exactly one newline.
        str += (str.length > 0 ? '\n' : '') + _emscripten_get_callstack_js(flags);
      }
  
      if (flags & 1 /*EM_LOG_CONSOLE*/) {
        if (flags & 4 /*EM_LOG_ERROR*/) {
          console.error(str);
        } else if (flags & 2 /*EM_LOG_WARN*/) {
          console.warn(str);
        } else {
          console.log(str);
        }
      } else if (flags & 6 /*EM_LOG_ERROR|EM_LOG_WARN*/) {
        Module.printErr(str);
      } else {
        Module.print(str);
      }
    }function _emscripten_log(flags, varargs) {
      // Extract the (optionally-existing) printf format specifier field from varargs.
      var format = HEAP32[((varargs)>>2)];
      varargs += Math.max(Runtime.getNativeFieldSize('i32'), Runtime.getAlignSize('i32', null, true));
      var str = '';
      if (format) {
        var result = __formatString(format, varargs);
        for(var i = 0 ; i < result.length; ++i) {
          str += String.fromCharCode(result[i]);
        }
      }
      _emscripten_log_js(flags, str);
    }

  
  var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port;
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  
  var _ntohs=undefined;
  Module["_ntohs"] = _ntohs;function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }function ___syscall102(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // socketcall
      var call = SYSCALLS.get(), socketvararg = SYSCALLS.get();
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = SYSCALLS.getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr || '0.0.0.0'), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = SYSCALLS.getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = SYSCALLS.getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = SYSCALLS.getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/kripken/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: abort('unsupported socketcall syscall ' + call);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
var GLctx; GL.init()
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidii(x) { Module["printErr"]("Invalid function pointer called with signature 'viidii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidd(x) { Module["printErr"]("Invalid function pointer called with signature 'viidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidi(x) { Module["printErr"]("Invalid function pointer called with signature 'viidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_id(x) { Module["printErr"]("Invalid function pointer called with signature 'id'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddd(x) { Module["printErr"]("Invalid function pointer called with signature 'viddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiidi(x) { Module["printErr"]("Invalid function pointer called with signature 'viiidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidddddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_d(x) { Module["printErr"]("Invalid function pointer called with signature 'd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiidd(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidiii(x) { Module["printErr"]("Invalid function pointer called with signature 'vidiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddi(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viidii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viidd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidi(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viidi"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_id(index,a1) {
  try {
    return Module["dynCall_id"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiid(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiidi(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiidi"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidddddd(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_vidddddd"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_d(index) {
  try {
    return Module["dynCall_d"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiidd(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiidd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiid(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddi(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vdddi"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_vid": nullFunc_vid, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_viidii": nullFunc_viidii, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viidd": nullFunc_viidd, "nullFunc_viidi": nullFunc_viidi, "nullFunc_id": nullFunc_id, "nullFunc_viddd": nullFunc_viddd, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_vidd": nullFunc_vidd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_viii": nullFunc_viii, "nullFunc_di": nullFunc_di, "nullFunc_viiiid": nullFunc_viiiid, "nullFunc_viiidi": nullFunc_viiidi, "nullFunc_vidddd": nullFunc_vidddd, "nullFunc_viid": nullFunc_viid, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_dii": nullFunc_dii, "nullFunc_vidddddd": nullFunc_vidddddd, "nullFunc_d": nullFunc_d, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_i": nullFunc_i, "nullFunc_viiiidd": nullFunc_viiiidd, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiid": nullFunc_viiid, "nullFunc_vidiii": nullFunc_vidiii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_vdddi": nullFunc_vdddi, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vid": invoke_vid, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_viidii": invoke_viidii, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viidd": invoke_viidd, "invoke_viidi": invoke_viidi, "invoke_id": invoke_id, "invoke_viddd": invoke_viddd, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_diii": invoke_diii, "invoke_viii": invoke_viii, "invoke_di": invoke_di, "invoke_viiiid": invoke_viiiid, "invoke_viiidi": invoke_viiidi, "invoke_vidddd": invoke_vidddd, "invoke_viid": invoke_viid, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_dii": invoke_dii, "invoke_vidddddd": invoke_vidddddd, "invoke_d": invoke_d, "invoke_viiiiiii": invoke_viiiiiii, "invoke_i": invoke_i, "invoke_viiiidd": invoke_viiiidd, "invoke_iiiii": invoke_iiiii, "invoke_viiid": invoke_viiid, "invoke_vidiii": invoke_vidiii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_vdddi": invoke_vdddi, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_fabs": _fabs, "__inet_ntop6_raw": __inet_ntop6_raw, "_glfwCreateWindow": _glfwCreateWindow, "_sqrtf": _sqrtf, "_glUniformMatrix4fv": _glUniformMatrix4fv, "___cxa_guard_acquire": ___cxa_guard_acquire, "_glGenRenderbuffers": _glGenRenderbuffers, "_emscripten_set_socket_close_callback": _emscripten_set_socket_close_callback, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "__write_sockaddr": __write_sockaddr, "_glBindBuffer": _glBindBuffer, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_clock_gettime": _clock_gettime, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "___cxa_begin_catch": ___cxa_begin_catch, "_sinf": _sinf, "__addDays": __addDays, "_sysconf": _sysconf, "_glClear": _glClear, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "___syscall221": ___syscall221, "__emscripten_traverse_stack": __emscripten_traverse_stack, "_cos": _cos, "_glewGetErrorString": _glewGetErrorString, "___resumeException": ___resumeException, "_glfwInit": _glfwInit, "__isLeapYear": __isLeapYear, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "_glFramebufferRenderbuffer": _glFramebufferRenderbuffer, "___cxa_rethrow": ___cxa_rethrow, "___set_network_callback": ___set_network_callback, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall140": ___syscall140, "_glfwSetErrorCallback": _glfwSetErrorCallback, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_glVertexAttribPointer": _glVertexAttribPointer, "__inet_ntop4_raw": __inet_ntop4_raw, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_emscripten_get_callstack_js": _emscripten_get_callstack_js, "_emscripten_set_socket_open_callback": _emscripten_set_socket_open_callback, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_glBindRenderbuffer": _glBindRenderbuffer, "___cxa_guard_release": ___cxa_guard_release, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "___setErrNo": ___setErrNo, "_glDeleteTextures": _glDeleteTextures, "_glUniform3f": _glUniform3f, "_emscripten_force_exit": _emscripten_force_exit, "_pthread_once": _pthread_once, "_glfwGetCurrentContext": _glfwGetCurrentContext, "_glGenTextures": _glGenTextures, "_glewGetString": _glewGetString, "_glGetString": _glGetString, "_emscripten_get_now": _emscripten_get_now, "_glAttachShader": _glAttachShader, "_glCreateProgram": _glCreateProgram, "___syscall3": ___syscall3, "___lock": ___lock, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "_glBindFramebuffer": _glBindFramebuffer, "_glGenFramebuffers": _glGenFramebuffers, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_exit": _exit, "___cxa_guard_abort": ___cxa_guard_abort, "__inet_pton4_raw": __inet_pton4_raw, "___syscall102": ___syscall102, "_emscripten_set_socket_message_callback": _emscripten_set_socket_message_callback, "_glDeleteFramebuffers": _glDeleteFramebuffers, "_glDeleteShader": _glDeleteShader, "_fabsf": _fabsf, "___cxa_allocate_exception": ___cxa_allocate_exception, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_glBlendFuncSeparate": _glBlendFuncSeparate, "_acosf": _acosf, "_glClearColor": _glClearColor, "_glBindTexture": _glBindTexture, "___cxa_end_catch": ___cxa_end_catch, "_glUniform1i": _glUniform1i, "_strftime": _strftime, "_glDrawArrays": _glDrawArrays, "_glCreateShader": _glCreateShader, "_glGetError": _glGetError, "_glfwSetWindowPos": _glfwSetWindowPos, "_glfwGetVersionString": _glfwGetVersionString, "_log": _log, "_glActiveTexture": _glActiveTexture, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_glCompileShader": _glCompileShader, "_gethostbyname": _gethostbyname, "_glfwSwapInterval": _glfwSwapInterval, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_abort": _abort, "_glDeleteBuffers": _glDeleteBuffers, "_glBufferData": _glBufferData, "_glTexImage2D": _glTexImage2D, "_glewInit": _glewInit, "___cxa_pure_virtual": ___cxa_pure_virtual, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "_sin": _sin, "_cosf": _cosf, "_glGetProgramiv": _glGetProgramiv, "_pthread_key_create": _pthread_key_create, "___gxx_personality_v0": ___gxx_personality_v0, "__inet_pton6_raw": __inet_pton6_raw, "_glDeleteRenderbuffers": _glDeleteRenderbuffers, "__read_sockaddr": __read_sockaddr, "_glfwSetInputMode": _glfwSetInputMode, "_glLinkProgram": _glLinkProgram, "_strftime_l": _strftime_l, "_pthread_mutex_lock": _pthread_mutex_lock, "__reallyNegative": __reallyNegative, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_glGetUniformLocation": _glGetUniformLocation, "_emscripten_log": _emscripten_log, "_glRenderbufferStorage": _glRenderbufferStorage, "__exit": __exit, "__arraySum": __arraySum, "_glGetShaderiv": _glGetShaderiv, "_emscripten_log_js": _emscripten_log_js, "_pthread_self": _pthread_self, "_emscripten_set_socket_error_callback": _emscripten_set_socket_error_callback, "_glEnable": _glEnable, "_glfwGetCursorPos": _glfwGetCursorPos, "___syscall54": ___syscall54, "___unlock": ___unlock, "_glFramebufferTexture2D": _glFramebufferTexture2D, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_pthread_setspecific": _pthread_setspecific, "___cxa_throw": ___cxa_throw, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glDisable": _glDisable, "_glTexParameteri": _glTexParameteri, "__formatString": __formatString, "_sqrt": _sqrt, "_glBlendEquationSeparate": _glBlendEquationSeparate, "_glfwSetCursorPosCallback": _glfwSetCursorPosCallback, "_glTexParameterf": _glTexParameterf, "_glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_viidii=env.nullFunc_viidii;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viidd=env.nullFunc_viidd;
  var nullFunc_viidi=env.nullFunc_viidi;
  var nullFunc_id=env.nullFunc_id;
  var nullFunc_viddd=env.nullFunc_viddd;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_viiiid=env.nullFunc_viiiid;
  var nullFunc_viiidi=env.nullFunc_viiidi;
  var nullFunc_vidddd=env.nullFunc_vidddd;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_vidddddd=env.nullFunc_vidddddd;
  var nullFunc_d=env.nullFunc_d;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_viiiidd=env.nullFunc_viiiidd;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiid=env.nullFunc_viiid;
  var nullFunc_vidiii=env.nullFunc_vidiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_vdddi=env.nullFunc_vdddi;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vid=env.invoke_vid;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_viidii=env.invoke_viidii;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viidd=env.invoke_viidd;
  var invoke_viidi=env.invoke_viidi;
  var invoke_id=env.invoke_id;
  var invoke_viddd=env.invoke_viddd;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_viii=env.invoke_viii;
  var invoke_di=env.invoke_di;
  var invoke_viiiid=env.invoke_viiiid;
  var invoke_viiidi=env.invoke_viiidi;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_viid=env.invoke_viid;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_dii=env.invoke_dii;
  var invoke_vidddddd=env.invoke_vidddddd;
  var invoke_d=env.invoke_d;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_viiiidd=env.invoke_viiiidd;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiid=env.invoke_viiid;
  var invoke_vidiii=env.invoke_vidiii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_vdddi=env.invoke_vdddi;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _fabs=env._fabs;
  var __inet_ntop6_raw=env.__inet_ntop6_raw;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _sqrtf=env._sqrtf;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _glGenRenderbuffers=env._glGenRenderbuffers;
  var _emscripten_set_socket_close_callback=env._emscripten_set_socket_close_callback;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var __write_sockaddr=env.__write_sockaddr;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _clock_gettime=env._clock_gettime;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _sinf=env._sinf;
  var __addDays=env.__addDays;
  var _sysconf=env._sysconf;
  var _glClear=env._glClear;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var ___syscall221=env.___syscall221;
  var __emscripten_traverse_stack=env.__emscripten_traverse_stack;
  var _cos=env._cos;
  var _glewGetErrorString=env._glewGetErrorString;
  var ___resumeException=env.___resumeException;
  var _glfwInit=env._glfwInit;
  var __isLeapYear=env.__isLeapYear;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _glFramebufferRenderbuffer=env._glFramebufferRenderbuffer;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var ___set_network_callback=env.___set_network_callback;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall140=env.___syscall140;
  var _glfwSetErrorCallback=env._glfwSetErrorCallback;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var __inet_ntop4_raw=env.__inet_ntop4_raw;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _emscripten_get_callstack_js=env._emscripten_get_callstack_js;
  var _emscripten_set_socket_open_callback=env._emscripten_set_socket_open_callback;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _glBindRenderbuffer=env._glBindRenderbuffer;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var ___setErrNo=env.___setErrNo;
  var _glDeleteTextures=env._glDeleteTextures;
  var _glUniform3f=env._glUniform3f;
  var _emscripten_force_exit=env._emscripten_force_exit;
  var _pthread_once=env._pthread_once;
  var _glfwGetCurrentContext=env._glfwGetCurrentContext;
  var _glGenTextures=env._glGenTextures;
  var _glewGetString=env._glewGetString;
  var _glGetString=env._glGetString;
  var _emscripten_get_now=env._emscripten_get_now;
  var _glAttachShader=env._glAttachShader;
  var _glCreateProgram=env._glCreateProgram;
  var ___syscall3=env.___syscall3;
  var ___lock=env.___lock;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var _glBindFramebuffer=env._glBindFramebuffer;
  var _glGenFramebuffers=env._glGenFramebuffers;
  var _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback;
  var _exit=env._exit;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var __inet_pton4_raw=env.__inet_pton4_raw;
  var ___syscall102=env.___syscall102;
  var _emscripten_set_socket_message_callback=env._emscripten_set_socket_message_callback;
  var _glDeleteFramebuffers=env._glDeleteFramebuffers;
  var _glDeleteShader=env._glDeleteShader;
  var _fabsf=env._fabsf;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _glBlendFuncSeparate=env._glBlendFuncSeparate;
  var _acosf=env._acosf;
  var _glClearColor=env._glClearColor;
  var _glBindTexture=env._glBindTexture;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _glUniform1i=env._glUniform1i;
  var _strftime=env._strftime;
  var _glDrawArrays=env._glDrawArrays;
  var _glCreateShader=env._glCreateShader;
  var _glGetError=env._glGetError;
  var _glfwSetWindowPos=env._glfwSetWindowPos;
  var _glfwGetVersionString=env._glfwGetVersionString;
  var _log=env._log;
  var _glActiveTexture=env._glActiveTexture;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _glCompileShader=env._glCompileShader;
  var _gethostbyname=env._gethostbyname;
  var _glfwSwapInterval=env._glfwSwapInterval;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var _glewInit=env._glewInit;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _sin=env._sin;
  var _cosf=env._cosf;
  var _glGetProgramiv=env._glGetProgramiv;
  var _pthread_key_create=env._pthread_key_create;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var __inet_pton6_raw=env.__inet_pton6_raw;
  var _glDeleteRenderbuffers=env._glDeleteRenderbuffers;
  var __read_sockaddr=env.__read_sockaddr;
  var _glfwSetInputMode=env._glfwSetInputMode;
  var _glLinkProgram=env._glLinkProgram;
  var _strftime_l=env._strftime_l;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var __reallyNegative=env.__reallyNegative;
  var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _emscripten_log=env._emscripten_log;
  var _glRenderbufferStorage=env._glRenderbufferStorage;
  var __exit=env.__exit;
  var __arraySum=env.__arraySum;
  var _glGetShaderiv=env._glGetShaderiv;
  var _emscripten_log_js=env._emscripten_log_js;
  var _pthread_self=env._pthread_self;
  var _emscripten_set_socket_error_callback=env._emscripten_set_socket_error_callback;
  var _glEnable=env._glEnable;
  var _glfwGetCursorPos=env._glfwGetCursorPos;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _glFramebufferTexture2D=env._glFramebufferTexture2D;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_throw=env.___cxa_throw;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _glDisable=env._glDisable;
  var _glTexParameteri=env._glTexParameteri;
  var __formatString=env.__formatString;
  var _sqrt=env._sqrt;
  var _glBlendEquationSeparate=env._glBlendEquationSeparate;
  var _glfwSetCursorPosCallback=env._glfwSetCursorPosCallback;
  var _glTexParameterf=env._glTexParameterf;
  var _glfwSetCursorEnterCallback=env._glfwSetCursorEnterCallback;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN3__0C2Ev(2600);
 return;
}
function __ZN3__0C2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 104|0;
 $5 = sp + 92|0;
 $9 = sp + 76|0;
 $12 = sp + 64|0;
 $26 = $this;
 $27 = $26;
 $24 = $27;
 $25 = 16700;
 $28 = $24;
 $23 = $28;
 $29 = $23;
 $22 = $29;
 $30 = $22;
 $21 = $30;
 $31 = $25;
 $32 = $25;
 $33 = (__ZNSt3__111char_traitsIcE6lengthEPKc($32)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($28,$31,$33);
 $34 = ((($27)) + 12|0);
 HEAP16[$34>>1] = 8000;
 $35 = ((($27)) + 16|0);
 HEAP32[$35>>2] = 640;
 $36 = ((($27)) + 20|0);
 HEAP32[$36>>2] = 480;
 $37 = ((($27)) + 24|0);
 $20 = $37;
 $38 = $20;
 $19 = $38;
 $39 = $19;
 $18 = $39;
 $40 = $18;
 $17 = $40;
 $16 = $38;
 $41 = $16;
 $15 = $41;
 $42 = $15;
 $14 = $42;
 $43 = $14;
 $__a$i$i = $43;
 $__i$i$i = 0;
 while(1) {
  $44 = $__i$i$i;
  $45 = ($44>>>0)<(3);
  if (!($45)) {
   break;
  }
  $46 = $__i$i$i;
  $47 = $__a$i$i;
  $48 = (($47) + ($46<<2)|0);
  HEAP32[$48>>2] = 0;
  $49 = $__i$i$i;
  $50 = (($49) + 1)|0;
  $__i$i$i = $50;
 }
 $51 = ((($27)) + 36|0);
 $13 = $51;
 $52 = $13;
 $11 = $52;
 HEAP32[$12>>2] = 0;
 $53 = $11;
 $10 = $12;
 $54 = $10;
 $55 = HEAP32[$54>>2]|0;
 $8 = $53;
 HEAP32[$9>>2] = $55;
 $56 = $8;
 $7 = $9;
 $57 = $7;
 $58 = HEAP32[$57>>2]|0;
 HEAP32[$56>>2] = $58;
 $59 = ((($27)) + 40|0);
 $6 = $59;
 $60 = $6;
 $4 = $60;
 HEAP32[$5>>2] = 0;
 $61 = $4;
 $3 = $5;
 $62 = $3;
 $63 = HEAP32[$62>>2]|0;
 $1 = $61;
 HEAP32[$2>>2] = $63;
 $64 = $1;
 $0 = $2;
 $65 = $0;
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$64>>2] = $66;
 STACKTOP = sp;return;
}
function ___cxx_global_var_init1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $3 = $5;
 $4 = 16224;
 $8 = $3;
 $2 = $8;
 $9 = $2;
 $1 = $9;
 $10 = $1;
 $0 = $10;
 $11 = $4;
 $12 = $4;
 $13 = (__ZNSt3__111char_traitsIcE6lengthEPKc($12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($8,$11,$13);
 __THREW__ = 0;
 invoke_vii(380,(2644|0),($5|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $6 = $16;
  $7 = $17;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
  $18 = $6;
  $19 = $7;
  ___resumeException($18|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
  STACKTOP = sp;return;
 }
}
function ___cxx_global_var_init2() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__ZNSt3__113random_deviceclEv(2644)|0);
 $0 = 2648;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 __ZNSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE4seedEj($3,$4);
 STACKTOP = sp;return;
}
function __Z5UnionRK4AABBS1_($agg$result,$l,$r) {
 $agg$result = $agg$result|0;
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 24|0;
 $8 = sp + 151|0;
 $14 = sp + 16|0;
 $17 = sp + 150|0;
 $23 = sp + 8|0;
 $26 = sp + 149|0;
 $32 = sp;
 $35 = sp + 148|0;
 $36 = $l;
 $37 = $r;
 $38 = $36;
 $39 = $37;
 $33 = $38;
 $34 = $39;
 $40 = $33;
 $41 = $34;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $30 = $40;
 $31 = $41;
 $42 = $31;
 $43 = $30;
 $27 = $32;
 $28 = $42;
 $29 = $43;
 $44 = $28;
 $45 = +HEAPF32[$44>>2];
 $46 = $29;
 $47 = +HEAPF32[$46>>2];
 $48 = $45 < $47;
 $49 = $31;
 $50 = $30;
 $51 = $48 ? $49 : $50;
 $52 = +HEAPF32[$51>>2];
 HEAPF32[$agg$result>>2] = $52;
 $53 = ((($agg$result)) + 4|0);
 $54 = $36;
 $55 = ((($54)) + 4|0);
 $56 = $37;
 $57 = ((($56)) + 4|0);
 $6 = $55;
 $7 = $57;
 $58 = $6;
 $59 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $58;
 $4 = $59;
 $60 = $3;
 $61 = $4;
 $0 = $5;
 $1 = $60;
 $2 = $61;
 $62 = $1;
 $63 = +HEAPF32[$62>>2];
 $64 = $2;
 $65 = +HEAPF32[$64>>2];
 $66 = $63 < $65;
 $67 = $4;
 $68 = $3;
 $69 = $66 ? $67 : $68;
 $70 = +HEAPF32[$69>>2];
 HEAPF32[$53>>2] = $70;
 $71 = ((($agg$result)) + 8|0);
 $72 = $36;
 $73 = ((($72)) + 8|0);
 $74 = $37;
 $75 = ((($74)) + 8|0);
 $15 = $73;
 $16 = $75;
 $76 = $15;
 $77 = $16;
 ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
 $12 = $76;
 $13 = $77;
 $78 = $12;
 $79 = $13;
 $9 = $14;
 $10 = $78;
 $11 = $79;
 $80 = $10;
 $81 = +HEAPF32[$80>>2];
 $82 = $11;
 $83 = +HEAPF32[$82>>2];
 $84 = $81 < $83;
 $85 = $13;
 $86 = $12;
 $87 = $84 ? $85 : $86;
 $88 = +HEAPF32[$87>>2];
 HEAPF32[$71>>2] = $88;
 $89 = ((($agg$result)) + 12|0);
 $90 = $36;
 $91 = ((($90)) + 12|0);
 $92 = $37;
 $93 = ((($92)) + 12|0);
 $24 = $91;
 $25 = $93;
 $94 = $24;
 $95 = $25;
 ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
 $21 = $94;
 $22 = $95;
 $96 = $22;
 $97 = $21;
 $18 = $23;
 $19 = $96;
 $20 = $97;
 $98 = $19;
 $99 = +HEAPF32[$98>>2];
 $100 = $20;
 $101 = +HEAPF32[$100>>2];
 $102 = $99 < $101;
 $103 = $22;
 $104 = $21;
 $105 = $102 ? $103 : $104;
 $106 = +HEAPF32[$105>>2];
 HEAPF32[$89>>2] = $106;
 STACKTOP = sp;return;
}
function __ZN5Asset14GenLineNormalsERKNSt3__16vectorIN3glm5tvec3IfLNS2_9precisionE0EEENS0_9allocatorIS5_EEEERNS1_IN10MeshLoader8PolyLineENS6_ISC_EEEEf($agg$result,$vertices,$lines,$lineWidth) {
 $agg$result = $agg$result|0;
 $vertices = $vertices|0;
 $lines = $lines|0;
 $lineWidth = +$lineWidth;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0.0, $758 = 0.0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0.0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0.0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__annotator$i = 0, $__annotator$i14 = 0, $__annotator$i17 = 0, $__begin = 0, $__begin10 = 0, $__begin2 = 0, $__begin6 = 0, $__end = 0, $__end11 = 0, $__end3 = 0, $__end7 = 0;
 var $__range = 0, $__range1 = 0, $__range5 = 0, $__range9 = 0, $__t$i = 0, $d = 0, $f = 0, $idx = 0, $l = 0, $l12 = 0, $l4 = 0, $l8 = 0, $lineIndices = 0, $lineNormals = 0, $line_index = 0, $n1 = 0, $restart = 0, $swap_line_index = 0, $swapped = 0, $v = 0;
 var $v13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1424|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 1388|0;
 $17 = sp + 1340|0;
 $20 = sp + 1328|0;
 $24 = sp + 1312|0;
 $27 = sp + 1300|0;
 $77 = sp + 16|0;
 $83 = sp + 1419|0;
 $__annotator$i17 = sp + 1418|0;
 $101 = sp + 1012|0;
 $104 = sp + 1000|0;
 $108 = sp + 984|0;
 $111 = sp + 972|0;
 $181 = sp + 692|0;
 $184 = sp + 680|0;
 $188 = sp + 664|0;
 $191 = sp + 652|0;
 $203 = sp + 8|0;
 $208 = sp + 1417|0;
 $__annotator$i14 = sp + 1416|0;
 $228 = sp;
 $233 = sp + 1415|0;
 $__annotator$i = sp + 1414|0;
 $255 = sp + 412|0;
 $258 = sp + 400|0;
 $262 = sp + 384|0;
 $265 = sp + 372|0;
 $272 = sp + 344|0;
 $275 = sp + 332|0;
 $281 = sp + 308|0;
 $lineNormals = sp + 296|0;
 $lineIndices = sp + 276|0;
 $idx = sp + 272|0;
 $__begin = sp + 264|0;
 $__end = sp + 260|0;
 $swapped = sp + 244|0;
 $__begin2 = sp + 236|0;
 $__end3 = sp + 232|0;
 $284 = sp + 216|0;
 $285 = sp + 208|0;
 $286 = sp + 200|0;
 $287 = sp + 192|0;
 $__begin6 = sp + 184|0;
 $__end7 = sp + 180|0;
 $v = sp + 168|0;
 $288 = sp + 160|0;
 $289 = sp + 152|0;
 $290 = sp + 144|0;
 $291 = sp + 136|0;
 $292 = sp + 1412|0;
 $__begin10 = sp + 128|0;
 $__end11 = sp + 124|0;
 $n1 = sp + 112|0;
 $293 = sp + 104|0;
 $294 = sp + 96|0;
 $v13 = sp + 80|0;
 $295 = sp + 72|0;
 $296 = sp + 64|0;
 $297 = sp + 56|0;
 $f = sp + 52|0;
 $d = sp + 48|0;
 $298 = sp + 40|0;
 $299 = sp + 32|0;
 $300 = sp + 24|0;
 $279 = $vertices;
 $280 = $lines;
 HEAPF32[$281>>2] = $lineWidth;
 $302 = +HEAPF32[$281>>2];
 $303 = $302 / 2.0;
 HEAPF32[$281>>2] = $303;
 $278 = $lineNormals;
 $304 = $278;
 $277 = $304;
 $305 = $277;
 $276 = $305;
 HEAP32[$305>>2] = 0;
 $306 = ((($305)) + 4|0);
 HEAP32[$306>>2] = 0;
 $307 = ((($305)) + 8|0);
 $274 = $307;
 HEAP32[$275>>2] = 0;
 $308 = $274;
 $273 = $275;
 $309 = $273;
 $310 = HEAP32[$309>>2]|0;
 $271 = $308;
 HEAP32[$272>>2] = $310;
 $311 = $271;
 $270 = $311;
 $269 = $272;
 $312 = $269;
 $313 = HEAP32[$312>>2]|0;
 HEAP32[$311>>2] = $313;
 $314 = $280;
 $268 = $314;
 $315 = $268;
 $316 = ((($315)) + 4|0);
 $317 = HEAP32[$316>>2]|0;
 $318 = HEAP32[$315>>2]|0;
 $319 = $317;
 $320 = $318;
 $321 = (($319) - ($320))|0;
 $322 = (($321|0) / 8)&-1;
 __THREW__ = 0;
 invoke_vii(381,($lineNormals|0),($322|0));
 $323 = __THREW__; __THREW__ = 0;
 $324 = $323&1;
 if (!($324)) {
  $325 = $279;
  $267 = $325;
  $326 = $267;
  $327 = ((($326)) + 4|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = HEAP32[$326>>2]|0;
  $330 = $328;
  $331 = $329;
  $332 = (($330) - ($331))|0;
  $333 = (($332|0) / 12)&-1;
  __THREW__ = 0;
  invoke_vii(382,($lineIndices|0),($333|0));
  $334 = __THREW__; __THREW__ = 0;
  $335 = $334&1;
  if (!($335)) {
   HEAP32[$idx>>2] = 0;
   $336 = $280;
   $__range = $336;
   $337 = $__range;
   $266 = $337;
   $338 = $266;
   $339 = HEAP32[$338>>2]|0;
   $263 = $338;
   $264 = $339;
   $340 = $264;
   $260 = $262;
   $261 = $340;
   $341 = $260;
   $342 = $261;
   HEAP32[$341>>2] = $342;
   $343 = HEAP32[$262>>2]|0;
   HEAP32[$265>>2] = $343;
   $344 = HEAP32[$265>>2]|0;
   HEAP32[$__begin>>2] = $344;
   $345 = $__range;
   $259 = $345;
   $346 = $259;
   $347 = ((($346)) + 4|0);
   $348 = HEAP32[$347>>2]|0;
   $256 = $346;
   $257 = $348;
   $349 = $257;
   $253 = $255;
   $254 = $349;
   $350 = $253;
   $351 = $254;
   HEAP32[$350>>2] = $351;
   $352 = HEAP32[$255>>2]|0;
   HEAP32[$258>>2] = $352;
   $353 = HEAP32[$258>>2]|0;
   HEAP32[$__end>>2] = $353;
   while(1) {
    $251 = $__begin;
    $252 = $__end;
    $354 = $251;
    $355 = $252;
    $249 = $354;
    $250 = $355;
    $356 = $249;
    $248 = $356;
    $357 = $248;
    $358 = HEAP32[$357>>2]|0;
    $359 = $250;
    $247 = $359;
    $360 = $247;
    $361 = HEAP32[$360>>2]|0;
    $362 = ($358|0)==($361|0);
    $363 = $362 ^ 1;
    if (!($363)) {
     label = 14;
     break;
    }
    $246 = $__begin;
    $364 = $246;
    $365 = HEAP32[$364>>2]|0;
    $l = $365;
    $366 = $l;
    $367 = HEAP32[$366>>2]|0;
    $244 = $lineIndices;
    $245 = $367;
    $368 = $244;
    $369 = $245;
    $370 = HEAP32[$368>>2]|0;
    $371 = (($370) + (($369*12)|0)|0);
    $241 = $371;
    $242 = $idx;
    $372 = $241;
    $373 = ((($372)) + 4|0);
    $374 = HEAP32[$373>>2]|0;
    $240 = $372;
    $375 = $240;
    $376 = ((($375)) + 8|0);
    $239 = $376;
    $377 = $239;
    $238 = $377;
    $378 = $238;
    $379 = HEAP32[$378>>2]|0;
    $380 = ($374|0)!=($379|0);
    if ($380) {
     __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$372,1);
     $237 = $372;
     $381 = $237;
     $382 = ((($381)) + 8|0);
     $236 = $382;
     $383 = $236;
     $235 = $383;
     $384 = $235;
     $385 = ((($372)) + 4|0);
     $386 = HEAP32[$385>>2]|0;
     $234 = $386;
     $387 = $234;
     $388 = $242;
     $230 = $384;
     $231 = $387;
     $232 = $388;
     $389 = $230;
     $390 = $231;
     $391 = $232;
     $229 = $391;
     $392 = $229;
     ;HEAP8[$228>>0]=HEAP8[$233>>0]|0;
     $225 = $389;
     $226 = $390;
     $227 = $392;
     $393 = $225;
     $394 = $226;
     $395 = $227;
     $224 = $395;
     $396 = $224;
     $221 = $393;
     $222 = $394;
     $223 = $396;
     $397 = $222;
     $398 = $223;
     $220 = $398;
     $399 = $220;
     $400 = HEAP32[$399>>2]|0;
     HEAP32[$397>>2] = $400;
     __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
     $401 = ((($372)) + 4|0);
     $402 = HEAP32[$401>>2]|0;
     $403 = ((($402)) + 4|0);
     HEAP32[$401>>2] = $403;
    } else {
     $404 = $242;
     __THREW__ = 0;
     invoke_vii(383,($372|0),($404|0));
     $405 = __THREW__; __THREW__ = 0;
     $406 = $405&1;
     if ($406) {
      label = 13;
      break;
     }
    }
    $407 = $l;
    $408 = ((($407)) + 4|0);
    $409 = HEAP32[$408>>2]|0;
    $218 = $lineIndices;
    $219 = $409;
    $410 = $218;
    $411 = $219;
    $412 = HEAP32[$410>>2]|0;
    $413 = (($412) + (($411*12)|0)|0);
    $216 = $413;
    $217 = $idx;
    $414 = $216;
    $415 = ((($414)) + 4|0);
    $416 = HEAP32[$415>>2]|0;
    $215 = $414;
    $417 = $215;
    $418 = ((($417)) + 8|0);
    $214 = $418;
    $419 = $214;
    $213 = $419;
    $420 = $213;
    $421 = HEAP32[$420>>2]|0;
    $422 = ($416|0)!=($421|0);
    if ($422) {
     __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i14,$414,1);
     $212 = $414;
     $423 = $212;
     $424 = ((($423)) + 8|0);
     $211 = $424;
     $425 = $211;
     $210 = $425;
     $426 = $210;
     $427 = ((($414)) + 4|0);
     $428 = HEAP32[$427>>2]|0;
     $209 = $428;
     $429 = $209;
     $430 = $217;
     $205 = $426;
     $206 = $429;
     $207 = $430;
     $431 = $205;
     $432 = $206;
     $433 = $207;
     $204 = $433;
     $434 = $204;
     ;HEAP8[$203>>0]=HEAP8[$208>>0]|0;
     $200 = $431;
     $201 = $432;
     $202 = $434;
     $435 = $200;
     $436 = $201;
     $437 = $202;
     $199 = $437;
     $438 = $199;
     $196 = $435;
     $197 = $436;
     $198 = $438;
     $439 = $197;
     $440 = $198;
     $195 = $440;
     $441 = $195;
     $442 = HEAP32[$441>>2]|0;
     HEAP32[$439>>2] = $442;
     __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i14);
     $443 = ((($414)) + 4|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = ((($444)) + 4|0);
     HEAP32[$443>>2] = $445;
    } else {
     $446 = $217;
     __THREW__ = 0;
     invoke_vii(383,($414|0),($446|0));
     $447 = __THREW__; __THREW__ = 0;
     $448 = $447&1;
     if ($448) {
      label = 13;
      break;
     }
    }
    $449 = HEAP32[$idx>>2]|0;
    $450 = (($449) + 1)|0;
    HEAP32[$idx>>2] = $450;
    $194 = $__begin;
    $451 = $194;
    $452 = HEAP32[$451>>2]|0;
    $453 = ((($452)) + 8|0);
    HEAP32[$451>>2] = $453;
   }
   if ((label|0) == 14) {
    $458 = $280;
    $193 = $458;
    $459 = $193;
    $460 = ((($459)) + 4|0);
    $461 = HEAP32[$460>>2]|0;
    $462 = HEAP32[$459>>2]|0;
    $463 = $461;
    $464 = $462;
    $465 = (($463) - ($464))|0;
    $466 = (($465|0) / 8)&-1;
    __THREW__ = 0;
    invoke_vii(384,($swapped|0),($466|0));
    $467 = __THREW__; __THREW__ = 0;
    $468 = $467&1;
    if ($468) {
     label = 13;
    } else {
     $restart = 1;
     L18: while(1) {
      $469 = $restart;
      $470 = $469&1;
      if (!($470)) {
       label = 34;
       break;
      }
      $restart = 0;
      $__range1 = $lineIndices;
      $471 = $__range1;
      $192 = $471;
      $472 = $192;
      $473 = HEAP32[$472>>2]|0;
      $189 = $472;
      $190 = $473;
      $474 = $190;
      $186 = $188;
      $187 = $474;
      $475 = $186;
      $476 = $187;
      HEAP32[$475>>2] = $476;
      $477 = HEAP32[$188>>2]|0;
      HEAP32[$191>>2] = $477;
      $478 = HEAP32[$191>>2]|0;
      HEAP32[$__begin2>>2] = $478;
      $479 = $__range1;
      $185 = $479;
      $480 = $185;
      $481 = ((($480)) + 4|0);
      $482 = HEAP32[$481>>2]|0;
      $182 = $480;
      $183 = $482;
      $483 = $183;
      $179 = $181;
      $180 = $483;
      $484 = $179;
      $485 = $180;
      HEAP32[$484>>2] = $485;
      $486 = HEAP32[$181>>2]|0;
      HEAP32[$184>>2] = $486;
      $487 = HEAP32[$184>>2]|0;
      HEAP32[$__end3>>2] = $487;
      while(1) {
       $177 = $__begin2;
       $178 = $__end3;
       $488 = $177;
       $489 = $178;
       $175 = $488;
       $176 = $489;
       $490 = $175;
       $174 = $490;
       $491 = $174;
       $492 = HEAP32[$491>>2]|0;
       $493 = $176;
       $173 = $493;
       $494 = $173;
       $495 = HEAP32[$494>>2]|0;
       $496 = ($492|0)==($495|0);
       $497 = $496 ^ 1;
       if (!($497)) {
        continue L18;
       }
       $170 = $__begin2;
       $498 = $170;
       $499 = HEAP32[$498>>2]|0;
       $l4 = $499;
       $500 = $l4;
       $157 = $500;
       $501 = $157;
       $502 = ((($501)) + 4|0);
       $503 = HEAP32[$502>>2]|0;
       $504 = HEAP32[$501>>2]|0;
       $505 = $503;
       $506 = $504;
       $507 = (($505) - ($506))|0;
       $508 = (($507|0) / 4)&-1;
       $509 = ($508>>>0)<=(1);
       do {
        if (!($509)) {
         $510 = $280;
         $511 = $l4;
         $156 = $511;
         $512 = $156;
         $513 = HEAP32[$512>>2]|0;
         $514 = HEAP32[$513>>2]|0;
         $154 = $510;
         $155 = $514;
         $515 = $154;
         $516 = $155;
         $517 = HEAP32[$515>>2]|0;
         $518 = (($517) + ($516<<3)|0);
         $519 = HEAP32[$518>>2]|0;
         $520 = $280;
         $521 = $l4;
         $153 = $521;
         $522 = $153;
         $523 = ((($522)) + 4|0);
         $524 = HEAP32[$523>>2]|0;
         $525 = ((($524)) + -4|0);
         $526 = HEAP32[$525>>2]|0;
         $151 = $520;
         $152 = $526;
         $527 = $151;
         $528 = $152;
         $529 = HEAP32[$527>>2]|0;
         $530 = (($529) + ($528<<3)|0);
         $531 = HEAP32[$530>>2]|0;
         $532 = ($519|0)==($531|0);
         if (!($532)) {
          $533 = $280;
          $534 = $l4;
          $150 = $534;
          $535 = $150;
          $536 = HEAP32[$535>>2]|0;
          $537 = HEAP32[$536>>2]|0;
          $148 = $533;
          $149 = $537;
          $538 = $148;
          $539 = $149;
          $540 = HEAP32[$538>>2]|0;
          $541 = (($540) + ($539<<3)|0);
          $542 = ((($541)) + 4|0);
          $543 = HEAP32[$542>>2]|0;
          $544 = $280;
          $545 = $l4;
          $147 = $545;
          $546 = $147;
          $547 = ((($546)) + 4|0);
          $548 = HEAP32[$547>>2]|0;
          $549 = ((($548)) + -4|0);
          $550 = HEAP32[$549>>2]|0;
          $143 = $544;
          $144 = $550;
          $551 = $143;
          $552 = $144;
          $553 = HEAP32[$551>>2]|0;
          $554 = (($553) + ($552<<3)|0);
          $555 = ((($554)) + 4|0);
          $556 = HEAP32[$555>>2]|0;
          $557 = ($543|0)==($556|0);
          if (!($557)) {
           break;
          }
         }
         $558 = $l4;
         $137 = $558;
         $559 = $137;
         $560 = ((($559)) + 4|0);
         $561 = HEAP32[$560>>2]|0;
         $562 = ((($561)) + -4|0);
         $563 = HEAP32[$562>>2]|0;
         $135 = $swapped;
         $136 = $563;
         $564 = $135;
         $565 = $136;
         $133 = $564;
         $134 = $565;
         $566 = $133;
         $567 = HEAP32[$566>>2]|0;
         $568 = $134;
         $569 = (($568>>>0) / 32)&-1;
         $570 = (($567) + ($569<<2)|0);
         $571 = $134;
         $572 = (($571>>>0) % 32)&-1;
         $573 = 1 << $572;
         $130 = $284;
         $131 = $570;
         $132 = $573;
         $574 = $130;
         $575 = $131;
         HEAP32[$574>>2] = $575;
         $576 = ((($574)) + 4|0);
         $577 = $132;
         HEAP32[$576>>2] = $577;
         $129 = $284;
         $578 = $129;
         $579 = HEAP32[$578>>2]|0;
         $580 = HEAP32[$579>>2]|0;
         $581 = ((($578)) + 4|0);
         $582 = HEAP32[$581>>2]|0;
         $583 = $580 & $582;
         $584 = ($583|0)!=(0);
         $585 = $l4;
         if ($584) {
          $124 = $585;
          $586 = $124;
          $587 = HEAP32[$586>>2]|0;
          $588 = HEAP32[$587>>2]|0;
          $594 = $588;
         } else {
          $98 = $585;
          $589 = $98;
          $590 = ((($589)) + 4|0);
          $591 = HEAP32[$590>>2]|0;
          $592 = ((($591)) + -4|0);
          $593 = HEAP32[$592>>2]|0;
          $594 = $593;
         }
         $swap_line_index = $594;
         $595 = $l4;
         $61 = $595;
         $596 = $61;
         $597 = ((($596)) + 4|0);
         $598 = HEAP32[$597>>2]|0;
         $599 = ((($598)) + -4|0);
         $600 = HEAP32[$599>>2]|0;
         $59 = $swapped;
         $60 = $600;
         $601 = $59;
         $602 = $60;
         $57 = $601;
         $58 = $602;
         $603 = $57;
         $604 = HEAP32[$603>>2]|0;
         $605 = $58;
         $606 = (($605>>>0) / 32)&-1;
         $607 = (($604) + ($606<<2)|0);
         $608 = $58;
         $609 = (($608>>>0) % 32)&-1;
         $610 = 1 << $609;
         $54 = $285;
         $55 = $607;
         $56 = $610;
         $611 = $54;
         $612 = $55;
         HEAP32[$611>>2] = $612;
         $613 = ((($611)) + 4|0);
         $614 = $56;
         HEAP32[$613>>2] = $614;
         $53 = $285;
         $615 = $53;
         $616 = HEAP32[$615>>2]|0;
         $617 = HEAP32[$616>>2]|0;
         $618 = ((($615)) + 4|0);
         $619 = HEAP32[$618>>2]|0;
         $620 = $617 & $619;
         $621 = ($620|0)!=(0);
         if ($621) {
          $622 = $l4;
          $52 = $622;
          $623 = $52;
          $624 = HEAP32[$623>>2]|0;
          $625 = HEAP32[$624>>2]|0;
          $50 = $swapped;
          $51 = $625;
          $626 = $50;
          $627 = $51;
          $48 = $626;
          $49 = $627;
          $628 = $48;
          $629 = HEAP32[$628>>2]|0;
          $630 = $49;
          $631 = (($630>>>0) / 32)&-1;
          $632 = (($629) + ($631<<2)|0);
          $633 = $49;
          $634 = (($633>>>0) % 32)&-1;
          $635 = 1 << $634;
          $45 = $286;
          $46 = $632;
          $47 = $635;
          $636 = $45;
          $637 = $46;
          HEAP32[$636>>2] = $637;
          $638 = ((($636)) + 4|0);
          $639 = $47;
          HEAP32[$638>>2] = $639;
          $44 = $286;
          $640 = $44;
          $641 = HEAP32[$640>>2]|0;
          $642 = HEAP32[$641>>2]|0;
          $643 = ((($640)) + 4|0);
          $644 = HEAP32[$643>>2]|0;
          $645 = $642 & $644;
          $646 = ($645|0)!=(0);
          if ($646) {
           label = 27;
           break L18;
          }
         }
         $650 = $280;
         $651 = $swap_line_index;
         $42 = $650;
         $43 = $651;
         $652 = $42;
         $653 = $43;
         $654 = HEAP32[$652>>2]|0;
         $655 = (($654) + ($653<<3)|0);
         $656 = $280;
         $657 = $swap_line_index;
         $38 = $656;
         $39 = $657;
         $658 = $38;
         $659 = $39;
         $660 = HEAP32[$658>>2]|0;
         $661 = (($660) + ($659<<3)|0);
         $662 = ((($661)) + 4|0);
         $3 = $655;
         $4 = $662;
         $663 = $3;
         $2 = $663;
         $664 = $2;
         $665 = HEAP32[$664>>2]|0;
         HEAP32[$__t$i>>2] = $665;
         $666 = $4;
         $0 = $666;
         $667 = $0;
         $668 = HEAP32[$667>>2]|0;
         $669 = $3;
         HEAP32[$669>>2] = $668;
         $1 = $__t$i;
         $670 = $1;
         $671 = HEAP32[$670>>2]|0;
         $672 = $4;
         HEAP32[$672>>2] = $671;
         $673 = $swap_line_index;
         $10 = $swapped;
         $11 = $673;
         $674 = $10;
         $675 = $11;
         $8 = $674;
         $9 = $675;
         $676 = $8;
         $677 = HEAP32[$676>>2]|0;
         $678 = $9;
         $679 = (($678>>>0) / 32)&-1;
         $680 = (($677) + ($679<<2)|0);
         $681 = $9;
         $682 = (($681>>>0) % 32)&-1;
         $683 = 1 << $682;
         $5 = $287;
         $6 = $680;
         $7 = $683;
         $684 = $5;
         $685 = $6;
         HEAP32[$684>>2] = $685;
         $686 = ((($684)) + 4|0);
         $687 = $7;
         HEAP32[$686>>2] = $687;
         $12 = $287;
         $13 = 1;
         $688 = $12;
         $689 = $13;
         $690 = $689&1;
         $691 = ((($688)) + 4|0);
         $692 = HEAP32[$691>>2]|0;
         if ($690) {
          $693 = HEAP32[$688>>2]|0;
          $694 = HEAP32[$693>>2]|0;
          $695 = $694 | $692;
          HEAP32[$693>>2] = $695;
         } else {
          $696 = $692 ^ -1;
          $697 = HEAP32[$688>>2]|0;
          $698 = HEAP32[$697>>2]|0;
          $699 = $698 & $696;
          HEAP32[$697>>2] = $699;
         }
         $restart = 1;
        }
       } while(0);
       $14 = $__begin2;
       $700 = $14;
       $701 = HEAP32[$700>>2]|0;
       $702 = ((($701)) + 12|0);
       HEAP32[$700>>2] = $702;
      }
     }
     L41: do {
      if ((label|0) == 27) {
       __THREW__ = 0;
       invoke_viiii(385,(16237|0),(16280|0),148,(16289|0));
       $647 = __THREW__; __THREW__ = 0;
       label = 28;
      }
      else if ((label|0) == 34) {
       HEAP32[$idx>>2] = 0;
       $703 = $280;
       $__range5 = $703;
       $704 = $__range5;
       $21 = $704;
       $705 = $21;
       $706 = HEAP32[$705>>2]|0;
       $18 = $705;
       $19 = $706;
       $707 = $19;
       $15 = $17;
       $16 = $707;
       $708 = $15;
       $709 = $16;
       HEAP32[$708>>2] = $709;
       $710 = HEAP32[$17>>2]|0;
       HEAP32[$20>>2] = $710;
       $711 = HEAP32[$20>>2]|0;
       HEAP32[$__begin6>>2] = $711;
       $712 = $__range5;
       $28 = $712;
       $713 = $28;
       $714 = ((($713)) + 4|0);
       $715 = HEAP32[$714>>2]|0;
       $25 = $713;
       $26 = $715;
       $716 = $26;
       $22 = $24;
       $23 = $716;
       $717 = $22;
       $718 = $23;
       HEAP32[$717>>2] = $718;
       $719 = HEAP32[$24>>2]|0;
       HEAP32[$27>>2] = $719;
       $720 = HEAP32[$27>>2]|0;
       HEAP32[$__end7>>2] = $720;
       while(1) {
        $33 = $__begin6;
        $34 = $__end7;
        $721 = $33;
        $722 = $34;
        $31 = $721;
        $32 = $722;
        $723 = $31;
        $30 = $723;
        $724 = $30;
        $725 = HEAP32[$724>>2]|0;
        $726 = $32;
        $29 = $726;
        $727 = $29;
        $728 = HEAP32[$727>>2]|0;
        $729 = ($725|0)==($728|0);
        $730 = $729 ^ 1;
        if (!($730)) {
         break;
        }
        $35 = $__begin6;
        $731 = $35;
        $732 = HEAP32[$731>>2]|0;
        $l8 = $732;
        $733 = $279;
        $734 = $l8;
        $735 = ((($734)) + 4|0);
        $736 = HEAP32[$735>>2]|0;
        $36 = $733;
        $37 = $736;
        $737 = $36;
        $738 = $37;
        $739 = HEAP32[$737>>2]|0;
        $740 = (($739) + (($738*12)|0)|0);
        __THREW__ = 0;
        invoke_vii(386,($289|0),($740|0));
        $741 = __THREW__; __THREW__ = 0;
        $742 = $741&1;
        if ($742) {
         label = 28;
         break L41;
        }
        $743 = $279;
        $744 = $l8;
        $745 = HEAP32[$744>>2]|0;
        $40 = $743;
        $41 = $745;
        $746 = $40;
        $747 = $41;
        $748 = HEAP32[$746>>2]|0;
        $749 = (($748) + (($747*12)|0)|0);
        __THREW__ = 0;
        invoke_vii(386,($290|0),($749|0));
        $750 = __THREW__; __THREW__ = 0;
        $751 = $750&1;
        if ($751) {
         label = 28;
         break L41;
        }
        __THREW__ = 0;
        invoke_viii(387,($288|0),($289|0),($290|0));
        $752 = __THREW__; __THREW__ = 0;
        $753 = $752&1;
        if ($753) {
         label = 28;
         break L41;
        }
        __THREW__ = 0;
        invoke_vii(388,($v|0),($288|0));
        $754 = __THREW__; __THREW__ = 0;
        $755 = $754&1;
        if ($755) {
         label = 28;
         break L41;
        }
        $756 = ((($v)) + 4|0);
        $757 = +HEAPF32[$v>>2];
        $758 = -$757;
        HEAPF32[$291>>2] = $758;
        $93 = $lineNormals;
        $94 = $756;
        $95 = $291;
        $759 = $93;
        $760 = ((($759)) + 4|0);
        $761 = HEAP32[$760>>2]|0;
        $92 = $759;
        $762 = $92;
        $763 = ((($762)) + 8|0);
        $91 = $763;
        $764 = $91;
        $90 = $764;
        $765 = $90;
        $766 = HEAP32[$765>>2]|0;
        $767 = ($761>>>0)<($766>>>0);
        if ($767) {
         __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i17,$759,1);
         $89 = $759;
         $768 = $89;
         $769 = ((($768)) + 8|0);
         $88 = $769;
         $770 = $88;
         $87 = $770;
         $771 = $87;
         $772 = ((($759)) + 4|0);
         $773 = HEAP32[$772>>2]|0;
         $84 = $773;
         $774 = $84;
         $775 = $94;
         $63 = $775;
         $776 = $63;
         $777 = $95;
         $62 = $777;
         $778 = $62;
         $79 = $771;
         $80 = $774;
         $81 = $776;
         $82 = $778;
         $779 = $79;
         $780 = $80;
         $781 = $81;
         $78 = $781;
         $782 = $78;
         $783 = $82;
         $64 = $783;
         $784 = $64;
         ;HEAP8[$77>>0]=HEAP8[$83>>0]|0;
         $73 = $779;
         $74 = $780;
         $75 = $782;
         $76 = $784;
         $785 = $73;
         $786 = $74;
         $787 = $75;
         $72 = $787;
         $788 = $72;
         $789 = $76;
         $65 = $789;
         $790 = $65;
         $68 = $785;
         $69 = $786;
         $70 = $788;
         $71 = $790;
         $791 = $69;
         $792 = $70;
         $67 = $792;
         $793 = $67;
         $794 = $71;
         $66 = $794;
         $795 = $66;
         __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKfS4_($791,$793,$795);
         __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i17);
         $796 = ((($759)) + 4|0);
         $797 = HEAP32[$796>>2]|0;
         $798 = ((($797)) + 8|0);
         HEAP32[$796>>2] = $798;
        } else {
         $799 = $94;
         $85 = $799;
         $800 = $85;
         $801 = $95;
         $86 = $801;
         $802 = $86;
         __THREW__ = 0;
         invoke_viii(389,($759|0),($800|0),($802|0));
         $803 = __THREW__; __THREW__ = 0;
         $804 = $803&1;
         if ($804) {
          label = 28;
          break L41;
         }
        }
        $805 = HEAP32[$idx>>2]|0;
        $806 = (($805) + 1)|0;
        HEAP32[$idx>>2] = $806;
        $96 = $__begin6;
        $807 = $96;
        $808 = HEAP32[$807>>2]|0;
        $809 = ((($808)) + 8|0);
        HEAP32[$807>>2] = $809;
       }
       HEAP32[$idx>>2] = 0;
       $$expand_i1_val = 0;
       HEAP8[$292>>0] = $$expand_i1_val;
       $97 = $lineIndices;
       $810 = $97;
       $811 = ((($810)) + 4|0);
       $812 = HEAP32[$811>>2]|0;
       $813 = HEAP32[$810>>2]|0;
       $814 = $812;
       $815 = $813;
       $816 = (($814) - ($815))|0;
       $817 = (($816|0) / 12)&-1;
       __THREW__ = 0;
       invoke_vii(390,($agg$result|0),($817|0));
       $818 = __THREW__; __THREW__ = 0;
       $819 = $818&1;
       if ($819) {
        label = 28;
       } else {
        $__range9 = $lineIndices;
        $820 = $__range9;
        $105 = $820;
        $821 = $105;
        $822 = HEAP32[$821>>2]|0;
        $102 = $821;
        $103 = $822;
        $823 = $103;
        $99 = $101;
        $100 = $823;
        $824 = $99;
        $825 = $100;
        HEAP32[$824>>2] = $825;
        $826 = HEAP32[$101>>2]|0;
        HEAP32[$104>>2] = $826;
        $827 = HEAP32[$104>>2]|0;
        HEAP32[$__begin10>>2] = $827;
        $828 = $__range9;
        $112 = $828;
        $829 = $112;
        $830 = ((($829)) + 4|0);
        $831 = HEAP32[$830>>2]|0;
        $109 = $829;
        $110 = $831;
        $832 = $110;
        $106 = $108;
        $107 = $832;
        $833 = $106;
        $834 = $107;
        HEAP32[$833>>2] = $834;
        $835 = HEAP32[$108>>2]|0;
        HEAP32[$111>>2] = $835;
        $836 = HEAP32[$111>>2]|0;
        HEAP32[$__end11>>2] = $836;
        while(1) {
         $117 = $__begin10;
         $118 = $__end11;
         $837 = $117;
         $838 = $118;
         $115 = $837;
         $116 = $838;
         $839 = $115;
         $114 = $839;
         $840 = $114;
         $841 = HEAP32[$840>>2]|0;
         $842 = $116;
         $113 = $842;
         $843 = $113;
         $844 = HEAP32[$843>>2]|0;
         $845 = ($841|0)==($844|0);
         $846 = $845 ^ 1;
         if (!($846)) {
          label = 70;
          break;
         }
         $119 = $__begin10;
         $847 = $119;
         $848 = HEAP32[$847>>2]|0;
         $line_index = $848;
         $849 = $line_index;
         $120 = $849;
         $850 = $120;
         $851 = HEAP32[$850>>2]|0;
         $852 = ((($850)) + 4|0);
         $853 = HEAP32[$852>>2]|0;
         $854 = ($851|0)==($853|0);
         if ($854) {
          $855 = HEAP32[$idx>>2]|0;
          $856 = (($855) + 1)|0;
          HEAP32[$idx>>2] = $856;
         } else {
          $857 = $line_index;
          $121 = $857;
          $858 = $121;
          $859 = HEAP32[$858>>2]|0;
          $860 = HEAP32[$859>>2]|0;
          $122 = $lineNormals;
          $123 = $860;
          $861 = $122;
          $862 = $123;
          $863 = HEAP32[$861>>2]|0;
          $864 = (($863) + ($862<<3)|0);
          __THREW__ = 0;
          invoke_vii(391,($n1|0),($864|0));
          $865 = __THREW__; __THREW__ = 0;
          $866 = $865&1;
          if ($866) {
           break;
          }
          $867 = $line_index;
          $125 = $867;
          $868 = $125;
          $869 = ((($868)) + 4|0);
          $870 = HEAP32[$869>>2]|0;
          $871 = HEAP32[$868>>2]|0;
          $872 = $870;
          $873 = $871;
          $874 = (($872) - ($873))|0;
          $875 = (($874|0) / 4)&-1;
          $876 = ($875>>>0)>(1);
          if ($876) {
           $877 = $line_index;
           $126 = $877;
           $878 = $126;
           $879 = ((($878)) + 4|0);
           $880 = HEAP32[$879>>2]|0;
           $881 = ((($880)) + -4|0);
           $882 = HEAP32[$881>>2]|0;
           $127 = $lineNormals;
           $128 = $882;
           $883 = $127;
           $884 = $128;
           $885 = HEAP32[$883>>2]|0;
           $886 = (($885) + ($884<<3)|0);
           __THREW__ = 0;
           invoke_viii(392,($294|0),($n1|0),($886|0));
           $887 = __THREW__; __THREW__ = 0;
           $888 = $887&1;
           if ($888) {
            break;
           }
           __THREW__ = 0;
           invoke_vii(388,($293|0),($294|0));
           $889 = __THREW__; __THREW__ = 0;
           $890 = $889&1;
           if ($890) {
            break;
           }
           __THREW__ = 0;
           (invoke_iii(393,($n1|0),($293|0))|0);
           $891 = __THREW__; __THREW__ = 0;
           $892 = $891&1;
           if ($892) {
            break;
           }
           $893 = $280;
           $894 = $line_index;
           $138 = $894;
           $895 = $138;
           $896 = ((($895)) + 4|0);
           $897 = HEAP32[$896>>2]|0;
           $898 = ((($897)) + -4|0);
           $899 = HEAP32[$898>>2]|0;
           $139 = $893;
           $140 = $899;
           $900 = $139;
           $901 = $140;
           $902 = HEAP32[$900>>2]|0;
           $903 = (($902) + ($901<<3)|0);
           $l12 = $903;
           $904 = $279;
           $905 = $l12;
           $906 = ((($905)) + 4|0);
           $907 = HEAP32[$906>>2]|0;
           $141 = $904;
           $142 = $907;
           $908 = $141;
           $909 = $142;
           $910 = HEAP32[$908>>2]|0;
           $911 = (($910) + (($909*12)|0)|0);
           __THREW__ = 0;
           invoke_vii(386,($296|0),($911|0));
           $912 = __THREW__; __THREW__ = 0;
           $913 = $912&1;
           if ($913) {
            break;
           }
           $914 = $279;
           $915 = $l12;
           $916 = HEAP32[$915>>2]|0;
           $145 = $914;
           $146 = $916;
           $917 = $145;
           $918 = $146;
           $919 = HEAP32[$917>>2]|0;
           $920 = (($919) + (($918*12)|0)|0);
           __THREW__ = 0;
           invoke_vii(386,($297|0),($920|0));
           $921 = __THREW__; __THREW__ = 0;
           $922 = $921&1;
           if ($922) {
            break;
           }
           __THREW__ = 0;
           invoke_viii(387,($295|0),($296|0),($297|0));
           $923 = __THREW__; __THREW__ = 0;
           $924 = $923&1;
           if ($924) {
            break;
           }
           __THREW__ = 0;
           invoke_vii(388,($v13|0),($295|0));
           $925 = __THREW__; __THREW__ = 0;
           $926 = $925&1;
           if ($926) {
            break;
           }
           __THREW__ = 0;
           $927 = (+invoke_dii(394,($v13|0),($n1|0)));
           $928 = __THREW__; __THREW__ = 0;
           $929 = $928&1;
           if ($929) {
            break;
           }
           HEAPF32[$f>>2] = $927;
           __THREW__ = 0;
           invoke_viii(395,($298|0),($v13|0),($f|0));
           $930 = __THREW__; __THREW__ = 0;
           $931 = $930&1;
           if ($931) {
            break;
           }
           __THREW__ = 0;
           $932 = (+invoke_dii(396,($298|0),($n1|0)));
           $933 = __THREW__; __THREW__ = 0;
           $934 = $933&1;
           if ($934) {
            break;
           }
           HEAPF32[$d>>2] = $932;
           __THREW__ = 0;
           invoke_viii(397,($299|0),($n1|0),($d|0));
           $935 = __THREW__; __THREW__ = 0;
           $936 = $935&1;
           if ($936) {
            break;
           }
           __THREW__ = 0;
           (invoke_iii(393,($n1|0),($299|0))|0);
           $937 = __THREW__; __THREW__ = 0;
           $938 = $937&1;
           if ($938) {
            break;
           }
           $939 = $280;
           $940 = $line_index;
           $158 = $940;
           $941 = $158;
           $942 = HEAP32[$941>>2]|0;
           $943 = HEAP32[$942>>2]|0;
           $159 = $939;
           $160 = $943;
           $944 = $159;
           $945 = $160;
           $946 = HEAP32[$944>>2]|0;
           $947 = (($946) + ($945<<3)|0);
           $948 = HEAP32[$947>>2]|0;
           $949 = $280;
           $950 = $line_index;
           $161 = $950;
           $951 = $161;
           $952 = ((($951)) + 4|0);
           $953 = HEAP32[$952>>2]|0;
           $954 = ((($953)) + -4|0);
           $955 = HEAP32[$954>>2]|0;
           $162 = $949;
           $163 = $955;
           $956 = $162;
           $957 = $163;
           $958 = HEAP32[$956>>2]|0;
           $959 = (($958) + ($957<<3)|0);
           $960 = HEAP32[$959>>2]|0;
           $961 = ($948|0)==($960|0);
           if ($961) {
            label = 65;
            break;
           }
           $962 = $280;
           $963 = $line_index;
           $164 = $963;
           $964 = $164;
           $965 = HEAP32[$964>>2]|0;
           $966 = HEAP32[$965>>2]|0;
           $165 = $962;
           $166 = $966;
           $967 = $165;
           $968 = $166;
           $969 = HEAP32[$967>>2]|0;
           $970 = (($969) + ($968<<3)|0);
           $971 = ((($970)) + 4|0);
           $972 = HEAP32[$971>>2]|0;
           $973 = $280;
           $974 = $line_index;
           $167 = $974;
           $975 = $167;
           $976 = ((($975)) + 4|0);
           $977 = HEAP32[$976>>2]|0;
           $978 = ((($977)) + -4|0);
           $979 = HEAP32[$978>>2]|0;
           $168 = $973;
           $169 = $979;
           $980 = $168;
           $981 = $169;
           $982 = HEAP32[$980>>2]|0;
           $983 = (($982) + ($981<<3)|0);
           $984 = ((($983)) + 4|0);
           $985 = HEAP32[$984>>2]|0;
           $986 = ($972|0)==($985|0);
           if ($986) {
            label = 65;
            break;
           }
          }
          $990 = HEAP32[$idx>>2]|0;
          $991 = (($990) + 1)|0;
          HEAP32[$idx>>2] = $991;
          $171 = $agg$result;
          $172 = $990;
          $992 = $171;
          $993 = $172;
          $994 = HEAP32[$992>>2]|0;
          $995 = (($994) + ($993<<3)|0);
          __THREW__ = 0;
          invoke_viii(395,($300|0),($n1|0),($281|0));
          $996 = __THREW__; __THREW__ = 0;
          $997 = $996&1;
          if ($997) {
           break;
          }
          __THREW__ = 0;
          (invoke_iii(393,($995|0),($300|0))|0);
          $998 = __THREW__; __THREW__ = 0;
          $999 = $998&1;
          if ($999) {
           break;
          }
         }
         $243 = $__begin10;
         $1000 = $243;
         $1001 = HEAP32[$1000>>2]|0;
         $1002 = ((($1001)) + 12|0);
         HEAP32[$1000>>2] = $1002;
        }
        if ((label|0) == 65) {
         __THREW__ = 0;
         invoke_viiii(385,(16304|0),(16280|0),179,(16289|0));
         $987 = __THREW__; __THREW__ = 0;
        }
        else if ((label|0) == 70) {
         $$expand_i1_val2 = 1;
         HEAP8[$292>>0] = $$expand_i1_val2;
         $301 = 1;
         $$pre_trunc = HEAP8[$292>>0]|0;
         $1003 = $$pre_trunc&1;
         if ($1003) {
          __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($swapped);
          __ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEED2Ev($lineIndices);
          __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($lineNormals);
          STACKTOP = sp;return;
         }
         __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($agg$result);
         __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($swapped);
         __ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEED2Ev($lineIndices);
         __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($lineNormals);
         STACKTOP = sp;return;
        }
        $988 = ___cxa_find_matching_catch()|0;
        $989 = tempRet0;
        $282 = $988;
        $283 = $989;
        __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($agg$result);
       }
      }
     } while(0);
     if ((label|0) == 28) {
      $648 = ___cxa_find_matching_catch()|0;
      $649 = tempRet0;
      $282 = $648;
      $283 = $649;
     }
     __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($swapped);
    }
   }
   if ((label|0) == 13) {
    $456 = ___cxa_find_matching_catch()|0;
    $457 = tempRet0;
    $282 = $456;
    $283 = $457;
   }
   __ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEED2Ev($lineIndices);
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($lineNormals);
   $1004 = $282;
   $1005 = $283;
   ___resumeException($1004|0);
   // unreachable;
  }
 }
 $454 = ___cxa_find_matching_catch()|0;
 $455 = tempRet0;
 $282 = $454;
 $283 = $455;
 __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($lineNormals);
 $1004 = $282;
 $1005 = $283;
 ___resumeException($1004|0);
 // unreachable;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 8)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 8)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEEC2EjjS7_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(398,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $11 = $44;
  $12 = $45;
  __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $7 = $14;
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($14)) + 8|0);
 $5 = $16;
 HEAP32[$6>>2] = 0;
 $17 = $5;
 $4 = $6;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $2 = $17;
 HEAP32[$3>>2] = $19;
 $20 = $2;
 $1 = $20;
 $0 = $3;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 $23 = $10;
 $24 = ($23>>>0)>(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $10;
 __THREW__ = 0;
 invoke_vii(399,($13|0),($25|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = $10;
  __THREW__ = 0;
  invoke_vii(400,($13|0),($28|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if (!($30)) {
   STACKTOP = sp;return;
  }
 }
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $11 = $31;
 $12 = $32;
 __ZNSt3__113__vector_baseINS_6vectorIjNS_9allocatorIjEEEENS2_IS4_EEED2Ev($13);
 $33 = $11;
 $34 = $12;
 ___resumeException($33|0);
 // unreachable;
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 104|0;
 $6 = sp + 92|0;
 $13 = sp + 64|0;
 $14 = sp + 56|0;
 $23 = sp + 16|0;
 $25 = $this;
 $26 = $__n;
 $27 = $25;
 $24 = $27;
 HEAP32[$27>>2] = 0;
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($27)) + 8|0);
 $5 = $29;
 HEAP32[$6>>2] = 0;
 $30 = $5;
 $4 = $6;
 $31 = $4;
 $32 = HEAP32[$31>>2]|0;
 $2 = $30;
 HEAP32[$3>>2] = $32;
 $33 = $2;
 $1 = $33;
 $0 = $3;
 $34 = $0;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $36 = $26;
 $37 = ($36>>>0)>(0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = $26;
 __ZNSt3__16vectorIbNS_9allocatorIbEEE8allocateEj($27,$38);
 $39 = $26;
 $20 = $27;
 $21 = $39;
 $22 = 0;
 $40 = $20;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $__old_size$i = $42;
 $43 = $21;
 $44 = ((($40)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($43))|0;
 HEAP32[$44>>2] = $46;
 $47 = $__old_size$i;
 $18 = $40;
 $19 = $47;
 $48 = $18;
 $49 = HEAP32[$48>>2]|0;
 $50 = $19;
 $51 = (($50>>>0) / 32)&-1;
 $52 = (($49) + ($51<<2)|0);
 $53 = $19;
 $54 = (($53>>>0) % 32)&-1;
 $15 = $23;
 $16 = $52;
 $17 = $54;
 $55 = $15;
 $56 = $16;
 HEAP32[$55>>2] = $56;
 $57 = ((($55)) + 4|0);
 $58 = $17;
 HEAP32[$57>>2] = $58;
 $59 = $21;
 $60 = $22;
 $61 = $60&1;
 $11 = $59;
 $62 = $61&1;
 $12 = $62;
 $63 = $11;
 $64 = ($63>>>0)>(0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $65 = $12;
 $66 = $65&1;
 if ($66) {
  $9 = $13;
  $10 = $23;
  $67 = $9;
  $68 = $10;
  $69 = HEAP32[$68>>2]|0;
  HEAP32[$67>>2] = $69;
  $70 = ((($67)) + 4|0);
  $71 = $10;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  HEAP32[$70>>2] = $73;
  $74 = $11;
  __ZNSt3__113__fill_n_trueINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($13,$74);
  STACKTOP = sp;return;
 } else {
  $7 = $14;
  $8 = $23;
  $75 = $7;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  HEAP32[$75>>2] = $77;
  $78 = ((($75)) + 4|0);
  $79 = $8;
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  HEAP32[$78>>2] = $81;
  $82 = $11;
  __ZNSt3__114__fill_n_falseINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($14,$82);
  STACKTOP = sp;return;
 }
}
function __ZN3glm9normalizeIfLNS_9precisionE0ENS_5tvec2EEET1_IT_XT0_EERKS5_($agg$result,$x) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $x;
 $2 = $0;
 $3 = $0;
 $4 = $0;
 $5 = (+__ZN3glm3dotIfLNS_9precisionE0ENS_5tvec2EEET_RKT1_IS3_XT0_EES7_($3,$4));
 $6 = (+__ZN3glm11inversesqrtIfEET_S1_($5));
 HEAPF32[$1>>2] = $6;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec2IT_XT0_EEERKS4_RKS3_($agg$result,$2,$1);
 STACKTOP = sp;return;
}
function __ZN3glmmiIfLNS_9precisionE0EEENS_5tvec2IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 4|0;
 $3 = sp;
 $0 = $v1;
 $1 = $v2;
 $4 = $0;
 $5 = +HEAPF32[$4>>2];
 $6 = $1;
 $7 = +HEAPF32[$6>>2];
 $8 = $5 - $7;
 HEAPF32[$2>>2] = $8;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = ((($12)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 - $14;
 HEAPF32[$3>>2] = $15;
 __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKfS4_($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __ZN3glm5tvec2IfLNS_9precisionE0EEC2IfLS1_0EEERKNS_5tvec3IT_XT0_EEE($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = ((($2)) + 4|0);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$5>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $7 = $14;
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($14)) + 8|0);
 $5 = $16;
 HEAP32[$6>>2] = 0;
 $17 = $5;
 $4 = $6;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $2 = $17;
 HEAP32[$3>>2] = $19;
 $20 = $2;
 $1 = $20;
 $0 = $3;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 $23 = $10;
 $24 = ($23>>>0)>(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $10;
 __THREW__ = 0;
 invoke_vii(401,($13|0),($25|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = $10;
  __THREW__ = 0;
  invoke_vii(402,($13|0),($28|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if (!($30)) {
   STACKTOP = sp;return;
  }
 }
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $11 = $31;
 $12 = $32;
 __ZNSt3__113__vector_baseIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($13);
 $33 = $11;
 $34 = $12;
 ___resumeException($33|0);
 // unreachable;
}
function __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = ((($2)) + 4|0);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$5>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec2IfLNS_9precisionE0EEaSERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($2)) + 4|0);
 HEAPF32[$8>>2] = $7;
 STACKTOP = sp;return ($2|0);
}
function __ZN3glmplIfLNS_9precisionE0EEENS_5tvec2IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 4|0;
 $3 = sp;
 $0 = $v1;
 $1 = $v2;
 $4 = $0;
 $5 = +HEAPF32[$4>>2];
 $6 = $1;
 $7 = +HEAPF32[$6>>2];
 $8 = $5 + $7;
 HEAPF32[$2>>2] = $8;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = ((($12)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 + $14;
 HEAPF32[$3>>2] = $15;
 __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKfS4_($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __ZN3glm3dotIfLNS_9precisionE0ENS_5tvec2EEET_RKT1_IS3_XT0_EES7_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $0;
 $3 = $1;
 $4 = (+__ZN3glm6detail11compute_dotINS_5tvec2EfLNS_9precisionE0EE4callERKNS2_IfLS3_0EEES7_($2,$3));
 STACKTOP = sp;return (+$4);
}
function __ZN3glm8distanceIfLNS_9precisionE0ENS_5tvec2EEET_RKT1_IS3_XT0_EES7_($p0,$p1) {
 $p0 = $p0|0;
 $p1 = $p1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $p0;
 $1 = $p1;
 $3 = $1;
 $4 = $0;
 __ZN3glmmiIfLNS_9precisionE0EEENS_5tvec2IT_XT0_EEERKS4_S6_($2,$3,$4);
 $5 = (+__ZN3glm6lengthIfLNS_9precisionE0ENS_5tvec2EEET_RKT1_IS3_XT0_EE($2));
 STACKTOP = sp;return (+$5);
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec2IT_XT0_EEERKS4_RKS3_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 4|0;
 $3 = sp;
 $0 = $v1;
 $1 = $v2;
 $4 = $0;
 $5 = +HEAPF32[$4>>2];
 $6 = $1;
 $7 = +HEAPF32[$6>>2];
 $8 = $5 * $7;
 HEAPF32[$2>>2] = $8;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = +HEAPF32[$12>>2];
 $14 = $11 * $13;
 HEAPF32[$3>>2] = $14;
 __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKfS4_($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __ZN3glmdvIfLNS_9precisionE0EEENS_5tvec2IT_XT0_EEERKS4_RKS3_($agg$result,$v,$s) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 4|0;
 $3 = sp;
 $0 = $v;
 $1 = $s;
 $4 = $0;
 $5 = +HEAPF32[$4>>2];
 $6 = $1;
 $7 = +HEAPF32[$6>>2];
 $8 = $5 / $7;
 HEAPF32[$2>>2] = $8;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = +HEAPF32[$12>>2];
 $14 = $11 / $13;
 HEAPF32[$3>>2] = $14;
 __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKfS4_($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $7 = $15;
  STACKTOP = sp;return;
 }
 $13 = $15;
 $18 = $13;
 $19 = ((($18)) + 8|0);
 $12 = $19;
 $20 = $12;
 $11 = $20;
 $21 = $11;
 $22 = HEAP32[$15>>2]|0;
 $10 = $15;
 $23 = $10;
 $24 = ((($23)) + 8|0);
 $9 = $24;
 $25 = $9;
 $8 = $25;
 $26 = $8;
 $27 = HEAP32[$26>>2]|0;
 $4 = $21;
 $5 = $22;
 $6 = $27;
 $28 = $4;
 $29 = $5;
 $30 = $6;
 $1 = $28;
 $2 = $29;
 $3 = $30;
 $31 = $2;
 $0 = $31;
 $32 = $0;
 __ZdlPv($32);
 $7 = $15;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_6vectorIjNS_9allocatorIjEEEENS2_IS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN5Asset11GenVerticesERKN10MeshLoader8PolyLineERKNSt3__16vectorIN3glm5tvec2IfLNS6_9precisionE0EEENS4_9allocatorIS9_EEEERKNS5_INS6_5tvec3IfLS8_0EEENSA_ISG_EEEEfRSI_($l,$vertexNormals,$mesh_vertices,$scale,$vertices) {
 $l = $l|0;
 $vertexNormals = $vertexNormals|0;
 $mesh_vertices = $mesh_vertices|0;
 $scale = +$scale;
 $vertices = $vertices|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i1 = 0, $__annotator$i3 = 0, $__annotator$i5 = 0, $__annotator$i7 = 0, $__annotator$i9 = 0, $n11 = 0;
 var $n12 = 0, $n21 = 0, $n22 = 0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 896|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 40|0;
 $14 = sp + 891|0;
 $__annotator$i9 = sp + 890|0;
 $34 = sp + 32|0;
 $39 = sp + 889|0;
 $__annotator$i7 = sp + 888|0;
 $59 = sp + 24|0;
 $64 = sp + 887|0;
 $__annotator$i5 = sp + 886|0;
 $84 = sp + 16|0;
 $89 = sp + 885|0;
 $__annotator$i3 = sp + 884|0;
 $109 = sp + 8|0;
 $114 = sp + 883|0;
 $__annotator$i1 = sp + 882|0;
 $140 = sp;
 $145 = sp + 881|0;
 $__annotator$i = sp + 880|0;
 $161 = sp + 280|0;
 $v1 = sp + 264|0;
 $v2 = sp + 252|0;
 $n11 = sp + 240|0;
 $n12 = sp + 228|0;
 $163 = sp + 224|0;
 $164 = sp + 220|0;
 $n21 = sp + 208|0;
 $n22 = sp + 196|0;
 $165 = sp + 192|0;
 $166 = sp + 188|0;
 $167 = sp + 176|0;
 $168 = sp + 164|0;
 $169 = sp + 152|0;
 $170 = sp + 140|0;
 $171 = sp + 128|0;
 $172 = sp + 116|0;
 $173 = sp + 104|0;
 $174 = sp + 92|0;
 $175 = sp + 80|0;
 $176 = sp + 68|0;
 $177 = sp + 56|0;
 $178 = sp + 44|0;
 $158 = $l;
 $159 = $vertexNormals;
 $160 = $mesh_vertices;
 HEAPF32[$161>>2] = $scale;
 $162 = $vertices;
 $179 = $160;
 $180 = $158;
 $181 = HEAP32[$180>>2]|0;
 $156 = $179;
 $157 = $181;
 $182 = $156;
 $183 = $157;
 $184 = HEAP32[$182>>2]|0;
 $185 = (($184) + (($183*12)|0)|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($v1,$185);
 $186 = $160;
 $187 = $158;
 $188 = ((($187)) + 4|0);
 $189 = HEAP32[$188>>2]|0;
 $129 = $186;
 $130 = $189;
 $190 = $129;
 $191 = $130;
 $192 = HEAP32[$190>>2]|0;
 $193 = (($192) + (($191*12)|0)|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($v2,$193);
 $194 = $159;
 $195 = $158;
 $196 = HEAP32[$195>>2]|0;
 $127 = $194;
 $128 = $196;
 $197 = $127;
 $198 = $128;
 $199 = HEAP32[$197>>2]|0;
 $200 = (($199) + ($198<<3)|0);
 $201 = ((($v1)) + 8|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2IffLS1_0EEERKNS_5tvec2IT_XT1_EEERKT0_($n11,$200,$201);
 $202 = +HEAPF32[$n11>>2];
 $203 = -$202;
 HEAPF32[$163>>2] = $203;
 $204 = ((($n11)) + 4|0);
 $205 = +HEAPF32[$204>>2];
 $206 = -$205;
 HEAPF32[$164>>2] = $206;
 $207 = ((($v1)) + 8|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($n12,$163,$164,$207);
 $208 = $159;
 $209 = $158;
 $210 = ((($209)) + 4|0);
 $211 = HEAP32[$210>>2]|0;
 $125 = $208;
 $126 = $211;
 $212 = $125;
 $213 = $126;
 $214 = HEAP32[$212>>2]|0;
 $215 = (($214) + ($213<<3)|0);
 $216 = ((($v2)) + 8|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2IffLS1_0EEERKNS_5tvec2IT_XT1_EEERKT0_($n21,$215,$216);
 $217 = +HEAPF32[$n21>>2];
 $218 = -$217;
 HEAPF32[$165>>2] = $218;
 $219 = ((($n21)) + 4|0);
 $220 = +HEAPF32[$219>>2];
 $221 = -$220;
 HEAPF32[$166>>2] = $221;
 $222 = ((($v2)) + 8|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($n22,$165,$166,$222);
 $223 = $162;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($168,$v1,$161);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($167,$168,$n11);
 $123 = $223;
 $124 = $167;
 $224 = $123;
 $225 = ((($224)) + 4|0);
 $226 = HEAP32[$225>>2]|0;
 $122 = $224;
 $227 = $122;
 $228 = ((($227)) + 8|0);
 $121 = $228;
 $229 = $121;
 $120 = $229;
 $230 = $120;
 $231 = HEAP32[$230>>2]|0;
 $232 = ($226>>>0)<($231>>>0);
 if ($232) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i1,$224,1);
  $119 = $224;
  $233 = $119;
  $234 = ((($233)) + 8|0);
  $118 = $234;
  $235 = $118;
  $117 = $235;
  $236 = $117;
  $237 = ((($224)) + 4|0);
  $238 = HEAP32[$237>>2]|0;
  $115 = $238;
  $239 = $115;
  $240 = $124;
  $100 = $240;
  $241 = $100;
  $111 = $236;
  $112 = $239;
  $113 = $241;
  $242 = $111;
  $243 = $112;
  $244 = $113;
  $110 = $244;
  $245 = $110;
  ;HEAP8[$109>>0]=HEAP8[$114>>0]|0;
  $106 = $242;
  $107 = $243;
  $108 = $245;
  $246 = $106;
  $247 = $107;
  $248 = $108;
  $105 = $248;
  $249 = $105;
  $102 = $246;
  $103 = $247;
  $104 = $249;
  $250 = $103;
  $251 = $104;
  $101 = $251;
  $252 = $101;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($250,$252);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i1);
  $253 = ((($224)) + 4|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = ((($254)) + 12|0);
  HEAP32[$253>>2] = $255;
 } else {
  $256 = $124;
  $116 = $256;
  $257 = $116;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($224,$257);
 }
 $258 = $162;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($170,$v2,$161);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($169,$170,$n21);
 $98 = $258;
 $99 = $169;
 $259 = $98;
 $260 = ((($259)) + 4|0);
 $261 = HEAP32[$260>>2]|0;
 $97 = $259;
 $262 = $97;
 $263 = ((($262)) + 8|0);
 $96 = $263;
 $264 = $96;
 $95 = $264;
 $265 = $95;
 $266 = HEAP32[$265>>2]|0;
 $267 = ($261>>>0)<($266>>>0);
 if ($267) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i3,$259,1);
  $94 = $259;
  $268 = $94;
  $269 = ((($268)) + 8|0);
  $93 = $269;
  $270 = $93;
  $92 = $270;
  $271 = $92;
  $272 = ((($259)) + 4|0);
  $273 = HEAP32[$272>>2]|0;
  $90 = $273;
  $274 = $90;
  $275 = $99;
  $75 = $275;
  $276 = $75;
  $86 = $271;
  $87 = $274;
  $88 = $276;
  $277 = $86;
  $278 = $87;
  $279 = $88;
  $85 = $279;
  $280 = $85;
  ;HEAP8[$84>>0]=HEAP8[$89>>0]|0;
  $81 = $277;
  $82 = $278;
  $83 = $280;
  $281 = $81;
  $282 = $82;
  $283 = $83;
  $80 = $283;
  $284 = $80;
  $77 = $281;
  $78 = $282;
  $79 = $284;
  $285 = $78;
  $286 = $79;
  $76 = $286;
  $287 = $76;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($285,$287);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i3);
  $288 = ((($259)) + 4|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = ((($289)) + 12|0);
  HEAP32[$288>>2] = $290;
 } else {
  $291 = $99;
  $91 = $291;
  $292 = $91;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($259,$292);
 }
 $293 = $162;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($172,$v2,$161);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($171,$172,$n22);
 $73 = $293;
 $74 = $171;
 $294 = $73;
 $295 = ((($294)) + 4|0);
 $296 = HEAP32[$295>>2]|0;
 $72 = $294;
 $297 = $72;
 $298 = ((($297)) + 8|0);
 $71 = $298;
 $299 = $71;
 $70 = $299;
 $300 = $70;
 $301 = HEAP32[$300>>2]|0;
 $302 = ($296>>>0)<($301>>>0);
 if ($302) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i5,$294,1);
  $69 = $294;
  $303 = $69;
  $304 = ((($303)) + 8|0);
  $68 = $304;
  $305 = $68;
  $67 = $305;
  $306 = $67;
  $307 = ((($294)) + 4|0);
  $308 = HEAP32[$307>>2]|0;
  $65 = $308;
  $309 = $65;
  $310 = $74;
  $50 = $310;
  $311 = $50;
  $61 = $306;
  $62 = $309;
  $63 = $311;
  $312 = $61;
  $313 = $62;
  $314 = $63;
  $60 = $314;
  $315 = $60;
  ;HEAP8[$59>>0]=HEAP8[$64>>0]|0;
  $56 = $312;
  $57 = $313;
  $58 = $315;
  $316 = $56;
  $317 = $57;
  $318 = $58;
  $55 = $318;
  $319 = $55;
  $52 = $316;
  $53 = $317;
  $54 = $319;
  $320 = $53;
  $321 = $54;
  $51 = $321;
  $322 = $51;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($320,$322);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i5);
  $323 = ((($294)) + 4|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = ((($324)) + 12|0);
  HEAP32[$323>>2] = $325;
 } else {
  $326 = $74;
  $66 = $326;
  $327 = $66;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($294,$327);
 }
 $328 = $162;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($174,$v1,$161);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($173,$174,$n11);
 $48 = $328;
 $49 = $173;
 $329 = $48;
 $330 = ((($329)) + 4|0);
 $331 = HEAP32[$330>>2]|0;
 $47 = $329;
 $332 = $47;
 $333 = ((($332)) + 8|0);
 $46 = $333;
 $334 = $46;
 $45 = $334;
 $335 = $45;
 $336 = HEAP32[$335>>2]|0;
 $337 = ($331>>>0)<($336>>>0);
 if ($337) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i7,$329,1);
  $44 = $329;
  $338 = $44;
  $339 = ((($338)) + 8|0);
  $43 = $339;
  $340 = $43;
  $42 = $340;
  $341 = $42;
  $342 = ((($329)) + 4|0);
  $343 = HEAP32[$342>>2]|0;
  $40 = $343;
  $344 = $40;
  $345 = $49;
  $25 = $345;
  $346 = $25;
  $36 = $341;
  $37 = $344;
  $38 = $346;
  $347 = $36;
  $348 = $37;
  $349 = $38;
  $35 = $349;
  $350 = $35;
  ;HEAP8[$34>>0]=HEAP8[$39>>0]|0;
  $31 = $347;
  $32 = $348;
  $33 = $350;
  $351 = $31;
  $352 = $32;
  $353 = $33;
  $30 = $353;
  $354 = $30;
  $27 = $351;
  $28 = $352;
  $29 = $354;
  $355 = $28;
  $356 = $29;
  $26 = $356;
  $357 = $26;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($355,$357);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i7);
  $358 = ((($329)) + 4|0);
  $359 = HEAP32[$358>>2]|0;
  $360 = ((($359)) + 12|0);
  HEAP32[$358>>2] = $360;
 } else {
  $361 = $49;
  $41 = $361;
  $362 = $41;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($329,$362);
 }
 $363 = $162;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($176,$v2,$161);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($175,$176,$n22);
 $23 = $363;
 $24 = $175;
 $364 = $23;
 $365 = ((($364)) + 4|0);
 $366 = HEAP32[$365>>2]|0;
 $22 = $364;
 $367 = $22;
 $368 = ((($367)) + 8|0);
 $21 = $368;
 $369 = $21;
 $20 = $369;
 $370 = $20;
 $371 = HEAP32[$370>>2]|0;
 $372 = ($366>>>0)<($371>>>0);
 if ($372) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i9,$364,1);
  $19 = $364;
  $373 = $19;
  $374 = ((($373)) + 8|0);
  $18 = $374;
  $375 = $18;
  $17 = $375;
  $376 = $17;
  $377 = ((($364)) + 4|0);
  $378 = HEAP32[$377>>2]|0;
  $15 = $378;
  $379 = $15;
  $380 = $24;
  $0 = $380;
  $381 = $0;
  $11 = $376;
  $12 = $379;
  $13 = $381;
  $382 = $11;
  $383 = $12;
  $384 = $13;
  $10 = $384;
  $385 = $10;
  ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
  $6 = $382;
  $7 = $383;
  $8 = $385;
  $386 = $6;
  $387 = $7;
  $388 = $8;
  $5 = $388;
  $389 = $5;
  $2 = $386;
  $3 = $387;
  $4 = $389;
  $390 = $3;
  $391 = $4;
  $1 = $391;
  $392 = $1;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($390,$392);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i9);
  $393 = ((($364)) + 4|0);
  $394 = HEAP32[$393>>2]|0;
  $395 = ((($394)) + 12|0);
  HEAP32[$393>>2] = $395;
 } else {
  $396 = $24;
  $16 = $396;
  $397 = $16;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($364,$397);
 }
 $398 = $162;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($178,$v1,$161);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($177,$178,$n12);
 $154 = $398;
 $155 = $177;
 $399 = $154;
 $400 = ((($399)) + 4|0);
 $401 = HEAP32[$400>>2]|0;
 $153 = $399;
 $402 = $153;
 $403 = ((($402)) + 8|0);
 $152 = $403;
 $404 = $152;
 $151 = $404;
 $405 = $151;
 $406 = HEAP32[$405>>2]|0;
 $407 = ($401>>>0)<($406>>>0);
 if ($407) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i,$399,1);
  $150 = $399;
  $408 = $150;
  $409 = ((($408)) + 8|0);
  $149 = $409;
  $410 = $149;
  $148 = $410;
  $411 = $148;
  $412 = ((($399)) + 4|0);
  $413 = HEAP32[$412>>2]|0;
  $146 = $413;
  $414 = $146;
  $415 = $155;
  $131 = $415;
  $416 = $131;
  $142 = $411;
  $143 = $414;
  $144 = $416;
  $417 = $142;
  $418 = $143;
  $419 = $144;
  $141 = $419;
  $420 = $141;
  ;HEAP8[$140>>0]=HEAP8[$145>>0]|0;
  $137 = $417;
  $138 = $418;
  $139 = $420;
  $421 = $137;
  $422 = $138;
  $423 = $139;
  $136 = $423;
  $424 = $136;
  $133 = $421;
  $134 = $422;
  $135 = $424;
  $425 = $134;
  $426 = $135;
  $132 = $426;
  $427 = $132;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($425,$427);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $428 = ((($399)) + 4|0);
  $429 = HEAP32[$428>>2]|0;
  $430 = ((($429)) + 12|0);
  HEAP32[$428>>2] = $430;
  STACKTOP = sp;return;
 } else {
  $431 = $155;
  $147 = $431;
  $432 = $147;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($399,$432);
  STACKTOP = sp;return;
 }
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = ((($2)) + 4|0);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$5>>2] = $8;
 $9 = ((($2)) + 8|0);
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 HEAPF32[$9>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEC2IffLS1_0EEERKNS_5tvec2IT_XT1_EEERKT0_($this,$a,$b) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 HEAPF32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 HEAPF32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = $2;
 $12 = +HEAPF32[$11>>2];
 HEAPF32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($this,$a,$b,$c) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $0;
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 HEAPF32[$4>>2] = $6;
 $7 = ((($4)) + 4|0);
 $8 = $2;
 $9 = +HEAPF32[$8>>2];
 HEAPF32[$7>>2] = $9;
 $10 = ((($4)) + 8|0);
 $11 = $3;
 $12 = +HEAPF32[$11>>2];
 HEAPF32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $v1;
 $1 = $v2;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 + $8;
 HEAPF32[$2>>2] = $9;
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $12 + $15;
 HEAPF32[$3>>2] = $16;
 $17 = $0;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $19 + $22;
 HEAPF32[$4>>2] = $23;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($agg$result,$v,$s) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $v;
 $1 = $s;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 HEAPF32[$2>>2] = $9;
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = +HEAPF32[$13>>2];
 $15 = $12 * $14;
 HEAPF32[$3>>2] = $15;
 $16 = $0;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = +HEAPF32[$19>>2];
 $21 = $18 * $20;
 HEAPF32[$4>>2] = $21;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZN5Asset11ReconstructERN10MeshLoader4MeshEff($agg$result,$mesh,$scale,$lineWidth) {
 $agg$result = $agg$result|0;
 $mesh = $mesh|0;
 $scale = +$scale;
 $lineWidth = +$lineWidth;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i12 = 0, $__annotator$i15 = 0, $__annotator$i4 = 0, $__annotator$i6 = 0, $__annotator$i9 = 0, $__begin = 0, $__end = 0, $__range = 0, $count = 0, $end = 0, $end2 = 0, $l = 0, $layer = 0, $layerInfo = 0, $layers = 0;
 var $line = 0, $p = 0, $poly = 0, $section = 0, $section1 = 0, $start = 0, $vertexNormals = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 1080|0;
 $6 = sp + 1068|0;
 $19 = sp + 40|0;
 $24 = sp + 1107|0;
 $__annotator$i15 = sp + 1106|0;
 $47 = sp + 32|0;
 $52 = sp + 1105|0;
 $__annotator$i12 = sp + 1104|0;
 $72 = sp + 24|0;
 $77 = sp + 1103|0;
 $__annotator$i9 = sp + 1102|0;
 $99 = sp + 16|0;
 $104 = sp + 1101|0;
 $__annotator$i6 = sp + 1100|0;
 $126 = sp + 8|0;
 $131 = sp + 1099|0;
 $__annotator$i4 = sp + 1098|0;
 $157 = sp;
 $162 = sp + 1097|0;
 $__annotator$i = sp + 1096|0;
 $176 = sp + 436|0;
 $179 = sp + 424|0;
 $186 = sp + 396|0;
 $189 = sp + 384|0;
 $196 = sp + 356|0;
 $199 = sp + 344|0;
 $204 = sp + 324|0;
 $vertices = sp + 308|0;
 $layers = sp + 288|0;
 $vertexNormals = sp + 276|0;
 $__begin = sp + 256|0;
 $__end = sp + 248|0;
 $208 = sp + 200|0;
 $209 = sp + 184|0;
 $210 = sp + 152|0;
 $211 = sp + 140|0;
 $212 = sp + 128|0;
 $213 = sp + 108|0;
 $214 = sp + 104|0;
 $215 = sp + 100|0;
 $216 = sp + 96|0;
 $217 = sp + 60|0;
 $218 = sp + 56|0;
 $219 = sp + 52|0;
 $220 = sp + 48|0;
 $203 = $mesh;
 HEAPF32[$204>>2] = $scale;
 $205 = $lineWidth;
 $202 = $vertices;
 $222 = $202;
 $201 = $222;
 $223 = $201;
 $200 = $223;
 HEAP32[$223>>2] = 0;
 $224 = ((($223)) + 4|0);
 HEAP32[$224>>2] = 0;
 $225 = ((($223)) + 8|0);
 $198 = $225;
 HEAP32[$199>>2] = 0;
 $226 = $198;
 $197 = $199;
 $227 = $197;
 $228 = HEAP32[$227>>2]|0;
 $195 = $226;
 HEAP32[$196>>2] = $228;
 $229 = $195;
 $194 = $229;
 $193 = $196;
 $230 = $193;
 $231 = HEAP32[$230>>2]|0;
 HEAP32[$229>>2] = $231;
 $192 = $layers;
 $232 = $192;
 $191 = $232;
 $233 = $191;
 $190 = $233;
 HEAP32[$233>>2] = 0;
 $234 = ((($233)) + 4|0);
 HEAP32[$234>>2] = 0;
 $235 = ((($233)) + 8|0);
 $188 = $235;
 HEAP32[$189>>2] = 0;
 $236 = $188;
 $187 = $189;
 $237 = $187;
 $238 = HEAP32[$237>>2]|0;
 $185 = $236;
 HEAP32[$186>>2] = $238;
 $239 = $185;
 $184 = $239;
 $183 = $186;
 $240 = $183;
 $241 = HEAP32[$240>>2]|0;
 HEAP32[$239>>2] = $241;
 $242 = $203;
 $243 = ((($242)) + 24|0);
 $244 = $203;
 $245 = ((($244)) + 48|0);
 $246 = $205;
 __THREW__ = 0;
 invoke_viiid(403,($vertexNormals|0),($243|0),($245|0),(+$246));
 $247 = __THREW__; __THREW__ = 0;
 $248 = $247&1;
 if ($248) {
  $520 = ___cxa_find_matching_catch()|0;
  $521 = tempRet0;
  $206 = $520;
  $207 = $521;
  __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEED2Ev($layers);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertices);
  $782 = $206;
  $783 = $207;
  ___resumeException($782|0);
  // unreachable;
 }
 $249 = $203;
 $250 = ((($249)) + 60|0);
 $251 = (__ZNK3gsl4spanI6Layer2Lin1EJEE4sizeEv($250)|0);
 __THREW__ = 0;
 invoke_vii(404,($layers|0),($251|0));
 $252 = __THREW__; __THREW__ = 0;
 $253 = $252&1;
 L5: do {
  if ($253) {
   label = 29;
  } else {
   $254 = $203;
   $255 = ((($254)) + 60|0);
   $__range = $255;
   $256 = $__range;
   __ZNK3gsl4spanI6Layer2Lin1EJEE5beginEv($__begin,$256);
   $257 = $__range;
   __ZNK3gsl4spanI6Layer2Lin1EJEE3endEv($__end,$257);
   while(1) {
    $258 = (__ZNK3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEneERKS4_($__begin,$__end)|0);
    if (!($258)) {
     break;
    }
    $259 = (__ZNK3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEdeEv($__begin)|0);
    $layer = $259;
    $260 = $layer;
    $261 = ((($260)) + 4|0);
    $262 = $layer;
    $263 = ((($262)) + 4|0);
    $264 = ((($263)) + 4|0);
    $265 = $layer;
    $266 = ((($265)) + 4|0);
    $267 = ((($266)) + 8|0);
    __THREW__ = 0;
    invoke_viiii(405,($209|0),($261|0),($264|0),($267|0));
    $268 = __THREW__; __THREW__ = 0;
    $269 = $268&1;
    if ($269) {
     label = 29;
     break L5;
    }
    __THREW__ = 0;
    invoke_viii(406,($208|0),($209|0),($204|0));
    $270 = __THREW__; __THREW__ = 0;
    $271 = $270&1;
    if ($271) {
     label = 29;
     break L5;
    }
    $272 = ((($208)) + 12|0);
    $182 = $272;
    $273 = $182;
    $181 = $273;
    $274 = $181;
    $180 = $274;
    HEAP32[$274>>2] = 0;
    $275 = ((($274)) + 4|0);
    HEAP32[$275>>2] = 0;
    $276 = ((($274)) + 8|0);
    $178 = $276;
    HEAP32[$179>>2] = 0;
    $277 = $178;
    $177 = $179;
    $278 = $177;
    $279 = HEAP32[$278>>2]|0;
    $175 = $277;
    HEAP32[$176>>2] = $279;
    $280 = $175;
    $174 = $280;
    $173 = $176;
    $281 = $173;
    $282 = HEAP32[$281>>2]|0;
    HEAP32[$280>>2] = $282;
    $283 = ((($208)) + 24|0);
    HEAPF32[$283>>2] = 0.0;
    $284 = ((($283)) + 4|0);
    HEAPF32[$284>>2] = 0.0;
    $285 = ((($283)) + 8|0);
    HEAPF32[$285>>2] = 0.0;
    $286 = ((($283)) + 12|0);
    HEAPF32[$286>>2] = 0.0;
    $171 = $layers;
    $172 = $208;
    $287 = $171;
    $288 = ((($287)) + 4|0);
    $289 = HEAP32[$288>>2]|0;
    $170 = $287;
    $290 = $170;
    $291 = ((($290)) + 8|0);
    $169 = $291;
    $292 = $169;
    $168 = $292;
    $293 = $168;
    $294 = HEAP32[$293>>2]|0;
    $295 = ($289>>>0)<($294>>>0);
    if ($295) {
     __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i,$287,1);
     $167 = $287;
     $296 = $167;
     $297 = ((($296)) + 8|0);
     $166 = $297;
     $298 = $166;
     $165 = $298;
     $299 = $165;
     $300 = ((($287)) + 4|0);
     $301 = HEAP32[$300>>2]|0;
     $163 = $301;
     $302 = $163;
     $303 = $172;
     $148 = $303;
     $304 = $148;
     $159 = $299;
     $160 = $302;
     $161 = $304;
     $305 = $159;
     $306 = $160;
     $307 = $161;
     $158 = $307;
     $308 = $158;
     ;HEAP8[$157>>0]=HEAP8[$162>>0]|0;
     $154 = $305;
     $155 = $306;
     $156 = $308;
     $309 = $154;
     $310 = $155;
     $311 = $156;
     $153 = $311;
     $312 = $153;
     $150 = $309;
     $151 = $310;
     $152 = $312;
     $313 = $151;
     $314 = $152;
     $149 = $314;
     $315 = $149;
     __THREW__ = 0;
     invoke_vii(407,($313|0),($315|0));
     $316 = __THREW__; __THREW__ = 0;
     $317 = $316&1;
     if ($317) {
      label = 30;
      break;
     }
     __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
     $318 = ((($287)) + 4|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = ((($319)) + 40|0);
     HEAP32[$318>>2] = $320;
    } else {
     $321 = $172;
     $164 = $321;
     $322 = $164;
     __THREW__ = 0;
     invoke_vii(408,($287|0),($322|0));
     $323 = __THREW__; __THREW__ = 0;
     $324 = $323&1;
     if ($324) {
      label = 30;
      break;
     }
    }
    __ZN5Asset5LayerD2Ev($208);
    $147 = $layers;
    $325 = $147;
    $326 = ((($325)) + 4|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = ((($327)) + -40|0);
    $layerInfo = $328;
    $section = 0;
    while(1) {
     $329 = $section;
     $330 = $layer;
     $331 = ((($330)) + 16|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = ($329>>>0)<($332>>>0);
     if (!($333)) {
      break;
     }
     $334 = $section;
     $335 = $layer;
     $336 = ((($335)) + 16|0);
     $337 = ((($336)) + 8|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = (($338) + ($334<<4)|0);
     $340 = ((($339)) + 8|0);
     $341 = HEAP32[$340>>2]|0;
     $342 = $section;
     $343 = $layer;
     $344 = ((($343)) + 16|0);
     $345 = ((($344)) + 8|0);
     $346 = HEAP32[$345>>2]|0;
     $347 = (($346) + ($342<<4)|0);
     $348 = ((($347)) + 12|0);
     $349 = HEAP32[$348>>2]|0;
     $350 = (($341) + ($349))|0;
     $end = $350;
     $146 = $vertices;
     $351 = $146;
     $352 = ((($351)) + 4|0);
     $353 = HEAP32[$352>>2]|0;
     $354 = HEAP32[$351>>2]|0;
     $355 = $353;
     $356 = $354;
     $357 = (($355) - ($356))|0;
     $358 = (($357|0) / 12)&-1;
     $start = $358;
     $count = 0;
     $359 = $section;
     $360 = $layer;
     $361 = ((($360)) + 16|0);
     $362 = ((($361)) + 8|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = (($363) + ($359<<4)|0);
     $365 = ((($364)) + 8|0);
     $366 = HEAP32[$365>>2]|0;
     $poly = $366;
     while(1) {
      $367 = $poly;
      $368 = $end;
      $369 = ($367>>>0)<($368>>>0);
      if (!($369)) {
       break;
      }
      $370 = $203;
      $371 = $poly;
      $144 = $370;
      $145 = $371;
      $372 = $144;
      $373 = $145;
      $374 = HEAP32[$372>>2]|0;
      $375 = (($374) + (($373*12)|0)|0);
      $p = $375;
      $376 = $203;
      $377 = ((($376)) + 24|0);
      $378 = $p;
      $379 = HEAP32[$378>>2]|0;
      $142 = $377;
      $143 = $379;
      $380 = $142;
      $381 = $143;
      $382 = HEAP32[$380>>2]|0;
      $383 = (($382) + (($381*12)|0)|0);
      __THREW__ = 0;
      invoke_viii(406,($210|0),($383|0),($204|0));
      $384 = __THREW__; __THREW__ = 0;
      $385 = $384&1;
      if ($385) {
       label = 29;
       break L5;
      }
      $140 = $vertices;
      $141 = $210;
      $386 = $140;
      $387 = ((($386)) + 4|0);
      $388 = HEAP32[$387>>2]|0;
      $139 = $386;
      $389 = $139;
      $390 = ((($389)) + 8|0);
      $138 = $390;
      $391 = $138;
      $137 = $391;
      $392 = $137;
      $393 = HEAP32[$392>>2]|0;
      $394 = ($388>>>0)<($393>>>0);
      if ($394) {
       __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i4,$386,1);
       $136 = $386;
       $395 = $136;
       $396 = ((($395)) + 8|0);
       $135 = $396;
       $397 = $135;
       $134 = $397;
       $398 = $134;
       $399 = ((($386)) + 4|0);
       $400 = HEAP32[$399>>2]|0;
       $132 = $400;
       $401 = $132;
       $402 = $141;
       $117 = $402;
       $403 = $117;
       $128 = $398;
       $129 = $401;
       $130 = $403;
       $404 = $128;
       $405 = $129;
       $406 = $130;
       $127 = $406;
       $407 = $127;
       ;HEAP8[$126>>0]=HEAP8[$131>>0]|0;
       $123 = $404;
       $124 = $405;
       $125 = $407;
       $408 = $123;
       $409 = $124;
       $410 = $125;
       $122 = $410;
       $411 = $122;
       $119 = $408;
       $120 = $409;
       $121 = $411;
       $412 = $120;
       $413 = $121;
       $118 = $413;
       $414 = $118;
       __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($412,$414);
       __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i4);
       $415 = ((($386)) + 4|0);
       $416 = HEAP32[$415>>2]|0;
       $417 = ((($416)) + 12|0);
       HEAP32[$415>>2] = $417;
      } else {
       $418 = $141;
       $133 = $418;
       $419 = $133;
       __THREW__ = 0;
       invoke_vii(409,($386|0),($419|0));
       $420 = __THREW__; __THREW__ = 0;
       $421 = $420&1;
       if ($421) {
        label = 29;
        break L5;
       }
      }
      $422 = $203;
      $423 = ((($422)) + 24|0);
      $424 = $p;
      $425 = ((($424)) + 8|0);
      $426 = HEAP32[$425>>2]|0;
      $115 = $423;
      $116 = $426;
      $427 = $115;
      $428 = $116;
      $429 = HEAP32[$427>>2]|0;
      $430 = (($429) + (($428*12)|0)|0);
      __THREW__ = 0;
      invoke_viii(406,($211|0),($430|0),($204|0));
      $431 = __THREW__; __THREW__ = 0;
      $432 = $431&1;
      if ($432) {
       label = 29;
       break L5;
      }
      $113 = $vertices;
      $114 = $211;
      $433 = $113;
      $434 = ((($433)) + 4|0);
      $435 = HEAP32[$434>>2]|0;
      $112 = $433;
      $436 = $112;
      $437 = ((($436)) + 8|0);
      $111 = $437;
      $438 = $111;
      $110 = $438;
      $439 = $110;
      $440 = HEAP32[$439>>2]|0;
      $441 = ($435>>>0)<($440>>>0);
      if ($441) {
       __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i6,$433,1);
       $109 = $433;
       $442 = $109;
       $443 = ((($442)) + 8|0);
       $108 = $443;
       $444 = $108;
       $107 = $444;
       $445 = $107;
       $446 = ((($433)) + 4|0);
       $447 = HEAP32[$446>>2]|0;
       $105 = $447;
       $448 = $105;
       $449 = $114;
       $90 = $449;
       $450 = $90;
       $101 = $445;
       $102 = $448;
       $103 = $450;
       $451 = $101;
       $452 = $102;
       $453 = $103;
       $100 = $453;
       $454 = $100;
       ;HEAP8[$99>>0]=HEAP8[$104>>0]|0;
       $96 = $451;
       $97 = $452;
       $98 = $454;
       $455 = $96;
       $456 = $97;
       $457 = $98;
       $95 = $457;
       $458 = $95;
       $92 = $455;
       $93 = $456;
       $94 = $458;
       $459 = $93;
       $460 = $94;
       $91 = $460;
       $461 = $91;
       __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($459,$461);
       __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i6);
       $462 = ((($433)) + 4|0);
       $463 = HEAP32[$462>>2]|0;
       $464 = ((($463)) + 12|0);
       HEAP32[$462>>2] = $464;
      } else {
       $465 = $114;
       $106 = $465;
       $466 = $106;
       __THREW__ = 0;
       invoke_vii(409,($433|0),($466|0));
       $467 = __THREW__; __THREW__ = 0;
       $468 = $467&1;
       if ($468) {
        label = 29;
        break L5;
       }
      }
      $469 = $203;
      $470 = ((($469)) + 24|0);
      $471 = $p;
      $472 = ((($471)) + 4|0);
      $473 = HEAP32[$472>>2]|0;
      $88 = $470;
      $89 = $473;
      $474 = $88;
      $475 = $89;
      $476 = HEAP32[$474>>2]|0;
      $477 = (($476) + (($475*12)|0)|0);
      __THREW__ = 0;
      invoke_viii(406,($212|0),($477|0),($204|0));
      $478 = __THREW__; __THREW__ = 0;
      $479 = $478&1;
      if ($479) {
       label = 29;
       break L5;
      }
      $86 = $vertices;
      $87 = $212;
      $480 = $86;
      $481 = ((($480)) + 4|0);
      $482 = HEAP32[$481>>2]|0;
      $85 = $480;
      $483 = $85;
      $484 = ((($483)) + 8|0);
      $84 = $484;
      $485 = $84;
      $83 = $485;
      $486 = $83;
      $487 = HEAP32[$486>>2]|0;
      $488 = ($482>>>0)<($487>>>0);
      if ($488) {
       __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i9,$480,1);
       $82 = $480;
       $489 = $82;
       $490 = ((($489)) + 8|0);
       $81 = $490;
       $491 = $81;
       $80 = $491;
       $492 = $80;
       $493 = ((($480)) + 4|0);
       $494 = HEAP32[$493>>2]|0;
       $78 = $494;
       $495 = $78;
       $496 = $87;
       $63 = $496;
       $497 = $63;
       $74 = $492;
       $75 = $495;
       $76 = $497;
       $498 = $74;
       $499 = $75;
       $500 = $76;
       $73 = $500;
       $501 = $73;
       ;HEAP8[$72>>0]=HEAP8[$77>>0]|0;
       $69 = $498;
       $70 = $499;
       $71 = $501;
       $502 = $69;
       $503 = $70;
       $504 = $71;
       $68 = $504;
       $505 = $68;
       $65 = $502;
       $66 = $503;
       $67 = $505;
       $506 = $66;
       $507 = $67;
       $64 = $507;
       $508 = $64;
       __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($506,$508);
       __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i9);
       $509 = ((($480)) + 4|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = ((($510)) + 12|0);
       HEAP32[$509>>2] = $511;
      } else {
       $512 = $87;
       $79 = $512;
       $513 = $79;
       __THREW__ = 0;
       invoke_vii(409,($480|0),($513|0));
       $514 = __THREW__; __THREW__ = 0;
       $515 = $514&1;
       if ($515) {
        label = 29;
        break L5;
       }
      }
      $516 = $count;
      $517 = (($516) + 3)|0;
      $count = $517;
      $518 = $poly;
      $519 = (($518) + 1)|0;
      $poly = $519;
     }
     $526 = $count;
     $527 = ($526|0)!=(0);
     do {
      if ($527) {
       $528 = $layerInfo;
       $529 = ((($528)) + 12|0);
       $530 = $start;
       HEAP32[$213>>2] = $530;
       $531 = ((($213)) + 4|0);
       $532 = $count;
       HEAP32[$531>>2] = $532;
       $533 = ((($213)) + 8|0);
       $534 = $203;
       $535 = ((($534)) + 68|0);
       $536 = $section;
       $537 = $layer;
       $538 = ((($537)) + 16|0);
       $539 = ((($538)) + 8|0);
       $540 = HEAP32[$539>>2]|0;
       $541 = (($540) + ($536<<4)|0);
       $542 = ((($541)) + 4|0);
       $543 = HEAP32[$542>>2]|0;
       __ZN3gsl5indexILj1EEC2IJjEvEEDpT_($214,$543);
       $544 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($535,$214)|0);
       $545 = ((($544)) + 4|0);
       $546 = $203;
       $547 = ((($546)) + 68|0);
       $548 = $section;
       $549 = $layer;
       $550 = ((($549)) + 16|0);
       $551 = ((($550)) + 8|0);
       $552 = HEAP32[$551>>2]|0;
       $553 = (($552) + ($548<<4)|0);
       $554 = ((($553)) + 4|0);
       $555 = HEAP32[$554>>2]|0;
       __ZN3gsl5indexILj1EEC2IJjEvEEDpT_($215,$555);
       $556 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($547,$215)|0);
       $557 = ((($556)) + 4|0);
       $558 = ((($557)) + 4|0);
       $559 = $203;
       $560 = ((($559)) + 68|0);
       $561 = $section;
       $562 = $layer;
       $563 = ((($562)) + 16|0);
       $564 = ((($563)) + 8|0);
       $565 = HEAP32[$564>>2]|0;
       $566 = (($565) + ($561<<4)|0);
       $567 = ((($566)) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       __ZN3gsl5indexILj1EEC2IJjEvEEDpT_($216,$568);
       $569 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($560,$216)|0);
       $570 = ((($569)) + 4|0);
       $571 = ((($570)) + 8|0);
       __THREW__ = 0;
       invoke_viiii(405,($533|0),($545|0),($558|0),($571|0));
       $572 = __THREW__; __THREW__ = 0;
       $573 = $572&1;
       if ($573) {
        label = 29;
        break L5;
       }
       $61 = $529;
       $62 = $213;
       $574 = $61;
       $575 = ((($574)) + 4|0);
       $576 = HEAP32[$575>>2]|0;
       $60 = $574;
       $577 = $60;
       $578 = ((($577)) + 8|0);
       $59 = $578;
       $579 = $59;
       $58 = $579;
       $580 = $58;
       $581 = HEAP32[$580>>2]|0;
       $582 = ($576>>>0)<($581>>>0);
       if (!($582)) {
        $608 = $62;
        $54 = $608;
        $609 = $54;
        __THREW__ = 0;
        invoke_vii(411,($574|0),($609|0));
        $610 = __THREW__; __THREW__ = 0;
        $611 = $610&1;
        if ($611) {
         label = 29;
         break L5;
        } else {
         break;
        }
       }
       __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i12,$574,1);
       $57 = $574;
       $583 = $57;
       $584 = ((($583)) + 8|0);
       $56 = $584;
       $585 = $56;
       $55 = $585;
       $586 = $55;
       $587 = ((($574)) + 4|0);
       $588 = HEAP32[$587>>2]|0;
       $53 = $588;
       $589 = $53;
       $590 = $62;
       $38 = $590;
       $591 = $38;
       $49 = $586;
       $50 = $589;
       $51 = $591;
       $592 = $49;
       $593 = $50;
       $594 = $51;
       $48 = $594;
       $595 = $48;
       ;HEAP8[$47>>0]=HEAP8[$52>>0]|0;
       $44 = $592;
       $45 = $593;
       $46 = $595;
       $596 = $44;
       $597 = $45;
       $598 = $46;
       $43 = $598;
       $599 = $43;
       $40 = $596;
       $41 = $597;
       $42 = $599;
       $600 = $41;
       $601 = $42;
       $39 = $601;
       $602 = $39;
       __THREW__ = 0;
       invoke_vii(410,($600|0),($602|0));
       $603 = __THREW__; __THREW__ = 0;
       $604 = $603&1;
       if ($604) {
        label = 29;
        break L5;
       }
       __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i12);
       $605 = ((($574)) + 4|0);
       $606 = HEAP32[$605>>2]|0;
       $607 = ((($606)) + 20|0);
       HEAP32[$605>>2] = $607;
      }
     } while(0);
     $612 = $section;
     $613 = (($612) + 1)|0;
     $section = $613;
    }
    $section1 = 0;
    while(1) {
     $614 = $section1;
     $615 = $layer;
     $616 = ((($615)) + 32|0);
     $617 = HEAP32[$616>>2]|0;
     $618 = ($614>>>0)<($617>>>0);
     if (!($618)) {
      break;
     }
     $619 = $section1;
     $620 = $layer;
     $621 = ((($620)) + 32|0);
     $622 = ((($621)) + 8|0);
     $623 = HEAP32[$622>>2]|0;
     $624 = (($623) + ($619<<4)|0);
     $625 = ((($624)) + 8|0);
     $626 = HEAP32[$625>>2]|0;
     $627 = $section1;
     $628 = $layer;
     $629 = ((($628)) + 32|0);
     $630 = ((($629)) + 8|0);
     $631 = HEAP32[$630>>2]|0;
     $632 = (($631) + ($627<<4)|0);
     $633 = ((($632)) + 12|0);
     $634 = HEAP32[$633>>2]|0;
     $635 = (($626) + ($634))|0;
     $end2 = $635;
     $37 = $vertices;
     $636 = $37;
     $637 = ((($636)) + 4|0);
     $638 = HEAP32[$637>>2]|0;
     $639 = HEAP32[$636>>2]|0;
     $640 = $638;
     $641 = $639;
     $642 = (($640) - ($641))|0;
     $643 = (($642|0) / 12)&-1;
     $start = $643;
     $count = 0;
     $644 = $section1;
     $645 = $layer;
     $646 = ((($645)) + 32|0);
     $647 = ((($646)) + 8|0);
     $648 = HEAP32[$647>>2]|0;
     $649 = (($648) + ($644<<4)|0);
     $650 = ((($649)) + 8|0);
     $651 = HEAP32[$650>>2]|0;
     $line = $651;
     while(1) {
      $652 = $line;
      $653 = $end2;
      $654 = ($652>>>0)<($653>>>0);
      if (!($654)) {
       break;
      }
      $655 = $203;
      $656 = ((($655)) + 48|0);
      $657 = $line;
      $35 = $656;
      $36 = $657;
      $658 = $35;
      $659 = $36;
      $660 = HEAP32[$658>>2]|0;
      $661 = (($660) + ($659<<3)|0);
      $l = $661;
      $662 = $l;
      $663 = $203;
      $664 = ((($663)) + 24|0);
      $665 = +HEAPF32[$204>>2];
      __THREW__ = 0;
      invoke_viiidi(412,($662|0),($vertexNormals|0),($664|0),(+$665),($vertices|0));
      $666 = __THREW__; __THREW__ = 0;
      $667 = $666&1;
      if ($667) {
       label = 29;
       break L5;
      }
      $668 = $count;
      $669 = (($668) + 6)|0;
      $count = $669;
      $670 = $line;
      $671 = (($670) + 1)|0;
      $line = $671;
     }
     $672 = $count;
     $673 = ($672|0)!=(0);
     do {
      if ($673) {
       $674 = $layerInfo;
       $675 = ((($674)) + 12|0);
       $676 = $start;
       HEAP32[$217>>2] = $676;
       $677 = ((($217)) + 4|0);
       $678 = $count;
       HEAP32[$677>>2] = $678;
       $679 = ((($217)) + 8|0);
       $680 = $203;
       $681 = ((($680)) + 68|0);
       $682 = $section1;
       $683 = $layer;
       $684 = ((($683)) + 32|0);
       $685 = ((($684)) + 8|0);
       $686 = HEAP32[$685>>2]|0;
       $687 = (($686) + ($682<<4)|0);
       $688 = ((($687)) + 4|0);
       $689 = HEAP32[$688>>2]|0;
       __ZN3gsl5indexILj1EEC2IJjEvEEDpT_($218,$689);
       $690 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($681,$218)|0);
       $691 = ((($690)) + 4|0);
       $692 = $203;
       $693 = ((($692)) + 68|0);
       $694 = $section1;
       $695 = $layer;
       $696 = ((($695)) + 32|0);
       $697 = ((($696)) + 8|0);
       $698 = HEAP32[$697>>2]|0;
       $699 = (($698) + ($694<<4)|0);
       $700 = ((($699)) + 4|0);
       $701 = HEAP32[$700>>2]|0;
       __ZN3gsl5indexILj1EEC2IJjEvEEDpT_($219,$701);
       $702 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($693,$219)|0);
       $703 = ((($702)) + 4|0);
       $704 = ((($703)) + 4|0);
       $705 = $203;
       $706 = ((($705)) + 68|0);
       $707 = $section1;
       $708 = $layer;
       $709 = ((($708)) + 32|0);
       $710 = ((($709)) + 8|0);
       $711 = HEAP32[$710>>2]|0;
       $712 = (($711) + ($707<<4)|0);
       $713 = ((($712)) + 4|0);
       $714 = HEAP32[$713>>2]|0;
       __ZN3gsl5indexILj1EEC2IJjEvEEDpT_($220,$714);
       $715 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($706,$220)|0);
       $716 = ((($715)) + 4|0);
       $717 = ((($716)) + 8|0);
       __THREW__ = 0;
       invoke_viiii(405,($679|0),($691|0),($704|0),($717|0));
       $718 = __THREW__; __THREW__ = 0;
       $719 = $718&1;
       if ($719) {
        label = 29;
        break L5;
       }
       $33 = $675;
       $34 = $217;
       $720 = $33;
       $721 = ((($720)) + 4|0);
       $722 = HEAP32[$721>>2]|0;
       $32 = $720;
       $723 = $32;
       $724 = ((($723)) + 8|0);
       $31 = $724;
       $725 = $31;
       $30 = $725;
       $726 = $30;
       $727 = HEAP32[$726>>2]|0;
       $728 = ($722>>>0)<($727>>>0);
       if (!($728)) {
        $754 = $34;
        $26 = $754;
        $755 = $26;
        __THREW__ = 0;
        invoke_vii(411,($720|0),($755|0));
        $756 = __THREW__; __THREW__ = 0;
        $757 = $756&1;
        if ($757) {
         label = 29;
         break L5;
        } else {
         break;
        }
       }
       __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i15,$720,1);
       $29 = $720;
       $729 = $29;
       $730 = ((($729)) + 8|0);
       $28 = $730;
       $731 = $28;
       $27 = $731;
       $732 = $27;
       $733 = ((($720)) + 4|0);
       $734 = HEAP32[$733>>2]|0;
       $25 = $734;
       $735 = $25;
       $736 = $34;
       $10 = $736;
       $737 = $10;
       $21 = $732;
       $22 = $735;
       $23 = $737;
       $738 = $21;
       $739 = $22;
       $740 = $23;
       $20 = $740;
       $741 = $20;
       ;HEAP8[$19>>0]=HEAP8[$24>>0]|0;
       $16 = $738;
       $17 = $739;
       $18 = $741;
       $742 = $16;
       $743 = $17;
       $744 = $18;
       $15 = $744;
       $745 = $15;
       $12 = $742;
       $13 = $743;
       $14 = $745;
       $746 = $13;
       $747 = $14;
       $11 = $747;
       $748 = $11;
       __THREW__ = 0;
       invoke_vii(410,($746|0),($748|0));
       $749 = __THREW__; __THREW__ = 0;
       $750 = $749&1;
       if ($750) {
        label = 29;
        break L5;
       }
       __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i15);
       $751 = ((($720)) + 4|0);
       $752 = HEAP32[$751>>2]|0;
       $753 = ((($752)) + 20|0);
       HEAP32[$751>>2] = $753;
      }
     } while(0);
     $758 = $section1;
     $759 = (($758) + 1)|0;
     $section1 = $759;
    }
    (__ZN3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEppEv($__begin)|0);
   }
   if ((label|0) == 30) {
    $524 = ___cxa_find_matching_catch()|0;
    $525 = tempRet0;
    $206 = $524;
    $207 = $525;
    __ZN5Asset5LayerD2Ev($208);
    break;
   }
   __THREW__ = 0;
   invoke_vii(413,($agg$result|0),($vertices|0));
   $760 = __THREW__; __THREW__ = 0;
   $761 = $760&1;
   if ($761) {
    label = 29;
   } else {
    $762 = ((($agg$result)) + 12|0);
    __THREW__ = 0;
    invoke_vii(414,($762|0),($layers|0));
    $763 = __THREW__; __THREW__ = 0;
    $764 = $763&1;
    if ($764) {
     $780 = ___cxa_find_matching_catch()|0;
     $781 = tempRet0;
     $206 = $780;
     $207 = $781;
     __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($agg$result);
     break;
    } else {
     $765 = ((($agg$result)) + 24|0);
     $9 = $765;
     $766 = $9;
     $8 = $766;
     $767 = $8;
     $7 = $767;
     HEAP32[$767>>2] = 0;
     $768 = ((($767)) + 4|0);
     HEAP32[$768>>2] = 0;
     $769 = ((($767)) + 8|0);
     $5 = $769;
     HEAP32[$6>>2] = 0;
     $770 = $5;
     $4 = $6;
     $771 = $4;
     $772 = HEAP32[$771>>2]|0;
     $2 = $770;
     HEAP32[$3>>2] = $772;
     $773 = $2;
     $1 = $773;
     $0 = $3;
     $774 = $0;
     $775 = HEAP32[$774>>2]|0;
     HEAP32[$773>>2] = $775;
     $776 = ((($agg$result)) + 36|0);
     HEAPF32[$776>>2] = 0.0;
     $777 = ((($776)) + 4|0);
     HEAPF32[$777>>2] = 0.0;
     $778 = ((($776)) + 8|0);
     HEAPF32[$778>>2] = 0.0;
     $779 = ((($776)) + 12|0);
     HEAPF32[$779>>2] = 0.0;
     $221 = 1;
     __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertexNormals);
     __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEED2Ev($layers);
     __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertices);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $522 = ___cxa_find_matching_catch()|0;
  $523 = tempRet0;
  $206 = $522;
  $207 = $523;
 }
 __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertexNormals);
 __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEED2Ev($layers);
 __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertices);
 $782 = $206;
 $783 = $207;
 ___resumeException($782|0);
 // unreachable;
}
function __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 40)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 40)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN5Asset5LayerERNS_9allocatorIS2_EEEC2EjjS5_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(415,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $11 = $44;
  $12 = $45;
  __ZNSt3__114__split_bufferIN5Asset5LayerERNS_9allocatorIS2_EEED2Ev($__v);
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN5Asset5LayerERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNK3gsl4spanI6Layer2Lin1EJEE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = (__ZNK3gsl13static_boundsIJLin1EEE4sizeEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK3gsl4spanI6Layer2Lin1EJEE5beginEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __THREW__ = 0;
 invoke_viii(416,($agg$result|0),($1|0),1);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNK3gsl4spanI6Layer2Lin1EJEE3endEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __THREW__ = 0;
 invoke_viii(416,($agg$result|0),($1|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNK3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEneERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEeqERKS4_($2,$3)|0);
 $5 = $4 ^ 1;
 STACKTOP = sp;return ($5|0);
}
function __ZNK3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEdeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __THREW__ = 0;
 invoke_vi(417,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  $4 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN5Asset5LayerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = $1;
 __THREW__ = 0;
 $5 = (invoke_iii(418,($3|0),($4|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + (($5*72)|0)|0);
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN3gsl5indexILj1EEC2IJjEvEEDpT_($this,$ds) {
 $this = $this|0;
 $ds = $ds|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ds;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN3gsl11narrow_castIijEET_T0_($3)|0);
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEppEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 48|0);
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEEC2ERKS7_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 84|0;
 $6 = sp + 16|0;
 $9 = sp + 72|0;
 $10 = sp + 111|0;
 $11 = sp + 8|0;
 $15 = sp + 110|0;
 $17 = sp;
 $19 = sp + 109|0;
 $25 = sp + 108|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = ((($30)) + 8|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 ;HEAP8[$17>>0]=HEAP8[$19>>0]|0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35>>2] = 0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($35)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $37;
 HEAP32[$9>>2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $38;
 HEAP32[$5>>2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = (($51|0) / 12)&-1;
 $__n = $52;
 $53 = $__n;
 $54 = ($53>>>0)>(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(419,($28|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 }
 $58 = $24;
 $59 = HEAP32[$58>>2]|0;
 $60 = $24;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_viii(420,($28|0),($59|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEEC2ERKS5_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 84|0;
 $6 = sp + 16|0;
 $9 = sp + 72|0;
 $10 = sp + 111|0;
 $11 = sp + 8|0;
 $15 = sp + 110|0;
 $17 = sp;
 $19 = sp + 109|0;
 $25 = sp + 108|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = ((($30)) + 8|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 ;HEAP8[$17>>0]=HEAP8[$19>>0]|0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35>>2] = 0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($35)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $37;
 HEAP32[$9>>2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $38;
 HEAP32[$5>>2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = (($51|0) / 40)&-1;
 $__n = $52;
 $53 = $__n;
 $54 = ($53>>>0)>(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(421,($28|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN5Asset5LayerENS_9allocatorIS2_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 }
 $58 = $24;
 $59 = HEAP32[$58>>2]|0;
 $60 = $24;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_viii(422,($28|0),($59|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN5Asset5LayerENS_9allocatorIS2_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN5Asset5LayerENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN5Asset11ReconstructERKNSt3__16vectorIN3glm5tvec3IfLNS2_9precisionE0EEENS0_9allocatorIS5_EEEERNS1_IN10MeshLoader8PolyLineENS6_ISC_EEEERKNS1_INS2_5tvec2IfLS4_0EEENS6_ISH_EEEEff($agg$result,$mesh_vertices,$lines,$mesh_texcoord,$scale,$lineWidth) {
 $agg$result = $agg$result|0;
 $mesh_vertices = $mesh_vertices|0;
 $lines = $lines|0;
 $mesh_texcoord = $mesh_texcoord|0;
 $scale = +$scale;
 $lineWidth = +$lineWidth;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i1 = 0, $__annotator$i10 = 0, $__annotator$i13 = 0, $__annotator$i4 = 0;
 var $__annotator$i7 = 0, $__begin = 0, $__end = 0, $__range = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $l = 0, $texcoord = 0, $vertexNormals = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 1052|0;
 $10 = sp + 1040|0;
 $16 = sp + 56|0;
 $24 = sp + 988|0;
 $27 = sp + 976|0;
 $33 = sp + 48|0;
 $44 = sp + 40|0;
 $49 = sp + 1096|0;
 $__annotator$i13 = sp + 1095|0;
 $69 = sp + 32|0;
 $74 = sp + 1094|0;
 $__annotator$i10 = sp + 1093|0;
 $94 = sp + 24|0;
 $99 = sp + 1092|0;
 $__annotator$i7 = sp + 1091|0;
 $119 = sp + 16|0;
 $124 = sp + 1090|0;
 $__annotator$i4 = sp + 1089|0;
 $144 = sp + 8|0;
 $149 = sp + 1088|0;
 $__annotator$i1 = sp + 1087|0;
 $169 = sp;
 $174 = sp + 1086|0;
 $__annotator$i = sp + 1085|0;
 $195 = sp + 356|0;
 $198 = sp + 344|0;
 $202 = sp + 328|0;
 $205 = sp + 316|0;
 $210 = sp + 296|0;
 $213 = sp + 284|0;
 $220 = sp + 256|0;
 $223 = sp + 244|0;
 $vertices = sp + 200|0;
 $texcoord = sp + 188|0;
 $vertexNormals = sp + 176|0;
 $__begin = sp + 160|0;
 $__end = sp + 156|0;
 $234 = sp + 144|0;
 $235 = sp + 104|0;
 $237 = sp + 88|0;
 $238 = sp + 68|0;
 $239 = sp + 1084|0;
 $227 = $mesh_vertices;
 $228 = $lines;
 $229 = $mesh_texcoord;
 $230 = $scale;
 $231 = $lineWidth;
 $226 = $vertices;
 $241 = $226;
 $225 = $241;
 $242 = $225;
 $224 = $242;
 HEAP32[$242>>2] = 0;
 $243 = ((($242)) + 4|0);
 HEAP32[$243>>2] = 0;
 $244 = ((($242)) + 8|0);
 $222 = $244;
 HEAP32[$223>>2] = 0;
 $245 = $222;
 $221 = $223;
 $246 = $221;
 $247 = HEAP32[$246>>2]|0;
 $219 = $245;
 HEAP32[$220>>2] = $247;
 $248 = $219;
 $218 = $248;
 $217 = $220;
 $249 = $217;
 $250 = HEAP32[$249>>2]|0;
 HEAP32[$248>>2] = $250;
 $216 = $texcoord;
 $251 = $216;
 $215 = $251;
 $252 = $215;
 $214 = $252;
 HEAP32[$252>>2] = 0;
 $253 = ((($252)) + 4|0);
 HEAP32[$253>>2] = 0;
 $254 = ((($252)) + 8|0);
 $212 = $254;
 HEAP32[$213>>2] = 0;
 $255 = $212;
 $211 = $213;
 $256 = $211;
 $257 = HEAP32[$256>>2]|0;
 $209 = $255;
 HEAP32[$210>>2] = $257;
 $258 = $209;
 $208 = $258;
 $207 = $210;
 $259 = $207;
 $260 = HEAP32[$259>>2]|0;
 HEAP32[$258>>2] = $260;
 $261 = $227;
 $262 = $228;
 $263 = $231;
 __THREW__ = 0;
 invoke_viiid(403,($vertexNormals|0),($261|0),($262|0),(+$263));
 $264 = __THREW__; __THREW__ = 0;
 $265 = $264&1;
 if ($265) {
  $553 = ___cxa_find_matching_catch()|0;
  $554 = tempRet0;
  $232 = $553;
  $233 = $554;
  __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($texcoord);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertices);
  $670 = $232;
  $671 = $233;
  ___resumeException($670|0);
  // unreachable;
 }
 $266 = $228;
 $__range = $266;
 $267 = $__range;
 $206 = $267;
 $268 = $206;
 $269 = HEAP32[$268>>2]|0;
 $203 = $268;
 $204 = $269;
 $270 = $204;
 $200 = $202;
 $201 = $270;
 $271 = $200;
 $272 = $201;
 HEAP32[$271>>2] = $272;
 $273 = HEAP32[$202>>2]|0;
 HEAP32[$205>>2] = $273;
 $274 = HEAP32[$205>>2]|0;
 HEAP32[$__begin>>2] = $274;
 $275 = $__range;
 $199 = $275;
 $276 = $199;
 $277 = ((($276)) + 4|0);
 $278 = HEAP32[$277>>2]|0;
 $196 = $276;
 $197 = $278;
 $279 = $197;
 $193 = $195;
 $194 = $279;
 $280 = $193;
 $281 = $194;
 HEAP32[$280>>2] = $281;
 $282 = HEAP32[$195>>2]|0;
 HEAP32[$198>>2] = $282;
 $283 = HEAP32[$198>>2]|0;
 HEAP32[$__end>>2] = $283;
 while(1) {
  $191 = $__begin;
  $192 = $__end;
  $284 = $191;
  $285 = $192;
  $189 = $284;
  $190 = $285;
  $286 = $189;
  $188 = $286;
  $287 = $188;
  $288 = HEAP32[$287>>2]|0;
  $289 = $190;
  $187 = $289;
  $290 = $187;
  $291 = HEAP32[$290>>2]|0;
  $292 = ($288|0)==($291|0);
  $293 = $292 ^ 1;
  if (!($293)) {
   label = 26;
   break;
  }
  $186 = $__begin;
  $294 = $186;
  $295 = HEAP32[$294>>2]|0;
  $l = $295;
  $296 = $l;
  $297 = $227;
  $298 = $230;
  __THREW__ = 0;
  invoke_viiidi(412,($296|0),($vertexNormals|0),($297|0),(+$298),($vertices|0));
  $299 = __THREW__; __THREW__ = 0;
  $300 = $299&1;
  if ($300) {
   label = 25;
   break;
  }
  $301 = $229;
  $302 = $l;
  $303 = HEAP32[$302>>2]|0;
  $184 = $301;
  $185 = $303;
  $304 = $184;
  $305 = $185;
  $306 = HEAP32[$304>>2]|0;
  $307 = (($306) + ($305<<3)|0);
  $182 = $texcoord;
  $183 = $307;
  $308 = $182;
  $309 = ((($308)) + 4|0);
  $310 = HEAP32[$309>>2]|0;
  $181 = $308;
  $311 = $181;
  $312 = ((($311)) + 8|0);
  $180 = $312;
  $313 = $180;
  $179 = $313;
  $314 = $179;
  $315 = HEAP32[$314>>2]|0;
  $316 = ($310|0)!=($315|0);
  if ($316) {
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i,$308,1);
   $178 = $308;
   $317 = $178;
   $318 = ((($317)) + 8|0);
   $177 = $318;
   $319 = $177;
   $176 = $319;
   $320 = $176;
   $321 = ((($308)) + 4|0);
   $322 = HEAP32[$321>>2]|0;
   $175 = $322;
   $323 = $175;
   $324 = $183;
   $171 = $320;
   $172 = $323;
   $173 = $324;
   $325 = $171;
   $326 = $172;
   $327 = $173;
   $170 = $327;
   $328 = $170;
   ;HEAP8[$169>>0]=HEAP8[$174>>0]|0;
   $166 = $325;
   $167 = $326;
   $168 = $328;
   $329 = $166;
   $330 = $167;
   $331 = $168;
   $165 = $331;
   $332 = $165;
   $162 = $329;
   $163 = $330;
   $164 = $332;
   $333 = $163;
   $334 = $164;
   $161 = $334;
   $335 = $161;
   __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKS2_($333,$335);
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $336 = ((($308)) + 4|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = ((($337)) + 8|0);
   HEAP32[$336>>2] = $338;
  } else {
   $339 = $183;
   __THREW__ = 0;
   invoke_vii(423,($308|0),($339|0));
   $340 = __THREW__; __THREW__ = 0;
   $341 = $340&1;
   if ($341) {
    label = 25;
    break;
   }
  }
  $342 = $229;
  $343 = $l;
  $344 = ((($343)) + 4|0);
  $345 = HEAP32[$344>>2]|0;
  $159 = $342;
  $160 = $345;
  $346 = $159;
  $347 = $160;
  $348 = HEAP32[$346>>2]|0;
  $349 = (($348) + ($347<<3)|0);
  $157 = $texcoord;
  $158 = $349;
  $350 = $157;
  $351 = ((($350)) + 4|0);
  $352 = HEAP32[$351>>2]|0;
  $156 = $350;
  $353 = $156;
  $354 = ((($353)) + 8|0);
  $155 = $354;
  $355 = $155;
  $154 = $355;
  $356 = $154;
  $357 = HEAP32[$356>>2]|0;
  $358 = ($352|0)!=($357|0);
  if ($358) {
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i1,$350,1);
   $153 = $350;
   $359 = $153;
   $360 = ((($359)) + 8|0);
   $152 = $360;
   $361 = $152;
   $151 = $361;
   $362 = $151;
   $363 = ((($350)) + 4|0);
   $364 = HEAP32[$363>>2]|0;
   $150 = $364;
   $365 = $150;
   $366 = $158;
   $146 = $362;
   $147 = $365;
   $148 = $366;
   $367 = $146;
   $368 = $147;
   $369 = $148;
   $145 = $369;
   $370 = $145;
   ;HEAP8[$144>>0]=HEAP8[$149>>0]|0;
   $141 = $367;
   $142 = $368;
   $143 = $370;
   $371 = $141;
   $372 = $142;
   $373 = $143;
   $140 = $373;
   $374 = $140;
   $137 = $371;
   $138 = $372;
   $139 = $374;
   $375 = $138;
   $376 = $139;
   $136 = $376;
   $377 = $136;
   __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKS2_($375,$377);
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i1);
   $378 = ((($350)) + 4|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = ((($379)) + 8|0);
   HEAP32[$378>>2] = $380;
  } else {
   $381 = $158;
   __THREW__ = 0;
   invoke_vii(423,($350|0),($381|0));
   $382 = __THREW__; __THREW__ = 0;
   $383 = $382&1;
   if ($383) {
    label = 25;
    break;
   }
  }
  $384 = $229;
  $385 = $l;
  $386 = ((($385)) + 4|0);
  $387 = HEAP32[$386>>2]|0;
  $134 = $384;
  $135 = $387;
  $388 = $134;
  $389 = $135;
  $390 = HEAP32[$388>>2]|0;
  $391 = (($390) + ($389<<3)|0);
  $132 = $texcoord;
  $133 = $391;
  $392 = $132;
  $393 = ((($392)) + 4|0);
  $394 = HEAP32[$393>>2]|0;
  $131 = $392;
  $395 = $131;
  $396 = ((($395)) + 8|0);
  $130 = $396;
  $397 = $130;
  $129 = $397;
  $398 = $129;
  $399 = HEAP32[$398>>2]|0;
  $400 = ($394|0)!=($399|0);
  if ($400) {
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i4,$392,1);
   $128 = $392;
   $401 = $128;
   $402 = ((($401)) + 8|0);
   $127 = $402;
   $403 = $127;
   $126 = $403;
   $404 = $126;
   $405 = ((($392)) + 4|0);
   $406 = HEAP32[$405>>2]|0;
   $125 = $406;
   $407 = $125;
   $408 = $133;
   $121 = $404;
   $122 = $407;
   $123 = $408;
   $409 = $121;
   $410 = $122;
   $411 = $123;
   $120 = $411;
   $412 = $120;
   ;HEAP8[$119>>0]=HEAP8[$124>>0]|0;
   $116 = $409;
   $117 = $410;
   $118 = $412;
   $413 = $116;
   $414 = $117;
   $415 = $118;
   $115 = $415;
   $416 = $115;
   $112 = $413;
   $113 = $414;
   $114 = $416;
   $417 = $113;
   $418 = $114;
   $111 = $418;
   $419 = $111;
   __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKS2_($417,$419);
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i4);
   $420 = ((($392)) + 4|0);
   $421 = HEAP32[$420>>2]|0;
   $422 = ((($421)) + 8|0);
   HEAP32[$420>>2] = $422;
  } else {
   $423 = $133;
   __THREW__ = 0;
   invoke_vii(423,($392|0),($423|0));
   $424 = __THREW__; __THREW__ = 0;
   $425 = $424&1;
   if ($425) {
    label = 25;
    break;
   }
  }
  $426 = $229;
  $427 = $l;
  $428 = HEAP32[$427>>2]|0;
  $109 = $426;
  $110 = $428;
  $429 = $109;
  $430 = $110;
  $431 = HEAP32[$429>>2]|0;
  $432 = (($431) + ($430<<3)|0);
  $107 = $texcoord;
  $108 = $432;
  $433 = $107;
  $434 = ((($433)) + 4|0);
  $435 = HEAP32[$434>>2]|0;
  $106 = $433;
  $436 = $106;
  $437 = ((($436)) + 8|0);
  $105 = $437;
  $438 = $105;
  $104 = $438;
  $439 = $104;
  $440 = HEAP32[$439>>2]|0;
  $441 = ($435|0)!=($440|0);
  if ($441) {
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i7,$433,1);
   $103 = $433;
   $442 = $103;
   $443 = ((($442)) + 8|0);
   $102 = $443;
   $444 = $102;
   $101 = $444;
   $445 = $101;
   $446 = ((($433)) + 4|0);
   $447 = HEAP32[$446>>2]|0;
   $100 = $447;
   $448 = $100;
   $449 = $108;
   $96 = $445;
   $97 = $448;
   $98 = $449;
   $450 = $96;
   $451 = $97;
   $452 = $98;
   $95 = $452;
   $453 = $95;
   ;HEAP8[$94>>0]=HEAP8[$99>>0]|0;
   $91 = $450;
   $92 = $451;
   $93 = $453;
   $454 = $91;
   $455 = $92;
   $456 = $93;
   $90 = $456;
   $457 = $90;
   $87 = $454;
   $88 = $455;
   $89 = $457;
   $458 = $88;
   $459 = $89;
   $86 = $459;
   $460 = $86;
   __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKS2_($458,$460);
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i7);
   $461 = ((($433)) + 4|0);
   $462 = HEAP32[$461>>2]|0;
   $463 = ((($462)) + 8|0);
   HEAP32[$461>>2] = $463;
  } else {
   $464 = $108;
   __THREW__ = 0;
   invoke_vii(423,($433|0),($464|0));
   $465 = __THREW__; __THREW__ = 0;
   $466 = $465&1;
   if ($466) {
    label = 25;
    break;
   }
  }
  $467 = $229;
  $468 = $l;
  $469 = ((($468)) + 4|0);
  $470 = HEAP32[$469>>2]|0;
  $84 = $467;
  $85 = $470;
  $471 = $84;
  $472 = $85;
  $473 = HEAP32[$471>>2]|0;
  $474 = (($473) + ($472<<3)|0);
  $82 = $texcoord;
  $83 = $474;
  $475 = $82;
  $476 = ((($475)) + 4|0);
  $477 = HEAP32[$476>>2]|0;
  $81 = $475;
  $478 = $81;
  $479 = ((($478)) + 8|0);
  $80 = $479;
  $480 = $80;
  $79 = $480;
  $481 = $79;
  $482 = HEAP32[$481>>2]|0;
  $483 = ($477|0)!=($482|0);
  if ($483) {
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i10,$475,1);
   $78 = $475;
   $484 = $78;
   $485 = ((($484)) + 8|0);
   $77 = $485;
   $486 = $77;
   $76 = $486;
   $487 = $76;
   $488 = ((($475)) + 4|0);
   $489 = HEAP32[$488>>2]|0;
   $75 = $489;
   $490 = $75;
   $491 = $83;
   $71 = $487;
   $72 = $490;
   $73 = $491;
   $492 = $71;
   $493 = $72;
   $494 = $73;
   $70 = $494;
   $495 = $70;
   ;HEAP8[$69>>0]=HEAP8[$74>>0]|0;
   $66 = $492;
   $67 = $493;
   $68 = $495;
   $496 = $66;
   $497 = $67;
   $498 = $68;
   $65 = $498;
   $499 = $65;
   $62 = $496;
   $63 = $497;
   $64 = $499;
   $500 = $63;
   $501 = $64;
   $61 = $501;
   $502 = $61;
   __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKS2_($500,$502);
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i10);
   $503 = ((($475)) + 4|0);
   $504 = HEAP32[$503>>2]|0;
   $505 = ((($504)) + 8|0);
   HEAP32[$503>>2] = $505;
  } else {
   $506 = $83;
   __THREW__ = 0;
   invoke_vii(423,($475|0),($506|0));
   $507 = __THREW__; __THREW__ = 0;
   $508 = $507&1;
   if ($508) {
    label = 25;
    break;
   }
  }
  $509 = $229;
  $510 = $l;
  $511 = HEAP32[$510>>2]|0;
  $59 = $509;
  $60 = $511;
  $512 = $59;
  $513 = $60;
  $514 = HEAP32[$512>>2]|0;
  $515 = (($514) + ($513<<3)|0);
  $57 = $texcoord;
  $58 = $515;
  $516 = $57;
  $517 = ((($516)) + 4|0);
  $518 = HEAP32[$517>>2]|0;
  $56 = $516;
  $519 = $56;
  $520 = ((($519)) + 8|0);
  $55 = $520;
  $521 = $55;
  $54 = $521;
  $522 = $54;
  $523 = HEAP32[$522>>2]|0;
  $524 = ($518|0)!=($523|0);
  if ($524) {
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i13,$516,1);
   $53 = $516;
   $525 = $53;
   $526 = ((($525)) + 8|0);
   $52 = $526;
   $527 = $52;
   $51 = $527;
   $528 = $51;
   $529 = ((($516)) + 4|0);
   $530 = HEAP32[$529>>2]|0;
   $50 = $530;
   $531 = $50;
   $532 = $58;
   $46 = $528;
   $47 = $531;
   $48 = $532;
   $533 = $46;
   $534 = $47;
   $535 = $48;
   $45 = $535;
   $536 = $45;
   ;HEAP8[$44>>0]=HEAP8[$49>>0]|0;
   $41 = $533;
   $42 = $534;
   $43 = $536;
   $537 = $41;
   $538 = $42;
   $539 = $43;
   $40 = $539;
   $540 = $40;
   $37 = $537;
   $38 = $538;
   $39 = $540;
   $541 = $38;
   $542 = $39;
   $36 = $542;
   $543 = $36;
   __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKS2_($541,$543);
   __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i13);
   $544 = ((($516)) + 4|0);
   $545 = HEAP32[$544>>2]|0;
   $546 = ((($545)) + 8|0);
   HEAP32[$544>>2] = $546;
  } else {
   $547 = $58;
   __THREW__ = 0;
   invoke_vii(423,($516|0),($547|0));
   $548 = __THREW__; __THREW__ = 0;
   $549 = $548&1;
   if ($549) {
    label = 25;
    break;
   }
  }
  $35 = $__begin;
  $550 = $35;
  $551 = HEAP32[$550>>2]|0;
  $552 = ((($551)) + 8|0);
  HEAP32[$550>>2] = $552;
 }
 if ((label|0) == 26) {
  __THREW__ = 0;
  invoke_vii(413,($agg$result|0),($vertices|0));
  $557 = __THREW__; __THREW__ = 0;
  $558 = $557&1;
  if ($558) {
   label = 25;
  } else {
   $$expand_i1_val = 1;
   HEAP8[$239>>0] = $$expand_i1_val;
   $559 = ((($agg$result)) + 12|0);
   $236 = $235;
   __THREW__ = 0;
   invoke_vi(424,($235|0));
   $560 = __THREW__; __THREW__ = 0;
   $561 = $560&1;
   L36: do {
    if ($561) {
     label = 41;
    } else {
     $562 = ((($235)) + 12|0);
     HEAP32[$238>>2] = 0;
     $563 = ((($238)) + 4|0);
     $34 = $vertices;
     $564 = $34;
     $565 = ((($564)) + 4|0);
     $566 = HEAP32[$565>>2]|0;
     $567 = HEAP32[$564>>2]|0;
     $568 = $566;
     $569 = $567;
     $570 = (($568) - ($569))|0;
     $571 = (($570|0) / 12)&-1;
     HEAP32[$563>>2] = $571;
     $572 = ((($238)) + 8|0);
     __THREW__ = 0;
     invoke_vi(424,($572|0));
     $573 = __THREW__; __THREW__ = 0;
     $574 = $573&1;
     if ($574) {
      label = 41;
     } else {
      HEAP32[$237>>2] = $238;
      $575 = ((($237)) + 4|0);
      HEAP32[$575>>2] = 1;
      ;HEAP8[$33>>0]=HEAP8[$237>>0]|0;HEAP8[$33+1>>0]=HEAP8[$237+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[$237+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[$237+3>>0]|0;HEAP8[$33+4>>0]=HEAP8[$237+4>>0]|0;HEAP8[$33+5>>0]=HEAP8[$237+5>>0]|0;HEAP8[$33+6>>0]=HEAP8[$237+6>>0]|0;HEAP8[$33+7>>0]=HEAP8[$237+7>>0]|0;
      $30 = $562;
      $576 = $30;
      $29 = $576;
      $577 = $29;
      $28 = $577;
      HEAP32[$577>>2] = 0;
      $578 = ((($577)) + 4|0);
      HEAP32[$578>>2] = 0;
      $579 = ((($577)) + 8|0);
      $26 = $579;
      HEAP32[$27>>2] = 0;
      $580 = $26;
      $25 = $27;
      $581 = $25;
      $582 = HEAP32[$581>>2]|0;
      $23 = $580;
      HEAP32[$24>>2] = $582;
      $583 = $23;
      $22 = $583;
      $21 = $24;
      $584 = $21;
      $585 = HEAP32[$584>>2]|0;
      HEAP32[$583>>2] = $585;
      $20 = $33;
      $586 = $20;
      $587 = ((($586)) + 4|0);
      $588 = HEAP32[$587>>2]|0;
      $589 = ($588>>>0)>(0);
      do {
       if ($589) {
        $19 = $33;
        $590 = $19;
        $591 = ((($590)) + 4|0);
        $592 = HEAP32[$591>>2]|0;
        __THREW__ = 0;
        invoke_vii(425,($576|0),($592|0));
        $593 = __THREW__; __THREW__ = 0;
        $594 = $593&1;
        if (!($594)) {
         $17 = $33;
         $595 = $17;
         $596 = HEAP32[$595>>2]|0;
         $18 = $33;
         $597 = $18;
         $598 = HEAP32[$597>>2]|0;
         $599 = ((($597)) + 4|0);
         $600 = HEAP32[$599>>2]|0;
         $601 = (($598) + (($600*20)|0)|0);
         __THREW__ = 0;
         invoke_viii(426,($576|0),($596|0),($601|0));
         $602 = __THREW__; __THREW__ = 0;
         $603 = $602&1;
         if (!($603)) {
          break;
         }
        }
        $604 = ___cxa_find_matching_catch()|0;
        $605 = tempRet0;
        $31 = $604;
        $32 = $605;
        __ZNSt3__113__vector_baseIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEED2Ev($576);
        $606 = $31;
        $607 = $32;
        $eh$lpad$body$index2Z2D = $607;$eh$lpad$body$indexZ2D = $606;
        label = 42;
        break L36;
       }
      } while(0);
      $608 = ((($235)) + 24|0);
      HEAPF32[$608>>2] = 0.0;
      $609 = ((($608)) + 4|0);
      HEAPF32[$609>>2] = 0.0;
      $610 = ((($608)) + 8|0);
      HEAPF32[$610>>2] = 0.0;
      $611 = ((($608)) + 12|0);
      HEAPF32[$611>>2] = 0.0;
      HEAP32[$234>>2] = $235;
      $612 = ((($234)) + 4|0);
      HEAP32[$612>>2] = 1;
      ;HEAP8[$16>>0]=HEAP8[$234>>0]|0;HEAP8[$16+1>>0]=HEAP8[$234+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$234+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$234+3>>0]|0;HEAP8[$16+4>>0]=HEAP8[$234+4>>0]|0;HEAP8[$16+5>>0]=HEAP8[$234+5>>0]|0;HEAP8[$16+6>>0]=HEAP8[$234+6>>0]|0;HEAP8[$16+7>>0]=HEAP8[$234+7>>0]|0;
      $13 = $559;
      $613 = $13;
      $12 = $613;
      $614 = $12;
      $11 = $614;
      HEAP32[$614>>2] = 0;
      $615 = ((($614)) + 4|0);
      HEAP32[$615>>2] = 0;
      $616 = ((($614)) + 8|0);
      $9 = $616;
      HEAP32[$10>>2] = 0;
      $617 = $9;
      $8 = $10;
      $618 = $8;
      $619 = HEAP32[$618>>2]|0;
      $6 = $617;
      HEAP32[$7>>2] = $619;
      $620 = $6;
      $5 = $620;
      $4 = $7;
      $621 = $4;
      $622 = HEAP32[$621>>2]|0;
      HEAP32[$620>>2] = $622;
      $3 = $16;
      $623 = $3;
      $624 = ((($623)) + 4|0);
      $625 = HEAP32[$624>>2]|0;
      $626 = ($625>>>0)>(0);
      do {
       if ($626) {
        $2 = $16;
        $627 = $2;
        $628 = ((($627)) + 4|0);
        $629 = HEAP32[$628>>2]|0;
        __THREW__ = 0;
        invoke_vii(421,($613|0),($629|0));
        $630 = __THREW__; __THREW__ = 0;
        $631 = $630&1;
        if (!($631)) {
         $0 = $16;
         $632 = $0;
         $633 = HEAP32[$632>>2]|0;
         $1 = $16;
         $634 = $1;
         $635 = HEAP32[$634>>2]|0;
         $636 = ((($634)) + 4|0);
         $637 = HEAP32[$636>>2]|0;
         $638 = (($635) + (($637*40)|0)|0);
         __THREW__ = 0;
         invoke_viii(427,($613|0),($633|0),($638|0));
         $639 = __THREW__; __THREW__ = 0;
         $640 = $639&1;
         if (!($640)) {
          label = 37;
          break;
         }
        }
        $641 = ___cxa_find_matching_catch()|0;
        $642 = tempRet0;
        $14 = $641;
        $15 = $642;
        __ZNSt3__113__vector_baseIN5Asset5LayerENS_9allocatorIS2_EEED2Ev($613);
        $643 = $14;
        $644 = $15;
        $232 = $643;
        $233 = $644;
       } else {
        label = 37;
       }
      } while(0);
      do {
       if ((label|0) == 37) {
        $645 = ((($agg$result)) + 24|0);
        __THREW__ = 0;
        invoke_vii(428,($645|0),($texcoord|0));
        $646 = __THREW__; __THREW__ = 0;
        $647 = $646&1;
        if ($647) {
         $663 = ___cxa_find_matching_catch()|0;
         $664 = tempRet0;
         $232 = $663;
         $233 = $664;
         __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEED2Ev($559);
         break;
        }
        $648 = ((($agg$result)) + 36|0);
        HEAPF32[$648>>2] = 0.0;
        $649 = ((($648)) + 4|0);
        HEAPF32[$649>>2] = 0.0;
        $650 = ((($648)) + 8|0);
        HEAPF32[$650>>2] = 0.0;
        $651 = ((($648)) + 12|0);
        HEAPF32[$651>>2] = 0.0;
        $$expand_i1_val7 = 0;
        HEAP8[$239>>0] = $$expand_i1_val7;
        $652 = ((($235)) + 40|0);
        $654 = $652;
        while(1) {
         $653 = ((($654)) + -40|0);
         __ZN5Asset5LayerD2Ev($653);
         $655 = ($653|0)==($235|0);
         if ($655) {
          break;
         } else {
          $654 = $653;
         }
        }
        $240 = 1;
        __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertexNormals);
        __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($texcoord);
        __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertices);
        STACKTOP = sp;return;
       }
      } while(0);
      $665 = ((($235)) + 40|0);
      $667 = $665;
      while(1) {
       $666 = ((($667)) + -40|0);
       __ZN5Asset5LayerD2Ev($666);
       $668 = ($666|0)==($235|0);
       if ($668) {
        break;
       } else {
        $667 = $666;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 41) {
    $656 = ___cxa_find_matching_catch()|0;
    $657 = tempRet0;
    $eh$lpad$body$index2Z2D = $657;$eh$lpad$body$indexZ2D = $656;
    label = 42;
   }
   if ((label|0) == 42) {
    $232 = $eh$lpad$body$indexZ2D;
    $233 = $eh$lpad$body$index2Z2D;
    $658 = $236;
    $659 = ($235|0)==($658|0);
    if (!($659)) {
     $661 = $658;
     while(1) {
      $660 = ((($661)) + -40|0);
      __ZN5Asset5LayerD2Ev($660);
      $662 = ($660|0)==($235|0);
      if ($662) {
       break;
      } else {
       $661 = $660;
      }
     }
    }
   }
   $$pre_trunc = HEAP8[$239>>0]|0;
   $669 = $$pre_trunc&1;
   if ($669) {
    __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($agg$result);
   }
  }
 }
 if ((label|0) == 25) {
  $555 = ___cxa_find_matching_catch()|0;
  $556 = tempRet0;
  $232 = $555;
  $233 = $556;
 }
 __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertexNormals);
 __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($texcoord);
 __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertices);
 $670 = $232;
 $671 = $233;
 ___resumeException($670|0);
 // unreachable;
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($1)) + 4|0);
 HEAPF32[$2>>2] = 0.0;
 $3 = ((($1)) + 8|0);
 HEAPF32[$3>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEEC2ERKS7_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 84|0;
 $6 = sp + 16|0;
 $9 = sp + 72|0;
 $10 = sp + 111|0;
 $11 = sp + 8|0;
 $15 = sp + 110|0;
 $17 = sp;
 $19 = sp + 109|0;
 $25 = sp + 108|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = ((($30)) + 8|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 ;HEAP8[$17>>0]=HEAP8[$19>>0]|0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35>>2] = 0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($35)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $37;
 HEAP32[$9>>2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $38;
 HEAP32[$5>>2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = (($51|0) / 8)&-1;
 $__n = $52;
 $53 = $__n;
 $54 = ($53>>>0)>(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(401,($28|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 }
 $58 = $24;
 $59 = HEAP32[$58>>2]|0;
 $60 = $24;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_viii(429,($28|0),($59|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __Z7ThrowIfbPKc($exp,$msg) {
 $exp = $exp|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $exp&1;
 $0 = $4;
 $1 = $msg;
 $5 = $0;
 $6 = $5&1;
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (___cxa_allocate_exception(8)|0);
 $8 = $1;
 __THREW__ = 0;
 invoke_vii(430,($7|0),($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $2 = $11;
  $3 = $12;
  ___cxa_free_exception(($7|0));
  $13 = $2;
  $14 = $3;
  ___resumeException($13|0);
  // unreachable;
 } else {
  ___cxa_throw(($7|0),(8|0),(1|0));
  // unreachable;
 }
}
function __ZN16custom_exceptionC2EPKc($this,$what) {
 $this = $this|0;
 $what = $what|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $what;
 $3 = $1;
 $0 = $3;
 $4 = $0;
 $5 = 6104;
 HEAP32[$4>>2] = $5;
 $6 = 5208;
 HEAP32[$3>>2] = $6;
 $7 = ((($3)) + 4|0);
 $8 = $2;
 HEAP32[$7>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN16custom_exceptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __Z11LoadShadersPKcS0_($vs,$fs) {
 $vs = $vs|0;
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $FragmentShaderErrorMessage = 0, $FragmentShaderID = 0, $InfoLogLength = 0, $ProgramErrorMessage = 0, $ProgramID = 0, $VertexShaderErrorMessage = 0, $VertexShaderID = 0, $result = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $13 = sp + 132|0;
 $14 = sp + 128|0;
 $result = sp + 112|0;
 $InfoLogLength = sp + 108|0;
 $VertexShaderErrorMessage = sp + 96|0;
 $FragmentShaderErrorMessage = sp + 72|0;
 $ProgramErrorMessage = sp + 60|0;
 HEAP32[$13>>2] = $vs;
 HEAP32[$14>>2] = $fs;
 $18 = (_glCreateShader(35633)|0);
 $VertexShaderID = $18;
 $19 = (_glCreateShader(35632)|0);
 $FragmentShaderID = $19;
 $ProgramID = 0;
 HEAP32[$result>>2] = 0;
 $20 = $VertexShaderID;
 _glShaderSource(($20|0),1,($13|0),(0|0));
 $21 = $VertexShaderID;
 _glCompileShader(($21|0));
 $22 = $VertexShaderID;
 _glGetShaderiv(($22|0),35713,($result|0));
 $23 = $VertexShaderID;
 _glGetShaderiv(($23|0),35716,($InfoLogLength|0));
 $24 = HEAP32[$result>>2]|0;
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $26 = HEAP32[$InfoLogLength>>2]|0;
  $27 = (($26) + 1)|0;
  __ZNSt3__16vectorIcNS_9allocatorIcEEEC2Ej($VertexShaderErrorMessage,$27);
  $28 = $VertexShaderID;
  $29 = HEAP32[$InfoLogLength>>2]|0;
  $10 = $VertexShaderErrorMessage;
  $11 = 0;
  $30 = $10;
  $31 = $11;
  $32 = HEAP32[$30>>2]|0;
  $33 = (($32) + ($31)|0);
  __THREW__ = 0;
  invoke_viiii(431,($28|0),($29|0),(0|0),($33|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if (!($35)) {
   __THREW__ = 0;
   HEAP32[$vararg_buffer>>2] = 16449;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 16452;
   invoke_vii(432,1,($vararg_buffer|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if (!($37)) {
    $8 = $VertexShaderErrorMessage;
    $9 = 0;
    $38 = $8;
    $39 = $9;
    $40 = HEAP32[$38>>2]|0;
    $41 = (($40) + ($39)|0);
    __THREW__ = 0;
    HEAP32[$vararg_buffer2>>2] = 16467;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = -1;
    $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
    HEAP32[$vararg_ptr6>>2] = $41;
    invoke_vii(432,4,($vararg_buffer2|0));
    $42 = __THREW__; __THREW__ = 0;
    $43 = $42&1;
    if (!($43)) {
     $12 = 0;
     $17 = 1;
     __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($VertexShaderErrorMessage);
     $104 = $12;
     STACKTOP = sp;return ($104|0);
    }
   }
  }
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $15 = $44;
  $16 = $45;
  __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($VertexShaderErrorMessage);
  $105 = $15;
  $106 = $16;
  ___resumeException($105|0);
  // unreachable;
 }
 $46 = $FragmentShaderID;
 _glShaderSource(($46|0),1,($14|0),(0|0));
 $47 = $FragmentShaderID;
 _glCompileShader(($47|0));
 $48 = $FragmentShaderID;
 _glGetShaderiv(($48|0),35713,($result|0));
 $49 = $FragmentShaderID;
 _glGetShaderiv(($49|0),35716,($InfoLogLength|0));
 $50 = HEAP32[$result>>2]|0;
 $51 = ($50|0)!=(0);
 if (!($51)) {
  $52 = HEAP32[$InfoLogLength>>2]|0;
  $53 = (($52) + 1)|0;
  __ZNSt3__16vectorIcNS_9allocatorIcEEEC2Ej($FragmentShaderErrorMessage,$53);
  $54 = $FragmentShaderID;
  $55 = HEAP32[$InfoLogLength>>2]|0;
  $6 = $FragmentShaderErrorMessage;
  $7 = 0;
  $56 = $6;
  $57 = $7;
  $58 = HEAP32[$56>>2]|0;
  $59 = (($58) + ($57)|0);
  __THREW__ = 0;
  invoke_viiii(431,($54|0),($55|0),(0|0),($59|0));
  $60 = __THREW__; __THREW__ = 0;
  $61 = $60&1;
  if (!($61)) {
   __THREW__ = 0;
   HEAP32[$vararg_buffer7>>2] = 16449;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = 16483;
   invoke_vii(432,1,($vararg_buffer7|0));
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   if (!($63)) {
    $0 = $FragmentShaderErrorMessage;
    $1 = 0;
    $64 = $0;
    $65 = $1;
    $66 = HEAP32[$64>>2]|0;
    $67 = (($66) + ($65)|0);
    __THREW__ = 0;
    HEAP32[$vararg_buffer11>>2] = 16467;
    $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
    HEAP32[$vararg_ptr14>>2] = -1;
    $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
    HEAP32[$vararg_ptr15>>2] = $67;
    invoke_vii(432,4,($vararg_buffer11|0));
    $68 = __THREW__; __THREW__ = 0;
    $69 = $68&1;
    if (!($69)) {
     $12 = 0;
     $17 = 1;
     __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($FragmentShaderErrorMessage);
     $104 = $12;
     STACKTOP = sp;return ($104|0);
    }
   }
  }
  $70 = ___cxa_find_matching_catch()|0;
  $71 = tempRet0;
  $15 = $70;
  $16 = $71;
  __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($FragmentShaderErrorMessage);
  $105 = $15;
  $106 = $16;
  ___resumeException($105|0);
  // unreachable;
 }
 $72 = (_glCreateProgram()|0);
 $ProgramID = $72;
 $73 = $ProgramID;
 $74 = $VertexShaderID;
 _glAttachShader(($73|0),($74|0));
 $75 = $ProgramID;
 $76 = $FragmentShaderID;
 _glAttachShader(($75|0),($76|0));
 $77 = $ProgramID;
 _glLinkProgram(($77|0));
 $78 = $ProgramID;
 _glGetProgramiv(($78|0),35714,($result|0));
 $79 = $ProgramID;
 _glGetProgramiv(($79|0),35716,($InfoLogLength|0));
 $80 = HEAP32[$result>>2]|0;
 $81 = ($80|0)!=(0);
 if ($81) {
  $101 = $VertexShaderID;
  _glDeleteShader(($101|0));
  $102 = $FragmentShaderID;
  _glDeleteShader(($102|0));
  $103 = $ProgramID;
  $12 = $103;
  $104 = $12;
  STACKTOP = sp;return ($104|0);
 }
 $82 = $ProgramID;
 _glDeleteProgram(($82|0));
 $83 = HEAP32[$InfoLogLength>>2]|0;
 $84 = (($83) + 1)|0;
 __ZNSt3__16vectorIcNS_9allocatorIcEEEC2Ej($ProgramErrorMessage,$84);
 $85 = $ProgramID;
 $86 = HEAP32[$InfoLogLength>>2]|0;
 $2 = $ProgramErrorMessage;
 $3 = 0;
 $87 = $2;
 $88 = $3;
 $89 = HEAP32[$87>>2]|0;
 $90 = (($89) + ($88)|0);
 __THREW__ = 0;
 invoke_viiii(433,($85|0),($86|0),(0|0),($90|0));
 $91 = __THREW__; __THREW__ = 0;
 $92 = $91&1;
 if (!($92)) {
  $4 = $ProgramErrorMessage;
  $5 = 0;
  $93 = $4;
  $94 = $5;
  $95 = HEAP32[$93>>2]|0;
  $96 = (($95) + ($94)|0);
  __THREW__ = 0;
  HEAP32[$vararg_buffer16>>2] = 16467;
  $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
  HEAP32[$vararg_ptr19>>2] = -1;
  $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
  HEAP32[$vararg_ptr20>>2] = $96;
  invoke_vii(432,4,($vararg_buffer16|0));
  $97 = __THREW__; __THREW__ = 0;
  $98 = $97&1;
  if (!($98)) {
   $12 = 0;
   $17 = 1;
   __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($ProgramErrorMessage);
   $104 = $12;
   STACKTOP = sp;return ($104|0);
  }
 }
 $99 = ___cxa_find_matching_catch()|0;
 $100 = tempRet0;
 $15 = $99;
 $16 = $100;
 __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($ProgramErrorMessage);
 $105 = $15;
 $106 = $16;
 ___resumeException($105|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $7 = $14;
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($14)) + 8|0);
 $5 = $16;
 HEAP32[$6>>2] = 0;
 $17 = $5;
 $4 = $6;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $2 = $17;
 HEAP32[$3>>2] = $19;
 $20 = $2;
 $1 = $20;
 $0 = $3;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 $23 = $10;
 $24 = ($23>>>0)>(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $10;
 __THREW__ = 0;
 invoke_vii(434,($13|0),($25|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = $10;
  __THREW__ = 0;
  invoke_vii(435,($13|0),($28|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if (!($30)) {
   STACKTOP = sp;return;
  }
 }
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $11 = $31;
 $12 = $32;
 __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($13);
 $33 = $11;
 $34 = $12;
 ___resumeException($33|0);
 // unreachable;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN5TimerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = (__ZNSt3__16chrono12steady_clock3nowEv()|0);
 $4 = tempRet0;
 $5 = $2;
 $6 = $5;
 HEAP32[$6>>2] = $3;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $4;
 $9 = ((($1)) + 16|0);
 $10 = ((($1)) + 8|0);
 ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;
 $11 = ((($1)) + 24|0);
 $12 = ((($1)) + 8|0);
 ;HEAP32[$11>>2]=HEAP32[$12>>2]|0;HEAP32[$11+4>>2]=HEAP32[$12+4>>2]|0;
 STACKTOP = sp;return;
}
function ___cxx_global_var_init10() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 1.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_(5152,5148,5148,$0);
 STACKTOP = sp;return;
}
function __Z14GenerateSquarefffRNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEEE($x,$y,$s,$data) {
 $x = +$x;
 $y = +$y;
 $s = +$s;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0;
 var $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0.0, $589 = 0.0, $59 = 0, $590 = 0.0, $591 = 0.0, $592 = 0.0, $593 = 0.0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i1 = 0, $__annotator$i3 = 0, $__annotator$i5 = 0, $__annotator$i7 = 0, $__annotator$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp + 40|0;
 $28 = sp + 1127|0;
 $__annotator$i9 = sp + 1126|0;
 $64 = sp + 32|0;
 $71 = sp + 1125|0;
 $__annotator$i7 = sp + 1124|0;
 $107 = sp + 24|0;
 $114 = sp + 1123|0;
 $__annotator$i5 = sp + 1122|0;
 $150 = sp + 16|0;
 $157 = sp + 1121|0;
 $__annotator$i3 = sp + 1120|0;
 $193 = sp + 8|0;
 $200 = sp + 1119|0;
 $__annotator$i1 = sp + 1118|0;
 $236 = sp;
 $243 = sp + 1117|0;
 $__annotator$i = sp + 1116|0;
 $262 = sp + 112|0;
 $263 = sp + 108|0;
 $264 = sp + 104|0;
 $265 = sp + 100|0;
 $266 = sp + 96|0;
 $267 = sp + 92|0;
 $268 = sp + 88|0;
 $269 = sp + 84|0;
 $270 = sp + 80|0;
 $271 = sp + 76|0;
 $272 = sp + 72|0;
 $273 = sp + 68|0;
 $274 = sp + 64|0;
 $275 = sp + 60|0;
 $276 = sp + 56|0;
 $277 = sp + 52|0;
 $278 = sp + 48|0;
 $279 = sp + 44|0;
 $258 = $x;
 $259 = $y;
 $260 = $s;
 $261 = $data;
 $280 = $260;
 $281 = $280 * 0.5;
 $260 = $281;
 $282 = $261;
 $283 = $258;
 $284 = $260;
 $285 = $283 - $284;
 HEAPF32[$262>>2] = $285;
 $286 = $259;
 $287 = $260;
 $288 = $286 - $287;
 HEAPF32[$263>>2] = $288;
 HEAPF32[$264>>2] = 0.0;
 $254 = $282;
 $255 = $262;
 $256 = $263;
 $257 = $264;
 $289 = $254;
 $290 = ((($289)) + 4|0);
 $291 = HEAP32[$290>>2]|0;
 $253 = $289;
 $292 = $253;
 $293 = ((($292)) + 8|0);
 $252 = $293;
 $294 = $252;
 $251 = $294;
 $295 = $251;
 $296 = HEAP32[$295>>2]|0;
 $297 = ($291>>>0)<($296>>>0);
 if ($297) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i,$289,1);
  $250 = $289;
  $298 = $250;
  $299 = ((($298)) + 8|0);
  $249 = $299;
  $300 = $249;
  $248 = $300;
  $301 = $248;
  $302 = ((($289)) + 4|0);
  $303 = HEAP32[$302>>2]|0;
  $244 = $303;
  $304 = $244;
  $305 = $255;
  $217 = $305;
  $306 = $217;
  $307 = $256;
  $215 = $307;
  $308 = $215;
  $309 = $257;
  $216 = $309;
  $310 = $216;
  $238 = $301;
  $239 = $304;
  $240 = $306;
  $241 = $308;
  $242 = $310;
  $311 = $238;
  $312 = $239;
  $313 = $240;
  $237 = $313;
  $314 = $237;
  $315 = $241;
  $219 = $315;
  $316 = $219;
  $317 = $242;
  $218 = $317;
  $318 = $218;
  ;HEAP8[$236>>0]=HEAP8[$243>>0]|0;
  $231 = $311;
  $232 = $312;
  $233 = $314;
  $234 = $316;
  $235 = $318;
  $319 = $231;
  $320 = $232;
  $321 = $233;
  $230 = $321;
  $322 = $230;
  $323 = $234;
  $221 = $323;
  $324 = $221;
  $325 = $235;
  $220 = $325;
  $326 = $220;
  $225 = $319;
  $226 = $320;
  $227 = $322;
  $228 = $324;
  $229 = $326;
  $327 = $226;
  $328 = $227;
  $224 = $328;
  $329 = $224;
  $330 = $228;
  $223 = $330;
  $331 = $223;
  $332 = $229;
  $222 = $332;
  $333 = $222;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($327,$329,$331,$333);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $334 = ((($289)) + 4|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = ((($335)) + 12|0);
  HEAP32[$334>>2] = $336;
 } else {
  $337 = $255;
  $245 = $337;
  $338 = $245;
  $339 = $256;
  $246 = $339;
  $340 = $246;
  $341 = $257;
  $247 = $341;
  $342 = $247;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__emplace_back_slow_pathIJfffEEEvDpOT_($289,$338,$340,$342);
 }
 $343 = $261;
 $344 = $258;
 $345 = $260;
 $346 = $344 + $345;
 HEAPF32[$265>>2] = $346;
 $347 = $259;
 $348 = $260;
 $349 = $347 - $348;
 HEAPF32[$266>>2] = $349;
 HEAPF32[$267>>2] = 0.0;
 $211 = $343;
 $212 = $265;
 $213 = $266;
 $214 = $267;
 $350 = $211;
 $351 = ((($350)) + 4|0);
 $352 = HEAP32[$351>>2]|0;
 $210 = $350;
 $353 = $210;
 $354 = ((($353)) + 8|0);
 $209 = $354;
 $355 = $209;
 $208 = $355;
 $356 = $208;
 $357 = HEAP32[$356>>2]|0;
 $358 = ($352>>>0)<($357>>>0);
 if ($358) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i1,$350,1);
  $207 = $350;
  $359 = $207;
  $360 = ((($359)) + 8|0);
  $206 = $360;
  $361 = $206;
  $205 = $361;
  $362 = $205;
  $363 = ((($350)) + 4|0);
  $364 = HEAP32[$363>>2]|0;
  $201 = $364;
  $365 = $201;
  $366 = $212;
  $174 = $366;
  $367 = $174;
  $368 = $213;
  $172 = $368;
  $369 = $172;
  $370 = $214;
  $173 = $370;
  $371 = $173;
  $195 = $362;
  $196 = $365;
  $197 = $367;
  $198 = $369;
  $199 = $371;
  $372 = $195;
  $373 = $196;
  $374 = $197;
  $194 = $374;
  $375 = $194;
  $376 = $198;
  $176 = $376;
  $377 = $176;
  $378 = $199;
  $175 = $378;
  $379 = $175;
  ;HEAP8[$193>>0]=HEAP8[$200>>0]|0;
  $188 = $372;
  $189 = $373;
  $190 = $375;
  $191 = $377;
  $192 = $379;
  $380 = $188;
  $381 = $189;
  $382 = $190;
  $187 = $382;
  $383 = $187;
  $384 = $191;
  $178 = $384;
  $385 = $178;
  $386 = $192;
  $177 = $386;
  $387 = $177;
  $182 = $380;
  $183 = $381;
  $184 = $383;
  $185 = $385;
  $186 = $387;
  $388 = $183;
  $389 = $184;
  $181 = $389;
  $390 = $181;
  $391 = $185;
  $180 = $391;
  $392 = $180;
  $393 = $186;
  $179 = $393;
  $394 = $179;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($388,$390,$392,$394);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i1);
  $395 = ((($350)) + 4|0);
  $396 = HEAP32[$395>>2]|0;
  $397 = ((($396)) + 12|0);
  HEAP32[$395>>2] = $397;
 } else {
  $398 = $212;
  $202 = $398;
  $399 = $202;
  $400 = $213;
  $203 = $400;
  $401 = $203;
  $402 = $214;
  $204 = $402;
  $403 = $204;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__emplace_back_slow_pathIJfffEEEvDpOT_($350,$399,$401,$403);
 }
 $404 = $261;
 $405 = $258;
 $406 = $260;
 $407 = $405 - $406;
 HEAPF32[$268>>2] = $407;
 $408 = $259;
 $409 = $260;
 $410 = $408 + $409;
 HEAPF32[$269>>2] = $410;
 HEAPF32[$270>>2] = 0.0;
 $168 = $404;
 $169 = $268;
 $170 = $269;
 $171 = $270;
 $411 = $168;
 $412 = ((($411)) + 4|0);
 $413 = HEAP32[$412>>2]|0;
 $167 = $411;
 $414 = $167;
 $415 = ((($414)) + 8|0);
 $166 = $415;
 $416 = $166;
 $165 = $416;
 $417 = $165;
 $418 = HEAP32[$417>>2]|0;
 $419 = ($413>>>0)<($418>>>0);
 if ($419) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i3,$411,1);
  $164 = $411;
  $420 = $164;
  $421 = ((($420)) + 8|0);
  $163 = $421;
  $422 = $163;
  $162 = $422;
  $423 = $162;
  $424 = ((($411)) + 4|0);
  $425 = HEAP32[$424>>2]|0;
  $158 = $425;
  $426 = $158;
  $427 = $169;
  $131 = $427;
  $428 = $131;
  $429 = $170;
  $129 = $429;
  $430 = $129;
  $431 = $171;
  $130 = $431;
  $432 = $130;
  $152 = $423;
  $153 = $426;
  $154 = $428;
  $155 = $430;
  $156 = $432;
  $433 = $152;
  $434 = $153;
  $435 = $154;
  $151 = $435;
  $436 = $151;
  $437 = $155;
  $133 = $437;
  $438 = $133;
  $439 = $156;
  $132 = $439;
  $440 = $132;
  ;HEAP8[$150>>0]=HEAP8[$157>>0]|0;
  $145 = $433;
  $146 = $434;
  $147 = $436;
  $148 = $438;
  $149 = $440;
  $441 = $145;
  $442 = $146;
  $443 = $147;
  $144 = $443;
  $444 = $144;
  $445 = $148;
  $135 = $445;
  $446 = $135;
  $447 = $149;
  $134 = $447;
  $448 = $134;
  $139 = $441;
  $140 = $442;
  $141 = $444;
  $142 = $446;
  $143 = $448;
  $449 = $140;
  $450 = $141;
  $138 = $450;
  $451 = $138;
  $452 = $142;
  $137 = $452;
  $453 = $137;
  $454 = $143;
  $136 = $454;
  $455 = $136;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($449,$451,$453,$455);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i3);
  $456 = ((($411)) + 4|0);
  $457 = HEAP32[$456>>2]|0;
  $458 = ((($457)) + 12|0);
  HEAP32[$456>>2] = $458;
 } else {
  $459 = $169;
  $159 = $459;
  $460 = $159;
  $461 = $170;
  $160 = $461;
  $462 = $160;
  $463 = $171;
  $161 = $463;
  $464 = $161;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__emplace_back_slow_pathIJfffEEEvDpOT_($411,$460,$462,$464);
 }
 $465 = $261;
 $466 = $258;
 $467 = $260;
 $468 = $466 + $467;
 HEAPF32[$271>>2] = $468;
 $469 = $259;
 $470 = $260;
 $471 = $469 - $470;
 HEAPF32[$272>>2] = $471;
 HEAPF32[$273>>2] = 0.0;
 $125 = $465;
 $126 = $271;
 $127 = $272;
 $128 = $273;
 $472 = $125;
 $473 = ((($472)) + 4|0);
 $474 = HEAP32[$473>>2]|0;
 $124 = $472;
 $475 = $124;
 $476 = ((($475)) + 8|0);
 $123 = $476;
 $477 = $123;
 $122 = $477;
 $478 = $122;
 $479 = HEAP32[$478>>2]|0;
 $480 = ($474>>>0)<($479>>>0);
 if ($480) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i5,$472,1);
  $121 = $472;
  $481 = $121;
  $482 = ((($481)) + 8|0);
  $120 = $482;
  $483 = $120;
  $119 = $483;
  $484 = $119;
  $485 = ((($472)) + 4|0);
  $486 = HEAP32[$485>>2]|0;
  $115 = $486;
  $487 = $115;
  $488 = $126;
  $88 = $488;
  $489 = $88;
  $490 = $127;
  $86 = $490;
  $491 = $86;
  $492 = $128;
  $87 = $492;
  $493 = $87;
  $109 = $484;
  $110 = $487;
  $111 = $489;
  $112 = $491;
  $113 = $493;
  $494 = $109;
  $495 = $110;
  $496 = $111;
  $108 = $496;
  $497 = $108;
  $498 = $112;
  $90 = $498;
  $499 = $90;
  $500 = $113;
  $89 = $500;
  $501 = $89;
  ;HEAP8[$107>>0]=HEAP8[$114>>0]|0;
  $102 = $494;
  $103 = $495;
  $104 = $497;
  $105 = $499;
  $106 = $501;
  $502 = $102;
  $503 = $103;
  $504 = $104;
  $101 = $504;
  $505 = $101;
  $506 = $105;
  $92 = $506;
  $507 = $92;
  $508 = $106;
  $91 = $508;
  $509 = $91;
  $96 = $502;
  $97 = $503;
  $98 = $505;
  $99 = $507;
  $100 = $509;
  $510 = $97;
  $511 = $98;
  $95 = $511;
  $512 = $95;
  $513 = $99;
  $94 = $513;
  $514 = $94;
  $515 = $100;
  $93 = $515;
  $516 = $93;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($510,$512,$514,$516);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i5);
  $517 = ((($472)) + 4|0);
  $518 = HEAP32[$517>>2]|0;
  $519 = ((($518)) + 12|0);
  HEAP32[$517>>2] = $519;
 } else {
  $520 = $126;
  $116 = $520;
  $521 = $116;
  $522 = $127;
  $117 = $522;
  $523 = $117;
  $524 = $128;
  $118 = $524;
  $525 = $118;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__emplace_back_slow_pathIJfffEEEvDpOT_($472,$521,$523,$525);
 }
 $526 = $261;
 $527 = $258;
 $528 = $260;
 $529 = $527 + $528;
 HEAPF32[$274>>2] = $529;
 $530 = $259;
 $531 = $260;
 $532 = $530 + $531;
 HEAPF32[$275>>2] = $532;
 HEAPF32[$276>>2] = 0.0;
 $82 = $526;
 $83 = $274;
 $84 = $275;
 $85 = $276;
 $533 = $82;
 $534 = ((($533)) + 4|0);
 $535 = HEAP32[$534>>2]|0;
 $81 = $533;
 $536 = $81;
 $537 = ((($536)) + 8|0);
 $80 = $537;
 $538 = $80;
 $79 = $538;
 $539 = $79;
 $540 = HEAP32[$539>>2]|0;
 $541 = ($535>>>0)<($540>>>0);
 if ($541) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i7,$533,1);
  $78 = $533;
  $542 = $78;
  $543 = ((($542)) + 8|0);
  $77 = $543;
  $544 = $77;
  $76 = $544;
  $545 = $76;
  $546 = ((($533)) + 4|0);
  $547 = HEAP32[$546>>2]|0;
  $72 = $547;
  $548 = $72;
  $549 = $83;
  $45 = $549;
  $550 = $45;
  $551 = $84;
  $43 = $551;
  $552 = $43;
  $553 = $85;
  $44 = $553;
  $554 = $44;
  $66 = $545;
  $67 = $548;
  $68 = $550;
  $69 = $552;
  $70 = $554;
  $555 = $66;
  $556 = $67;
  $557 = $68;
  $65 = $557;
  $558 = $65;
  $559 = $69;
  $47 = $559;
  $560 = $47;
  $561 = $70;
  $46 = $561;
  $562 = $46;
  ;HEAP8[$64>>0]=HEAP8[$71>>0]|0;
  $59 = $555;
  $60 = $556;
  $61 = $558;
  $62 = $560;
  $63 = $562;
  $563 = $59;
  $564 = $60;
  $565 = $61;
  $58 = $565;
  $566 = $58;
  $567 = $62;
  $49 = $567;
  $568 = $49;
  $569 = $63;
  $48 = $569;
  $570 = $48;
  $53 = $563;
  $54 = $564;
  $55 = $566;
  $56 = $568;
  $57 = $570;
  $571 = $54;
  $572 = $55;
  $52 = $572;
  $573 = $52;
  $574 = $56;
  $51 = $574;
  $575 = $51;
  $576 = $57;
  $50 = $576;
  $577 = $50;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($571,$573,$575,$577);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i7);
  $578 = ((($533)) + 4|0);
  $579 = HEAP32[$578>>2]|0;
  $580 = ((($579)) + 12|0);
  HEAP32[$578>>2] = $580;
 } else {
  $581 = $83;
  $73 = $581;
  $582 = $73;
  $583 = $84;
  $74 = $583;
  $584 = $74;
  $585 = $85;
  $75 = $585;
  $586 = $75;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__emplace_back_slow_pathIJfffEEEvDpOT_($533,$582,$584,$586);
 }
 $587 = $261;
 $588 = $258;
 $589 = $260;
 $590 = $588 - $589;
 HEAPF32[$277>>2] = $590;
 $591 = $259;
 $592 = $260;
 $593 = $591 + $592;
 HEAPF32[$278>>2] = $593;
 HEAPF32[$279>>2] = 0.0;
 $39 = $587;
 $40 = $277;
 $41 = $278;
 $42 = $279;
 $594 = $39;
 $595 = ((($594)) + 4|0);
 $596 = HEAP32[$595>>2]|0;
 $38 = $594;
 $597 = $38;
 $598 = ((($597)) + 8|0);
 $37 = $598;
 $599 = $37;
 $36 = $599;
 $600 = $36;
 $601 = HEAP32[$600>>2]|0;
 $602 = ($596>>>0)<($601>>>0);
 if ($602) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i9,$594,1);
  $35 = $594;
  $603 = $35;
  $604 = ((($603)) + 8|0);
  $34 = $604;
  $605 = $34;
  $33 = $605;
  $606 = $33;
  $607 = ((($594)) + 4|0);
  $608 = HEAP32[$607>>2]|0;
  $29 = $608;
  $609 = $29;
  $610 = $40;
  $2 = $610;
  $611 = $2;
  $612 = $41;
  $0 = $612;
  $613 = $0;
  $614 = $42;
  $1 = $614;
  $615 = $1;
  $23 = $606;
  $24 = $609;
  $25 = $611;
  $26 = $613;
  $27 = $615;
  $616 = $23;
  $617 = $24;
  $618 = $25;
  $22 = $618;
  $619 = $22;
  $620 = $26;
  $4 = $620;
  $621 = $4;
  $622 = $27;
  $3 = $622;
  $623 = $3;
  ;HEAP8[$21>>0]=HEAP8[$28>>0]|0;
  $16 = $616;
  $17 = $617;
  $18 = $619;
  $19 = $621;
  $20 = $623;
  $624 = $16;
  $625 = $17;
  $626 = $18;
  $15 = $626;
  $627 = $15;
  $628 = $19;
  $6 = $628;
  $629 = $6;
  $630 = $20;
  $5 = $630;
  $631 = $5;
  $10 = $624;
  $11 = $625;
  $12 = $627;
  $13 = $629;
  $14 = $631;
  $632 = $11;
  $633 = $12;
  $9 = $633;
  $634 = $9;
  $635 = $13;
  $8 = $635;
  $636 = $8;
  $637 = $14;
  $7 = $637;
  $638 = $7;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($632,$634,$636,$638);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i9);
  $639 = ((($594)) + 4|0);
  $640 = HEAP32[$639>>2]|0;
  $641 = ((($640)) + 12|0);
  HEAP32[$639>>2] = $641;
  STACKTOP = sp;return;
 } else {
  $642 = $40;
  $30 = $642;
  $643 = $30;
  $644 = $41;
  $31 = $644;
  $645 = $31;
  $646 = $42;
  $32 = $646;
  $647 = $32;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__emplace_back_slow_pathIJfffEEEvDpOT_($594,$643,$645,$647);
  STACKTOP = sp;return;
 }
}
function ___cxx_global_var_init11() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 56|0;
 $6 = sp + 44|0;
 $10 = sp + 28|0;
 $13 = sp + 16|0;
 $17 = 5172;
 $18 = $17;
 $16 = $18;
 $19 = $16;
 $15 = $19;
 $20 = $15;
 $14 = $20;
 $21 = $14;
 HEAP32[$21>>2] = 0;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($21)) + 8|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($21)) + 12|0);
 $12 = $24;
 HEAP32[$13>>2] = 0;
 $25 = $12;
 $11 = $13;
 $26 = $11;
 $27 = HEAP32[$26>>2]|0;
 $9 = $25;
 HEAP32[$10>>2] = $27;
 $28 = $9;
 $8 = $28;
 $7 = $10;
 $29 = $7;
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$28>>2] = $30;
 $31 = ((($20)) + 16|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($20)) + 20|0);
 $5 = $32;
 HEAP32[$6>>2] = 0;
 $33 = $5;
 $4 = $6;
 $34 = $4;
 $35 = HEAP32[$34>>2]|0;
 $2 = $33;
 HEAP32[$3>>2] = $35;
 $36 = $2;
 $1 = $36;
 $0 = $3;
 $37 = $0;
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$36>>2] = $38;
 STACKTOP = sp;return;
}
function __Z4initii($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $width;
 $1 = $height;
 (_glfwSetErrorCallback((436|0))|0);
 $2 = (_glfwInit()|0);
 $3 = ($2|0)!=(1);
 __Z7ThrowIfbPKc($3,16509);
 $4 = (_glfwGetVersionString()|0);
 $5 = (_strcmp($4,16526)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  ___assert_fail((16552|0),(16280|0),1870,(16613|0));
  // unreachable;
 } else {
  $7 = $0;
  $8 = $1;
  $9 = (_glfwCreateWindow(($7|0),($8|0),(16618|0),(0|0),(0|0))|0);
  HEAP32[5196>>2] = $9;
  $10 = HEAP32[5196>>2]|0;
  _glfwSetWindowPos(($10|0),900,100);
  $11 = HEAP32[5196>>2]|0;
  $12 = ($11|0)==(0|0);
  __Z7ThrowIfbPKc($12,16629);
  $13 = HEAP32[5196>>2]|0;
  _glfwMakeContextCurrent(($13|0));
  $14 = (_glfwGetCurrentContext()|0);
  $15 = HEAP32[5196>>2]|0;
  $16 = ($14|0)!=($15|0);
  __Z7ThrowIfbPKc($16,16649);
  _glfwSwapInterval(1);
  $17 = (_glewInit()|0);
  $18 = ($17|0)!=(0);
  __Z7ThrowIfbPKc($18,16675);
  $19 = (_glewGetString(0)|0);
  $20 = ($19|0)!=(0|0);
  $21 = (_glewGetString(0)|0);
  __Z7ThrowIfbPKc($20,$21);
  _glClearColor(0.0,0.0,0.0,1.0);
  STACKTOP = sp;return;
 }
}
function __ZL7errorcbiPKc($error,$msg) {
 $error = $error|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $error;
 $1 = $msg;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = 16467;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $3;
 _emscripten_log(4,($vararg_buffer|0));
 STACKTOP = sp;return;
}
function ___cxx_global_var_init19() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5TimerC2Ev(48);
 return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$byval_copy = 0, $$byval_copy52 = 0, $$byval_copy53 = 0, $$byval_copy54 = 0, $$field = 0, $$field13 = 0, $$field20 = 0, $$field23 = 0, $$field30 = 0, $$field33 = 0, $$field40 = 0, $$field43 = 0, $$index10 = 0, $$index12 = 0, $$index16 = 0, $$index18 = 0, $$index22 = 0, $$index26 = 0, $$index28 = 0, $$index32 = 0;
 var $$index36 = 0, $$index38 = 0, $$index42 = 0, $$index46 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__t$i$i = 0, $__t$i$i8 = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $__tmp$i$i7 = 0, $__tmp$i$i9 = 0, $eh$lpad$body$index6Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body6$index48Z2D = 0, $eh$lpad$body6$indexZ2D = 0;
 var $ex = 0, $h = 0, $session = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy54 = sp + 1484|0;
 $$byval_copy53 = sp + 1472|0;
 $$byval_copy52 = sp + 1460|0;
 $$byval_copy = sp + 1448|0;
 $vararg_buffer2 = sp + 232|0;
 $vararg_buffer = sp + 224|0;
 $38 = sp + 1280|0;
 $41 = sp + 1268|0;
 $44 = sp + 1256|0;
 $46 = sp + 1248|0;
 $91 = sp + 216|0;
 $92 = sp + 208|0;
 $93 = sp + 200|0;
 $94 = sp + 192|0;
 $100 = sp + 1511|0;
 $101 = sp + 1510|0;
 $102 = sp + 1509|0;
 $103 = sp + 1508|0;
 $142 = sp + 184|0;
 $143 = sp + 176|0;
 $144 = sp + 168|0;
 $145 = sp + 160|0;
 $151 = sp + 1507|0;
 $152 = sp + 1506|0;
 $153 = sp + 1505|0;
 $154 = sp + 1504|0;
 $177 = sp + 152|0;
 $178 = sp + 144|0;
 $179 = sp + 136|0;
 $180 = sp + 128|0;
 $184 = sp + 1503|0;
 $185 = sp + 1502|0;
 $186 = sp + 1501|0;
 $187 = sp + 1500|0;
 $206 = sp + 120|0;
 $207 = sp + 112|0;
 $208 = sp + 104|0;
 $209 = sp + 96|0;
 $213 = sp + 1499|0;
 $214 = sp + 1498|0;
 $215 = sp + 1497|0;
 $216 = sp + 1496|0;
 $278 = sp + 436|0;
 $281 = sp + 424|0;
 $284 = sp + 412|0;
 $285 = sp + 408|0;
 $295 = sp + 360|0;
 $session = sp;
 $298 = sp + 336|0;
 $299 = sp + 328|0;
 $300 = sp + 324|0;
 $301 = sp + 312|0;
 $302 = sp + 304|0;
 $303 = sp + 300|0;
 $304 = sp + 288|0;
 $305 = sp + 280|0;
 $306 = sp + 276|0;
 $307 = sp + 264|0;
 $308 = sp + 256|0;
 $309 = sp + 252|0;
 $310 = sp + 248|0;
 $311 = sp + 244|0;
 $312 = sp + 240|0;
 $292 = 0;
 $293 = $argc;
 $294 = $argv;
 $314 = $293;
 $315 = ($314|0)>(1);
 if ($315) {
  $316 = $294;
  $317 = ((($316)) + 4|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = (_strcmp($318,16692)|0);
  $320 = ($319|0)!=(0);
  if ($320) {
   $321 = $294;
   $322 = ((($321)) + 4|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $323;
  } else {
   $324 = 16700;
  }
  $290 = 2600;
  $291 = $324;
  $325 = $290;
  $326 = $291;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($325,$326)|0);
 }
 $327 = $293;
 $328 = ($327|0)>(3);
 if ($328) {
  $329 = $294;
  $330 = ((($329)) + 8|0);
  $331 = HEAP32[$330>>2]|0;
  $332 = (_atoi($331)|0);
  $w = $332;
  $333 = $294;
  $334 = ((($333)) + 12|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = (_atoi($335)|0);
  $h = $336;
  $337 = $w;
  $338 = ($337|0)>(0);
  if ($338) {
   $339 = $w;
   HEAP32[(2616)>>2] = $339;
  }
  $340 = $h;
  $341 = ($340|0)>(0);
  if ($341) {
   $342 = $h;
   HEAP32[(2620)>>2] = $342;
  }
 }
 $343 = $293;
 $344 = ($343|0)>(4);
 if ($344) {
  $345 = $294;
  $346 = ((($345)) + 16|0);
  $347 = HEAP32[$346>>2]|0;
  $288 = (2624);
  $289 = $347;
  $348 = $288;
  $349 = $289;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($348,$349)|0);
  $350 = $294;
  $351 = ((($350)) + 16|0);
  $352 = HEAP32[$351>>2]|0;
  HEAP32[$vararg_buffer>>2] = 16710;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $352;
  _emscripten_log(1,($vararg_buffer|0));
 }
 $353 = HEAP32[(2616)>>2]|0;
 $354 = HEAP32[(2620)>>2]|0;
 __Z4initii($353,$354);
 __THREW__ = 0;
 $355 = (invoke_ii(437,1200)|0);
 $356 = __THREW__; __THREW__ = 0;
 $357 = $356&1;
 do {
  if ($357) {
   $417 = ___cxa_find_matching_catch(80|0)|0;
   $418 = tempRet0;
   $eh$lpad$body$index6Z2D = $418;$eh$lpad$body$indexZ2D = $417;
  } else {
   __THREW__ = 0;
   invoke_vi(438,($355|0));
   $358 = __THREW__; __THREW__ = 0;
   $359 = $358&1;
   if ($359) {
    $360 = ___cxa_find_matching_catch(80|0)|0;
    $361 = tempRet0;
    $286 = $360;
    $287 = $361;
    __ZdlPv($355);
    $362 = $286;
    $363 = $287;
    $eh$lpad$body$index6Z2D = $363;$eh$lpad$body$indexZ2D = $362;
    break;
   }
   $283 = $285;
   HEAP32[$284>>2] = $355;
   $364 = $283;
   $282 = $284;
   $365 = $282;
   $366 = HEAP32[$365>>2]|0;
   $280 = $364;
   HEAP32[$281>>2] = $366;
   $367 = $280;
   $279 = $281;
   $368 = $279;
   $369 = HEAP32[$368>>2]|0;
   $277 = $367;
   HEAP32[$278>>2] = $369;
   $370 = $277;
   $276 = $278;
   $371 = $276;
   $372 = HEAP32[$371>>2]|0;
   HEAP32[$370>>2] = $372;
   $373 = HEAP32[$285>>2]|0;
   HEAP32[$295>>2] = $373;
   $274 = (2636);
   $275 = $295;
   $374 = $274;
   $375 = $275;
   $273 = $375;
   $376 = $273;
   $272 = $376;
   $377 = $272;
   $271 = $377;
   $378 = $271;
   $379 = HEAP32[$378>>2]|0;
   $__t$i$i = $379;
   $270 = $376;
   $380 = $270;
   $269 = $380;
   $381 = $269;
   HEAP32[$381>>2] = 0;
   $382 = $__t$i$i;
   $261 = $374;
   $262 = $382;
   $383 = $261;
   $260 = $383;
   $384 = $260;
   $259 = $384;
   $385 = $259;
   $386 = HEAP32[$385>>2]|0;
   $__tmp$i$i = $386;
   $387 = $262;
   $256 = $383;
   $388 = $256;
   $255 = $388;
   $389 = $255;
   HEAP32[$389>>2] = $387;
   $390 = $__tmp$i$i;
   $391 = ($390|0)!=(0|0);
   if ($391) {
    $254 = $383;
    $392 = $254;
    $253 = $392;
    $393 = $253;
    $394 = $__tmp$i$i;
    $257 = $393;
    $258 = $394;
    $395 = $258;
    $396 = ($395|0)==(0|0);
    if (!($396)) {
     __ZN5SceneD2Ev($395);
     __ZdlPv($395);
    }
   }
   $264 = $374;
   $397 = $264;
   $263 = $397;
   $398 = $275;
   $267 = $398;
   $399 = $267;
   $266 = $399;
   $400 = $266;
   $265 = $400;
   $401 = $265;
   $268 = $401;
   $252 = $295;
   $402 = $252;
   $250 = $402;
   $251 = 0;
   $403 = $250;
   $249 = $403;
   $404 = $249;
   $248 = $404;
   $405 = $248;
   $406 = HEAP32[$405>>2]|0;
   $__tmp$i$i1 = $406;
   $407 = $251;
   $245 = $403;
   $408 = $245;
   $244 = $408;
   $409 = $244;
   HEAP32[$409>>2] = $407;
   $410 = $__tmp$i$i1;
   $411 = ($410|0)!=(0|0);
   if ($411) {
    $243 = $403;
    $412 = $243;
    $242 = $412;
    $413 = $242;
    $414 = $__tmp$i$i1;
    $246 = $413;
    $247 = $414;
    $415 = $247;
    $416 = ($415|0)==(0|0);
    if (!($416)) {
     __ZN5SceneD2Ev($415);
     __ZdlPv($415);
    }
   }
   HEAP32[$299>>2] = (441);
   $$index10 = ((($299)) + 4|0);
   HEAP32[$$index10>>2] = 0;
   $226 = (2636);
   $456 = $226;
   $225 = $456;
   $457 = $225;
   $224 = $457;
   $458 = $224;
   $459 = HEAP32[$458>>2]|0;
   HEAP32[$300>>2] = $459;
   $222 = $299;
   $223 = $300;
   $460 = $222;
   $221 = $460;
   $461 = $221;
   $462 = $223;
   $198 = $462;
   $463 = $198;
   $218 = $298;
   $219 = $461;
   $220 = $463;
   $464 = $218;
   $465 = $219;
   $217 = $465;
   $466 = $217;
   $$field = HEAP32[$466>>2]|0;
   $$index12 = ((($466)) + 4|0);
   $$field13 = HEAP32[$$index12>>2]|0;
   HEAP32[$464>>2] = $$field;
   $$index16 = ((($464)) + 4|0);
   HEAP32[$$index16>>2] = $$field13;
   $467 = ((($464)) + 8|0);
   $468 = $220;
   $199 = $468;
   $469 = $199;
   $211 = $467;
   $212 = $469;
   $470 = $211;
   $471 = $212;
   $210 = $471;
   $472 = $210;
   ;HEAP8[$206>>0]=HEAP8[$216>>0]|0;
   ;HEAP8[$207>>0]=HEAP8[$215>>0]|0;
   ;HEAP8[$208>>0]=HEAP8[$214>>0]|0;
   ;HEAP8[$209>>0]=HEAP8[$213>>0]|0;
   $204 = $470;
   $205 = $472;
   $473 = $204;
   $474 = $205;
   $203 = $474;
   $475 = $203;
   $201 = $473;
   $202 = $475;
   $476 = $201;
   $477 = $202;
   $200 = $477;
   $478 = $200;
   $479 = HEAP32[$478>>2]|0;
   HEAP32[$476>>2] = $479;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$298>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$298+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$298+8>>2]|0;
   __ZNSt3__18functionIFvvEEC2INS_6__bindIM5SceneFvvEJPS5_EEEEET_PNS_9enable_ifIXaasr10__callableISA_EE5valuentsr7is_sameISA_S2_EE5valueEvE4typeE($session,$$byval_copy,0);
   $480 = ((($session)) + 24|0);
   HEAP32[$302>>2] = (442);
   $$index18 = ((($302)) + 4|0);
   HEAP32[$$index18>>2] = 0;
   $197 = (2636);
   $481 = $197;
   $196 = $481;
   $482 = $196;
   $195 = $482;
   $483 = $195;
   $484 = HEAP32[$483>>2]|0;
   HEAP32[$303>>2] = $484;
   $193 = $302;
   $194 = $303;
   $485 = $193;
   $192 = $485;
   $486 = $192;
   $487 = $194;
   $169 = $487;
   $488 = $169;
   $189 = $301;
   $190 = $486;
   $191 = $488;
   $489 = $189;
   $490 = $190;
   $188 = $490;
   $491 = $188;
   $$field20 = HEAP32[$491>>2]|0;
   $$index22 = ((($491)) + 4|0);
   $$field23 = HEAP32[$$index22>>2]|0;
   HEAP32[$489>>2] = $$field20;
   $$index26 = ((($489)) + 4|0);
   HEAP32[$$index26>>2] = $$field23;
   $492 = ((($489)) + 8|0);
   $493 = $191;
   $170 = $493;
   $494 = $170;
   $182 = $492;
   $183 = $494;
   $495 = $182;
   $496 = $183;
   $181 = $496;
   $497 = $181;
   ;HEAP8[$177>>0]=HEAP8[$187>>0]|0;
   ;HEAP8[$178>>0]=HEAP8[$186>>0]|0;
   ;HEAP8[$179>>0]=HEAP8[$185>>0]|0;
   ;HEAP8[$180>>0]=HEAP8[$184>>0]|0;
   $175 = $495;
   $176 = $497;
   $498 = $175;
   $499 = $176;
   $174 = $499;
   $500 = $174;
   $172 = $498;
   $173 = $500;
   $501 = $172;
   $502 = $173;
   $171 = $502;
   $503 = $171;
   $504 = HEAP32[$503>>2]|0;
   HEAP32[$501>>2] = $504;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy52>>2]=HEAP32[$301>>2]|0;HEAP32[$$byval_copy52+4>>2]=HEAP32[$301+4>>2]|0;HEAP32[$$byval_copy52+8>>2]=HEAP32[$301+8>>2]|0;
   invoke_viii(443,($480|0),($$byval_copy52|0),(0|0));
   $505 = __THREW__; __THREW__ = 0;
   $506 = $505&1;
   if ($506) {
    $694 = ___cxa_find_matching_catch()|0;
    $695 = tempRet0;
    $296 = $694;
    $297 = $695;
   } else {
    $507 = ((($session)) + 48|0);
    HEAP32[$305>>2] = (444);
    $$index28 = ((($305)) + 4|0);
    HEAP32[$$index28>>2] = 0;
    $168 = (2636);
    $508 = $168;
    $167 = $508;
    $509 = $167;
    $166 = $509;
    $510 = $166;
    $511 = HEAP32[$510>>2]|0;
    HEAP32[$306>>2] = $511;
    $162 = $305;
    $163 = $306;
    $164 = 27941;
    $165 = 27942;
    $512 = $162;
    $161 = $512;
    $513 = $161;
    $514 = $163;
    $118 = $514;
    $515 = $118;
    $516 = $164;
    $119 = $516;
    $517 = $119;
    $518 = $165;
    $120 = $518;
    $519 = $120;
    $156 = $304;
    $157 = $513;
    $158 = $515;
    $159 = $517;
    $160 = $519;
    $520 = $156;
    $521 = $157;
    $155 = $521;
    $522 = $155;
    $$field30 = HEAP32[$522>>2]|0;
    $$index32 = ((($522)) + 4|0);
    $$field33 = HEAP32[$$index32>>2]|0;
    HEAP32[$520>>2] = $$field30;
    $$index36 = ((($520)) + 4|0);
    HEAP32[$$index36>>2] = $$field33;
    $523 = ((($520)) + 8|0);
    $524 = $158;
    $121 = $524;
    $525 = $121;
    $526 = $159;
    $122 = $526;
    $527 = $122;
    $528 = $160;
    $123 = $528;
    $529 = $123;
    $147 = $523;
    $148 = $525;
    $149 = $527;
    $150 = $529;
    $530 = $147;
    $531 = $148;
    $146 = $531;
    $532 = $146;
    $533 = $149;
    $124 = $533;
    $534 = $124;
    $535 = $150;
    $125 = $535;
    $536 = $125;
    ;HEAP8[$142>>0]=HEAP8[$154>>0]|0;
    ;HEAP8[$143>>0]=HEAP8[$153>>0]|0;
    ;HEAP8[$144>>0]=HEAP8[$152>>0]|0;
    ;HEAP8[$145>>0]=HEAP8[$151>>0]|0;
    $138 = $530;
    $139 = $532;
    $140 = $534;
    $141 = $536;
    $537 = $138;
    $538 = $139;
    $137 = $538;
    $539 = $137;
    $127 = $537;
    $128 = $539;
    $540 = $127;
    $541 = $128;
    $126 = $541;
    $542 = $126;
    $543 = HEAP32[$542>>2]|0;
    HEAP32[$540>>2] = $543;
    $544 = $140;
    $129 = $544;
    $545 = $129;
    $131 = $537;
    $132 = $545;
    $546 = $132;
    $130 = $546;
    $547 = $141;
    $133 = $547;
    $548 = $133;
    $135 = $537;
    $136 = $548;
    $549 = $136;
    $134 = $549;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy53>>2]=HEAP32[$304>>2]|0;HEAP32[$$byval_copy53+4>>2]=HEAP32[$304+4>>2]|0;HEAP32[$$byval_copy53+8>>2]=HEAP32[$304+8>>2]|0;
    invoke_viii(445,($507|0),($$byval_copy53|0),(0|0));
    $550 = __THREW__; __THREW__ = 0;
    $551 = $550&1;
    do {
     if ($551) {
      $696 = ___cxa_find_matching_catch()|0;
      $697 = tempRet0;
      $296 = $696;
      $297 = $697;
     } else {
      $552 = ((($session)) + 72|0);
      HEAP32[$308>>2] = (446);
      $$index38 = ((($308)) + 4|0);
      HEAP32[$$index38>>2] = 0;
      $117 = (2636);
      $553 = $117;
      $116 = $553;
      $554 = $116;
      $115 = $554;
      $555 = $115;
      $556 = HEAP32[$555>>2]|0;
      HEAP32[$309>>2] = $556;
      $111 = $308;
      $112 = $309;
      $113 = 27941;
      $114 = 27942;
      $557 = $111;
      $110 = $557;
      $558 = $110;
      $559 = $112;
      $67 = $559;
      $560 = $67;
      $561 = $113;
      $68 = $561;
      $562 = $68;
      $563 = $114;
      $69 = $563;
      $564 = $69;
      $105 = $307;
      $106 = $558;
      $107 = $560;
      $108 = $562;
      $109 = $564;
      $565 = $105;
      $566 = $106;
      $104 = $566;
      $567 = $104;
      $$field40 = HEAP32[$567>>2]|0;
      $$index42 = ((($567)) + 4|0);
      $$field43 = HEAP32[$$index42>>2]|0;
      HEAP32[$565>>2] = $$field40;
      $$index46 = ((($565)) + 4|0);
      HEAP32[$$index46>>2] = $$field43;
      $568 = ((($565)) + 8|0);
      $569 = $107;
      $70 = $569;
      $570 = $70;
      $571 = $108;
      $71 = $571;
      $572 = $71;
      $573 = $109;
      $72 = $573;
      $574 = $72;
      $96 = $568;
      $97 = $570;
      $98 = $572;
      $99 = $574;
      $575 = $96;
      $576 = $97;
      $95 = $576;
      $577 = $95;
      $578 = $98;
      $73 = $578;
      $579 = $73;
      $580 = $99;
      $74 = $580;
      $581 = $74;
      ;HEAP8[$91>>0]=HEAP8[$103>>0]|0;
      ;HEAP8[$92>>0]=HEAP8[$102>>0]|0;
      ;HEAP8[$93>>0]=HEAP8[$101>>0]|0;
      ;HEAP8[$94>>0]=HEAP8[$100>>0]|0;
      $87 = $575;
      $88 = $577;
      $89 = $579;
      $90 = $581;
      $582 = $87;
      $583 = $88;
      $86 = $583;
      $584 = $86;
      $76 = $582;
      $77 = $584;
      $585 = $76;
      $586 = $77;
      $75 = $586;
      $587 = $75;
      $588 = HEAP32[$587>>2]|0;
      HEAP32[$585>>2] = $588;
      $589 = $89;
      $78 = $589;
      $590 = $78;
      $80 = $582;
      $81 = $590;
      $591 = $81;
      $79 = $591;
      $592 = $90;
      $82 = $592;
      $593 = $82;
      $84 = $582;
      $85 = $593;
      $594 = $85;
      $83 = $594;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy54>>2]=HEAP32[$307>>2]|0;HEAP32[$$byval_copy54+4>>2]=HEAP32[$307+4>>2]|0;HEAP32[$$byval_copy54+8>>2]=HEAP32[$307+8>>2]|0;
      invoke_viii(447,($552|0),($$byval_copy54|0),(0|0));
      $595 = __THREW__; __THREW__ = 0;
      $596 = $595&1;
      if ($596) {
       $698 = ___cxa_find_matching_catch()|0;
       $699 = tempRet0;
       $296 = $698;
       $297 = $699;
       __ZNSt3__18functionIFviPKcEED2Ev($507);
       break;
      }
      $66 = 2600;
      $597 = $66;
      $65 = $597;
      $598 = $65;
      $64 = $598;
      $599 = $64;
      $63 = $599;
      $600 = $63;
      $62 = $600;
      $601 = $62;
      $61 = $601;
      $602 = $61;
      $603 = HEAP8[$602>>0]|0;
      $604 = $603&255;
      $605 = $604 & 1;
      $606 = ($605|0)!=(0);
      if ($606) {
       $55 = $599;
       $607 = $55;
       $54 = $607;
       $608 = $54;
       $53 = $608;
       $609 = $53;
       $610 = ((($609)) + 8|0);
       $611 = HEAP32[$610>>2]|0;
       $618 = $611;
      } else {
       $60 = $599;
       $612 = $60;
       $59 = $612;
       $613 = $59;
       $58 = $613;
       $614 = $58;
       $615 = ((($614)) + 1|0);
       $57 = $615;
       $616 = $57;
       $56 = $616;
       $617 = $56;
       $618 = $617;
      }
      $52 = $618;
      $619 = $52;
      HEAP32[$311>>2] = $619;
      HEAP32[$312>>2] = 8000;
      $47 = $311;
      $48 = $312;
      $49 = $session;
      __THREW__ = 0;
      $620 = (invoke_ii(437,120)|0);
      $621 = __THREW__; __THREW__ = 0;
      $622 = $621&1;
      do {
       if ($622) {
        label = 51;
       } else {
        $623 = $47;
        $45 = $623;
        $624 = $45;
        $625 = HEAP32[$624>>2]|0;
        $626 = $48;
        $35 = $626;
        $627 = $35;
        $628 = HEAP32[$627>>2]|0;
        $629 = $628&65535;
        $630 = $49;
        $34 = $630;
        $631 = $34;
        __THREW__ = 0;
        invoke_viiiiii(448,($620|0),($625|0),($629|0),($631|0),1,1);
        $632 = __THREW__; __THREW__ = 0;
        $633 = $632&1;
        if ($633) {
         $634 = ___cxa_find_matching_catch()|0;
         $635 = tempRet0;
         $50 = $634;
         $51 = $635;
         __ZdlPv($620);
         $636 = $50;
         $637 = $51;
         $eh$lpad$body6$index48Z2D = $637;$eh$lpad$body6$indexZ2D = $636;
         break;
        }
        $43 = $46;
        HEAP32[$44>>2] = $620;
        $638 = $43;
        $42 = $44;
        $639 = $42;
        $640 = HEAP32[$639>>2]|0;
        $40 = $638;
        HEAP32[$41>>2] = $640;
        $641 = $40;
        $39 = $41;
        $642 = $39;
        $643 = HEAP32[$642>>2]|0;
        $37 = $641;
        HEAP32[$38>>2] = $643;
        $644 = $37;
        $36 = $38;
        $645 = $36;
        $646 = HEAP32[$645>>2]|0;
        HEAP32[$644>>2] = $646;
        $647 = HEAP32[$46>>2]|0;
        HEAP32[$310>>2] = $647;
        $32 = (2640);
        $33 = $310;
        $648 = $32;
        $649 = $33;
        $31 = $649;
        $650 = $31;
        $30 = $650;
        $651 = $30;
        $29 = $651;
        $652 = $29;
        $653 = HEAP32[$652>>2]|0;
        $__t$i$i8 = $653;
        $28 = $650;
        $654 = $28;
        $27 = $654;
        $655 = $27;
        HEAP32[$655>>2] = 0;
        $656 = $__t$i$i8;
        $19 = $648;
        $20 = $656;
        $657 = $19;
        $18 = $657;
        $658 = $18;
        $17 = $658;
        $659 = $17;
        $660 = HEAP32[$659>>2]|0;
        $__tmp$i$i7 = $660;
        $661 = $20;
        $14 = $657;
        $662 = $14;
        $13 = $662;
        $663 = $13;
        HEAP32[$663>>2] = $661;
        $664 = $__tmp$i$i7;
        $665 = ($664|0)!=(0|0);
        if ($665) {
         $12 = $657;
         $666 = $12;
         $11 = $666;
         $667 = $11;
         $668 = $__tmp$i$i7;
         $15 = $667;
         $16 = $668;
         $669 = $16;
         $670 = ($669|0)==(0|0);
         if (!($670)) {
          __ZN6ClientD2Ev($669);
          __ZdlPv($669);
         }
        }
        $22 = $648;
        $671 = $22;
        $21 = $671;
        $672 = $33;
        $25 = $672;
        $673 = $25;
        $24 = $673;
        $674 = $24;
        $23 = $674;
        $675 = $23;
        $26 = $675;
        $10 = $310;
        $676 = $10;
        $8 = $676;
        $9 = 0;
        $677 = $8;
        $7 = $677;
        $678 = $7;
        $6 = $678;
        $679 = $6;
        $680 = HEAP32[$679>>2]|0;
        $__tmp$i$i9 = $680;
        $681 = $9;
        $3 = $677;
        $682 = $3;
        $2 = $682;
        $683 = $2;
        HEAP32[$683>>2] = $681;
        $684 = $__tmp$i$i9;
        $685 = ($684|0)!=(0|0);
        do {
         if ($685) {
          $1 = $677;
          $686 = $1;
          $0 = $686;
          $687 = $0;
          $688 = $__tmp$i$i9;
          $4 = $687;
          $5 = $688;
          $689 = $5;
          $690 = ($689|0)==(0|0);
          if ($690) {
           break;
          }
          __ZN6ClientD2Ev($689);
          __ZdlPv($689);
         }
        } while(0);
        __THREW__ = 0;
        invoke_viii(449,(450|0),0,1);
        $691 = __THREW__; __THREW__ = 0;
        $692 = $691&1;
        if ($692) {
         label = 51;
        } else {
         $292 = 0;
         $313 = 1;
         __ZN7SessionD2Ev($session);
         $693 = $292;
         STACKTOP = sp;return ($693|0);
        }
       }
      } while(0);
      if ((label|0) == 51) {
       $700 = ___cxa_find_matching_catch()|0;
       $701 = tempRet0;
       $eh$lpad$body6$index48Z2D = $701;$eh$lpad$body6$indexZ2D = $700;
      }
      $296 = $eh$lpad$body6$indexZ2D;
      $297 = $eh$lpad$body6$index48Z2D;
      __ZN7SessionD2Ev($session);
      $702 = $296;
      $703 = $297;
      ___resumeException($702|0);
      // unreachable;
     }
    } while(0);
    __ZNSt3__18functionIFvvEED2Ev($480);
   }
   __ZNSt3__18functionIFvvEED2Ev($session);
   $702 = $296;
   $703 = $297;
   ___resumeException($702|0);
   // unreachable;
  }
 } while(0);
 $296 = $eh$lpad$body$indexZ2D;
 $297 = $eh$lpad$body$index6Z2D;
 $419 = $297;
 $420 = (_llvm_eh_typeid_for((80|0))|0);
 $421 = ($419|0)==($420|0);
 if (!($421)) {
  $702 = $296;
  $703 = $297;
  ___resumeException($702|0);
  // unreachable;
 }
 $422 = $296;
 $423 = (___cxa_begin_catch(($422|0))|0);
 $ex = $423;
 $424 = $ex;
 $425 = ((($424)) + 4|0);
 $241 = $425;
 $426 = $241;
 $240 = $426;
 $427 = $240;
 $239 = $427;
 $428 = $239;
 $238 = $428;
 $429 = $238;
 $237 = $429;
 $430 = $237;
 $236 = $430;
 $431 = $236;
 $432 = HEAP8[$431>>0]|0;
 $433 = $432&255;
 $434 = $433 & 1;
 $435 = ($434|0)!=(0);
 if ($435) {
  $230 = $428;
  $436 = $230;
  $229 = $436;
  $437 = $229;
  $228 = $437;
  $438 = $228;
  $439 = ((($438)) + 8|0);
  $440 = HEAP32[$439>>2]|0;
  $447 = $440;
 } else {
  $235 = $428;
  $441 = $235;
  $234 = $441;
  $442 = $234;
  $233 = $442;
  $443 = $233;
  $444 = ((($443)) + 1|0);
  $232 = $444;
  $445 = $232;
  $231 = $445;
  $446 = $231;
  $447 = $446;
 }
 $227 = $447;
 $448 = $227;
 __THREW__ = 0;
 HEAP32[$vararg_buffer2>>2] = $448;
 invoke_vii(432,4,($vararg_buffer2|0));
 $449 = __THREW__; __THREW__ = 0;
 $450 = $449&1;
 if (!($450)) {
  __THREW__ = 0;
  invoke_v(439);
  $451 = __THREW__; __THREW__ = 0;
 }
 $452 = ___cxa_find_matching_catch()|0;
 $453 = tempRet0;
 $296 = $452;
 $297 = $453;
 __THREW__ = 0;
 invoke_v(440);
 $454 = __THREW__; __THREW__ = 0;
 $455 = $454&1;
 if ($455) {
  $704 = ___cxa_find_matching_catch(0|0)|0;
  $705 = tempRet0;
  ___clang_call_terminate($704);
  // unreachable;
 } else {
  $702 = $296;
  $703 = $297;
  ___resumeException($702|0);
  // unreachable;
 }
 return (0)|0;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN5Scene6OnOpenEv($this) {
 $this = $this|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 HEAP32[$vararg_buffer>>2] = 16738;
 _emscripten_log(4,($vararg_buffer|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18functionIFvvEEC2INS_6__bindIM5SceneFvvEJPS5_EEEEET_PNS_9enable_ifIXaasr10__callableISA_EE5valuentsr7is_sameISA_S2_EE5valueEvE4typeE($this,$__f,$0) {
 $this = $this|0;
 $__f = $__f|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 88|0;
 $10 = sp + 80|0;
 $11 = sp + 72|0;
 $12 = sp + 64|0;
 $16 = sp + 225|0;
 $17 = sp + 224|0;
 $18 = sp + 223|0;
 $19 = sp + 222|0;
 $21 = sp + 164|0;
 $30 = sp + 56|0;
 $31 = sp + 48|0;
 $32 = sp + 40|0;
 $33 = sp + 32|0;
 $34 = sp + 24|0;
 $37 = sp + 221|0;
 $38 = sp + 120|0;
 $39 = sp + 220|0;
 $40 = sp + 219|0;
 $41 = sp + 218|0;
 $42 = sp + 16|0;
 $43 = sp + 8|0;
 $44 = sp;
 $48 = sp + 217|0;
 $49 = sp + 104|0;
 $50 = sp + 216|0;
 $52 = $this;
 $53 = $0;
 $54 = $52;
 $55 = ((($54)) + 16|0);
 HEAP32[$55>>2] = 0;
 $51 = $__f;
 $56 = ((($54)) + 16|0);
 HEAP32[$56>>2] = $54;
 $57 = ((($54)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $1 = $__f;
 $59 = $1;
 $46 = $58;
 $47 = $59;
 $60 = $46;
 $45 = $60;
 $61 = $45;
 $62 = 5836;
 HEAP32[$61>>2] = $62;
 $63 = 5792;
 HEAP32[$60>>2] = $63;
 $64 = ((($60)) + 4|0);
 $65 = $47;
 $2 = $65;
 $66 = $2;
 $22 = $66;
 $67 = $22;
 $20 = $67;
 $68 = $20;
 $14 = $21;
 $15 = $68;
 $69 = $14;
 $70 = $15;
 $13 = $70;
 $71 = $13;
 ;HEAP8[$9>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$16>>0]|0;
 $7 = $69;
 $8 = $71;
 $72 = $7;
 $73 = $8;
 $6 = $73;
 $74 = $6;
 $4 = $72;
 $5 = $74;
 $75 = $4;
 $76 = $5;
 $3 = $76;
 $77 = $3;
 HEAP32[$75>>2] = $77;
 $78 = HEAP32[$21>>2]|0;
 HEAP32[$49>>2] = $78;
 $23 = $50;
 ;HEAP8[$42>>0]=HEAP8[$50>>0]|0;
 ;HEAP8[$43>>0]=HEAP8[$49>>0]|0;HEAP8[$43+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$43+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$43+3>>0]=HEAP8[$49+3>>0]|0;
 ;HEAP8[$44>>0]=HEAP8[$48>>0]|0;
 $36 = $64;
 $79 = $36;
 $35 = $43;
 $80 = $35;
 ;HEAP32[$38>>2]=HEAP32[$80>>2]|0;
 $24 = $42;
 ;HEAP8[$30>>0]=HEAP8[$41>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$40>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$39>>0]|0;
 ;HEAP8[$33>>0]=HEAP8[$38>>0]|0;HEAP8[$33+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[$38+3>>0]|0;
 ;HEAP8[$34>>0]=HEAP8[$37>>0]|0;
 $29 = $79;
 $81 = $29;
 $28 = $81;
 $26 = $33;
 $82 = $26;
 $25 = $82;
 $83 = $25;
 $84 = HEAP32[$83>>2]|0;
 $27 = $84;
 $85 = $27;
 ;HEAP32[$81>>2]=HEAP32[$85>>2]|0;HEAP32[$81+4>>2]=HEAP32[$85+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$85+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN5Scene7OnCloseEv($this) {
 $this = $this|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 HEAP32[$vararg_buffer>>2] = 16750;
 _emscripten_log(4,($vararg_buffer|0));
 STACKTOP = sp;return;
}
function __ZN5Scene7OnErrorEiPKc($this,$code,$msg) {
 $this = $this|0;
 $code = $code|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $code;
 $2 = $msg;
 $3 = $1;
 $4 = $2;
 HEAP32[$vararg_buffer>>2] = 16764;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $4;
 _emscripten_log(4,($vararg_buffer|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18functionIFviPKcEEC2INS_6__bindIM5SceneFviS2_EJPS7_RNS_12placeholders4__phILi1EEERNSC_ILi2EEEEEEEET_PNS_9enable_ifIXaasr10__callableISI_EE5valuentsr7is_sameISI_S4_EE5valueEvE4typeE($this,$__f,$0) {
 $this = $this|0;
 $__f = $__f|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 88|0;
 $10 = sp + 80|0;
 $11 = sp + 72|0;
 $12 = sp + 64|0;
 $16 = sp + 225|0;
 $17 = sp + 224|0;
 $18 = sp + 223|0;
 $19 = sp + 222|0;
 $21 = sp + 164|0;
 $30 = sp + 56|0;
 $31 = sp + 48|0;
 $32 = sp + 40|0;
 $33 = sp + 32|0;
 $34 = sp + 24|0;
 $37 = sp + 221|0;
 $38 = sp + 120|0;
 $39 = sp + 220|0;
 $40 = sp + 219|0;
 $41 = sp + 218|0;
 $42 = sp + 16|0;
 $43 = sp + 8|0;
 $44 = sp;
 $48 = sp + 217|0;
 $49 = sp + 104|0;
 $50 = sp + 216|0;
 $52 = $this;
 $53 = $0;
 $54 = $52;
 $55 = ((($54)) + 16|0);
 HEAP32[$55>>2] = 0;
 $51 = $__f;
 $56 = ((($54)) + 16|0);
 HEAP32[$56>>2] = $54;
 $57 = ((($54)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $1 = $__f;
 $59 = $1;
 $46 = $58;
 $47 = $59;
 $60 = $46;
 $45 = $60;
 $61 = $45;
 $62 = 5924;
 HEAP32[$61>>2] = $62;
 $63 = 5880;
 HEAP32[$60>>2] = $63;
 $64 = ((($60)) + 4|0);
 $65 = $47;
 $2 = $65;
 $66 = $2;
 $22 = $66;
 $67 = $22;
 $20 = $67;
 $68 = $20;
 $14 = $21;
 $15 = $68;
 $69 = $14;
 $70 = $15;
 $13 = $70;
 $71 = $13;
 ;HEAP8[$9>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$16>>0]|0;
 $7 = $69;
 $8 = $71;
 $72 = $7;
 $73 = $8;
 $6 = $73;
 $74 = $6;
 $4 = $72;
 $5 = $74;
 $75 = $4;
 $76 = $5;
 $3 = $76;
 $77 = $3;
 HEAP32[$75>>2] = $77;
 $78 = HEAP32[$21>>2]|0;
 HEAP32[$49>>2] = $78;
 $23 = $50;
 ;HEAP8[$42>>0]=HEAP8[$50>>0]|0;
 ;HEAP8[$43>>0]=HEAP8[$49>>0]|0;HEAP8[$43+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$43+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$43+3>>0]=HEAP8[$49+3>>0]|0;
 ;HEAP8[$44>>0]=HEAP8[$48>>0]|0;
 $36 = $64;
 $79 = $36;
 $35 = $43;
 $80 = $35;
 ;HEAP32[$38>>2]=HEAP32[$80>>2]|0;
 $24 = $42;
 ;HEAP8[$30>>0]=HEAP8[$41>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$40>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$39>>0]|0;
 ;HEAP8[$33>>0]=HEAP8[$38>>0]|0;HEAP8[$33+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[$38+3>>0]|0;
 ;HEAP8[$34>>0]=HEAP8[$37>>0]|0;
 $29 = $79;
 $81 = $29;
 $28 = $81;
 $26 = $33;
 $82 = $26;
 $25 = $82;
 $83 = $25;
 $84 = HEAP32[$83>>2]|0;
 $27 = $84;
 $85 = $27;
 ;HEAP32[$81>>2]=HEAP32[$85>>2]|0;HEAP32[$81+4>>2]=HEAP32[$85+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$85+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN5Scene9OnMessageEPKci($this,$msg,$len) {
 $this = $this|0;
 $msg = $msg|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $str = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $str = sp + 16|0;
 $21 = $this;
 $22 = $msg;
 $23 = $len;
 $26 = $22;
 $27 = $23;
 $18 = $str;
 $19 = $26;
 $20 = $27;
 $28 = $18;
 $17 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $15 = $30;
 $31 = $19;
 $32 = $20;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($28,$31,$32);
 $14 = $str;
 $33 = $14;
 $13 = $33;
 $34 = $13;
 $12 = $34;
 $35 = $12;
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $9 = $37;
 $38 = $9;
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $40 & 1;
 $42 = ($41|0)!=(0);
 if ($42) {
  $3 = $35;
  $43 = $3;
  $2 = $43;
  $44 = $2;
  $1 = $44;
  $45 = $1;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $54 = $47;
 } else {
  $8 = $35;
  $48 = $8;
  $7 = $48;
  $49 = $7;
  $6 = $49;
  $50 = $6;
  $51 = ((($50)) + 1|0);
  $5 = $51;
  $52 = $5;
  $4 = $52;
  $53 = $4;
  $54 = $53;
 }
 $0 = $54;
 $55 = $0;
 __THREW__ = 0;
 HEAP32[$vararg_buffer>>2] = 16785;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $55;
 invoke_vii(432,4,($vararg_buffer|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $58 = ___cxa_find_matching_catch()|0;
  $59 = tempRet0;
  $24 = $58;
  $25 = $59;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($str);
  $60 = $24;
  $61 = $25;
  ___resumeException($60|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($str);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18functionIFvPKciEEC2INS_6__bindIM5SceneFvS2_iEJPS7_RNS_12placeholders4__phILi1EEERNSC_ILi2EEEEEEEET_PNS_9enable_ifIXaasr10__callableISI_EE5valuentsr7is_sameISI_S4_EE5valueEvE4typeE($this,$__f,$0) {
 $this = $this|0;
 $__f = $__f|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 88|0;
 $10 = sp + 80|0;
 $11 = sp + 72|0;
 $12 = sp + 64|0;
 $16 = sp + 225|0;
 $17 = sp + 224|0;
 $18 = sp + 223|0;
 $19 = sp + 222|0;
 $21 = sp + 164|0;
 $30 = sp + 56|0;
 $31 = sp + 48|0;
 $32 = sp + 40|0;
 $33 = sp + 32|0;
 $34 = sp + 24|0;
 $37 = sp + 221|0;
 $38 = sp + 120|0;
 $39 = sp + 220|0;
 $40 = sp + 219|0;
 $41 = sp + 218|0;
 $42 = sp + 16|0;
 $43 = sp + 8|0;
 $44 = sp;
 $48 = sp + 217|0;
 $49 = sp + 104|0;
 $50 = sp + 216|0;
 $52 = $this;
 $53 = $0;
 $54 = $52;
 $55 = ((($54)) + 16|0);
 HEAP32[$55>>2] = 0;
 $51 = $__f;
 $56 = ((($54)) + 16|0);
 HEAP32[$56>>2] = $54;
 $57 = ((($54)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $1 = $__f;
 $59 = $1;
 $46 = $58;
 $47 = $59;
 $60 = $46;
 $45 = $60;
 $61 = $45;
 $62 = 6012;
 HEAP32[$61>>2] = $62;
 $63 = 5968;
 HEAP32[$60>>2] = $63;
 $64 = ((($60)) + 4|0);
 $65 = $47;
 $2 = $65;
 $66 = $2;
 $22 = $66;
 $67 = $22;
 $20 = $67;
 $68 = $20;
 $14 = $21;
 $15 = $68;
 $69 = $14;
 $70 = $15;
 $13 = $70;
 $71 = $13;
 ;HEAP8[$9>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$16>>0]|0;
 $7 = $69;
 $8 = $71;
 $72 = $7;
 $73 = $8;
 $6 = $73;
 $74 = $6;
 $4 = $72;
 $5 = $74;
 $75 = $4;
 $76 = $5;
 $3 = $76;
 $77 = $3;
 HEAP32[$75>>2] = $77;
 $78 = HEAP32[$21>>2]|0;
 HEAP32[$49>>2] = $78;
 $23 = $50;
 ;HEAP8[$42>>0]=HEAP8[$50>>0]|0;
 ;HEAP8[$43>>0]=HEAP8[$49>>0]|0;HEAP8[$43+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$43+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$43+3>>0]=HEAP8[$49+3>>0]|0;
 ;HEAP8[$44>>0]=HEAP8[$48>>0]|0;
 $36 = $64;
 $79 = $36;
 $35 = $43;
 $80 = $35;
 ;HEAP32[$38>>2]=HEAP32[$80>>2]|0;
 $24 = $42;
 ;HEAP8[$30>>0]=HEAP8[$41>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$40>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$39>>0]|0;
 ;HEAP8[$33>>0]=HEAP8[$38>>0]|0;HEAP8[$33+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[$38+3>>0]|0;
 ;HEAP8[$34>>0]=HEAP8[$37>>0]|0;
 $29 = $79;
 $81 = $29;
 $28 = $81;
 $26 = $33;
 $82 = $26;
 $25 = $82;
 $83 = $25;
 $84 = HEAP32[$83>>2]|0;
 $27 = $84;
 $85 = $27;
 ;HEAP32[$81>>2]=HEAP32[$85>>2]|0;HEAP32[$81+4>>2]=HEAP32[$85+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$85+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__18functionIFviPKcEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 if ($4) {
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 1023]($6);
  STACKTOP = sp;return;
 }
 $10 = ($6|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = ((($1)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vi[$15 & 1023]($12);
 STACKTOP = sp;return;
}
function __ZNSt3__18functionIFvvEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 if ($4) {
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 1023]($6);
  STACKTOP = sp;return;
 }
 $10 = ($6|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = ((($1)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vi[$15 & 1023]($12);
 STACKTOP = sp;return;
}
function __Z9main_loopv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 __ZN5Timer4TickEv(48);
 $5 = (2636);
 $7 = $5;
 $4 = $7;
 $8 = $4;
 $3 = $8;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZN5Timer5TotalEv(48)|0);
 $12 = tempRet0;
 $13 = (+($11>>>0)) + (4294967296.0*(+($12|0)));
 HEAPF64[$6>>3] = $13;
 $14 = ((($6)) + 8|0);
 $15 = (__ZN5Timer7ElapsedEv(48)|0);
 $16 = tempRet0;
 $17 = (+($15>>>0)) + (4294967296.0*(+($16|0)));
 HEAPF64[$14>>3] = $17;
 __ZN5Scene6UpdateERK4Time($10,$6);
 $2 = (2636);
 $18 = $2;
 $1 = $18;
 $19 = $1;
 $0 = $19;
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 __ZN5Scene6RenderEv($21);
 __ZN12InputHandler5ResetEv();
 STACKTOP = sp;return;
}
function __ZN7SessionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 72|0);
 __ZNSt3__18functionIFvPKciEED2Ev($2);
 $3 = ((($1)) + 48|0);
 __ZNSt3__18functionIFviPKcEED2Ev($3);
 $4 = ((($1)) + 24|0);
 __ZNSt3__18functionIFvvEED2Ev($4);
 __ZNSt3__18functionIFvvEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN5Timer4TickEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = ((($2)) + 8|0);
 ;HEAP32[$3>>2]=HEAP32[$4>>2]|0;HEAP32[$3+4>>2]=HEAP32[$4+4>>2]|0;
 $5 = ((($2)) + 8|0);
 $6 = (__ZNSt3__16chrono12steady_clock3nowEv()|0);
 $7 = tempRet0;
 $8 = $1;
 $9 = $8;
 HEAP32[$9>>2] = $6;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 ;HEAP32[$5>>2]=HEAP32[$1>>2]|0;HEAP32[$5+4>>2]=HEAP32[$1+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN5Scene6UpdateERK4Time($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0.0;
 var $386 = 0.0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0.0, $405 = 0.0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0.0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0, $435 = 0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0;
 var $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0, $493 = 0.0;
 var $494 = 0, $495 = 0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0;
 var $511 = 0, $512 = 0, $513 = 0.0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__begin = 0, $__begin2 = 0, $__begin6 = 0, $__end = 0, $__end3 = 0, $__end7 = 0, $__old_size$i$i = 0, $__old_size$i$i10 = 0, $__old_size$i$i13 = 0, $__old_size$i$i16 = 0, $__p$i$i = 0, $__range = 0;
 var $__range1 = 0, $__range5 = 0, $cond = 0, $d = 0, $e = 0, $hit_pos = 0, $it = 0, $it9 = 0, $last = 0, $m = 0, $m4 = 0, $p = 0, $p8 = 0, $res = 0.0, $rot_ratio = 0.0, $scroll_speed = 0.0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5504|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 5488|0;
 $11 = sp + 5440|0;
 $14 = sp + 5428|0;
 $18 = sp + 5412|0;
 $21 = sp + 5400|0;
 $28 = sp + 56|0;
 $31 = sp + 5498|0;
 $36 = sp + 48|0;
 $39 = sp + 5497|0;
 $55 = sp + 40|0;
 $58 = sp + 5496|0;
 $65 = sp + 32|0;
 $68 = sp + 5495|0;
 $81 = sp + 5184|0;
 $84 = sp + 5172|0;
 $88 = sp + 5156|0;
 $91 = sp + 5144|0;
 $112 = sp + 5060|0;
 $115 = sp + 5048|0;
 $121 = sp + 5024|0;
 $124 = sp + 5012|0;
 $132 = sp + 24|0;
 $135 = sp + 5494|0;
 $154 = sp + 4896|0;
 $157 = sp + 4884|0;
 $163 = sp + 16|0;
 $166 = sp + 5493|0;
 $181 = sp + 4792|0;
 $183 = sp + 4784|0;
 $189 = sp + 4760|0;
 $191 = sp + 4752|0;
 $202 = sp + 4708|0;
 $205 = sp + 4696|0;
 $__begin = sp + 4592|0;
 $__end = sp + 4588|0;
 $__begin2 = sp + 4576|0;
 $__end3 = sp + 4572|0;
 $d = sp + 4564|0;
 $228 = sp + 4556|0;
 $229 = sp + 4552|0;
 $it = sp + 4548|0;
 $230 = sp + 4544|0;
 $__begin6 = sp + 4532|0;
 $__end7 = sp + 4528|0;
 $hit_pos = sp + 4512|0;
 $231 = sp + 4496|0;
 $232 = sp + 80|0;
 $it9 = sp + 76|0;
 $233 = sp + 72|0;
 $temp = sp + 68|0;
 $234 = sp + 64|0;
 $235 = sp + 60|0;
 $226 = $this;
 $227 = $t;
 $236 = $226;
 $scroll_speed = 0.5;
 $rot_ratio = 0.002;
 $237 = HEAP8[16500>>0]|0;
 $238 = $237&1;
 if ($238) {
  $239 = ((($236)) + 872|0);
  $240 = $227;
  $241 = ((($240)) + 8|0);
  $242 = +HEAPF64[$241>>3];
  $243 = 0.5 * $242;
  $244 = $243;
  __ZN6Camera9TranslateEfff($239,$244,0.0,0.0);
 }
 $245 = HEAP8[(16501)>>0]|0;
 $246 = $245&1;
 if ($246) {
  $247 = ((($236)) + 872|0);
  $248 = $227;
  $249 = ((($248)) + 8|0);
  $250 = +HEAPF64[$249>>3];
  $251 = 0.5 * $250;
  $252 = $251;
  __ZN6Camera9TranslateEfff($247,$252,0.0,0.0);
 }
 $253 = HEAP8[16508>>0]|0;
 $254 = $253&1;
 if ($254) {
  $255 = +HEAPF64[40>>3];
  $256 = +HEAPF64[24>>3];
  $257 = $255 - $256;
  $258 = $257 * 0.002;
  $259 = $258;
  $260 = ((($236)) + 496|0);
  $261 = ((($260)) + 240|0);
  $262 = +HEAPF32[$261>>2];
  $263 = $262 + $259;
  HEAPF32[$261>>2] = $263;
 }
 $264 = ((($236)) + 496|0);
 $265 = $227;
 $266 = HEAP8[(16503)>>0]|0;
 $267 = $266&1;
 $268 = HEAP8[(16504)>>0]|0;
 $269 = $268&1;
 $270 = HEAP8[(16502)>>0]|0;
 $271 = $270&1;
 __ZN6ProtoX4MoveERK4Timebbb($264,$265,$267,$269,$271);
 while(1) {
  $225 = 5172;
  $272 = $225;
  $224 = $272;
  $273 = $224;
  $223 = $273;
  $274 = $223;
  $275 = ((($274)) + 20|0);
  $222 = $275;
  $276 = $222;
  $221 = $276;
  $277 = $221;
  $278 = HEAP32[$277>>2]|0;
  $279 = ($278|0)==(0);
  $280 = $279 ^ 1;
  if (!($280)) {
   break;
  }
  $219 = 5172;
  $281 = $219;
  $218 = $281;
  $282 = $218;
  $217 = $282;
  $283 = $217;
  $284 = ((($283)) + 20|0);
  $216 = $284;
  $285 = $216;
  $215 = $285;
  $286 = $215;
  $287 = HEAP32[$286>>2]|0;
  $288 = ((($282)) + 16|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = (($287) + ($289))|0;
  $291 = (($290) - 1)|0;
  $__p$i$i = $291;
  $214 = $282;
  $292 = $214;
  $293 = ((($292)) + 4|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = $__p$i$i;
  $296 = (($295>>>0) / 1024)&-1;
  $297 = (($294) + ($296<<2)|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $__p$i$i;
  $300 = (($299>>>0) % 1024)&-1;
  $301 = (($298) + ($300<<2)|0);
  $302 = HEAP32[$301>>2]|0;
  $e = $302;
  $207 = 5172;
  $303 = $207;
  __ZNSt3__15dequeIN12InputHandler11ButtonClickENS_9allocatorIS2_EEE9pop_frontEv($303);
  $304 = $e;
  $cond = ($304|0)==(0);
  if (!($cond)) {
   continue;
  }
  $305 = ((($236)) + 496|0);
  $306 = ((($236)) + 760|0);
  __ZN6ProtoX5ShootERNSt3__16vectorI7MissileNS0_9allocatorIS2_EEEE($305,$306);
 }
 $307 = ((($236)) + 496|0);
 $308 = $227;
 $309 = ((($236)) + 220|0);
 __ZN6ProtoX6UpdateERK4TimeRK4AABB($307,$308,$309);
 $310 = ((($236)) + 772|0);
 $__range = $310;
 $311 = $__range;
 $206 = $311;
 $312 = $206;
 $313 = HEAP32[$312>>2]|0;
 $203 = $312;
 $204 = $313;
 $314 = $204;
 $200 = $202;
 $201 = $314;
 $315 = $200;
 $316 = $201;
 HEAP32[$315>>2] = $316;
 $317 = HEAP32[$202>>2]|0;
 HEAP32[$205>>2] = $317;
 $318 = HEAP32[$205>>2]|0;
 HEAP32[$__begin>>2] = $318;
 $319 = $__range;
 $158 = $319;
 $320 = $158;
 $321 = ((($320)) + 4|0);
 $322 = HEAP32[$321>>2]|0;
 $155 = $320;
 $156 = $322;
 $323 = $156;
 $152 = $154;
 $153 = $323;
 $324 = $152;
 $325 = $153;
 HEAP32[$324>>2] = $325;
 $326 = HEAP32[$154>>2]|0;
 HEAP32[$157>>2] = $326;
 $327 = HEAP32[$157>>2]|0;
 HEAP32[$__end>>2] = $327;
 while(1) {
  $150 = $__begin;
  $151 = $__end;
  $328 = $150;
  $329 = $151;
  $148 = $328;
  $149 = $329;
  $330 = $148;
  $147 = $330;
  $331 = $147;
  $332 = HEAP32[$331>>2]|0;
  $333 = $149;
  $146 = $333;
  $334 = $146;
  $335 = HEAP32[$334>>2]|0;
  $336 = ($332|0)==($335|0);
  $337 = $336 ^ 1;
  if (!($337)) {
   break;
  }
  $127 = $__begin;
  $338 = $127;
  $339 = HEAP32[$338>>2]|0;
  $p = $339;
  $340 = $p;
  $341 = $227;
  $342 = ((($236)) + 220|0);
  __ZN6ProtoX6UpdateERK4TimeRK4AABB($340,$341,$342);
  $126 = $__begin;
  $343 = $126;
  $344 = HEAP32[$343>>2]|0;
  $345 = ((($344)) + 264|0);
  HEAP32[$343>>2] = $345;
 }
 $346 = ((($236)) + 760|0);
 $__range1 = $346;
 $347 = $__range1;
 $125 = $347;
 $348 = $125;
 $349 = HEAP32[$348>>2]|0;
 $122 = $348;
 $123 = $349;
 $350 = $123;
 $119 = $121;
 $120 = $350;
 $351 = $119;
 $352 = $120;
 HEAP32[$351>>2] = $352;
 $353 = HEAP32[$121>>2]|0;
 HEAP32[$124>>2] = $353;
 $354 = HEAP32[$124>>2]|0;
 HEAP32[$__begin2>>2] = $354;
 $355 = $__range1;
 $116 = $355;
 $356 = $116;
 $357 = ((($356)) + 4|0);
 $358 = HEAP32[$357>>2]|0;
 $113 = $356;
 $114 = $358;
 $359 = $114;
 $110 = $112;
 $111 = $359;
 $360 = $110;
 $361 = $111;
 HEAP32[$360>>2] = $361;
 $362 = HEAP32[$112>>2]|0;
 HEAP32[$115>>2] = $362;
 $363 = HEAP32[$115>>2]|0;
 HEAP32[$__end3>>2] = $363;
 while(1) {
  $108 = $__begin2;
  $109 = $__end3;
  $364 = $108;
  $365 = $109;
  $106 = $364;
  $107 = $365;
  $366 = $106;
  $105 = $366;
  $367 = $105;
  $368 = HEAP32[$367>>2]|0;
  $369 = $107;
  $104 = $369;
  $370 = $104;
  $371 = HEAP32[$370>>2]|0;
  $372 = ($368|0)==($371|0);
  $373 = $372 ^ 1;
  if (!($373)) {
   break;
  }
  $103 = $__begin2;
  $374 = $103;
  $375 = HEAP32[$374>>2]|0;
  $m = $375;
  $376 = $m;
  $377 = $227;
  __ZN7Missile6UpdateERK4Time($376,$377);
  $102 = $__begin2;
  $378 = $102;
  $379 = HEAP32[$378>>2]|0;
  $380 = ((($379)) + 24|0);
  HEAP32[$378>>2] = $380;
 }
 $381 = ((($236)) + 872|0);
 $382 = +HEAPF32[$381>>2];
 $383 = ((($236)) + 496|0);
 $384 = ((($383)) + 44|0);
 $385 = +HEAPF32[$384>>2];
 $386 = $382 + $385;
 HEAPF32[$d>>2] = $386;
 $387 = ((($236)) + 496|0);
 $388 = ((($236)) + 116|0);
 $389 = ((($388)) + 12|0);
 $100 = $389;
 $101 = 0;
 $390 = $100;
 $391 = $101;
 $392 = HEAP32[$390>>2]|0;
 $393 = (($392) + (($391*40)|0)|0);
 $394 = ((($393)) + 24|0);
 $395 = +HEAPF32[$394>>2];
 $396 = ((($236)) + 116|0);
 $397 = ((($396)) + 12|0);
 $59 = $397;
 $60 = 0;
 $398 = $59;
 $399 = $60;
 $400 = HEAP32[$398>>2]|0;
 $401 = (($400) + (($399*40)|0)|0);
 $402 = ((($401)) + 24|0);
 $403 = ((($402)) + 8|0);
 $404 = +HEAPF32[$403>>2];
 $405 = (+__ZN6ProtoX10WrapAroundEff($387,$395,$404));
 $res = $405;
 $406 = ((($236)) + 872|0);
 $407 = $227;
 __ZN6Camera6UpdateERK4Time($406,$407);
 $408 = ((($236)) + 872|0);
 $409 = ((($236)) + 496|0);
 $410 = ((($409)) + 44|0);
 $411 = ((($236)) + 220|0);
 $412 = ((($236)) + 496|0);
 $413 = ((($412)) + 4|0);
 __ZN6Camera8TrackingERKN3glm5tvec3IfLNS0_9precisionE0EEERK4AABBS8_($408,$410,$411,$413);
 $414 = $res;
 $415 = $414 < 0.0;
 if ($415) {
  $416 = ((($236)) + 872|0);
  $417 = HEAP32[(2616)>>2]|0;
  $418 = $417 >> 2;
  $419 = (+($418|0));
  $420 = -$419;
  HEAPF32[$228>>2] = $420;
  $56 = $d;
  $57 = $228;
  $421 = $56;
  $422 = $57;
  ;HEAP8[$55>>0]=HEAP8[$58>>0]|0;
  $53 = $421;
  $54 = $422;
  $423 = $53;
  $424 = $54;
  $50 = $55;
  $51 = $423;
  $52 = $424;
  $425 = $51;
  $426 = +HEAPF32[$425>>2];
  $427 = $52;
  $428 = +HEAPF32[$427>>2];
  $429 = $426 < $428;
  $430 = $54;
  $431 = $53;
  $432 = $429 ? $430 : $431;
  $433 = +HEAPF32[$432>>2];
  $434 = HEAP32[(2616)>>2]|0;
  $435 = $434 >> 2;
  $436 = (+($435|0));
  $437 = $433 - $436;
  __ZN6Camera9TranslateEfff($416,$437,0.0,0.0);
 } else {
  $438 = $res;
  $439 = $438 > 0.0;
  if ($439) {
   $440 = ((($236)) + 872|0);
   $441 = HEAP32[(2616)>>2]|0;
   $442 = $441 >> 2;
   $443 = (+($442|0));
   HEAPF32[$229>>2] = $443;
   $29 = $d;
   $30 = $229;
   $444 = $29;
   $445 = $30;
   ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
   $26 = $444;
   $27 = $445;
   $446 = $27;
   $447 = $26;
   $23 = $28;
   $24 = $446;
   $25 = $447;
   $448 = $24;
   $449 = +HEAPF32[$448>>2];
   $450 = $25;
   $451 = +HEAPF32[$450>>2];
   $452 = $449 < $451;
   $453 = $27;
   $454 = $26;
   $455 = $452 ? $453 : $454;
   $456 = +HEAPF32[$455>>2];
   $457 = HEAP32[(2616)>>2]|0;
   $458 = $457 >> 2;
   $459 = (+($458|0));
   $460 = $456 + $459;
   __ZN6Camera9TranslateEfff($440,$460,0.0,0.0);
  }
 }
 $461 = ((($236)) + 760|0);
 $22 = $461;
 $462 = $22;
 $463 = HEAP32[$462>>2]|0;
 $19 = $462;
 $20 = $463;
 $464 = $20;
 $16 = $18;
 $17 = $464;
 $465 = $16;
 $466 = $17;
 HEAP32[$465>>2] = $466;
 $467 = HEAP32[$18>>2]|0;
 HEAP32[$21>>2] = $467;
 $468 = HEAP32[$21>>2]|0;
 HEAP32[$it>>2] = $468;
 L28: while(1) {
  $469 = ((($236)) + 760|0);
  $15 = $469;
  $470 = $15;
  $471 = ((($470)) + 4|0);
  $472 = HEAP32[$471>>2]|0;
  $12 = $470;
  $13 = $472;
  $473 = $13;
  $9 = $11;
  $10 = $473;
  $474 = $9;
  $475 = $10;
  HEAP32[$474>>2] = $475;
  $476 = HEAP32[$11>>2]|0;
  HEAP32[$14>>2] = $476;
  $477 = HEAP32[$14>>2]|0;
  HEAP32[$230>>2] = $477;
  $4 = $it;
  $5 = $230;
  $478 = $4;
  $479 = $5;
  $2 = $478;
  $3 = $479;
  $480 = $2;
  $1 = $480;
  $481 = $1;
  $482 = HEAP32[$481>>2]|0;
  $483 = $3;
  $0 = $483;
  $484 = $0;
  $485 = HEAP32[$484>>2]|0;
  $486 = ($482|0)==($485|0);
  $487 = $486 ^ 1;
  if (!($487)) {
   break;
  }
  $6 = $it;
  $488 = $6;
  $489 = HEAP32[$488>>2]|0;
  $m4 = $489;
  $490 = $m4;
  $491 = +HEAPF32[$490>>2];
  $492 = ((($236)) + 220|0);
  $493 = +HEAPF32[$492>>2];
  $494 = $491 < $493;
  if (!($494)) {
   $495 = $m4;
   $496 = +HEAPF32[$495>>2];
   $497 = ((($236)) + 220|0);
   $498 = ((($497)) + 8|0);
   $499 = +HEAPF32[$498>>2];
   $500 = $496 > $499;
   if (!($500)) {
    $501 = $m4;
    $502 = ((($501)) + 4|0);
    $503 = +HEAPF32[$502>>2];
    $504 = ((($236)) + 220|0);
    $505 = ((($504)) + 12|0);
    $506 = +HEAPF32[$505>>2];
    $507 = $503 < $506;
    if (!($507)) {
     $508 = $m4;
     $509 = ((($508)) + 4|0);
     $510 = +HEAPF32[$509>>2];
     $511 = ((($236)) + 220|0);
     $512 = ((($511)) + 4|0);
     $513 = +HEAPF32[$512>>2];
     $514 = $510 > $513;
     if (!($514)) {
      $last = 0;
      $602 = ((($236)) + 772|0);
      $__range5 = $602;
      $603 = $__range5;
      $85 = $603;
      $604 = $85;
      $605 = HEAP32[$604>>2]|0;
      $82 = $604;
      $83 = $605;
      $606 = $83;
      $79 = $81;
      $80 = $606;
      $607 = $79;
      $608 = $80;
      HEAP32[$607>>2] = $608;
      $609 = HEAP32[$81>>2]|0;
      HEAP32[$84>>2] = $609;
      $610 = HEAP32[$84>>2]|0;
      HEAP32[$__begin6>>2] = $610;
      $611 = $__range5;
      $92 = $611;
      $612 = $92;
      $613 = ((($612)) + 4|0);
      $614 = HEAP32[$613>>2]|0;
      $89 = $612;
      $90 = $614;
      $615 = $90;
      $86 = $88;
      $87 = $615;
      $616 = $86;
      $617 = $87;
      HEAP32[$616>>2] = $617;
      $618 = HEAP32[$88>>2]|0;
      HEAP32[$91>>2] = $618;
      $619 = HEAP32[$91>>2]|0;
      HEAP32[$__end7>>2] = $619;
      while(1) {
       $97 = $__begin6;
       $98 = $__end7;
       $620 = $97;
       $621 = $98;
       $95 = $620;
       $96 = $621;
       $622 = $95;
       $94 = $622;
       $623 = $94;
       $624 = HEAP32[$623>>2]|0;
       $625 = $96;
       $93 = $625;
       $626 = $93;
       $627 = HEAP32[$626>>2]|0;
       $628 = ($624|0)==($627|0);
       $629 = $628 ^ 1;
       if (!($629)) {
        break;
       }
       $99 = $__begin6;
       $630 = $99;
       $631 = HEAP32[$630>>2]|0;
       $p8 = $631;
       __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($hit_pos);
       $632 = $m4;
       $633 = $p8;
       $634 = ((($633)) + 4|0);
       $635 = $p8;
       $636 = ((($635)) + 44|0);
       __ZNK4AABB9TranslateERKN3glm5tvec3IfLNS0_9precisionE0EEE($231,$634,$636);
       $637 = (__ZN7Missile7HitTestERK4AABBRN3glm5tvec3IfLNS3_9precisionE0EEE($632,$231,$hit_pos)|0);
       if ($637) {
        $638 = ((($236)) + 784|0);
        __ZN8Renderer9ParticlesC2ERKN3glm5tvec3IfLNS1_9precisionE0EEE($232,$hit_pos);
        __ZNSt3__14listIN8Renderer9ParticlesENS_9allocatorIS2_EEE9push_backEOS2_($638,$232);
        $639 = $m4;
        $640 = ((($236)) + 760|0);
        $117 = $640;
        $641 = $117;
        $642 = ((($641)) + 4|0);
        $643 = HEAP32[$642>>2]|0;
        $644 = ((($643)) + -24|0);
        $645 = ($639|0)!=($644|0);
        if (!($645)) {
         label = 47;
         break;
        }
        $646 = $m4;
        $647 = ((($236)) + 760|0);
        $118 = $647;
        $648 = $118;
        $649 = ((($648)) + 4|0);
        $650 = HEAP32[$649>>2]|0;
        $651 = ((($650)) + -24|0);
        (__ZN7MissileaSERKS_($646,$651)|0);
        $652 = ((($236)) + 760|0);
        $145 = $652;
        $653 = $145;
        $654 = ((($653)) + 4|0);
        $655 = HEAP32[$654>>2]|0;
        $656 = ((($655)) + -24|0);
        $143 = $653;
        $144 = $656;
        $657 = $143;
        $142 = $657;
        $658 = $142;
        $659 = ((($658)) + 4|0);
        $660 = HEAP32[$659>>2]|0;
        $661 = HEAP32[$658>>2]|0;
        $662 = $660;
        $663 = $661;
        $664 = (($662) - ($663))|0;
        $665 = (($664|0) / 24)&-1;
        $__old_size$i$i10 = $665;
        $666 = $144;
        $140 = $657;
        $141 = $666;
        $667 = $140;
        while(1) {
         $668 = $141;
         $669 = ((($667)) + 4|0);
         $670 = HEAP32[$669>>2]|0;
         $671 = ($668|0)!=($670|0);
         if (!($671)) {
          break;
         }
         $139 = $667;
         $672 = $139;
         $673 = ((($672)) + 8|0);
         $138 = $673;
         $674 = $138;
         $137 = $674;
         $675 = $137;
         $676 = ((($667)) + 4|0);
         $677 = HEAP32[$676>>2]|0;
         $678 = ((($677)) + -24|0);
         HEAP32[$676>>2] = $678;
         $136 = $678;
         $679 = $136;
         $133 = $675;
         $134 = $679;
         $680 = $133;
         $681 = $134;
         ;HEAP8[$132>>0]=HEAP8[$135>>0]|0;
         $130 = $680;
         $131 = $681;
         $682 = $130;
         $683 = $131;
         $128 = $682;
         $129 = $683;
        }
        $684 = $__old_size$i$i10;
        __THREW__ = 0;
        invoke_vii(451,($657|0),($684|0));
        $685 = __THREW__; __THREW__ = 0;
        $686 = $685&1;
        if ($686) {
         label = 46;
         break L28;
        }
       }
       $177 = $__begin6;
       $726 = $177;
       $727 = HEAP32[$726>>2]|0;
       $728 = ((($727)) + 264|0);
       HEAP32[$726>>2] = $728;
      }
      if ((label|0) == 47) {
       label = 0;
       $689 = ((($236)) + 760|0);
       $176 = $689;
       $690 = $176;
       $691 = ((($690)) + 4|0);
       $692 = HEAP32[$691>>2]|0;
       $693 = ((($692)) + -24|0);
       $174 = $690;
       $175 = $693;
       $694 = $174;
       $173 = $694;
       $695 = $173;
       $696 = ((($695)) + 4|0);
       $697 = HEAP32[$696>>2]|0;
       $698 = HEAP32[$695>>2]|0;
       $699 = $697;
       $700 = $698;
       $701 = (($699) - ($700))|0;
       $702 = (($701|0) / 24)&-1;
       $__old_size$i$i = $702;
       $703 = $175;
       $171 = $694;
       $172 = $703;
       $704 = $171;
       while(1) {
        $705 = $172;
        $706 = ((($704)) + 4|0);
        $707 = HEAP32[$706>>2]|0;
        $708 = ($705|0)!=($707|0);
        if (!($708)) {
         break;
        }
        $170 = $704;
        $709 = $170;
        $710 = ((($709)) + 8|0);
        $169 = $710;
        $711 = $169;
        $168 = $711;
        $712 = $168;
        $713 = ((($704)) + 4|0);
        $714 = HEAP32[$713>>2]|0;
        $715 = ((($714)) + -24|0);
        HEAP32[$713>>2] = $715;
        $167 = $715;
        $716 = $167;
        $164 = $712;
        $165 = $716;
        $717 = $164;
        $718 = $165;
        ;HEAP8[$163>>0]=HEAP8[$166>>0]|0;
        $161 = $717;
        $162 = $718;
        $719 = $161;
        $720 = $162;
        $159 = $719;
        $160 = $720;
       }
       $721 = $__old_size$i$i;
       __THREW__ = 0;
       invoke_vii(451,($694|0),($721|0));
       $722 = __THREW__; __THREW__ = 0;
       $723 = $722&1;
       if ($723) {
        label = 51;
        break;
       }
       $last = 1;
      }
      $729 = $last;
      $730 = $729&1;
      if ($730) {
       break;
      }
      $178 = $it;
      $731 = $178;
      $732 = HEAP32[$731>>2]|0;
      $733 = ((($732)) + 24|0);
      HEAP32[$731>>2] = $733;
      continue;
     }
    }
   }
  }
  $515 = $m4;
  $516 = ((($236)) + 760|0);
  $7 = $516;
  $517 = $7;
  $518 = ((($517)) + 4|0);
  $519 = HEAP32[$518>>2]|0;
  $520 = ((($519)) + -24|0);
  $521 = ($515|0)!=($520|0);
  if (!($521)) {
   label = 33;
   break;
  }
  $522 = $m4;
  $523 = ((($236)) + 760|0);
  $8 = $523;
  $524 = $8;
  $525 = ((($524)) + 4|0);
  $526 = HEAP32[$525>>2]|0;
  $527 = ((($526)) + -24|0);
  (__ZN7MissileaSERKS_($522,$527)|0);
  $528 = ((($236)) + 760|0);
  $49 = $528;
  $529 = $49;
  $530 = ((($529)) + 4|0);
  $531 = HEAP32[$530>>2]|0;
  $532 = ((($531)) + -24|0);
  $47 = $529;
  $48 = $532;
  $533 = $47;
  $46 = $533;
  $534 = $46;
  $535 = ((($534)) + 4|0);
  $536 = HEAP32[$535>>2]|0;
  $537 = HEAP32[$534>>2]|0;
  $538 = $536;
  $539 = $537;
  $540 = (($538) - ($539))|0;
  $541 = (($540|0) / 24)&-1;
  $__old_size$i$i16 = $541;
  $542 = $48;
  $44 = $533;
  $45 = $542;
  $543 = $44;
  while(1) {
   $544 = $45;
   $545 = ((($543)) + 4|0);
   $546 = HEAP32[$545>>2]|0;
   $547 = ($544|0)!=($546|0);
   if (!($547)) {
    break;
   }
   $43 = $543;
   $548 = $43;
   $549 = ((($548)) + 8|0);
   $42 = $549;
   $550 = $42;
   $41 = $550;
   $551 = $41;
   $552 = ((($543)) + 4|0);
   $553 = HEAP32[$552>>2]|0;
   $554 = ((($553)) + -24|0);
   HEAP32[$552>>2] = $554;
   $40 = $554;
   $555 = $40;
   $37 = $551;
   $38 = $555;
   $556 = $37;
   $557 = $38;
   ;HEAP8[$36>>0]=HEAP8[$39>>0]|0;
   $34 = $556;
   $35 = $557;
   $558 = $34;
   $559 = $35;
   $32 = $558;
   $33 = $559;
  }
  $560 = $__old_size$i$i16;
  __THREW__ = 0;
  invoke_vii(451,($533|0),($560|0));
  $561 = __THREW__; __THREW__ = 0;
  $562 = $561&1;
  if ($562) {
   label = 32;
   break;
  }
 }
 if ((label|0) == 32) {
  $563 = ___cxa_find_matching_catch(0|0)|0;
  $564 = tempRet0;
  ___clang_call_terminate($563);
  // unreachable;
 }
 else if ((label|0) == 33) {
  $565 = ((($236)) + 760|0);
  $78 = $565;
  $566 = $78;
  $567 = ((($566)) + 4|0);
  $568 = HEAP32[$567>>2]|0;
  $569 = ((($568)) + -24|0);
  $76 = $566;
  $77 = $569;
  $570 = $76;
  $75 = $570;
  $571 = $75;
  $572 = ((($571)) + 4|0);
  $573 = HEAP32[$572>>2]|0;
  $574 = HEAP32[$571>>2]|0;
  $575 = $573;
  $576 = $574;
  $577 = (($575) - ($576))|0;
  $578 = (($577|0) / 24)&-1;
  $__old_size$i$i13 = $578;
  $579 = $77;
  $73 = $570;
  $74 = $579;
  $580 = $73;
  while(1) {
   $581 = $74;
   $582 = ((($580)) + 4|0);
   $583 = HEAP32[$582>>2]|0;
   $584 = ($581|0)!=($583|0);
   if (!($584)) {
    break;
   }
   $72 = $580;
   $585 = $72;
   $586 = ((($585)) + 8|0);
   $71 = $586;
   $587 = $71;
   $70 = $587;
   $588 = $70;
   $589 = ((($580)) + 4|0);
   $590 = HEAP32[$589>>2]|0;
   $591 = ((($590)) + -24|0);
   HEAP32[$589>>2] = $591;
   $69 = $591;
   $592 = $69;
   $66 = $588;
   $67 = $592;
   $593 = $66;
   $594 = $67;
   ;HEAP8[$65>>0]=HEAP8[$68>>0]|0;
   $63 = $593;
   $64 = $594;
   $595 = $63;
   $596 = $64;
   $61 = $595;
   $62 = $596;
  }
  $597 = $__old_size$i$i13;
  __THREW__ = 0;
  invoke_vii(451,($570|0),($597|0));
  $598 = __THREW__; __THREW__ = 0;
  $599 = $598&1;
  if ($599) {
   $600 = ___cxa_find_matching_catch(0|0)|0;
   $601 = tempRet0;
   ___clang_call_terminate($600);
   // unreachable;
  }
 }
 else if ((label|0) == 46) {
  $687 = ___cxa_find_matching_catch(0|0)|0;
  $688 = tempRet0;
  ___clang_call_terminate($687);
  // unreachable;
 }
 else if ((label|0) == 51) {
  $724 = ___cxa_find_matching_catch(0|0)|0;
  $725 = tempRet0;
  ___clang_call_terminate($724);
  // unreachable;
 }
 $734 = ((($236)) + 784|0);
 $184 = $734;
 $735 = $184;
 $182 = $735;
 $736 = $182;
 $737 = ((($736)) + 4|0);
 $738 = HEAP32[$737>>2]|0;
 $179 = $181;
 $180 = $738;
 $739 = $179;
 $740 = $180;
 HEAP32[$739>>2] = $740;
 $741 = HEAP32[$181>>2]|0;
 HEAP32[$183>>2] = $741;
 $742 = HEAP32[$183>>2]|0;
 HEAP32[$it9>>2] = $742;
 while(1) {
  $743 = ((($236)) + 784|0);
  $192 = $743;
  $744 = $192;
  $190 = $744;
  $745 = $190;
  $188 = $745;
  $746 = $188;
  $187 = $746;
  $747 = $187;
  $185 = $189;
  $186 = $747;
  $748 = $185;
  $749 = $186;
  HEAP32[$748>>2] = $749;
  $750 = HEAP32[$189>>2]|0;
  HEAP32[$191>>2] = $750;
  $751 = HEAP32[$191>>2]|0;
  HEAP32[$233>>2] = $751;
  $195 = $it9;
  $196 = $233;
  $752 = $195;
  $753 = $196;
  $193 = $752;
  $194 = $753;
  $754 = $193;
  $755 = HEAP32[$754>>2]|0;
  $756 = $194;
  $757 = HEAP32[$756>>2]|0;
  $758 = ($755|0)==($757|0);
  $759 = $758 ^ 1;
  if (!($759)) {
   break;
  }
  $199 = $it9;
  $760 = $199;
  $761 = HEAP32[$760>>2]|0;
  $762 = ((($761)) + 8|0);
  $198 = $762;
  $763 = $198;
  $197 = $763;
  $764 = $197;
  $765 = $227;
  __ZN8Renderer9Particles6UpdateERK4Time($764,$765);
  $210 = $it9;
  $766 = $210;
  $767 = HEAP32[$766>>2]|0;
  $768 = ((($767)) + 8|0);
  $209 = $768;
  $769 = $209;
  $208 = $769;
  $770 = $208;
  $771 = ((($770)) + 12|0);
  $772 = HEAP8[$771>>0]|0;
  $773 = $772&1;
  if ($773) {
   ;HEAP32[$temp>>2]=HEAP32[$it9>>2]|0;
   $211 = $it9;
   $774 = $211;
   $775 = HEAP32[$774>>2]|0;
   $776 = ((($775)) + 4|0);
   $777 = HEAP32[$776>>2]|0;
   HEAP32[$774>>2] = $777;
   $778 = ((($236)) + 784|0);
   $212 = $234;
   $213 = $temp;
   $779 = $212;
   $780 = $213;
   $781 = HEAP32[$780>>2]|0;
   HEAP32[$779>>2] = $781;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$234>>2]|0;
   $782 = (__ZNSt3__14listIN8Renderer9ParticlesENS_9allocatorIS2_EEE5eraseENS_21__list_const_iteratorIS2_PvEE($778,$$byval_copy)|0);
   HEAP32[$235>>2] = $782;
   continue;
  } else {
   $220 = $it9;
   $783 = $220;
   $784 = HEAP32[$783>>2]|0;
   $785 = ((($784)) + 4|0);
   $786 = HEAP32[$785>>2]|0;
   HEAP32[$783>>2] = $786;
   continue;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5Timer5TotalEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 104|0;
 $7 = sp + 96|0;
 $8 = sp + 88|0;
 $10 = sp + 192|0;
 $12 = sp + 80|0;
 $19 = sp + 72|0;
 $22 = sp + 64|0;
 $23 = sp + 56|0;
 $24 = sp + 48|0;
 $25 = sp + 40|0;
 $27 = sp + 32|0;
 $30 = sp + 24|0;
 $31 = sp + 16|0;
 $33 = sp + 8|0;
 $34 = sp;
 $32 = $this;
 $35 = $32;
 $36 = ((($35)) + 8|0);
 $37 = ((($35)) + 24|0);
 $28 = $36;
 $29 = $37;
 $38 = $28;
 $26 = $38;
 $39 = $26;
 ;HEAP32[$25>>2]=HEAP32[$39>>2]|0;HEAP32[$25+4>>2]=HEAP32[$39+4>>2]|0;
 $40 = $25;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = $30;
 $47 = $46;
 HEAP32[$47>>2] = $42;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = $45;
 $50 = $29;
 $13 = $50;
 $51 = $13;
 ;HEAP32[$12>>2]=HEAP32[$51>>2]|0;HEAP32[$12+4>>2]=HEAP32[$51+4>>2]|0;
 $52 = $12;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $31;
 $59 = $58;
 HEAP32[$59>>2] = $54;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = $57;
 $20 = $30;
 $21 = $31;
 $62 = $20;
 ;HEAP32[$23>>2]=HEAP32[$62>>2]|0;HEAP32[$23+4>>2]=HEAP32[$62+4>>2]|0;
 $18 = $23;
 $63 = $18;
 $64 = $63;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = $21;
 ;HEAP32[$24>>2]=HEAP32[$70>>2]|0;HEAP32[$24+4>>2]=HEAP32[$70+4>>2]|0;
 $14 = $24;
 $71 = $14;
 $72 = $71;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $78 = (_i64Subtract(($66|0),($69|0),($74|0),($77|0))|0);
 $79 = tempRet0;
 $80 = $22;
 $81 = $80;
 HEAP32[$81>>2] = $78;
 $82 = (($80) + 4)|0;
 $83 = $82;
 HEAP32[$83>>2] = $79;
 $15 = $19;
 $16 = $22;
 $17 = 0;
 $84 = $15;
 $85 = $16;
 $86 = $85;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) + 4)|0;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = $84;
 $93 = $92;
 HEAP32[$93>>2] = $88;
 $94 = (($92) + 4)|0;
 $95 = $94;
 HEAP32[$95>>2] = $91;
 $96 = $19;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = $27;
 $103 = $102;
 HEAP32[$103>>2] = $98;
 $104 = (($102) + 4)|0;
 $105 = $104;
 HEAP32[$105>>2] = $101;
 $106 = $27;
 $107 = $106;
 $108 = HEAP32[$107>>2]|0;
 $109 = (($106) + 4)|0;
 $110 = $109;
 $111 = HEAP32[$110>>2]|0;
 $112 = $33;
 $113 = $112;
 HEAP32[$113>>2] = $108;
 $114 = (($112) + 4)|0;
 $115 = $114;
 HEAP32[$115>>2] = $111;
 $9 = $33;
 $116 = $9;
 $5 = $10;
 $6 = $116;
 $117 = $6;
 $3 = $117;
 $118 = $3;
 $119 = $118;
 $120 = $119;
 $121 = HEAP32[$120>>2]|0;
 $122 = (($119) + 4)|0;
 $123 = $122;
 $124 = HEAP32[$123>>2]|0;
 $125 = (___divdi3(($121|0),($124|0),1000000,0)|0);
 $126 = tempRet0;
 $127 = $7;
 $128 = $127;
 HEAP32[$128>>2] = $125;
 $129 = (($127) + 4)|0;
 $130 = $129;
 HEAP32[$130>>2] = $126;
 $0 = $4;
 $1 = $7;
 $2 = 0;
 $131 = $0;
 $132 = $1;
 $133 = $132;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = (($133) + 4)|0;
 $137 = $136;
 $138 = HEAP32[$137>>2]|0;
 $139 = $131;
 $140 = $139;
 HEAP32[$140>>2] = $135;
 $141 = (($139) + 4)|0;
 $142 = $141;
 HEAP32[$142>>2] = $138;
 $143 = $4;
 $144 = $143;
 $145 = HEAP32[$144>>2]|0;
 $146 = (($143) + 4)|0;
 $147 = $146;
 $148 = HEAP32[$147>>2]|0;
 $149 = $8;
 $150 = $149;
 HEAP32[$150>>2] = $145;
 $151 = (($149) + 4)|0;
 $152 = $151;
 HEAP32[$152>>2] = $148;
 $153 = $8;
 $154 = $153;
 $155 = HEAP32[$154>>2]|0;
 $156 = (($153) + 4)|0;
 $157 = $156;
 $158 = HEAP32[$157>>2]|0;
 $159 = $34;
 $160 = $159;
 HEAP32[$160>>2] = $155;
 $161 = (($159) + 4)|0;
 $162 = $161;
 HEAP32[$162>>2] = $158;
 $11 = $34;
 $163 = $11;
 $164 = $163;
 $165 = $164;
 $166 = HEAP32[$165>>2]|0;
 $167 = (($164) + 4)|0;
 $168 = $167;
 $169 = HEAP32[$168>>2]|0;
 tempRet0 = ($169);
 STACKTOP = sp;return ($166|0);
}
function __ZN5Timer7ElapsedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 104|0;
 $7 = sp + 96|0;
 $8 = sp + 88|0;
 $10 = sp + 192|0;
 $12 = sp + 80|0;
 $19 = sp + 72|0;
 $22 = sp + 64|0;
 $23 = sp + 56|0;
 $24 = sp + 48|0;
 $25 = sp + 40|0;
 $27 = sp + 32|0;
 $30 = sp + 24|0;
 $31 = sp + 16|0;
 $33 = sp + 8|0;
 $34 = sp;
 $32 = $this;
 $35 = $32;
 $36 = ((($35)) + 8|0);
 $37 = ((($35)) + 16|0);
 $28 = $36;
 $29 = $37;
 $38 = $28;
 $26 = $38;
 $39 = $26;
 ;HEAP32[$25>>2]=HEAP32[$39>>2]|0;HEAP32[$25+4>>2]=HEAP32[$39+4>>2]|0;
 $40 = $25;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = $30;
 $47 = $46;
 HEAP32[$47>>2] = $42;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = $45;
 $50 = $29;
 $13 = $50;
 $51 = $13;
 ;HEAP32[$12>>2]=HEAP32[$51>>2]|0;HEAP32[$12+4>>2]=HEAP32[$51+4>>2]|0;
 $52 = $12;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $31;
 $59 = $58;
 HEAP32[$59>>2] = $54;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = $57;
 $20 = $30;
 $21 = $31;
 $62 = $20;
 ;HEAP32[$23>>2]=HEAP32[$62>>2]|0;HEAP32[$23+4>>2]=HEAP32[$62+4>>2]|0;
 $18 = $23;
 $63 = $18;
 $64 = $63;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = $21;
 ;HEAP32[$24>>2]=HEAP32[$70>>2]|0;HEAP32[$24+4>>2]=HEAP32[$70+4>>2]|0;
 $14 = $24;
 $71 = $14;
 $72 = $71;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $78 = (_i64Subtract(($66|0),($69|0),($74|0),($77|0))|0);
 $79 = tempRet0;
 $80 = $22;
 $81 = $80;
 HEAP32[$81>>2] = $78;
 $82 = (($80) + 4)|0;
 $83 = $82;
 HEAP32[$83>>2] = $79;
 $15 = $19;
 $16 = $22;
 $17 = 0;
 $84 = $15;
 $85 = $16;
 $86 = $85;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) + 4)|0;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = $84;
 $93 = $92;
 HEAP32[$93>>2] = $88;
 $94 = (($92) + 4)|0;
 $95 = $94;
 HEAP32[$95>>2] = $91;
 $96 = $19;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = $27;
 $103 = $102;
 HEAP32[$103>>2] = $98;
 $104 = (($102) + 4)|0;
 $105 = $104;
 HEAP32[$105>>2] = $101;
 $106 = $27;
 $107 = $106;
 $108 = HEAP32[$107>>2]|0;
 $109 = (($106) + 4)|0;
 $110 = $109;
 $111 = HEAP32[$110>>2]|0;
 $112 = $33;
 $113 = $112;
 HEAP32[$113>>2] = $108;
 $114 = (($112) + 4)|0;
 $115 = $114;
 HEAP32[$115>>2] = $111;
 $9 = $33;
 $116 = $9;
 $5 = $10;
 $6 = $116;
 $117 = $6;
 $3 = $117;
 $118 = $3;
 $119 = $118;
 $120 = $119;
 $121 = HEAP32[$120>>2]|0;
 $122 = (($119) + 4)|0;
 $123 = $122;
 $124 = HEAP32[$123>>2]|0;
 $125 = (___divdi3(($121|0),($124|0),1000000,0)|0);
 $126 = tempRet0;
 $127 = $7;
 $128 = $127;
 HEAP32[$128>>2] = $125;
 $129 = (($127) + 4)|0;
 $130 = $129;
 HEAP32[$130>>2] = $126;
 $0 = $4;
 $1 = $7;
 $2 = 0;
 $131 = $0;
 $132 = $1;
 $133 = $132;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = (($133) + 4)|0;
 $137 = $136;
 $138 = HEAP32[$137>>2]|0;
 $139 = $131;
 $140 = $139;
 HEAP32[$140>>2] = $135;
 $141 = (($139) + 4)|0;
 $142 = $141;
 HEAP32[$142>>2] = $138;
 $143 = $4;
 $144 = $143;
 $145 = HEAP32[$144>>2]|0;
 $146 = (($143) + 4)|0;
 $147 = $146;
 $148 = HEAP32[$147>>2]|0;
 $149 = $8;
 $150 = $149;
 HEAP32[$150>>2] = $145;
 $151 = (($149) + 4)|0;
 $152 = $151;
 HEAP32[$152>>2] = $148;
 $153 = $8;
 $154 = $153;
 $155 = HEAP32[$154>>2]|0;
 $156 = (($153) + 4)|0;
 $157 = $156;
 $158 = HEAP32[$157>>2]|0;
 $159 = $34;
 $160 = $159;
 HEAP32[$160>>2] = $155;
 $161 = (($159) + 4)|0;
 $162 = $161;
 HEAP32[$162>>2] = $158;
 $11 = $34;
 $163 = $11;
 $164 = $163;
 $165 = $164;
 $166 = HEAP32[$165>>2]|0;
 $167 = (($164) + 4)|0;
 $168 = $167;
 $169 = HEAP32[$168>>2]|0;
 tempRet0 = ($169);
 STACKTOP = sp;return ($166|0);
}
function __ZN5Scene6RenderEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $__begin = 0, $__end = 0, $__range = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 80|0;
 $13 = sp + 68|0;
 $17 = sp + 52|0;
 $20 = sp + 40|0;
 $__begin = sp + 24|0;
 $__end = sp + 20|0;
 $23 = sp;
 $22 = $this;
 $24 = $22;
 $25 = ((($24)) + 272|0);
 __ZN8Renderer9PreRenderEv($25);
 $26 = ((($24)) + 272|0);
 $27 = ((($24)) + 872|0);
 __ZN8Renderer14DrawBackgroundERK6Camera($26,$27);
 $28 = ((($24)) + 272|0);
 $29 = ((($24)) + 872|0);
 __ZN8Renderer13DrawLandscapeERK6Camera($28,$29);
 $30 = ((($24)) + 272|0);
 $31 = ((($24)) + 872|0);
 $32 = ((($24)) + 760|0);
 __ZN8Renderer4DrawERK6CameraRKNSt3__16vectorI7MissileNS3_9allocatorIS5_EEEE($30,$31,$32);
 $33 = ((($24)) + 772|0);
 $__range = $33;
 $34 = $__range;
 $21 = $34;
 $35 = $21;
 $36 = HEAP32[$35>>2]|0;
 $18 = $35;
 $19 = $36;
 $37 = $19;
 $15 = $17;
 $16 = $37;
 $38 = $15;
 $39 = $16;
 HEAP32[$38>>2] = $39;
 $40 = HEAP32[$17>>2]|0;
 HEAP32[$20>>2] = $40;
 $41 = HEAP32[$20>>2]|0;
 HEAP32[$__begin>>2] = $41;
 $42 = $__range;
 $14 = $42;
 $43 = $14;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $11 = $43;
 $12 = $45;
 $46 = $12;
 $8 = $10;
 $9 = $46;
 $47 = $8;
 $48 = $9;
 HEAP32[$47>>2] = $48;
 $49 = HEAP32[$10>>2]|0;
 HEAP32[$13>>2] = $49;
 $50 = HEAP32[$13>>2]|0;
 HEAP32[$__end>>2] = $50;
 while(1) {
  $6 = $__begin;
  $7 = $__end;
  $51 = $6;
  $52 = $7;
  $4 = $51;
  $5 = $52;
  $53 = $4;
  $3 = $53;
  $54 = $3;
  $55 = HEAP32[$54>>2]|0;
  $56 = $5;
  $2 = $56;
  $57 = $2;
  $58 = HEAP32[$57>>2]|0;
  $59 = ($55|0)==($58|0);
  $60 = $59 ^ 1;
  if (!($60)) {
   break;
  }
  $1 = $__begin;
  $61 = $1;
  $62 = HEAP32[$61>>2]|0;
  $p = $62;
  $63 = ((($24)) + 272|0);
  $64 = ((($24)) + 872|0);
  $65 = $p;
  __ZN8Renderer4DrawERK6CameraRK6ProtoX($63,$64,$65);
  $66 = ((($24)) + 272|0);
  $67 = ((($24)) + 872|0);
  $68 = $p;
  $69 = ((($68)) + 4|0);
  $70 = $p;
  $71 = ((($70)) + 44|0);
  __ZNK4AABB9TranslateERKN3glm5tvec3IfLNS0_9precisionE0EEE($23,$69,$71);
  __ZN8Renderer4DrawERK6CameraRK4AABB($66,$67,$23);
  $0 = $__begin;
  $72 = $0;
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 264|0);
  HEAP32[$72>>2] = $74;
 }
 $75 = ((($24)) + 272|0);
 $76 = ((($24)) + 872|0);
 $77 = ((($24)) + 496|0);
 __ZN8Renderer4DrawERK6CameraRK6ProtoX($75,$76,$77);
 $78 = ((($24)) + 272|0);
 $79 = ((($24)) + 872|0);
 $80 = ((($24)) + 784|0);
 __ZN8Renderer4DrawERK6CameraRKNSt3__14listINS_9ParticlesENS3_9allocatorIS5_EEEE($78,$79,$80);
 $81 = ((($24)) + 272|0);
 __ZN8Renderer10PostRenderEv($81);
 STACKTOP = sp;return;
}
function __ZN12InputHandler5ResetEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAP8[16508>>0] = 0;
 while(1) {
  $5 = 5172;
  $6 = $5;
  $4 = $6;
  $7 = $4;
  $3 = $7;
  $8 = $3;
  $9 = ((($8)) + 20|0);
  $2 = $9;
  $10 = $2;
  $1 = $10;
  $11 = $1;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  $14 = $13 ^ 1;
  if (!($14)) {
   break;
  }
  $0 = 5172;
  $15 = $0;
  __ZNSt3__15dequeIN12InputHandler11ButtonClickENS_9allocatorIS2_EEE9pop_frontEv($15);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -8|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 8)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_6vectorIjNS_9allocatorIjEEEENS2_IS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -12|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 12)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNK3gsl13static_boundsIJLin1EEE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3gsl7details12BoundsRangesIJLin1EEE9totalSizeEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3gsl7details12BoundsRangesIJLin1EEE9totalSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEC2EPKS3_b($this,$container,$isbegin) {
 $this = $this|0;
 $container = $container|0;
 $isbegin = $isbegin|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $container;
 $3 = $isbegin&1;
 $2 = $3;
 $4 = $0;
 $5 = $2;
 $6 = $5&1;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 if ($6) {
  $12 = $8;
 } else {
  $9 = $1;
  $10 = (__ZNK3gsl4spanI6Layer2Lin1EJEE4sizeEv($9)|0);
  $11 = (($8) + (($10*48)|0)|0);
  $12 = $11;
 }
 HEAP32[$4>>2] = $12;
 $13 = ((($4)) + 4|0);
 $14 = $1;
 HEAP32[$13>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -20|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 20)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNK3gsl13static_boundsIJLin1EEE9linearizeERKNS_5indexILj1EEE($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3gsl7details12BoundsRangesIJLin1EEE9linearizeINS_5indexILj1EEELj0EEEiRKT_($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK3gsl7details12BoundsRangesIJLin1EEE9linearizeINS_5indexILj1EEELj0EEEiRKT_($this,$arr) {
 $this = $this|0;
 $arr = $arr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $arr;
 $2 = $0;
 $3 = (__ZNK3gsl7details12BoundsRangesIJEE9totalSizeEv($2)|0);
 $4 = $1;
 $5 = (__ZNK3gsl5indexILj1EEixEj($4,0)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($3, $6)|0;
 $index = $7;
 $8 = $index;
 $9 = HEAP32[$2>>2]|0;
 $10 = ($8|0)<($9|0);
 if ($10) {
  $11 = $index;
  $12 = $1;
  $13 = (__ZNK3gsl7details12BoundsRangesIJEE9linearizeINS_5indexILj1EEELj1EEEiRKT_($2,$12)|0);
  $14 = (($11) + ($13))|0;
  STACKTOP = sp;return ($14|0);
 } else {
  __ZSt9terminatev();
  // unreachable;
 }
 return (0)|0;
}
function __ZNK3gsl7details12BoundsRangesIJEE9totalSizeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK3gsl5indexILj1EEixEj($this,$component_idx) {
 $this = $this|0;
 $component_idx = $component_idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $component_idx;
 $2 = $0;
 $3 = $1;
 $4 = ($3>>>0)<(1);
 if ($4) {
  $5 = $1;
  $6 = (($2) + ($5<<2)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  __ZSt9terminatev();
  // unreachable;
 }
 return (0)|0;
}
function __ZNK3gsl7details12BoundsRangesIJEE9linearizeINS_5indexILj1EEELj1EEEiRKT_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 0;
}
function __ZN3gsl11narrow_castIijEET_T0_($u) {
 $u = $u|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $u;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__113__vector_baseIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -12|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 12)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN5Asset5LayerENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -40|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZN5Asset5LayerD2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 40)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZN16custom_exceptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN16custom_exceptionD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK16custom_exception4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -1|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $11 = $55;
 $12 = $56;
 $13 = $66;
 $67 = $11;
 $68 = $12;
 $69 = $13;
 $8 = $67;
 $9 = $68;
 $10 = $69;
 $70 = $9;
 $7 = $70;
 $71 = $7;
 __ZdlPv($71);
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIN12InputHandler11ButtonClickENS_9allocatorIS2_EEE3endEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__mp = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = $this;
 $9 = $8;
 $7 = $9;
 $10 = $7;
 $11 = ((($10)) + 20|0);
 $6 = $11;
 $12 = $6;
 $5 = $12;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($9)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + ($16))|0;
 $__p = $17;
 $4 = $9;
 $18 = $4;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__p;
 $22 = (($21>>>0) / 1024)&-1;
 $23 = (($20) + ($22<<2)|0);
 $__mp = $23;
 $24 = $__mp;
 $0 = $9;
 $25 = $0;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($25)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27|0)==($29|0);
 if ($30) {
  $36 = 0;
 } else {
  $31 = $__mp;
  $32 = HEAP32[$31>>2]|0;
  $33 = $__p;
  $34 = (($33>>>0) % 1024)&-1;
  $35 = (($32) + ($34<<2)|0);
  $36 = $35;
 }
 $1 = $agg$result;
 $2 = $24;
 $3 = $36;
 $37 = $1;
 $38 = $2;
 HEAP32[$37>>2] = $38;
 $39 = ((($37)) + 4|0);
 $40 = $3;
 HEAP32[$39>>2] = $40;
 STACKTOP = sp;return;
}
function __ZNSt3__18functionIFvPKciEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 if ($4) {
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 1023]($6);
  STACKTOP = sp;return;
 }
 $10 = ($6|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = ((($1)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vi[$15 & 1023]($12);
 STACKTOP = sp;return;
}
function __ZN6Camera9TranslateEfff($this,$x,$y,$z) {
 $this = $this|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 136|0;
 $5 = sp + 72|0;
 $8 = sp;
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $9 = $0;
 $10 = $1;
 $11 = +HEAPF32[$9>>2];
 $12 = $11 + $10;
 HEAPF32[$9>>2] = $12;
 $13 = $2;
 $14 = ((($9)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 + $13;
 HEAPF32[$14>>2] = $16;
 $17 = $3;
 $18 = ((($9)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $19 + $17;
 HEAPF32[$18>>2] = $20;
 $21 = ((($9)) + 12|0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2Ev($5);
 __THREW__ = 0;
 invoke_viii(452,($4|0),($5|0),($9|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 do {
  if ($23) {
   $31 = ___cxa_find_matching_catch()|0;
   $32 = tempRet0;
   $6 = $31;
   $7 = $32;
  } else {
   __THREW__ = 0;
   (invoke_iii(453,($21|0),($4|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $33 = ___cxa_find_matching_catch()|0;
    $34 = tempRet0;
    $6 = $33;
    $7 = $34;
    __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($4);
    break;
   }
   __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($4);
   __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($5);
   $26 = ((($9)) + 140|0);
   $27 = ((($9)) + 76|0);
   $28 = ((($9)) + 12|0);
   __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($8,$27,$28);
   __THREW__ = 0;
   (invoke_iii(453,($26|0),($8|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($8);
    STACKTOP = sp;return;
   }
   $35 = ___cxa_find_matching_catch()|0;
   $36 = tempRet0;
   $6 = $35;
   $7 = $36;
   __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($8);
   $37 = $6;
   $38 = $7;
   ___resumeException($37|0);
   // unreachable;
  }
 } while(0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($5);
 $37 = $6;
 $38 = $7;
 ___resumeException($37|0);
 // unreachable;
}
function __ZN6ProtoX4MoveERK4Timebbb($this,$t,$lt,$rt,$bt) {
 $this = $this|0;
 $t = $t|0;
 $lt = $lt|0;
 $rt = $rt|0;
 $bt = $bt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $5 = $lt&1;
 $2 = $5;
 $6 = $rt&1;
 $3 = $6;
 $7 = $bt&1;
 $4 = $7;
 $8 = $0;
 $9 = ((($8)) + 96|0);
 $10 = $2;
 $11 = $10&1;
 __ZN6ProtoX10Propulsion3SetEb($9,$11);
 $12 = ((($8)) + 192|0);
 $13 = $3;
 $14 = $13&1;
 __ZN6ProtoX10Propulsion3SetEb($12,$14);
 $15 = ((($8)) + 144|0);
 $16 = $4;
 $17 = $16&1;
 __ZN6ProtoX10Propulsion3SetEb($15,$17);
 $18 = $2;
 $19 = $18&1;
 if ($19) {
  $20 = ((($8)) + 28|0);
  $21 = +HEAPF32[$20>>2];
  $22 = -$21;
  $28 = $22;
 } else {
  $23 = $3;
  $24 = $23&1;
  if ($24) {
   $25 = ((($8)) + 28|0);
   $26 = +HEAPF32[$25>>2];
   $28 = $26;
  } else {
   $28 = 0.0;
  }
 }
 $27 = ((($8)) + 68|0);
 HEAPF32[$27>>2] = $28;
 $29 = $4;
 $30 = $29&1;
 if ($30) {
  $31 = ((($8)) + 28|0);
  $32 = +HEAPF32[$31>>2];
  $37 = $32;
  $35 = ((($8)) + 68|0);
  $36 = ((($35)) + 4|0);
  HEAPF32[$36>>2] = $37;
  STACKTOP = sp;return;
 } else {
  $33 = ((($8)) + 36|0);
  $34 = +HEAPF32[$33>>2];
  $37 = $34;
  $35 = ((($8)) + 68|0);
  $36 = ((($35)) + 4|0);
  HEAPF32[$36>>2] = $37;
  STACKTOP = sp;return;
 }
}
function __ZN6ProtoX5ShootERNSt3__16vectorI7MissileNS0_9allocatorIS2_EEEE($this,$missiles) {
 $this = $this|0;
 $missiles = $missiles|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $__annotator$i = 0, $missile_vec = 0, $missile_vel = 0.0, $rot = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp;
 $14 = sp + 181|0;
 $__annotator$i = sp + 180|0;
 $missile_vec = sp + 52|0;
 $29 = sp + 48|0;
 $30 = sp + 44|0;
 $31 = sp + 40|0;
 $32 = sp + 16|0;
 $33 = sp + 4|0;
 $27 = $this;
 $28 = $missiles;
 $34 = $27;
 $missile_vel = 0.5;
 $35 = ((($34)) + 240|0);
 $36 = ((($35)) + 4|0);
 $37 = +HEAPF32[$36>>2];
 $38 = ((($34)) + 240|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $37 + $39;
 $rot = $40;
 $41 = $rot;
 $26 = $41;
 $42 = $26;
 $43 = (+Math_cos((+$42)));
 $44 = $43 * 0.5;
 HEAPF32[$29>>2] = $44;
 $45 = $rot;
 $25 = $45;
 $46 = $25;
 $47 = (+Math_sin((+$46)));
 $48 = $47 * 0.5;
 HEAPF32[$30>>2] = $48;
 HEAPF32[$31>>2] = 0.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($missile_vec,$29,$30,$31);
 $49 = $28;
 $50 = ((($34)) + 44|0);
 $51 = ((($34)) + 80|0);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($32,$50,$51);
 $52 = ((($32)) + 12|0);
 $53 = $rot;
 HEAPF32[$52>>2] = $53;
 $54 = ((($32)) + 16|0);
 $55 = ((($34)) + 56|0);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($33,$missile_vec,$55);
 $56 = (+__ZN3glm6lengthIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EE($33));
 HEAPF32[$54>>2] = $56;
 $57 = ((($32)) + 20|0);
 HEAP32[$57>>2] = $34;
 $23 = $49;
 $24 = $32;
 $58 = $23;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $22 = $58;
 $61 = $22;
 $62 = ((($61)) + 8|0);
 $21 = $62;
 $63 = $21;
 $20 = $63;
 $64 = $20;
 $65 = HEAP32[$64>>2]|0;
 $66 = ($60>>>0)<($65>>>0);
 if ($66) {
  __ZNSt3__16vectorI7MissileNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i,$58,1);
  $19 = $58;
  $67 = $19;
  $68 = ((($67)) + 8|0);
  $18 = $68;
  $69 = $18;
  $17 = $69;
  $70 = $17;
  $71 = ((($58)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $15 = $72;
  $73 = $15;
  $74 = $24;
  $0 = $74;
  $75 = $0;
  $11 = $70;
  $12 = $73;
  $13 = $75;
  $76 = $11;
  $77 = $12;
  $78 = $13;
  $10 = $78;
  $79 = $10;
  ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
  $6 = $76;
  $7 = $77;
  $8 = $79;
  $80 = $6;
  $81 = $7;
  $82 = $8;
  $5 = $82;
  $83 = $5;
  $2 = $80;
  $3 = $81;
  $4 = $83;
  $84 = $3;
  $85 = $4;
  $1 = $85;
  $86 = $1;
  __ZN7MissileC2ERKS_($84,$86);
  __ZNSt3__16vectorI7MissileNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $87 = ((($58)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 24|0);
  HEAP32[$87>>2] = $89;
  STACKTOP = sp;return;
 } else {
  $90 = $24;
  $16 = $90;
  $91 = $16;
  __ZNSt3__16vectorI7MissileNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($58,$91);
  STACKTOP = sp;return;
 }
}
function __ZN6ProtoX6UpdateERK4TimeRK4AABB($this,$t,$bounds) {
 $this = $this|0;
 $t = $t|0;
 $bounds = $bounds|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 24|0;
 $8 = sp + 235|0;
 $15 = sp + 16|0;
 $18 = sp + 234|0;
 $24 = sp + 8|0;
 $27 = sp + 233|0;
 $33 = sp;
 $36 = sp + 232|0;
 $40 = sp + 92|0;
 $41 = sp + 80|0;
 $42 = sp + 76|0;
 $43 = sp + 64|0;
 $44 = sp + 60|0;
 $45 = sp + 56|0;
 $46 = sp + 52|0;
 $47 = sp + 40|0;
 $48 = sp + 36|0;
 $49 = sp + 32|0;
 $50 = sp + 28|0;
 $37 = $this;
 $38 = $t;
 $39 = $bounds;
 $51 = $37;
 $52 = ((($51)) + 96|0);
 $53 = $38;
 __ZN6ProtoX10Propulsion6UpdateERK4Time($52,$53);
 $54 = ((($51)) + 192|0);
 $55 = $38;
 __ZN6ProtoX10Propulsion6UpdateERK4Time($54,$55);
 $56 = ((($51)) + 144|0);
 $57 = $38;
 __ZN6ProtoX10Propulsion6UpdateERK4Time($56,$57);
 $58 = ((($51)) + 240|0);
 $59 = $38;
 __ZN6ProtoX6Turret6UpdateERK4Time($58,$59);
 $60 = ((($51)) + 56|0);
 $61 = ((($51)) + 68|0);
 $62 = ((($51)) + 24|0);
 __ZN3glmdvIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($41,$61,$62);
 $63 = $38;
 $64 = ((($63)) + 8|0);
 $65 = +HEAPF64[$64>>3];
 $66 = $65;
 HEAPF32[$42>>2] = $66;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($40,$41,$42);
 (__ZN3glm5tvec3IfLNS_9precisionE0EEpLIfEERS2_RKNS0_IT_LS1_0EEE($60,$40)|0);
 $67 = ((($51)) + 44|0);
 $68 = ((($51)) + 56|0);
 $69 = $38;
 $70 = ((($69)) + 8|0);
 $71 = +HEAPF64[$70>>3];
 $72 = $71;
 HEAPF32[$44>>2] = $72;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($43,$68,$44);
 (__ZN3glm5tvec3IfLNS_9precisionE0EEpLIfEERS2_RKNS0_IT_LS1_0EEE($67,$43)|0);
 $73 = ((($51)) + 20|0);
 $74 = +HEAPF32[$73>>2];
 $75 = -$74;
 HEAPF32[$45>>2] = $75;
 $76 = ((($51)) + 20|0);
 $77 = ((($51)) + 56|0);
 $34 = $76;
 $35 = $77;
 $78 = $34;
 $79 = $35;
 ;HEAP8[$33>>0]=HEAP8[$36>>0]|0;
 $31 = $78;
 $32 = $79;
 $80 = $32;
 $81 = $31;
 $28 = $33;
 $29 = $80;
 $30 = $81;
 $82 = $29;
 $83 = +HEAPF32[$82>>2];
 $84 = $30;
 $85 = +HEAPF32[$84>>2];
 $86 = $83 < $85;
 $87 = $32;
 $88 = $31;
 $89 = $86 ? $87 : $88;
 $25 = $45;
 $26 = $89;
 $90 = $25;
 $91 = $26;
 ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
 $22 = $90;
 $23 = $91;
 $92 = $22;
 $93 = $23;
 $19 = $24;
 $20 = $92;
 $21 = $93;
 $94 = $20;
 $95 = +HEAPF32[$94>>2];
 $96 = $21;
 $97 = +HEAPF32[$96>>2];
 $98 = $95 < $97;
 $99 = $23;
 $100 = $22;
 $101 = $98 ? $99 : $100;
 $102 = +HEAPF32[$101>>2];
 $103 = ((($51)) + 56|0);
 HEAPF32[$103>>2] = $102;
 $104 = ((($51)) + 20|0);
 $105 = +HEAPF32[$104>>2];
 $106 = -$105;
 HEAPF32[$46>>2] = $106;
 $107 = ((($51)) + 20|0);
 $108 = ((($51)) + 56|0);
 $109 = ((($108)) + 4|0);
 $16 = $107;
 $17 = $109;
 $110 = $16;
 $111 = $17;
 ;HEAP8[$15>>0]=HEAP8[$18>>0]|0;
 $13 = $110;
 $14 = $111;
 $112 = $14;
 $113 = $13;
 $10 = $15;
 $11 = $112;
 $12 = $113;
 $114 = $11;
 $115 = +HEAPF32[$114>>2];
 $116 = $12;
 $117 = +HEAPF32[$116>>2];
 $118 = $115 < $117;
 $119 = $14;
 $120 = $13;
 $121 = $118 ? $119 : $120;
 $6 = $46;
 $7 = $121;
 $122 = $6;
 $123 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $122;
 $4 = $123;
 $124 = $3;
 $125 = $4;
 $0 = $5;
 $1 = $124;
 $2 = $125;
 $126 = $1;
 $127 = +HEAPF32[$126>>2];
 $128 = $2;
 $129 = +HEAPF32[$128>>2];
 $130 = $127 < $129;
 $131 = $4;
 $132 = $3;
 $133 = $130 ? $131 : $132;
 $134 = +HEAPF32[$133>>2];
 $135 = ((($51)) + 56|0);
 $136 = ((($135)) + 4|0);
 HEAPF32[$136>>2] = $134;
 $137 = ((($51)) + 44|0);
 $138 = ((($137)) + 4|0);
 $139 = +HEAPF32[$138>>2];
 $140 = ((($51)) + 4|0);
 $141 = ((($140)) + 12|0);
 $142 = +HEAPF32[$141>>2];
 $143 = $139 + $142;
 $144 = $39;
 $145 = ((($144)) + 12|0);
 $146 = +HEAPF32[$145>>2];
 $147 = ((($51)) + 40|0);
 $148 = +HEAPF32[$147>>2];
 $149 = $146 + $148;
 $150 = $143 <= $149;
 if (!($150)) {
  $176 = ((($51)) + 44|0);
  $177 = ((($176)) + 4|0);
  $178 = +HEAPF32[$177>>2];
  $179 = ((($51)) + 4|0);
  $180 = ((($179)) + 4|0);
  $181 = +HEAPF32[$180>>2];
  $182 = $178 + $181;
  $183 = $39;
  $184 = ((($183)) + 4|0);
  $185 = +HEAPF32[$184>>2];
  $186 = $182 >= $185;
  if (!($186)) {
   STACKTOP = sp;return;
  }
  $187 = $39;
  $188 = ((($187)) + 4|0);
  $189 = +HEAPF32[$188>>2];
  $190 = ((($51)) + 4|0);
  $191 = ((($190)) + 4|0);
  $192 = +HEAPF32[$191>>2];
  $193 = $189 - $192;
  $194 = ((($51)) + 44|0);
  $195 = ((($194)) + 4|0);
  HEAPF32[$195>>2] = $193;
  $196 = ((($51)) + 56|0);
  $197 = ((($196)) + 4|0);
  HEAPF32[$197>>2] = 0.0;
  STACKTOP = sp;return;
 }
 $151 = $39;
 $152 = ((($151)) + 12|0);
 $153 = +HEAPF32[$152>>2];
 $154 = ((($51)) + 40|0);
 $155 = +HEAPF32[$154>>2];
 $156 = $153 + $155;
 $157 = ((($51)) + 4|0);
 $158 = ((($157)) + 12|0);
 $159 = +HEAPF32[$158>>2];
 $160 = $156 - $159;
 $161 = ((($51)) + 44|0);
 $162 = ((($161)) + 4|0);
 HEAPF32[$162>>2] = $160;
 $163 = ((($51)) + 56|0);
 $164 = ((($163)) + 4|0);
 $165 = +HEAPF32[$164>>2];
 $9 = $165;
 $166 = $9;
 $167 = (+Math_abs((+$166)));
 $168 = $167 < 0.0010000000474974513;
 $169 = ((($51)) + 56|0);
 if ($168) {
  $170 = ((($169)) + 4|0);
  HEAPF32[$170>>2] = 0.0;
  STACKTOP = sp;return;
 } else {
  HEAPF32[$48>>2] = 0.0;
  $171 = ((($51)) + 56|0);
  $172 = ((($171)) + 4|0);
  $173 = +HEAPF32[$172>>2];
  $174 = -$173;
  $175 = $174 / 2.0;
  HEAPF32[$49>>2] = $175;
  HEAPF32[$50>>2] = 0.0;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($47,$48,$49,$50);
  (__ZN3glm5tvec3IfLNS_9precisionE0EEaSERKS2_($169,$47)|0);
  STACKTOP = sp;return;
 }
}
function __ZN7Missile6UpdateERK4Time($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 40|0;
 $5 = sp + 28|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 $2 = $this;
 $3 = $t;
 $11 = $2;
 $12 = ((($11)) + 12|0);
 $13 = +HEAPF32[$12>>2];
 $1 = $13;
 $14 = $1;
 $15 = (+Math_cos((+$14)));
 HEAPF32[$7>>2] = $15;
 $16 = ((($11)) + 12|0);
 $17 = +HEAPF32[$16>>2];
 $0 = $17;
 $18 = $0;
 $19 = (+Math_sin((+$18)));
 HEAPF32[$8>>2] = $19;
 HEAPF32[$9>>2] = 0.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($6,$7,$8,$9);
 $20 = ((($11)) + 16|0);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($5,$6,$20);
 $21 = $3;
 $22 = ((($21)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23;
 HEAPF32[$10>>2] = $24;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($4,$5,$10);
 (__ZN3glm5tvec3IfLNS_9precisionE0EEpLIfEERS2_RKNS0_IT_LS1_0EEE($11,$4)|0);
 STACKTOP = sp;return;
}
function __ZN6ProtoX10WrapAroundEff($this,$min,$max) {
 $this = $this|0;
 $min = +$min;
 $max = +$max;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $dif = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $min;
 $3 = $max;
 $4 = $1;
 $5 = ((($4)) + 44|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $3;
 $8 = $6 - $7;
 $dif = $8;
 $9 = $dif;
 $10 = $9 >= 0.0;
 if ($10) {
  $11 = $2;
  $12 = $dif;
  $13 = $11 + $12;
  $14 = ((($4)) + 44|0);
  HEAPF32[$14>>2] = $13;
  $15 = $dif;
  $0 = $15;
  $27 = $0;
  STACKTOP = sp;return (+$27);
 }
 $16 = ((($4)) + 44|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $2;
 $19 = $17 - $18;
 $dif = $19;
 $20 = $dif;
 $21 = $20 < 0.0;
 if ($21) {
  $22 = $3;
  $23 = $dif;
  $24 = $22 + $23;
  $25 = ((($4)) + 44|0);
  HEAPF32[$25>>2] = $24;
  $26 = $dif;
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return (+$27);
 } else {
  $0 = 0.0;
  $27 = $0;
  STACKTOP = sp;return (+$27);
 }
 return +(0.0);
}
function __ZN6Camera6UpdateERK4Time($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return;
}
function __ZN6Camera8TrackingERKN3glm5tvec3IfLNS0_9precisionE0EEERK4AABBS8_($this,$tracking_pos,$scene_aabb,$player_aabb) {
 $this = $this|0;
 $tracking_pos = $tracking_pos|0;
 $scene_aabb = $scene_aabb|0;
 $player_aabb = $player_aabb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $bottom = 0.0, $d = 0, $dx = 0.0, $dy = 0.0, $max_x = 0.0, $top = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d = sp + 208|0;
 $4 = sp + 136|0;
 $5 = sp + 72|0;
 $8 = sp;
 $0 = $this;
 $1 = $tracking_pos;
 $2 = $scene_aabb;
 $3 = $player_aabb;
 $9 = $0;
 $10 = HEAP32[(2616)>>2]|0;
 $11 = $10 >> 2;
 $12 = (+($11|0));
 $max_x = $12;
 $13 = HEAP32[(2620)>>2]|0;
 $14 = $13 >> 2;
 $15 = (+($14|0));
 $top = $15;
 $16 = HEAP32[(2620)>>2]|0;
 $17 = $16 >> 2;
 $18 = (+($17|0));
 $19 = -$18;
 $bottom = $19;
 $20 = $1;
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($d,$20,$9);
 $21 = $max_x;
 $22 = +HEAPF32[$d>>2];
 $23 = $21 + $22;
 $dx = $23;
 $24 = +HEAPF32[$d>>2];
 $25 = $max_x;
 $26 = -$25;
 $27 = $24 < $26;
 $28 = +HEAPF32[$d>>2];
 $29 = $max_x;
 if ($27) {
  $30 = $28 + $29;
  $31 = +HEAPF32[$9>>2];
  $32 = $31 - $30;
  HEAPF32[$9>>2] = $32;
 } else {
  $33 = $28 > $29;
  if ($33) {
   $34 = +HEAPF32[$d>>2];
   $35 = $max_x;
   $36 = $34 - $35;
   $37 = +HEAPF32[$9>>2];
   $38 = $37 - $36;
   HEAPF32[$9>>2] = $38;
  }
 }
 $39 = $bottom;
 $40 = ((($d)) + 4|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $39 + $41;
 $dy = $42;
 $43 = ((($d)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $bottom;
 $46 = $44 < $45;
 if ($46) {
  $47 = ((($d)) + 4|0);
  $48 = +HEAPF32[$47>>2];
  $49 = $bottom;
  $50 = $48 - $49;
  $51 = ((($9)) + 4|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $52 - $50;
  HEAPF32[$51>>2] = $53;
 }
 $54 = $top;
 $55 = ((($d)) + 4|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $54 + $56;
 $dy = $57;
 $58 = ((($d)) + 4|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $top;
 $61 = $59 > $60;
 if ($61) {
  $62 = ((($d)) + 4|0);
  $63 = +HEAPF32[$62>>2];
  $64 = $top;
  $65 = $63 - $64;
  $66 = ((($9)) + 4|0);
  $67 = +HEAPF32[$66>>2];
  $68 = $67 - $65;
  HEAPF32[$66>>2] = $68;
 }
 $69 = ((($9)) + 12|0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2Ev($5);
 __THREW__ = 0;
 invoke_viii(452,($4|0),($5|0),($9|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 do {
  if ($71) {
   $79 = ___cxa_find_matching_catch()|0;
   $80 = tempRet0;
   $6 = $79;
   $7 = $80;
  } else {
   __THREW__ = 0;
   (invoke_iii(453,($69|0),($4|0))|0);
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if ($73) {
    $81 = ___cxa_find_matching_catch()|0;
    $82 = tempRet0;
    $6 = $81;
    $7 = $82;
    __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($4);
    break;
   }
   __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($4);
   __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($5);
   $74 = ((($9)) + 140|0);
   $75 = ((($9)) + 76|0);
   $76 = ((($9)) + 12|0);
   __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($8,$75,$76);
   __THREW__ = 0;
   (invoke_iii(453,($74|0),($8|0))|0);
   $77 = __THREW__; __THREW__ = 0;
   $78 = $77&1;
   if (!($78)) {
    __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($8);
    STACKTOP = sp;return;
   }
   $83 = ___cxa_find_matching_catch()|0;
   $84 = tempRet0;
   $6 = $83;
   $7 = $84;
   __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($8);
   $85 = $6;
   $86 = $7;
   ___resumeException($85|0);
   // unreachable;
  }
 } while(0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($5);
 $85 = $6;
 $86 = $7;
 ___resumeException($85|0);
 // unreachable;
}
function __ZN7MissileaSERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 (__ZN3glm5tvec3IfLNS_9precisionE0EEaSERKS2_($3,$4)|0);
 $5 = ((($3)) + 12|0);
 $6 = $2;
 $7 = ((($6)) + 12|0);
 ;HEAP32[$5>>2]=HEAP32[$7>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN7Missile7HitTestERK4AABBRN3glm5tvec3IfLNS3_9precisionE0EEE($this,$bounds,$end) {
 $this = $this|0;
 $bounds = $bounds|0;
 $end = $end|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 36|0;
 $6 = sp + 24|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 $2 = $this;
 $3 = $bounds;
 $4 = $end;
 $11 = $2;
 $12 = $4;
 $13 = ((($11)) + 12|0);
 $14 = +HEAPF32[$13>>2];
 $1 = $14;
 $15 = $1;
 $16 = (+Math_cos((+$15)));
 HEAPF32[$8>>2] = $16;
 $17 = ((($11)) + 12|0);
 $18 = +HEAPF32[$17>>2];
 $0 = $18;
 $19 = $0;
 $20 = (+Math_sin((+$19)));
 HEAPF32[$9>>2] = $20;
 HEAPF32[$10>>2] = 0.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($7,$8,$9,$10);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($6,$7,5148);
 __ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($5,$6,$11);
 (__ZN3glm5tvec3IfLNS_9precisionE0EEaSERKS2_($12,$5)|0);
 $21 = $4;
 $22 = +HEAPF32[$21>>2];
 $23 = $3;
 $24 = +HEAPF32[$23>>2];
 $25 = $22 >= $24;
 if (!($25)) {
  $46 = 0;
  STACKTOP = sp;return ($46|0);
 }
 $26 = $4;
 $27 = +HEAPF32[$26>>2];
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $27 <= $30;
 if (!($31)) {
  $46 = 0;
  STACKTOP = sp;return ($46|0);
 }
 $32 = $4;
 $33 = ((($32)) + 4|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $3;
 $36 = ((($35)) + 12|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $34 >= $37;
 if (!($38)) {
  $46 = 0;
  STACKTOP = sp;return ($46|0);
 }
 $39 = $4;
 $40 = ((($39)) + 4|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $3;
 $43 = ((($42)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $41 <= $44;
 $46 = $45;
 STACKTOP = sp;return ($46|0);
}
function __ZNK4AABB9TranslateERKN3glm5tvec3IfLNS0_9precisionE0EEE($agg$result,$this,$pos) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pos;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 HEAPF32[$agg$result>>2] = $6;
 $7 = ((($agg$result)) + 4|0);
 $8 = ((($2)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 + $12;
 HEAPF32[$7>>2] = $13;
 $14 = ((($agg$result)) + 8|0);
 $15 = ((($2)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = +HEAPF32[$17>>2];
 $19 = $16 + $18;
 HEAPF32[$14>>2] = $19;
 $20 = ((($agg$result)) + 12|0);
 $21 = ((($2)) + 12|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $1;
 $24 = ((($23)) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $22 + $25;
 HEAPF32[$20>>2] = $26;
 STACKTOP = sp;return;
}
function __ZNSt3__14listIN8Renderer9ParticlesENS_9allocatorIS2_EEE9push_backEOS2_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__hold = 0, $__na = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp + 16|0;
 $18 = sp + 480|0;
 $43 = sp + 308|0;
 $44 = sp + 8|0;
 $47 = sp + 296|0;
 $48 = sp + 288|0;
 $49 = sp;
 $54 = sp + 264|0;
 $__hold = sp + 40|0;
 $105 = sp + 32|0;
 $103 = $this;
 $104 = $__x;
 $108 = $103;
 $102 = $108;
 $109 = $102;
 $110 = ((($109)) + 8|0);
 $101 = $110;
 $111 = $101;
 $100 = $111;
 $112 = $100;
 $__na = $112;
 $113 = $__na;
 $80 = $113;
 $81 = 1;
 $114 = $80;
 $115 = $81;
 $77 = $114;
 $78 = $115;
 $79 = 0;
 $116 = $78;
 $117 = ($116*4424)|0;
 $76 = $117;
 $118 = $76;
 $119 = (__Znwj($118)|0);
 $120 = $__na;
 $73 = $105;
 $74 = $120;
 $75 = 1;
 $121 = $73;
 $122 = $74;
 HEAP32[$121>>2] = $122;
 $123 = ((($121)) + 4|0);
 $124 = $75;
 HEAP32[$123>>2] = $124;
 $51 = $__hold;
 $52 = $119;
 $53 = $105;
 $125 = $51;
 $126 = $52;
 $127 = $53;
 $50 = $127;
 $128 = $50;
 ;HEAP32[$54>>2]=HEAP32[$128>>2]|0;HEAP32[$54+4>>2]=HEAP32[$128+4>>2]|0;
 ;HEAP8[$49>>0]=HEAP8[$54>>0]|0;HEAP8[$49+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$54+3>>0]|0;HEAP8[$49+4>>0]=HEAP8[$54+4>>0]|0;HEAP8[$49+5>>0]=HEAP8[$54+5>>0]|0;HEAP8[$49+6>>0]=HEAP8[$54+6>>0]|0;HEAP8[$49+7>>0]=HEAP8[$54+7>>0]|0;
 $46 = $125;
 HEAP32[$47>>2] = $126;
 $129 = $46;
 $45 = $47;
 $130 = $45;
 $131 = HEAP32[$130>>2]|0;
 $39 = $49;
 $132 = $39;
 ;HEAP32[$48>>2]=HEAP32[$132>>2]|0;HEAP32[$48+4>>2]=HEAP32[$132+4>>2]|0;
 ;HEAP8[$44>>0]=HEAP8[$48>>0]|0;HEAP8[$44+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$44+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$44+3>>0]=HEAP8[$48+3>>0]|0;HEAP8[$44+4>>0]=HEAP8[$48+4>>0]|0;HEAP8[$44+5>>0]=HEAP8[$48+5>>0]|0;HEAP8[$44+6>>0]=HEAP8[$48+6>>0]|0;HEAP8[$44+7>>0]=HEAP8[$48+7>>0]|0;
 $42 = $129;
 HEAP32[$43>>2] = $131;
 $133 = $42;
 $41 = $43;
 $134 = $41;
 $135 = HEAP32[$134>>2]|0;
 HEAP32[$133>>2] = $135;
 $136 = ((($133)) + 4|0);
 $40 = $44;
 $137 = $40;
 ;HEAP32[$136>>2]=HEAP32[$137>>2]|0;HEAP32[$136+4>>2]=HEAP32[$137+4>>2]|0;
 $138 = $__na;
 $4 = $__hold;
 $139 = $4;
 $3 = $139;
 $140 = $3;
 $2 = $140;
 $141 = $2;
 $142 = HEAP32[$141>>2]|0;
 $143 = ((($142)) + 8|0);
 $0 = $143;
 $144 = $0;
 $145 = $104;
 $1 = $145;
 $146 = $1;
 $15 = $138;
 $16 = $144;
 $17 = $146;
 $147 = $15;
 $148 = $16;
 $149 = $17;
 $14 = $149;
 $150 = $14;
 ;HEAP8[$13>>0]=HEAP8[$18>>0]|0;
 $10 = $147;
 $11 = $148;
 $12 = $150;
 $151 = $10;
 $152 = $11;
 $153 = $12;
 $9 = $153;
 $154 = $9;
 $6 = $151;
 $7 = $152;
 $8 = $154;
 $155 = $7;
 $156 = $8;
 $5 = $156;
 $157 = $5;
 __THREW__ = 0;
 invoke_vii(454,($155|0),($157|0));
 $158 = __THREW__; __THREW__ = 0;
 $159 = $158&1;
 if ($159) {
  $217 = ___cxa_find_matching_catch()|0;
  $218 = tempRet0;
  $106 = $217;
  $107 = $218;
  $99 = $__hold;
  $219 = $99;
  $97 = $219;
  $98 = 0;
  $220 = $97;
  $96 = $220;
  $221 = $96;
  $95 = $221;
  $222 = $95;
  $223 = HEAP32[$222>>2]|0;
  $__tmp$i$i = $223;
  $224 = $98;
  $85 = $220;
  $225 = $85;
  $84 = $225;
  $226 = $84;
  HEAP32[$226>>2] = $224;
  $227 = $__tmp$i$i;
  $228 = ($227|0)!=(0|0);
  if (!($228)) {
   $243 = $106;
   $244 = $107;
   ___resumeException($243|0);
   // unreachable;
  }
  $83 = $220;
  $229 = $83;
  $82 = $229;
  $230 = $82;
  $231 = ((($230)) + 4|0);
  $232 = $__tmp$i$i;
  $93 = $231;
  $94 = $232;
  $233 = $93;
  $234 = HEAP32[$233>>2]|0;
  $235 = $94;
  $236 = ((($233)) + 4|0);
  $237 = HEAP32[$236>>2]|0;
  $90 = $234;
  $91 = $235;
  $92 = $237;
  $238 = $90;
  $239 = $91;
  $240 = $92;
  $87 = $238;
  $88 = $239;
  $89 = $240;
  $241 = $88;
  $86 = $241;
  $242 = $86;
  __ZdlPv($242);
  $243 = $106;
  $244 = $107;
  ___resumeException($243|0);
  // unreachable;
 } else {
  $21 = $__hold;
  $160 = $21;
  $20 = $160;
  $161 = $20;
  $19 = $161;
  $162 = $19;
  $163 = HEAP32[$162>>2]|0;
  $24 = $__hold;
  $164 = $24;
  $23 = $164;
  $165 = $23;
  $22 = $165;
  $166 = $22;
  $167 = HEAP32[$166>>2]|0;
  $28 = $108;
  $29 = $163;
  $30 = $167;
  $168 = $28;
  $27 = $168;
  $169 = $27;
  $26 = $169;
  $170 = $26;
  $25 = $170;
  $171 = $25;
  $172 = $30;
  $173 = ((($172)) + 4|0);
  HEAP32[$173>>2] = $171;
  $174 = HEAP32[$168>>2]|0;
  $175 = $29;
  HEAP32[$175>>2] = $174;
  $176 = $29;
  $177 = $29;
  $178 = HEAP32[$177>>2]|0;
  $179 = ((($178)) + 4|0);
  HEAP32[$179>>2] = $176;
  $180 = $30;
  HEAP32[$168>>2] = $180;
  $33 = $108;
  $181 = $33;
  $182 = ((($181)) + 8|0);
  $32 = $182;
  $183 = $32;
  $31 = $183;
  $184 = $31;
  $185 = HEAP32[$184>>2]|0;
  $186 = (($185) + 1)|0;
  HEAP32[$184>>2] = $186;
  $38 = $__hold;
  $187 = $38;
  $37 = $187;
  $188 = $37;
  $36 = $188;
  $189 = $36;
  $190 = HEAP32[$189>>2]|0;
  $__t$i = $190;
  $35 = $187;
  $191 = $35;
  $34 = $191;
  $192 = $34;
  HEAP32[$192>>2] = 0;
  $72 = $__hold;
  $193 = $72;
  $70 = $193;
  $71 = 0;
  $194 = $70;
  $69 = $194;
  $195 = $69;
  $68 = $195;
  $196 = $68;
  $197 = HEAP32[$196>>2]|0;
  $__tmp$i$i1 = $197;
  $198 = $71;
  $58 = $194;
  $199 = $58;
  $57 = $199;
  $200 = $57;
  HEAP32[$200>>2] = $198;
  $201 = $__tmp$i$i1;
  $202 = ($201|0)!=(0|0);
  if (!($202)) {
   STACKTOP = sp;return;
  }
  $56 = $194;
  $203 = $56;
  $55 = $203;
  $204 = $55;
  $205 = ((($204)) + 4|0);
  $206 = $__tmp$i$i1;
  $66 = $205;
  $67 = $206;
  $207 = $66;
  $208 = HEAP32[$207>>2]|0;
  $209 = $67;
  $210 = ((($207)) + 4|0);
  $211 = HEAP32[$210>>2]|0;
  $63 = $208;
  $64 = $209;
  $65 = $211;
  $212 = $63;
  $213 = $64;
  $214 = $65;
  $60 = $212;
  $61 = $213;
  $62 = $214;
  $215 = $61;
  $59 = $215;
  $216 = $59;
  __ZdlPv($216);
  STACKTOP = sp;return;
 }
}
function __ZN8Renderer9ParticlesC2ERKN3glm5tvec3IfLNS1_9precisionE0EEE($this,$pos) {
 $this = $this|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0;
 var $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $i = 0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $94 = sp + 204|0;
 $95 = sp + 40|0;
 $96 = sp + 32|0;
 $97 = sp + 24|0;
 $98 = sp + 192|0;
 $99 = sp + 180|0;
 $100 = sp + 8|0;
 $101 = sp;
 $102 = sp + 176|0;
 $90 = $this;
 $91 = $pos;
 $103 = $90;
 $104 = $91;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($103,$104);
 $105 = ((($103)) + 12|0);
 HEAP8[$105>>0] = 0;
 $106 = ((($103)) + 16|0);
 __ZNSt3__15arrayIN8Renderer9Particles8ParticleELj100EEC2Ev($106);
 $107 = HEAP8[120>>0]|0;
 $108 = ($107<<24>>24)==(0);
 if ($108) {
  $109 = (___cxa_guard_acquire((120|0))|0);
  $110 = ($109|0)!=(0);
  if ($110) {
   $87 = 104;
   $88 = 0.0;
   $89 = 1.0;
   $111 = $87;
   $112 = $88;
   $113 = $89;
   $84 = $111;
   $85 = $112;
   $86 = $113;
   $114 = $84;
   $115 = $85;
   HEAPF64[$114>>3] = $115;
   $116 = ((($114)) + 8|0);
   $117 = $86;
   HEAPF64[$116>>3] = $117;
   ___cxa_guard_release((120|0));
  }
 }
 $118 = HEAP8[144>>0]|0;
 $119 = ($118<<24>>24)==(0);
 do {
  if ($119) {
   $120 = (___cxa_guard_acquire((144|0))|0);
   $121 = ($120|0)!=(0);
   if ($121) {
    __THREW__ = 0;
    $122 = (+invoke_d(455));
    $123 = __THREW__; __THREW__ = 0;
    $124 = $123&1;
    if ($124) {
     $316 = ___cxa_find_matching_catch()|0;
     $317 = tempRet0;
     $92 = $316;
     $93 = $317;
     ___cxa_guard_abort((144|0));
     $318 = $92;
     $319 = $93;
     ___resumeException($318|0);
     // unreachable;
    } else {
     $125 = $122;
     $71 = 128;
     $72 = 0.0;
     $73 = $125;
     $126 = $71;
     $127 = $72;
     $128 = $73;
     $68 = $126;
     $69 = $127;
     $70 = $128;
     $129 = $68;
     $130 = $69;
     HEAPF64[$129>>3] = $130;
     $131 = ((($129)) + 8|0);
     $132 = $70;
     HEAPF64[$131>>3] = $132;
     ___cxa_guard_release((144|0));
     break;
    }
   }
  }
 } while(0);
 $133 = HEAP8[168>>0]|0;
 $134 = ($133<<24>>24)==(0);
 if ($134) {
  $135 = (___cxa_guard_acquire((168|0))|0);
  $136 = ($135|0)!=(0);
  if ($136) {
   $63 = 152;
   $64 = 4.9999998736893758E-5;
   $65 = 9.9999997473787516E-5;
   $137 = $63;
   $138 = $64;
   $139 = $65;
   $60 = $137;
   $61 = $138;
   $62 = $139;
   $140 = $60;
   $141 = $61;
   HEAPF64[$140>>3] = $141;
   $142 = ((($140)) + 8|0);
   $143 = $62;
   HEAPF64[$142>>3] = $143;
   ___cxa_guard_release((168|0));
  }
 }
 $144 = HEAP8[192>>0]|0;
 $145 = ($144<<24>>24)==(0);
 if ($145) {
  $146 = (___cxa_guard_acquire((192|0))|0);
  $147 = ($146|0)!=(0);
  if ($147) {
   $57 = 176;
   $58 = 0.0010000000474974513;
   $59 = 0.05000000074505806;
   $148 = $57;
   $149 = $58;
   $150 = $59;
   $54 = $148;
   $55 = $149;
   $56 = $150;
   $151 = $54;
   $152 = $55;
   HEAPF64[$151>>3] = $152;
   $153 = ((($151)) + 8|0);
   $154 = $56;
   HEAPF64[$153>>3] = $154;
   ___cxa_guard_release((192|0));
  }
 }
 $i = 0;
 while(1) {
  $155 = $i;
  $156 = ($155>>>0)<(100);
  if (!($156)) {
   break;
  }
  $157 = ((($103)) + 16|0);
  $158 = $i;
  $44 = $157;
  $45 = $158;
  $159 = $44;
  $160 = $45;
  $161 = (($159) + (($160*44)|0)|0);
  $162 = ((($161)) + 24|0);
  $34 = 104;
  $35 = 2648;
  $163 = $34;
  $164 = $35;
  $31 = $163;
  $32 = $164;
  $33 = $163;
  $165 = $33;
  $30 = $165;
  $166 = $30;
  $167 = ((($166)) + 8|0);
  $168 = +HEAPF64[$167>>3];
  $169 = $33;
  $28 = $169;
  $170 = $28;
  $171 = +HEAPF64[$170>>3];
  $172 = $168 - $171;
  $173 = $32;
  $174 = (+__ZNSt3__118generate_canonicalIdLj53ENS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEET_RT1_($173));
  $175 = $172 * $174;
  $176 = $33;
  $29 = $176;
  $177 = $29;
  $178 = +HEAPF64[$177>>3];
  $179 = $175 + $178;
  HEAPF64[$95>>3] = $179;
  $26 = 104;
  $27 = 2648;
  $180 = $26;
  $181 = $27;
  $23 = $180;
  $24 = $181;
  $25 = $180;
  $182 = $25;
  $22 = $182;
  $183 = $22;
  $184 = ((($183)) + 8|0);
  $185 = +HEAPF64[$184>>3];
  $186 = $25;
  $20 = $186;
  $187 = $20;
  $188 = +HEAPF64[$187>>3];
  $189 = $185 - $188;
  $190 = $24;
  $191 = (+__ZNSt3__118generate_canonicalIdLj53ENS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEET_RT1_($190));
  $192 = $189 * $191;
  $193 = $25;
  $21 = $193;
  $194 = $21;
  $195 = +HEAPF64[$194>>3];
  $196 = $192 + $195;
  HEAPF64[$96>>3] = $196;
  $18 = 104;
  $19 = 2648;
  $197 = $18;
  $198 = $19;
  $15 = $197;
  $16 = $198;
  $17 = $197;
  $199 = $17;
  $14 = $199;
  $200 = $14;
  $201 = ((($200)) + 8|0);
  $202 = +HEAPF64[$201>>3];
  $203 = $17;
  $12 = $203;
  $204 = $12;
  $205 = +HEAPF64[$204>>3];
  $206 = $202 - $205;
  $207 = $16;
  $208 = (+__ZNSt3__118generate_canonicalIdLj53ENS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEET_RT1_($207));
  $209 = $206 * $208;
  $210 = $17;
  $13 = $210;
  $211 = $13;
  $212 = +HEAPF64[$211>>3];
  $213 = $209 + $212;
  HEAPF64[$97>>3] = $213;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2IdddEERKT_RKT0_RKT1_($94,$95,$96,$97);
  (__ZN3glm5tvec3IfLNS_9precisionE0EEaSERKS2_($162,$94)|0);
  $214 = ((($103)) + 16|0);
  $215 = $i;
  $10 = $214;
  $11 = $215;
  $216 = $10;
  $217 = $11;
  $218 = (($216) + (($217*44)|0)|0);
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($98);
  (__ZN3glm5tvec3IfLNS_9precisionE0EEaSERKS2_($218,$98)|0);
  $6 = 128;
  $7 = 2648;
  $219 = $6;
  $220 = $7;
  $3 = $219;
  $4 = $220;
  $5 = $219;
  $221 = $5;
  $2 = $221;
  $222 = $2;
  $223 = ((($222)) + 8|0);
  $224 = +HEAPF64[$223>>3];
  $225 = $5;
  $0 = $225;
  $226 = $0;
  $227 = +HEAPF64[$226>>3];
  $228 = $224 - $227;
  $229 = $4;
  $230 = (+__ZNSt3__118generate_canonicalIdLj53ENS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEET_RT1_($229));
  $231 = $228 * $230;
  $232 = $5;
  $1 = $232;
  $233 = $1;
  $234 = +HEAPF64[$233>>3];
  $235 = $231 + $234;
  $r = $235;
  $236 = ((($103)) + 16|0);
  $237 = $i;
  $8 = $236;
  $9 = $237;
  $238 = $8;
  $239 = $9;
  $240 = (($238) + (($239*44)|0)|0);
  $241 = ((($240)) + 12|0);
  $242 = $r;
  $243 = (+Math_cos((+$242)));
  $42 = 176;
  $43 = 2648;
  $244 = $42;
  $245 = $43;
  $39 = $244;
  $40 = $245;
  $41 = $244;
  $246 = $41;
  $38 = $246;
  $247 = $38;
  $248 = ((($247)) + 8|0);
  $249 = +HEAPF64[$248>>3];
  $250 = $41;
  $36 = $250;
  $251 = $36;
  $252 = +HEAPF64[$251>>3];
  $253 = $249 - $252;
  $254 = $40;
  $255 = (+__ZNSt3__118generate_canonicalIdLj53ENS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEET_RT1_($254));
  $256 = $253 * $255;
  $257 = $41;
  $37 = $257;
  $258 = $37;
  $259 = +HEAPF64[$258>>3];
  $260 = $256 + $259;
  $261 = $243 * $260;
  $262 = $261 * 1.0;
  HEAPF64[$100>>3] = $262;
  $263 = $r;
  $264 = (+Math_sin((+$263)));
  $52 = 176;
  $53 = 2648;
  $265 = $52;
  $266 = $53;
  $49 = $265;
  $50 = $266;
  $51 = $265;
  $267 = $51;
  $48 = $267;
  $268 = $48;
  $269 = ((($268)) + 8|0);
  $270 = +HEAPF64[$269>>3];
  $271 = $51;
  $46 = $271;
  $272 = $46;
  $273 = +HEAPF64[$272>>3];
  $274 = $270 - $273;
  $275 = $50;
  $276 = (+__ZNSt3__118generate_canonicalIdLj53ENS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEET_RT1_($275));
  $277 = $274 * $276;
  $278 = $51;
  $47 = $278;
  $279 = $47;
  $280 = +HEAPF64[$279>>3];
  $281 = $277 + $280;
  $282 = $264 * $281;
  $283 = $282 * 1.0;
  HEAPF64[$101>>3] = $283;
  HEAPF32[$102>>2] = 0.0;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2IddfEERKT_RKT0_RKT1_($99,$100,$101,$102);
  (__ZN3glm5tvec3IfLNS_9precisionE0EEaSERKS2_($241,$99)|0);
  $284 = ((($103)) + 16|0);
  $285 = $i;
  $66 = $284;
  $67 = $285;
  $286 = $66;
  $287 = $67;
  $288 = (($286) + (($287*44)|0)|0);
  $289 = ((($288)) + 36|0);
  HEAPF32[$289>>2] = 1.0;
  $80 = 152;
  $81 = 2648;
  $290 = $80;
  $291 = $81;
  $77 = $290;
  $78 = $291;
  $79 = $290;
  $292 = $79;
  $76 = $292;
  $293 = $76;
  $294 = ((($293)) + 8|0);
  $295 = +HEAPF64[$294>>3];
  $296 = $79;
  $74 = $296;
  $297 = $74;
  $298 = +HEAPF64[$297>>3];
  $299 = $295 - $298;
  $300 = $78;
  $301 = (+__ZNSt3__118generate_canonicalIdLj53ENS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEET_RT1_($300));
  $302 = $299 * $301;
  $303 = $79;
  $75 = $303;
  $304 = $75;
  $305 = +HEAPF64[$304>>3];
  $306 = $302 + $305;
  $307 = $306;
  $308 = ((($103)) + 16|0);
  $309 = $i;
  $82 = $308;
  $83 = $309;
  $310 = $82;
  $311 = $83;
  $312 = (($310) + (($311*44)|0)|0);
  $313 = ((($312)) + 40|0);
  HEAPF32[$313>>2] = $307;
  $314 = $i;
  $315 = (($314) + 1)|0;
  $i = $315;
 }
 STACKTOP = sp;return;
}
function __ZN8Renderer9Particles6UpdateERK4Time($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $i = 0, $kill = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $22 = sp + 4|0;
 $23 = sp;
 $20 = $this;
 $21 = $t;
 $24 = $20;
 $kill = 1;
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = ($25>>>0)<(100);
  if (!($26)) {
   break;
  }
  $27 = ((($24)) + 16|0);
  $28 = $i;
  $18 = $27;
  $19 = $28;
  $29 = $18;
  $30 = $19;
  $31 = (($29) + (($30*44)|0)|0);
  $32 = ((($31)) + 36|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $33 <= 0.0;
  if (!($34)) {
   $kill = 0;
   $35 = ((($24)) + 16|0);
   $36 = $i;
   $6 = $35;
   $7 = $36;
   $37 = $6;
   $38 = $7;
   $39 = (($37) + (($38*44)|0)|0);
   $40 = ((($24)) + 16|0);
   $41 = $i;
   $0 = $40;
   $1 = $41;
   $42 = $0;
   $43 = $1;
   $44 = (($42) + (($43*44)|0)|0);
   $45 = ((($44)) + 12|0);
   $46 = $21;
   $47 = ((($46)) + 8|0);
   $48 = +HEAPF64[$47>>3];
   $49 = $48;
   HEAPF32[$23>>2] = $49;
   __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($22,$45,$23);
   (__ZN3glm5tvec3IfLNS_9precisionE0EEpLIfEERS2_RKNS0_IT_LS1_0EEE($39,$22)|0);
   $50 = ((($24)) + 16|0);
   $51 = $i;
   $2 = $50;
   $3 = $51;
   $52 = $2;
   $53 = $3;
   $54 = (($52) + (($53*44)|0)|0);
   $55 = ((($54)) + 12|0);
   $56 = ((($24)) + 16|0);
   $57 = $i;
   $4 = $56;
   $5 = $57;
   $58 = $4;
   $59 = $5;
   $60 = (($58) + (($59*44)|0)|0);
   $61 = ((($60)) + 40|0);
   $62 = +HEAPF32[$61>>2];
   $63 = $21;
   $64 = ((($63)) + 8|0);
   $65 = +HEAPF64[$64>>3];
   $66 = $65;
   $67 = $62 * $66;
   $68 = 1.0 - $67;
   (__ZN3glm5tvec3IfLNS_9precisionE0EEmLIfEERS2_T_($55,$68)|0);
   $69 = $21;
   $70 = ((($69)) + 8|0);
   $71 = +HEAPF64[$70>>3];
   $72 = $71;
   $73 = 9.9999997473787516E-6 * $72;
   $74 = 1.0 + $73;
   $75 = ((($24)) + 16|0);
   $76 = $i;
   $8 = $75;
   $9 = $76;
   $77 = $8;
   $78 = $9;
   $79 = (($77) + (($78*44)|0)|0);
   $80 = ((($79)) + 12|0);
   $81 = ((($80)) + 4|0);
   $82 = +HEAPF32[$81>>2];
   $83 = $82 * $74;
   HEAPF32[$81>>2] = $83;
   $84 = ((($24)) + 16|0);
   $85 = $i;
   $10 = $84;
   $11 = $85;
   $86 = $10;
   $87 = $11;
   $88 = (($86) + (($87*44)|0)|0);
   $89 = ((($88)) + 40|0);
   $90 = +HEAPF32[$89>>2];
   $91 = $21;
   $92 = ((($91)) + 8|0);
   $93 = +HEAPF64[$92>>3];
   $94 = $93;
   $95 = $90 * $94;
   $96 = ((($24)) + 16|0);
   $97 = $i;
   $12 = $96;
   $13 = $97;
   $98 = $12;
   $99 = $13;
   $100 = (($98) + (($99*44)|0)|0);
   $101 = ((($100)) + 36|0);
   $102 = +HEAPF32[$101>>2];
   $103 = $102 - $95;
   HEAPF32[$101>>2] = $103;
   $104 = ((($24)) + 16|0);
   $105 = $i;
   $14 = $104;
   $15 = $105;
   $106 = $14;
   $107 = $15;
   $108 = (($106) + (($107*44)|0)|0);
   $109 = ((($108)) + 36|0);
   $110 = +HEAPF32[$109>>2];
   $111 = $110 <= 0.0099999997764825821;
   if ($111) {
    $112 = ((($24)) + 16|0);
    $113 = $i;
    $16 = $112;
    $17 = $113;
    $114 = $16;
    $115 = $17;
    $116 = (($114) + (($115*44)|0)|0);
    $117 = ((($116)) + 36|0);
    HEAPF32[$117>>2] = 0.0;
   }
  }
  $118 = $i;
  $119 = (($118) + 1)|0;
  $i = $119;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__14listIN8Renderer9ParticlesENS_9allocatorIS2_EEE5eraseENS_21__list_const_iteratorIS2_PvEE($this,$__p) {
 $this = $this|0;
 $__p = $__p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__n = 0, $__na = 0, $__r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 112|0;
 $24 = sp + 20|0;
 $25 = $this;
 $26 = $25;
 $23 = $26;
 $27 = $23;
 $28 = ((($27)) + 8|0);
 $22 = $28;
 $29 = $22;
 $21 = $29;
 $30 = $21;
 $__na = $30;
 $31 = HEAP32[$__p>>2]|0;
 $__n = $31;
 $32 = $__n;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $__r = $34;
 $35 = $__n;
 $36 = $__n;
 $10 = $35;
 $11 = $36;
 $37 = $11;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $10;
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = $39;
 $43 = $10;
 $44 = HEAP32[$43>>2]|0;
 $45 = $11;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 HEAP32[$47>>2] = $44;
 $2 = $26;
 $48 = $2;
 $49 = ((($48)) + 8|0);
 $1 = $49;
 $50 = $1;
 $0 = $50;
 $51 = $0;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + -1)|0;
 HEAP32[$51>>2] = $53;
 $54 = $__na;
 $55 = $__n;
 $56 = ((($55)) + 8|0);
 $3 = $56;
 $57 = $3;
 $7 = $54;
 $8 = $57;
 $58 = $7;
 $59 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $58;
 $5 = $59;
 $60 = $__na;
 $61 = $__n;
 $16 = $60;
 $17 = $61;
 $18 = 1;
 $62 = $16;
 $63 = $17;
 $64 = $18;
 $13 = $62;
 $14 = $63;
 $15 = $64;
 $65 = $14;
 $12 = $65;
 $66 = $12;
 __ZdlPv($66);
 $67 = $__r;
 $19 = $24;
 $20 = $67;
 $68 = $19;
 $69 = $20;
 HEAP32[$68>>2] = $69;
 $70 = HEAP32[$24>>2]|0;
 STACKTOP = sp;return ($70|0);
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EEaSERKS2_($this,$m) {
 $this = $this|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($3,0)|0);
 (__ZN3glm5tvec4IfLNS_9precisionE0EEaSERKS2_($2,$4)|0);
 $5 = ((($2)) + 16|0);
 $6 = $1;
 $7 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($6,1)|0);
 (__ZN3glm5tvec4IfLNS_9precisionE0EEaSERKS2_($5,$7)|0);
 $8 = ((($2)) + 32|0);
 $9 = $1;
 $10 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($9,2)|0);
 (__ZN3glm5tvec4IfLNS_9precisionE0EEaSERKS2_($8,$10)|0);
 $11 = ((($2)) + 48|0);
 $12 = $1;
 $13 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($12,3)|0);
 (__ZN3glm5tvec4IfLNS_9precisionE0EEaSERKS2_($11,$13)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3glm9translateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_RKNS_5tvec3IS3_XT0_EEE($agg$result,$m,$v) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $v = $v|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 120|0;
 $5 = sp + 88|0;
 $6 = sp + 72|0;
 $7 = sp + 56|0;
 $8 = sp + 40|0;
 $9 = sp + 24|0;
 $10 = sp + 8|0;
 $0 = $m;
 $1 = $v;
 $$expand_i1_val = 0;
 HEAP8[$2>>0] = $$expand_i1_val;
 $12 = $0;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKS2_($agg$result,$12);
 __THREW__ = 0;
 $13 = (invoke_iii(456,($agg$result|0),3)|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  $16 = $0;
  __THREW__ = 0;
  $17 = (invoke_iii(457,($16|0),0)|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = $1;
   __THREW__ = 0;
   $21 = (invoke_iii(458,($20|0),0)|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    $24 = +HEAPF32[$21>>2];
    __THREW__ = 0;
    invoke_viid(459,($8|0),($17|0),(+$24));
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     $27 = $0;
     __THREW__ = 0;
     $28 = (invoke_iii(457,($27|0),1)|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      label = 18;
     } else {
      $31 = $1;
      __THREW__ = 0;
      $32 = (invoke_iii(458,($31|0),1)|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       label = 18;
      } else {
       $35 = +HEAPF32[$32>>2];
       __THREW__ = 0;
       invoke_viid(459,($9|0),($28|0),(+$35));
       $36 = __THREW__; __THREW__ = 0;
       $37 = $36&1;
       if ($37) {
        label = 18;
       } else {
        __THREW__ = 0;
        invoke_viii(460,($7|0),($8|0),($9|0));
        $38 = __THREW__; __THREW__ = 0;
        $39 = $38&1;
        if ($39) {
         $66 = ___cxa_find_matching_catch()|0;
         $67 = tempRet0;
         $3 = $66;
         $4 = $67;
        } else {
         $40 = $0;
         __THREW__ = 0;
         $41 = (invoke_iii(457,($40|0),2)|0);
         $42 = __THREW__; __THREW__ = 0;
         $43 = $42&1;
         if ($43) {
          label = 20;
         } else {
          $44 = $1;
          __THREW__ = 0;
          $45 = (invoke_iii(458,($44|0),2)|0);
          $46 = __THREW__; __THREW__ = 0;
          $47 = $46&1;
          if ($47) {
           label = 20;
          } else {
           $48 = +HEAPF32[$45>>2];
           __THREW__ = 0;
           invoke_viid(459,($10|0),($41|0),(+$48));
           $49 = __THREW__; __THREW__ = 0;
           $50 = $49&1;
           if ($50) {
            label = 20;
           } else {
            __THREW__ = 0;
            invoke_viii(460,($6|0),($7|0),($10|0));
            $51 = __THREW__; __THREW__ = 0;
            $52 = $51&1;
            if ($52) {
             $70 = ___cxa_find_matching_catch()|0;
             $71 = tempRet0;
             $3 = $70;
             $4 = $71;
            } else {
             $53 = $0;
             __THREW__ = 0;
             $54 = (invoke_iii(457,($53|0),3)|0);
             $55 = __THREW__; __THREW__ = 0;
             $56 = $55&1;
             do {
              if ($56) {
               label = 22;
              } else {
               __THREW__ = 0;
               invoke_viii(460,($5|0),($6|0),($54|0));
               $57 = __THREW__; __THREW__ = 0;
               $58 = $57&1;
               if ($58) {
                label = 22;
               } else {
                __THREW__ = 0;
                (invoke_iii(461,($13|0),($5|0))|0);
                $59 = __THREW__; __THREW__ = 0;
                $60 = $59&1;
                if ($60) {
                 $74 = ___cxa_find_matching_catch()|0;
                 $75 = tempRet0;
                 $3 = $74;
                 $4 = $75;
                 __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($5);
                 break;
                }
                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($5);
                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($6);
                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($10);
                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($7);
                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($9);
                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($8);
                $$expand_i1_val2 = 1;
                HEAP8[$2>>0] = $$expand_i1_val2;
                $11 = 1;
                $$pre_trunc = HEAP8[$2>>0]|0;
                $61 = $$pre_trunc&1;
                if ($61) {
                 STACKTOP = sp;return;
                }
                __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($agg$result);
                STACKTOP = sp;return;
               }
              }
             } while(0);
             if ((label|0) == 22) {
              $72 = ___cxa_find_matching_catch()|0;
              $73 = tempRet0;
              $3 = $72;
              $4 = $73;
             }
             __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($6);
            }
            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($10);
           }
          }
         }
         if ((label|0) == 20) {
          $68 = ___cxa_find_matching_catch()|0;
          $69 = tempRet0;
          $3 = $68;
          $4 = $69;
         }
         __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($7);
        }
        __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($9);
       }
      }
     }
     if ((label|0) == 18) {
      $64 = ___cxa_find_matching_catch()|0;
      $65 = tempRet0;
      $3 = $64;
      $4 = $65;
     }
     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($8);
     __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($agg$result);
     $76 = $3;
     $77 = $4;
     ___resumeException($76|0);
     // unreachable;
    }
   }
  }
 }
 $62 = ___cxa_find_matching_catch()|0;
 $63 = tempRet0;
 $3 = $62;
 $4 = $63;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($agg$result);
 $76 = $3;
 $77 = $4;
 ___resumeException($76|0);
 // unreachable;
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 48|0;
 $4 = sp + 32|0;
 $5 = sp + 16|0;
 $6 = sp;
 $0 = $this;
 $7 = $0;
 $8 = ((($7)) + 64|0);
 $9 = $7;
 while(1) {
  __THREW__ = 0;
  invoke_vi(462,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 13;
   break;
  }
  $12 = ((($9)) + 16|0);
  $13 = ($12|0)==($8|0);
  if ($13) {
   break;
  } else {
   $9 = $12;
  }
 }
 if ((label|0) == 13) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $1 = $33;
  $2 = $34;
  $35 = ($7|0)==($9|0);
  if ($35) {
   $53 = $1;
   $54 = $2;
   ___resumeException($53|0);
   // unreachable;
  } else {
   $37 = $9;
  }
  while(1) {
   $36 = ((($37)) + -16|0);
   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($36);
   $38 = ($36|0)==($7|0);
   if ($38) {
    break;
   } else {
    $37 = $36;
   }
  }
  $53 = $1;
  $54 = $2;
  ___resumeException($53|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viiiii(463,($3|0),1,0,0,0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 do {
  if ($15) {
   label = 15;
  } else {
   __THREW__ = 0;
   (invoke_iii(461,($7|0),($3|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $41 = ___cxa_find_matching_catch()|0;
    $42 = tempRet0;
    $1 = $41;
    $2 = $42;
    __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($3);
    break;
   }
   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($3);
   $18 = ((($7)) + 16|0);
   __THREW__ = 0;
   invoke_viiiii(463,($4|0),0,1,0,0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 15;
   } else {
    __THREW__ = 0;
    (invoke_iii(461,($18|0),($4|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     $43 = ___cxa_find_matching_catch()|0;
     $44 = tempRet0;
     $1 = $43;
     $2 = $44;
     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($4);
     break;
    }
    __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($4);
    $23 = ((($7)) + 32|0);
    __THREW__ = 0;
    invoke_viiiii(463,($5|0),0,0,1,0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if ($25) {
     label = 15;
    } else {
     __THREW__ = 0;
     (invoke_iii(461,($23|0),($5|0))|0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      $45 = ___cxa_find_matching_catch()|0;
      $46 = tempRet0;
      $1 = $45;
      $2 = $46;
      __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($5);
      break;
     }
     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($5);
     $28 = ((($7)) + 48|0);
     __THREW__ = 0;
     invoke_viiiii(463,($6|0),0,0,0,1);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      label = 15;
     } else {
      __THREW__ = 0;
      (invoke_iii(461,($28|0),($6|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $47 = ___cxa_find_matching_catch()|0;
       $48 = tempRet0;
       $1 = $47;
       $2 = $48;
       __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($6);
       break;
      } else {
       __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($6);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $39 = ___cxa_find_matching_catch()|0;
  $40 = tempRet0;
  $1 = $39;
  $2 = $40;
 }
 $49 = ((($7)) + 64|0);
 $51 = $49;
 while(1) {
  $50 = ((($51)) + -16|0);
  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($50);
  $52 = ($50|0)==($7|0);
  if ($52) {
   break;
  } else {
   $51 = $50;
  }
 }
 $53 = $1;
 $54 = $2;
 ___resumeException($53|0);
 // unreachable;
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 $4 = $2;
 while(1) {
  $3 = ((($4)) + -16|0);
  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($3);
  $5 = ($3|0)==($1|0);
  if ($5) {
   break;
  } else {
   $4 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($agg$result,$m1,$m2) {
 $agg$result = $agg$result|0;
 $m1 = $m1|0;
 $m2 = $m2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $SrcA0 = 0, $SrcA1 = 0, $SrcA2 = 0, $SrcA3 = 0, $SrcB0 = 0, $SrcB1 = 0, $SrcB2 = 0, $SrcB3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $SrcA0 = sp + 576|0;
 $SrcA1 = sp + 560|0;
 $SrcA2 = sp + 536|0;
 $SrcA3 = sp + 520|0;
 $SrcB0 = sp + 504|0;
 $SrcB1 = sp + 488|0;
 $SrcB2 = sp + 472|0;
 $SrcB3 = sp + 456|0;
 $4 = sp + 600|0;
 $5 = sp + 440|0;
 $6 = sp + 424|0;
 $7 = sp + 408|0;
 $8 = sp + 392|0;
 $9 = sp + 376|0;
 $10 = sp + 360|0;
 $11 = sp + 344|0;
 $12 = sp + 328|0;
 $13 = sp + 312|0;
 $14 = sp + 296|0;
 $15 = sp + 280|0;
 $16 = sp + 264|0;
 $17 = sp + 248|0;
 $18 = sp + 232|0;
 $19 = sp + 216|0;
 $20 = sp + 200|0;
 $21 = sp + 184|0;
 $22 = sp + 168|0;
 $23 = sp + 152|0;
 $24 = sp + 136|0;
 $25 = sp + 120|0;
 $26 = sp + 104|0;
 $27 = sp + 88|0;
 $28 = sp + 72|0;
 $29 = sp + 56|0;
 $30 = sp + 40|0;
 $31 = sp + 24|0;
 $32 = sp + 8|0;
 $0 = $m1;
 $1 = $m2;
 $34 = $0;
 $35 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($34,0)|0);
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2ERKS2_($SrcA0,$35);
 $36 = $0;
 __THREW__ = 0;
 $37 = (invoke_iii(457,($36|0),1)|0);
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if (!($39)) {
  __THREW__ = 0;
  invoke_vii(464,($SrcA1|0),($37|0));
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if (!($41)) {
   $42 = $0;
   __THREW__ = 0;
   $43 = (invoke_iii(457,($42|0),2)|0);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    label = 70;
   } else {
    __THREW__ = 0;
    invoke_vii(464,($SrcA2|0),($43|0));
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     label = 70;
    } else {
     $48 = $0;
     __THREW__ = 0;
     $49 = (invoke_iii(457,($48|0),3)|0);
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      label = 71;
     } else {
      __THREW__ = 0;
      invoke_vii(464,($SrcA3|0),($49|0));
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if ($53) {
       label = 71;
      } else {
       $54 = $1;
       __THREW__ = 0;
       $55 = (invoke_iii(457,($54|0),0)|0);
       $56 = __THREW__; __THREW__ = 0;
       $57 = $56&1;
       if ($57) {
        label = 72;
       } else {
        __THREW__ = 0;
        invoke_vii(464,($SrcB0|0),($55|0));
        $58 = __THREW__; __THREW__ = 0;
        $59 = $58&1;
        if ($59) {
         label = 72;
        } else {
         $60 = $1;
         __THREW__ = 0;
         $61 = (invoke_iii(457,($60|0),1)|0);
         $62 = __THREW__; __THREW__ = 0;
         $63 = $62&1;
         if ($63) {
          label = 73;
         } else {
          __THREW__ = 0;
          invoke_vii(464,($SrcB1|0),($61|0));
          $64 = __THREW__; __THREW__ = 0;
          $65 = $64&1;
          if ($65) {
           label = 73;
          } else {
           $66 = $1;
           __THREW__ = 0;
           $67 = (invoke_iii(457,($66|0),2)|0);
           $68 = __THREW__; __THREW__ = 0;
           $69 = $68&1;
           if ($69) {
            label = 74;
           } else {
            __THREW__ = 0;
            invoke_vii(464,($SrcB2|0),($67|0));
            $70 = __THREW__; __THREW__ = 0;
            $71 = $70&1;
            if ($71) {
             label = 74;
            } else {
             $72 = $1;
             __THREW__ = 0;
             $73 = (invoke_iii(457,($72|0),3)|0);
             $74 = __THREW__; __THREW__ = 0;
             $75 = $74&1;
             do {
              if ($75) {
               label = 75;
              } else {
               __THREW__ = 0;
               invoke_vii(464,($SrcB3|0),($73|0));
               $76 = __THREW__; __THREW__ = 0;
               $77 = $76&1;
               if ($77) {
                label = 75;
                break;
               }
               $$expand_i1_val = 0;
               HEAP8[$4>>0] = $$expand_i1_val;
               __THREW__ = 0;
               invoke_vii(465,($agg$result|0),0);
               $78 = __THREW__; __THREW__ = 0;
               $79 = $78&1;
               if ($79) {
                $235 = ___cxa_find_matching_catch()|0;
                $236 = tempRet0;
                $2 = $235;
                $3 = $236;
               } else {
                __THREW__ = 0;
                $80 = (invoke_iii(456,($agg$result|0),0)|0);
                $81 = __THREW__; __THREW__ = 0;
                $82 = $81&1;
                L25: do {
                 if ($82) {
                  label = 77;
                 } else {
                  __THREW__ = 0;
                  $83 = (invoke_iii(466,($SrcB0|0),0)|0);
                  $84 = __THREW__; __THREW__ = 0;
                  $85 = $84&1;
                  if ($85) {
                   label = 77;
                   break;
                  }
                  $86 = +HEAPF32[$83>>2];
                  __THREW__ = 0;
                  invoke_viid(459,($8|0),($SrcA0|0),(+$86));
                  $87 = __THREW__; __THREW__ = 0;
                  $88 = $87&1;
                  if ($88) {
                   label = 77;
                   break;
                  }
                  __THREW__ = 0;
                  $89 = (invoke_iii(466,($SrcB0|0),1)|0);
                  $90 = __THREW__; __THREW__ = 0;
                  $91 = $90&1;
                  do {
                   if ($91) {
                    label = 78;
                   } else {
                    $92 = +HEAPF32[$89>>2];
                    __THREW__ = 0;
                    invoke_viid(459,($9|0),($SrcA1|0),(+$92));
                    $93 = __THREW__; __THREW__ = 0;
                    $94 = $93&1;
                    if ($94) {
                     label = 78;
                     break;
                    }
                    __THREW__ = 0;
                    invoke_viii(460,($7|0),($8|0),($9|0));
                    $95 = __THREW__; __THREW__ = 0;
                    $96 = $95&1;
                    if ($96) {
                     $241 = ___cxa_find_matching_catch()|0;
                     $242 = tempRet0;
                     $2 = $241;
                     $3 = $242;
                    } else {
                     __THREW__ = 0;
                     $97 = (invoke_iii(466,($SrcB0|0),2)|0);
                     $98 = __THREW__; __THREW__ = 0;
                     $99 = $98&1;
                     do {
                      if ($99) {
                       label = 80;
                      } else {
                       $100 = +HEAPF32[$97>>2];
                       __THREW__ = 0;
                       invoke_viid(459,($10|0),($SrcA2|0),(+$100));
                       $101 = __THREW__; __THREW__ = 0;
                       $102 = $101&1;
                       if ($102) {
                        label = 80;
                        break;
                       }
                       __THREW__ = 0;
                       invoke_viii(460,($6|0),($7|0),($10|0));
                       $103 = __THREW__; __THREW__ = 0;
                       $104 = $103&1;
                       if ($104) {
                        $245 = ___cxa_find_matching_catch()|0;
                        $246 = tempRet0;
                        $2 = $245;
                        $3 = $246;
                       } else {
                        __THREW__ = 0;
                        $105 = (invoke_iii(466,($SrcB0|0),3)|0);
                        $106 = __THREW__; __THREW__ = 0;
                        $107 = $106&1;
                        do {
                         if ($107) {
                          label = 82;
                         } else {
                          $108 = +HEAPF32[$105>>2];
                          __THREW__ = 0;
                          invoke_viid(459,($11|0),($SrcA3|0),(+$108));
                          $109 = __THREW__; __THREW__ = 0;
                          $110 = $109&1;
                          if ($110) {
                           label = 82;
                           break;
                          }
                          __THREW__ = 0;
                          invoke_viii(460,($5|0),($6|0),($11|0));
                          $111 = __THREW__; __THREW__ = 0;
                          $112 = $111&1;
                          do {
                           if ($112) {
                            $249 = ___cxa_find_matching_catch()|0;
                            $250 = tempRet0;
                            $2 = $249;
                            $3 = $250;
                           } else {
                            __THREW__ = 0;
                            (invoke_iii(461,($80|0),($5|0))|0);
                            $113 = __THREW__; __THREW__ = 0;
                            $114 = $113&1;
                            if ($114) {
                             $251 = ___cxa_find_matching_catch()|0;
                             $252 = tempRet0;
                             $2 = $251;
                             $3 = $252;
                             __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($5);
                             break;
                            }
                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($5);
                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($11);
                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($6);
                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($10);
                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($7);
                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($9);
                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($8);
                            __THREW__ = 0;
                            $115 = (invoke_iii(456,($agg$result|0),1)|0);
                            $116 = __THREW__; __THREW__ = 0;
                            $117 = $116&1;
                            if ($117) {
                             label = 77;
                             break L25;
                            }
                            __THREW__ = 0;
                            $118 = (invoke_iii(466,($SrcB1|0),0)|0);
                            $119 = __THREW__; __THREW__ = 0;
                            $120 = $119&1;
                            if ($120) {
                             label = 77;
                             break L25;
                            }
                            $121 = +HEAPF32[$118>>2];
                            __THREW__ = 0;
                            invoke_viid(459,($15|0),($SrcA0|0),(+$121));
                            $122 = __THREW__; __THREW__ = 0;
                            $123 = $122&1;
                            if ($123) {
                             label = 77;
                             break L25;
                            }
                            __THREW__ = 0;
                            $124 = (invoke_iii(466,($SrcB1|0),1)|0);
                            $125 = __THREW__; __THREW__ = 0;
                            $126 = $125&1;
                            do {
                             if ($126) {
                              label = 91;
                             } else {
                              $127 = +HEAPF32[$124>>2];
                              __THREW__ = 0;
                              invoke_viid(459,($16|0),($SrcA1|0),(+$127));
                              $128 = __THREW__; __THREW__ = 0;
                              $129 = $128&1;
                              if ($129) {
                               label = 91;
                               break;
                              }
                              __THREW__ = 0;
                              invoke_viii(460,($14|0),($15|0),($16|0));
                              $130 = __THREW__; __THREW__ = 0;
                              $131 = $130&1;
                              if ($131) {
                               $255 = ___cxa_find_matching_catch()|0;
                               $256 = tempRet0;
                               $2 = $255;
                               $3 = $256;
                              } else {
                               __THREW__ = 0;
                               $132 = (invoke_iii(466,($SrcB1|0),2)|0);
                               $133 = __THREW__; __THREW__ = 0;
                               $134 = $133&1;
                               do {
                                if ($134) {
                                 label = 93;
                                } else {
                                 $135 = +HEAPF32[$132>>2];
                                 __THREW__ = 0;
                                 invoke_viid(459,($17|0),($SrcA2|0),(+$135));
                                 $136 = __THREW__; __THREW__ = 0;
                                 $137 = $136&1;
                                 if ($137) {
                                  label = 93;
                                  break;
                                 }
                                 __THREW__ = 0;
                                 invoke_viii(460,($13|0),($14|0),($17|0));
                                 $138 = __THREW__; __THREW__ = 0;
                                 $139 = $138&1;
                                 if ($139) {
                                  $259 = ___cxa_find_matching_catch()|0;
                                  $260 = tempRet0;
                                  $2 = $259;
                                  $3 = $260;
                                 } else {
                                  __THREW__ = 0;
                                  $140 = (invoke_iii(466,($SrcB1|0),3)|0);
                                  $141 = __THREW__; __THREW__ = 0;
                                  $142 = $141&1;
                                  do {
                                   if ($142) {
                                    label = 95;
                                   } else {
                                    $143 = +HEAPF32[$140>>2];
                                    __THREW__ = 0;
                                    invoke_viid(459,($18|0),($SrcA3|0),(+$143));
                                    $144 = __THREW__; __THREW__ = 0;
                                    $145 = $144&1;
                                    if ($145) {
                                     label = 95;
                                     break;
                                    }
                                    __THREW__ = 0;
                                    invoke_viii(460,($12|0),($13|0),($18|0));
                                    $146 = __THREW__; __THREW__ = 0;
                                    $147 = $146&1;
                                    do {
                                     if ($147) {
                                      $263 = ___cxa_find_matching_catch()|0;
                                      $264 = tempRet0;
                                      $2 = $263;
                                      $3 = $264;
                                     } else {
                                      __THREW__ = 0;
                                      (invoke_iii(461,($115|0),($12|0))|0);
                                      $148 = __THREW__; __THREW__ = 0;
                                      $149 = $148&1;
                                      if ($149) {
                                       $265 = ___cxa_find_matching_catch()|0;
                                       $266 = tempRet0;
                                       $2 = $265;
                                       $3 = $266;
                                       __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($12);
                                       break;
                                      }
                                      __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($12);
                                      __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($18);
                                      __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($13);
                                      __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($17);
                                      __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($14);
                                      __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($16);
                                      __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($15);
                                      __THREW__ = 0;
                                      $150 = (invoke_iii(456,($agg$result|0),2)|0);
                                      $151 = __THREW__; __THREW__ = 0;
                                      $152 = $151&1;
                                      if ($152) {
                                       label = 77;
                                       break L25;
                                      }
                                      __THREW__ = 0;
                                      $153 = (invoke_iii(466,($SrcB2|0),0)|0);
                                      $154 = __THREW__; __THREW__ = 0;
                                      $155 = $154&1;
                                      if ($155) {
                                       label = 77;
                                       break L25;
                                      }
                                      $156 = +HEAPF32[$153>>2];
                                      __THREW__ = 0;
                                      invoke_viid(459,($22|0),($SrcA0|0),(+$156));
                                      $157 = __THREW__; __THREW__ = 0;
                                      $158 = $157&1;
                                      if ($158) {
                                       label = 77;
                                       break L25;
                                      }
                                      __THREW__ = 0;
                                      $159 = (invoke_iii(466,($SrcB2|0),1)|0);
                                      $160 = __THREW__; __THREW__ = 0;
                                      $161 = $160&1;
                                      do {
                                       if ($161) {
                                        label = 104;
                                       } else {
                                        $162 = +HEAPF32[$159>>2];
                                        __THREW__ = 0;
                                        invoke_viid(459,($23|0),($SrcA1|0),(+$162));
                                        $163 = __THREW__; __THREW__ = 0;
                                        $164 = $163&1;
                                        if ($164) {
                                         label = 104;
                                         break;
                                        }
                                        __THREW__ = 0;
                                        invoke_viii(460,($21|0),($22|0),($23|0));
                                        $165 = __THREW__; __THREW__ = 0;
                                        $166 = $165&1;
                                        if ($166) {
                                         $269 = ___cxa_find_matching_catch()|0;
                                         $270 = tempRet0;
                                         $2 = $269;
                                         $3 = $270;
                                        } else {
                                         __THREW__ = 0;
                                         $167 = (invoke_iii(466,($SrcB2|0),2)|0);
                                         $168 = __THREW__; __THREW__ = 0;
                                         $169 = $168&1;
                                         do {
                                          if ($169) {
                                           label = 106;
                                          } else {
                                           $170 = +HEAPF32[$167>>2];
                                           __THREW__ = 0;
                                           invoke_viid(459,($24|0),($SrcA2|0),(+$170));
                                           $171 = __THREW__; __THREW__ = 0;
                                           $172 = $171&1;
                                           if ($172) {
                                            label = 106;
                                            break;
                                           }
                                           __THREW__ = 0;
                                           invoke_viii(460,($20|0),($21|0),($24|0));
                                           $173 = __THREW__; __THREW__ = 0;
                                           $174 = $173&1;
                                           if ($174) {
                                            $273 = ___cxa_find_matching_catch()|0;
                                            $274 = tempRet0;
                                            $2 = $273;
                                            $3 = $274;
                                           } else {
                                            __THREW__ = 0;
                                            $175 = (invoke_iii(466,($SrcB2|0),3)|0);
                                            $176 = __THREW__; __THREW__ = 0;
                                            $177 = $176&1;
                                            do {
                                             if ($177) {
                                              label = 108;
                                             } else {
                                              $178 = +HEAPF32[$175>>2];
                                              __THREW__ = 0;
                                              invoke_viid(459,($25|0),($SrcA3|0),(+$178));
                                              $179 = __THREW__; __THREW__ = 0;
                                              $180 = $179&1;
                                              if ($180) {
                                               label = 108;
                                               break;
                                              }
                                              __THREW__ = 0;
                                              invoke_viii(460,($19|0),($20|0),($25|0));
                                              $181 = __THREW__; __THREW__ = 0;
                                              $182 = $181&1;
                                              do {
                                               if ($182) {
                                                $277 = ___cxa_find_matching_catch()|0;
                                                $278 = tempRet0;
                                                $2 = $277;
                                                $3 = $278;
                                               } else {
                                                __THREW__ = 0;
                                                (invoke_iii(461,($150|0),($19|0))|0);
                                                $183 = __THREW__; __THREW__ = 0;
                                                $184 = $183&1;
                                                if ($184) {
                                                 $279 = ___cxa_find_matching_catch()|0;
                                                 $280 = tempRet0;
                                                 $2 = $279;
                                                 $3 = $280;
                                                 __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($19);
                                                 break;
                                                }
                                                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($19);
                                                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($25);
                                                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($20);
                                                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($24);
                                                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($21);
                                                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($23);
                                                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($22);
                                                __THREW__ = 0;
                                                $185 = (invoke_iii(456,($agg$result|0),3)|0);
                                                $186 = __THREW__; __THREW__ = 0;
                                                $187 = $186&1;
                                                if ($187) {
                                                 label = 77;
                                                 break L25;
                                                }
                                                __THREW__ = 0;
                                                $188 = (invoke_iii(466,($SrcB3|0),0)|0);
                                                $189 = __THREW__; __THREW__ = 0;
                                                $190 = $189&1;
                                                if ($190) {
                                                 label = 77;
                                                 break L25;
                                                }
                                                $191 = +HEAPF32[$188>>2];
                                                __THREW__ = 0;
                                                invoke_viid(459,($29|0),($SrcA0|0),(+$191));
                                                $192 = __THREW__; __THREW__ = 0;
                                                $193 = $192&1;
                                                if ($193) {
                                                 label = 77;
                                                 break L25;
                                                }
                                                __THREW__ = 0;
                                                $194 = (invoke_iii(466,($SrcB3|0),1)|0);
                                                $195 = __THREW__; __THREW__ = 0;
                                                $196 = $195&1;
                                                do {
                                                 if ($196) {
                                                  label = 117;
                                                 } else {
                                                  $197 = +HEAPF32[$194>>2];
                                                  __THREW__ = 0;
                                                  invoke_viid(459,($30|0),($SrcA1|0),(+$197));
                                                  $198 = __THREW__; __THREW__ = 0;
                                                  $199 = $198&1;
                                                  if ($199) {
                                                   label = 117;
                                                   break;
                                                  }
                                                  __THREW__ = 0;
                                                  invoke_viii(460,($28|0),($29|0),($30|0));
                                                  $200 = __THREW__; __THREW__ = 0;
                                                  $201 = $200&1;
                                                  if ($201) {
                                                   $283 = ___cxa_find_matching_catch()|0;
                                                   $284 = tempRet0;
                                                   $2 = $283;
                                                   $3 = $284;
                                                  } else {
                                                   __THREW__ = 0;
                                                   $202 = (invoke_iii(466,($SrcB3|0),2)|0);
                                                   $203 = __THREW__; __THREW__ = 0;
                                                   $204 = $203&1;
                                                   do {
                                                    if ($204) {
                                                     label = 119;
                                                    } else {
                                                     $205 = +HEAPF32[$202>>2];
                                                     __THREW__ = 0;
                                                     invoke_viid(459,($31|0),($SrcA2|0),(+$205));
                                                     $206 = __THREW__; __THREW__ = 0;
                                                     $207 = $206&1;
                                                     if ($207) {
                                                      label = 119;
                                                      break;
                                                     }
                                                     __THREW__ = 0;
                                                     invoke_viii(460,($27|0),($28|0),($31|0));
                                                     $208 = __THREW__; __THREW__ = 0;
                                                     $209 = $208&1;
                                                     if ($209) {
                                                      $287 = ___cxa_find_matching_catch()|0;
                                                      $288 = tempRet0;
                                                      $2 = $287;
                                                      $3 = $288;
                                                     } else {
                                                      __THREW__ = 0;
                                                      $210 = (invoke_iii(466,($SrcB3|0),3)|0);
                                                      $211 = __THREW__; __THREW__ = 0;
                                                      $212 = $211&1;
                                                      do {
                                                       if ($212) {
                                                        label = 121;
                                                       } else {
                                                        $213 = +HEAPF32[$210>>2];
                                                        __THREW__ = 0;
                                                        invoke_viid(459,($32|0),($SrcA3|0),(+$213));
                                                        $214 = __THREW__; __THREW__ = 0;
                                                        $215 = $214&1;
                                                        if ($215) {
                                                         label = 121;
                                                         break;
                                                        }
                                                        __THREW__ = 0;
                                                        invoke_viii(460,($26|0),($27|0),($32|0));
                                                        $216 = __THREW__; __THREW__ = 0;
                                                        $217 = $216&1;
                                                        do {
                                                         if ($217) {
                                                          $291 = ___cxa_find_matching_catch()|0;
                                                          $292 = tempRet0;
                                                          $2 = $291;
                                                          $3 = $292;
                                                         } else {
                                                          __THREW__ = 0;
                                                          (invoke_iii(461,($185|0),($26|0))|0);
                                                          $218 = __THREW__; __THREW__ = 0;
                                                          $219 = $218&1;
                                                          if ($219) {
                                                           $293 = ___cxa_find_matching_catch()|0;
                                                           $294 = tempRet0;
                                                           $2 = $293;
                                                           $3 = $294;
                                                           __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($26);
                                                           break;
                                                          }
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($26);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($32);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($27);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($31);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($28);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($30);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($29);
                                                          $$expand_i1_val2 = 1;
                                                          HEAP8[$4>>0] = $$expand_i1_val2;
                                                          $33 = 1;
                                                          $$pre_trunc = HEAP8[$4>>0]|0;
                                                          $220 = $$pre_trunc&1;
                                                          if ($220) {
                                                           __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcB3);
                                                           __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcB2);
                                                           __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcB1);
                                                           __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcB0);
                                                           __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA3);
                                                           __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA2);
                                                           __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA1);
                                                           __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA0);
                                                           STACKTOP = sp;return;
                                                          }
                                                          __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($agg$result);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcB3);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcB2);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcB1);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcB0);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA3);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA2);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA1);
                                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA0);
                                                          STACKTOP = sp;return;
                                                         }
                                                        } while(0);
                                                        __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($32);
                                                       }
                                                      } while(0);
                                                      if ((label|0) == 121) {
                                                       $289 = ___cxa_find_matching_catch()|0;
                                                       $290 = tempRet0;
                                                       $2 = $289;
                                                       $3 = $290;
                                                      }
                                                      __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($27);
                                                     }
                                                     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($31);
                                                    }
                                                   } while(0);
                                                   if ((label|0) == 119) {
                                                    $285 = ___cxa_find_matching_catch()|0;
                                                    $286 = tempRet0;
                                                    $2 = $285;
                                                    $3 = $286;
                                                   }
                                                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($28);
                                                  }
                                                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($30);
                                                 }
                                                } while(0);
                                                if ((label|0) == 117) {
                                                 $281 = ___cxa_find_matching_catch()|0;
                                                 $282 = tempRet0;
                                                 $2 = $281;
                                                 $3 = $282;
                                                }
                                                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($29);
                                                break L25;
                                               }
                                              } while(0);
                                              __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($25);
                                             }
                                            } while(0);
                                            if ((label|0) == 108) {
                                             $275 = ___cxa_find_matching_catch()|0;
                                             $276 = tempRet0;
                                             $2 = $275;
                                             $3 = $276;
                                            }
                                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($20);
                                           }
                                           __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($24);
                                          }
                                         } while(0);
                                         if ((label|0) == 106) {
                                          $271 = ___cxa_find_matching_catch()|0;
                                          $272 = tempRet0;
                                          $2 = $271;
                                          $3 = $272;
                                         }
                                         __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($21);
                                        }
                                        __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($23);
                                       }
                                      } while(0);
                                      if ((label|0) == 104) {
                                       $267 = ___cxa_find_matching_catch()|0;
                                       $268 = tempRet0;
                                       $2 = $267;
                                       $3 = $268;
                                      }
                                      __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($22);
                                      break L25;
                                     }
                                    } while(0);
                                    __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($18);
                                   }
                                  } while(0);
                                  if ((label|0) == 95) {
                                   $261 = ___cxa_find_matching_catch()|0;
                                   $262 = tempRet0;
                                   $2 = $261;
                                   $3 = $262;
                                  }
                                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($13);
                                 }
                                 __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($17);
                                }
                               } while(0);
                               if ((label|0) == 93) {
                                $257 = ___cxa_find_matching_catch()|0;
                                $258 = tempRet0;
                                $2 = $257;
                                $3 = $258;
                               }
                               __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($14);
                              }
                              __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($16);
                             }
                            } while(0);
                            if ((label|0) == 91) {
                             $253 = ___cxa_find_matching_catch()|0;
                             $254 = tempRet0;
                             $2 = $253;
                             $3 = $254;
                            }
                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($15);
                            break L25;
                           }
                          } while(0);
                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($11);
                         }
                        } while(0);
                        if ((label|0) == 82) {
                         $247 = ___cxa_find_matching_catch()|0;
                         $248 = tempRet0;
                         $2 = $247;
                         $3 = $248;
                        }
                        __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($6);
                       }
                       __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($10);
                      }
                     } while(0);
                     if ((label|0) == 80) {
                      $243 = ___cxa_find_matching_catch()|0;
                      $244 = tempRet0;
                      $2 = $243;
                      $3 = $244;
                     }
                     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($7);
                    }
                    __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($9);
                   }
                  } while(0);
                  if ((label|0) == 78) {
                   $239 = ___cxa_find_matching_catch()|0;
                   $240 = tempRet0;
                   $2 = $239;
                   $3 = $240;
                  }
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($8);
                 }
                } while(0);
                if ((label|0) == 77) {
                 $237 = ___cxa_find_matching_catch()|0;
                 $238 = tempRet0;
                 $2 = $237;
                 $3 = $238;
                }
                __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($agg$result);
               }
               __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcB3);
              }
             } while(0);
             if ((label|0) == 75) {
              $233 = ___cxa_find_matching_catch()|0;
              $234 = tempRet0;
              $2 = $233;
              $3 = $234;
             }
             __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcB2);
            }
           }
           if ((label|0) == 74) {
            $231 = ___cxa_find_matching_catch()|0;
            $232 = tempRet0;
            $2 = $231;
            $3 = $232;
           }
           __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcB1);
          }
         }
         if ((label|0) == 73) {
          $229 = ___cxa_find_matching_catch()|0;
          $230 = tempRet0;
          $2 = $229;
          $3 = $230;
         }
         __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcB0);
        }
       }
       if ((label|0) == 72) {
        $227 = ___cxa_find_matching_catch()|0;
        $228 = tempRet0;
        $2 = $227;
        $3 = $228;
       }
       __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA3);
      }
     }
     if ((label|0) == 71) {
      $225 = ___cxa_find_matching_catch()|0;
      $226 = tempRet0;
      $2 = $225;
      $3 = $226;
     }
     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA2);
    }
   }
   if ((label|0) == 70) {
    $223 = ___cxa_find_matching_catch()|0;
    $224 = tempRet0;
    $2 = $223;
    $3 = $224;
   }
   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA1);
   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA0);
   $295 = $2;
   $296 = $3;
   ___resumeException($295|0);
   // unreachable;
  }
 }
 $221 = ___cxa_find_matching_catch()|0;
 $222 = tempRet0;
 $2 = $221;
 $3 = $222;
 __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($SrcA0);
 $295 = $2;
 $296 = $3;
 ___resumeException($295|0);
 // unreachable;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEaSERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($2)) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $1;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = ((($2)) + 8|0);
 HEAPF32[$12>>2] = $11;
 $13 = $1;
 $14 = ((($13)) + 12|0);
 $15 = +HEAPF32[$14>>2];
 $16 = ((($2)) + 12|0);
 HEAPF32[$16>>2] = $15;
 STACKTOP = sp;return ($2|0);
}
function __ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EE6lengthEv($2)|0);
 $5 = ($3|0)<($4|0);
 if ($5) {
  $6 = $1;
  $7 = (($2) + ($6<<4)|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((16804|0),(16823|0),361,(16872|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK3glm7tmat4x4IfLNS_9precisionE0EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKS2_($this,$m) {
 $this = $this|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m;
 $4 = $0;
 $5 = ((($4)) + 64|0);
 $6 = $4;
 while(1) {
  __THREW__ = 0;
  invoke_vi(462,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   label = 13;
   break;
  }
  $9 = ((($6)) + 16|0);
  $10 = ($9|0)==($5|0);
  if ($10) {
   break;
  } else {
   $6 = $9;
  }
 }
 if ((label|0) == 13) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $2 = $38;
  $3 = $39;
  $40 = ($4|0)==($6|0);
  if ($40) {
   $50 = $2;
   $51 = $3;
   ___resumeException($50|0);
   // unreachable;
  } else {
   $42 = $6;
  }
  while(1) {
   $41 = ((($42)) + -16|0);
   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($41);
   $43 = ($41|0)==($4|0);
   if ($43) {
    break;
   } else {
    $42 = $41;
   }
  }
  $50 = $2;
  $51 = $3;
  ___resumeException($50|0);
  // unreachable;
 }
 $11 = $1;
 __THREW__ = 0;
 $12 = (invoke_iii(457,($11|0),0)|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  __THREW__ = 0;
  (invoke_iii(461,($4|0),($12|0))|0);
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if (!($16)) {
   $17 = ((($4)) + 16|0);
   $18 = $1;
   __THREW__ = 0;
   $19 = (invoke_iii(457,($18|0),1)|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    __THREW__ = 0;
    (invoke_iii(461,($17|0),($19|0))|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if (!($23)) {
     $24 = ((($4)) + 32|0);
     $25 = $1;
     __THREW__ = 0;
     $26 = (invoke_iii(457,($25|0),2)|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      __THREW__ = 0;
      (invoke_iii(461,($24|0),($26|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       $31 = ((($4)) + 48|0);
       $32 = $1;
       __THREW__ = 0;
       $33 = (invoke_iii(457,($32|0),3)|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if (!($35)) {
        __THREW__ = 0;
        (invoke_iii(461,($31|0),($33|0))|0);
        $36 = __THREW__; __THREW__ = 0;
        $37 = $36&1;
        if (!($37)) {
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 }
 $44 = ___cxa_find_matching_catch()|0;
 $45 = tempRet0;
 $2 = $44;
 $3 = $45;
 $46 = ((($4)) + 64|0);
 $48 = $46;
 while(1) {
  $47 = ((($48)) + -16|0);
  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($47);
  $49 = ($47|0)==($4|0);
  if ($49) {
   break;
  } else {
   $48 = $47;
  }
 }
 $50 = $2;
 $51 = $3;
 ___resumeException($50|0);
 // unreachable;
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EE6lengthEv($2)|0);
 $5 = ($3|0)<($4|0);
 if ($5) {
  $6 = $1;
  $7 = (($2) + ($6<<4)|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((16804|0),(16823|0),354,(16872|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $v2;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 + $12;
 $14 = $0;
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $16 + $19;
 $21 = $0;
 $22 = ((($21)) + 12|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $1;
 $25 = ((($24)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $23 + $26;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($agg$result,$6,$13,$20,$27);
 STACKTOP = sp;return;
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_($agg$result,$v,$scalar) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $scalar = +$scalar;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $scalar;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = $3 * $4;
 $6 = $0;
 $7 = ((($6)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = $8 * $9;
 $11 = $0;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = $13 * $14;
 $16 = $0;
 $17 = ((($16)) + 12|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = $18 * $19;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($agg$result,$5,$10,$15,$20);
 STACKTOP = sp;return;
}
function __ZNK3glm5tvec3IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = (__ZN3glm6detail15component_countINS_5tvec3IfLNS_9precisionE0EEEEEiRKT_($2)|0);
  $7 = ($5|0)<($6|0);
  if ($7) {
   $8 = $1;
   $9 = (($2) + ($8<<2)|0);
   STACKTOP = sp;return ($9|0);
  }
 }
 ___assert_fail((16883|0),(16968|0),183,(16872|0));
 // unreachable;
 return (0)|0;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($1)) + 4|0);
 HEAPF32[$2>>2] = 0.0;
 $3 = ((($1)) + 8|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = ((($1)) + 12|0);
 HEAPF32[$4>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = +$a;
 $b = +$b;
 $c = +$c;
 $d = +$d;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 HEAPF32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = $2;
 HEAPF32[$7>>2] = $8;
 $9 = ((($5)) + 8|0);
 $10 = $3;
 HEAPF32[$9>>2] = $10;
 $11 = ((($5)) + 12|0);
 $12 = $4;
 HEAPF32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN3glm6detail15component_countINS_5tvec3IfLNS_9precisionE0EEEEEiRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZNK3glm5tvec3IfLNS_9precisionE0EE6lengthEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3glm5tvec3IfLNS_9precisionE0EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiiiEET_T0_T1_T2_($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 $7 = (+($6|0));
 HEAPF32[$5>>2] = $7;
 $8 = ((($5)) + 4|0);
 $9 = $2;
 $10 = (+($9|0));
 HEAPF32[$8>>2] = $10;
 $11 = ((($5)) + 8|0);
 $12 = $3;
 $13 = (+($12|0));
 HEAPF32[$11>>2] = $13;
 $14 = ((($5)) + 12|0);
 $15 = $4;
 $16 = (+($15|0));
 HEAPF32[$14>>2] = $16;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2ERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = ((($2)) + 4|0);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$5>>2] = $8;
 $9 = ((($2)) + 8|0);
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 HEAPF32[$9>>2] = $12;
 $13 = ((($2)) + 12|0);
 $14 = $1;
 $15 = ((($14)) + 12|0);
 $16 = +HEAPF32[$15>>2];
 HEAPF32[$13>>2] = $16;
 STACKTOP = sp;return;
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ENS_4ctorE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $5 = $1;
 $6 = ((($5)) + 64|0);
 $7 = $5;
 while(1) {
  __THREW__ = 0;
  invoke_vi(462,($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   break;
  }
  $10 = ((($7)) + 16|0);
  $11 = ($10|0)==($6|0);
  if ($11) {
   label = 4;
   break;
  } else {
   $7 = $10;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $3 = $12;
 $4 = $13;
 $14 = ($5|0)==($7|0);
 if ($14) {
  $18 = $3;
  $19 = $4;
  ___resumeException($18|0);
  // unreachable;
 } else {
  $16 = $7;
 }
 while(1) {
  $15 = ((($16)) + -16|0);
  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($15);
  $17 = ($15|0)==($5|0);
  if ($17) {
   break;
  } else {
   $16 = $15;
  }
 }
 $18 = $3;
 $19 = $4;
 ___resumeException($18|0);
 // unreachable;
}
function __ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = (__ZN3glm6detail15component_countINS_5tvec4IfLNS_9precisionE0EEEEEiRKT_($2)|0);
  $7 = ($5|0)<($6|0);
  if ($7) {
   $8 = $1;
   $9 = (($2) + ($8<<2)|0);
   STACKTOP = sp;return ($9|0);
  }
 }
 ___assert_fail((16883|0),(17015|0),245,(16872|0));
 // unreachable;
 return (0)|0;
}
function __ZN3glm6detail15component_countINS_5tvec4IfLNS_9precisionE0EEEEEiRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZNK3glm5tvec4IfLNS_9precisionE0EE6lengthEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3glm5tvec4IfLNS_9precisionE0EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZN6ProtoX10Propulsion3SetEb($this,$on) {
 $this = $this|0;
 $on = $on|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $on&1;
 $1 = $2;
 $3 = $0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 $7 = $6&1;
 $8 = $1;
 $9 = $8&1;
 $10 = $9&1;
 $11 = ($7|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 $13 = $12&1;
 $14 = ((($3)) + 20|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = $1;
 $17 = $16&1;
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = ((($3)) + 40|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($3)) + 32|0);
 HEAPF64[$19>>3] = 0.0;
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIN12InputHandler11ButtonClickENS_9allocatorIS2_EEE9pop_frontEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 129|0;
 $23 = sp;
 $26 = sp + 128|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 20|0);
 $29 = $34;
 $35 = $29;
 $28 = $35;
 $36 = $28;
 $__a = $36;
 $37 = $__a;
 $13 = $32;
 $38 = $13;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($32)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42>>>0) / 1024)&-1;
 $44 = (($40) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($32)) + 16|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47>>>0) % 1024)&-1;
 $49 = (($45) + ($48<<2)|0);
 $0 = $49;
 $50 = $0;
 $6 = $37;
 $7 = $50;
 $51 = $6;
 $52 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $51;
 $4 = $52;
 $53 = $3;
 $54 = $4;
 $1 = $53;
 $2 = $54;
 $11 = $32;
 $55 = $11;
 $56 = ((($55)) + 20|0);
 $10 = $56;
 $57 = $10;
 $9 = $57;
 $58 = $9;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + -1)|0;
 HEAP32[$58>>2] = $60;
 $61 = ((($32)) + 16|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + 1)|0;
 HEAP32[$61>>2] = $63;
 $64 = ($63>>>0)>=(2048);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $65 = $__a;
 $12 = $32;
 $66 = $12;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$68>>2]|0;
 $18 = $65;
 $19 = $69;
 $20 = 1024;
 $70 = $18;
 $71 = $19;
 $72 = $20;
 $15 = $70;
 $16 = $71;
 $17 = $72;
 $73 = $16;
 $14 = $73;
 $74 = $14;
 __ZdlPv($74);
 $27 = $32;
 $75 = $27;
 $76 = ((($75)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 4|0);
 $24 = $75;
 $25 = $78;
 $79 = $24;
 $80 = $25;
 ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
 $21 = $79;
 $22 = $80;
 $81 = $21;
 $82 = $22;
 $83 = ((($81)) + 4|0);
 HEAP32[$83>>2] = $82;
 $84 = ((($32)) + 16|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) - 1024)|0;
 HEAP32[$84>>2] = $86;
 STACKTOP = sp;return;
}
function __ZN3glm6lengthIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EE($v) {
 $v = $v|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = $1;
 $3 = $1;
 $4 = (+__ZN3glm3dotIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EES7_($2,$3));
 $0 = $4;
 $5 = $0;
 $6 = (+Math_sqrt((+$5)));
 STACKTOP = sp;return (+$6);
}
function __ZNSt3__16vectorI7MissileNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI7MissileNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI7MissileNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 24)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorI7MissileNS_9allocatorIS1_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 24)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 24)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferI7MissileRNS_9allocatorIS1_EEEC2EjjS4_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 __THREW__ = 0;
 invoke_vii(467,($118|0),($120|0));
 $121 = __THREW__; __THREW__ = 0;
 $122 = $121&1;
 if ($122) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferI7MissileRNS_9allocatorIS1_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 }
 $123 = ((($__v)) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($124)) + 24|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(468,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if ($127) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferI7MissileRNS_9allocatorIS1_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferI7MissileRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN7MissileC2ERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($3,$4);
 $5 = ((($3)) + 12|0);
 $6 = $2;
 $7 = ((($6)) + 12|0);
 ;HEAP32[$5>>2]=HEAP32[$7>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI7MissileRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*24)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*24)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*24)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI7MissileNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorI7MissileNS_9allocatorIS1_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -24|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -24|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN7MissileC2ERKS_($79,$81);
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -24|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i>>2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91>>2]|0;
 $93 = $20;
 HEAP32[$93>>2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94>>2]|0;
 $96 = $21;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i2>>2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 HEAP32[$106>>2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $4;
 HEAP32[$109>>2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = ((($110)) + 8|0);
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = ((($115)) + 12|0);
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i1>>2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123>>2]|0;
 $125 = $14;
 HEAP32[$125>>2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126>>2]|0;
 $128 = $15;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 24)&-1;
 __ZNKSt3__16vectorI7MissileNS_9allocatorIS1_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI7MissileRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -24|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 24)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI7MissileNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 178956970;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorI7MissileNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 24)&-1;
 $39 = (($26) + (($38*24)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 24)&-1;
 $51 = (($42) + (($50*24)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 24)&-1;
 $67 = (($54) + (($66*24)|0)|0);
 __ZNKSt3__16vectorI7MissileNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI7MissileNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 24)&-1;
 $39 = (($26) + (($38*24)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 24)&-1;
 $55 = (($42) + (($54*24)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*24)|0)|0);
 __ZNKSt3__16vectorI7MissileNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI7MissileNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN3glm3dotIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EES7_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $0;
 $3 = $1;
 $4 = (+__ZN3glm6detail11compute_dotINS_5tvec3EfLNS_9precisionE0EE4callERKNS2_IfLS3_0EEES7_($2,$3));
 STACKTOP = sp;return (+$4);
}
function __ZN3glm6detail11compute_dotINS_5tvec3EfLNS_9precisionE0EE4callERKNS2_IfLS3_0EEES7_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = $x;
 $1 = $y;
 $2 = $0;
 $3 = $1;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($tmp,$2,$3);
 $4 = +HEAPF32[$tmp>>2];
 $5 = ((($tmp)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 + $6;
 $8 = ((($tmp)) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 + $9;
 STACKTOP = sp;return (+$10);
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $v1;
 $1 = $v2;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 HEAPF32[$2>>2] = $9;
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $12 * $15;
 HEAPF32[$3>>2] = $16;
 $17 = $0;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $19 * $22;
 HEAPF32[$4>>2] = $23;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZN6ProtoX10Propulsion6UpdateERK4Time($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = ((($2)) + 32|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $7 + $5;
 HEAPF64[$6>>3] = $8;
 $9 = ((($2)) + 32|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($2)) + 24|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $10 >= $12;
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = ((($2)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$14>>2] = $16;
 $17 = ((($2)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($2)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18>>>0)>=($20>>>0);
 if ($21) {
  $22 = ((($2)) + 40|0);
  HEAP32[$22>>2] = 0;
 }
 $23 = ((($2)) + 24|0);
 $24 = +HEAPF64[$23>>3];
 $25 = ((($2)) + 32|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $26 - $24;
 HEAPF64[$25>>3] = $27;
 STACKTOP = sp;return;
}
function __ZN6ProtoX6Turret6UpdateERK4Time($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $14 = sp;
 $17 = sp + 76|0;
 $18 = $this;
 $19 = $t;
 $20 = $18;
 $21 = ((($20)) + 8|0);
 $15 = $21;
 $16 = $20;
 $22 = $15;
 $23 = $16;
 ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
 $12 = $22;
 $13 = $23;
 $24 = $12;
 $25 = $13;
 $9 = $14;
 $10 = $24;
 $11 = $25;
 $26 = $10;
 $27 = +HEAPF32[$26>>2];
 $28 = $11;
 $29 = +HEAPF32[$28>>2];
 $30 = $27 < $29;
 $31 = $13;
 $32 = $12;
 $33 = $30 ? $31 : $32;
 $34 = +HEAPF32[$33>>2];
 HEAPF32[$20>>2] = $34;
 $35 = ((($20)) + 12|0);
 $6 = $35;
 $7 = $20;
 $36 = $6;
 $37 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $36;
 $4 = $37;
 $38 = $4;
 $39 = $3;
 $0 = $5;
 $1 = $38;
 $2 = $39;
 $40 = $1;
 $41 = +HEAPF32[$40>>2];
 $42 = $2;
 $43 = +HEAPF32[$42>>2];
 $44 = $41 < $43;
 $45 = $4;
 $46 = $3;
 $47 = $44 ? $45 : $46;
 $48 = +HEAPF32[$47>>2];
 HEAPF32[$20>>2] = $48;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEpLIfEERS2_RKNS0_IT_LS1_0EEE($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 + $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = ((($2)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 + $9;
 HEAPF32[$10>>2] = $12;
 $13 = $1;
 $14 = ((($13)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = ((($2)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 + $15;
 HEAPF32[$16>>2] = $18;
 STACKTOP = sp;return ($2|0);
}
function __ZN3glmdvIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($agg$result,$v,$s) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $v;
 $1 = $s;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 / $8;
 HEAPF32[$2>>2] = $9;
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = +HEAPF32[$13>>2];
 $15 = $12 / $14;
 HEAPF32[$3>>2] = $15;
 $16 = $0;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = +HEAPF32[$19>>2];
 $21 = $18 / $20;
 HEAPF32[$4>>2] = $21;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEaSERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($2)) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $1;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = ((($2)) + 8|0);
 HEAPF32[$12>>2] = $11;
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__16vectorI7MissileNS_9allocatorIS1_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 24)&-1;
 $35 = (($22) + (($34*24)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*24)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 24)&-1;
 $52 = (($43) + (($51*24)|0)|0);
 __ZNKSt3__16vectorI7MissileNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZN8Renderer9ParticlesC2EOS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($3,$4);
 $5 = ((($3)) + 12|0);
 $6 = $2;
 $7 = ((($6)) + 12|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 $10 = $9&1;
 HEAP8[$5>>0] = $10;
 $11 = ((($3)) + 16|0);
 $12 = $2;
 $13 = ((($12)) + 16|0);
 __ZNSt3__15arrayIN8Renderer9Particles8ParticleELj100EEC2EOS4_($11,$13);
 $14 = ((($3)) + 12|0);
 $15 = $2;
 $16 = ((($15)) + 12|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&1;
 $19 = $18&1;
 HEAP8[$14>>0] = $19;
 STACKTOP = sp;return;
}
function __ZNSt3__15arrayIN8Renderer9Particles8ParticleELj100EEC2EOS4_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $4 = $1;
 $3 = 0;
 $__i0 = 0;
 while(1) {
  $5 = $__i0;
  $6 = ($5>>>0)<(100);
  if (!($6)) {
   break;
  }
  $7 = $3;
  $8 = (($4) + (($7*44)|0)|0);
  $9 = (($7) + 1)|0;
  $3 = $9;
  $10 = $__i0;
  $11 = $2;
  $12 = (($11) + (($10*44)|0)|0);
  __ZN8Renderer9Particles8ParticleC2EOS1_($8,$12);
  $13 = $__i0;
  $14 = (($13) + 1)|0;
  $__i0 = $14;
 }
 STACKTOP = sp;return;
}
function __ZN8Renderer9Particles8ParticleC2EOS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($3,$4);
 $5 = ((($3)) + 12|0);
 $6 = $2;
 $7 = ((($6)) + 12|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($5,$7);
 $8 = ((($3)) + 24|0);
 $9 = $2;
 $10 = ((($9)) + 24|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($8,$10);
 $11 = ((($3)) + 36|0);
 $12 = $2;
 $13 = ((($12)) + 36|0);
 ;HEAP32[$11>>2]=HEAP32[$13>>2]|0;HEAP32[$11+4>>2]=HEAP32[$13+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__15arrayIN8Renderer9Particles8ParticleELj100EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4400|0);
 $3 = $1;
 while(1) {
  __ZN8Renderer9Particles8ParticleC2Ev($3);
  $4 = ((($3)) + 44|0);
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3glm6two_piIfEET_v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +6.2831854820251465;
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEC2IdddEERKT_RKT0_RKT1_($this,$a,$b,$c) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $0;
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $6;
 HEAPF32[$4>>2] = $7;
 $8 = ((($4)) + 4|0);
 $9 = $2;
 $10 = +HEAPF64[$9>>3];
 $11 = $10;
 HEAPF32[$8>>2] = $11;
 $12 = ((($4)) + 8|0);
 $13 = $3;
 $14 = +HEAPF64[$13>>3];
 $15 = $14;
 HEAPF32[$12>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEC2IddfEERKT_RKT0_RKT1_($this,$a,$b,$c) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $0;
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $6;
 HEAPF32[$4>>2] = $7;
 $8 = ((($4)) + 4|0);
 $9 = $2;
 $10 = +HEAPF64[$9>>3];
 $11 = $10;
 HEAPF32[$8>>2] = $11;
 $12 = ((($4)) + 8|0);
 $13 = $3;
 $14 = +HEAPF32[$13>>2];
 HEAPF32[$12>>2] = $14;
 STACKTOP = sp;return;
}
function __ZN8Renderer9Particles8ParticleC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($1);
 $2 = ((($1)) + 12|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($2);
 $3 = ((($1)) + 24|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__118generate_canonicalIdLj53ENS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEET_RT1_($__g) {
 $__g = $__g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0.0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $_Dt = 0, $_Rp = 0.0, $_Sp = 0.0, $__b = 0, $__base = 0.0, $__i = 0, $__k = 0, $__logR = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__g;
 $_Dt = 53;
 $__b = 53;
 $__logR = 32;
 $__k = 2;
 $1 = (-1 - 0)|0;
 $2 = (+($1>>>0));
 $3 = $2 + 1.0;
 $_Rp = $3;
 $__base = 4294967296.0;
 $4 = $0;
 $5 = (__ZNSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv($4)|0);
 $6 = (($5) - 0)|0;
 $7 = (+($6>>>0));
 $_Sp = $7;
 $__i = 1;
 while(1) {
  $8 = $__i;
  $9 = ($8>>>0)<(2);
  if (!($9)) {
   break;
  }
  $10 = $0;
  $11 = (__ZNSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv($10)|0);
  $12 = (($11) - 0)|0;
  $13 = (+($12>>>0));
  $14 = $__base;
  $15 = $13 * $14;
  $16 = $_Sp;
  $17 = $16 + $15;
  $_Sp = $17;
  $18 = $__i;
  $19 = (($18) + 1)|0;
  $__i = $19;
  $20 = $__base;
  $21 = $20 * 4294967296.0;
  $__base = $21;
 }
 $22 = $_Sp;
 $23 = $__base;
 $24 = $22 / $23;
 STACKTOP = sp;return (+$24);
}
function __ZNSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $_Yp = 0, $__j = 0, $__k = 0, $__mask = 0, $__z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $5;
 $7 = ((($6)) + 2496|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = (($9>>>0) % 624)&-1;
 $__j = $10;
 $__mask = 2147483647;
 $11 = ((($6)) + 2496|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($6) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & -2147483648;
 $16 = $__j;
 $17 = (($6) + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 2147483647;
 $20 = $15 | $19;
 $_Yp = $20;
 $21 = ((($6)) + 2496|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 397)|0;
 $24 = (($23>>>0) % 624)&-1;
 $__k = $24;
 $25 = $__k;
 $26 = (($6) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $_Yp;
 $4 = $28;
 $29 = $4;
 $30 = $29 >>> 1;
 $31 = $27 ^ $30;
 $32 = $_Yp;
 $33 = $32 & 1;
 $34 = Math_imul(-1727483681, $33)|0;
 $35 = $31 ^ $34;
 $36 = ((($6)) + 2496|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($6) + ($37<<2)|0);
 HEAP32[$38>>2] = $35;
 $39 = ((($6)) + 2496|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($6) + ($40<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($6)) + 2496|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($6) + ($44<<2)|0);
 $46 = HEAP32[$45>>2]|0;
 $0 = $46;
 $47 = $0;
 $48 = $47 >>> 11;
 $49 = $42 ^ $48;
 $__z = $49;
 $50 = $__j;
 $51 = ((($6)) + 2496|0);
 HEAP32[$51>>2] = $50;
 $52 = $__z;
 $1 = $52;
 $53 = $1;
 $54 = $53 << 7;
 $55 = $54 & -1658038656;
 $56 = $__z;
 $57 = $56 ^ $55;
 $__z = $57;
 $58 = $__z;
 $2 = $58;
 $59 = $2;
 $60 = $59 << 15;
 $61 = $60 & -272236544;
 $62 = $__z;
 $63 = $62 ^ $61;
 $__z = $63;
 $64 = $__z;
 $65 = $__z;
 $3 = $65;
 $66 = $3;
 $67 = $66 >>> 18;
 $68 = $64 ^ $67;
 STACKTOP = sp;return ($68|0);
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEmLIfEERS2_T_($this,$s) {
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$2>>2];
 $5 = $4 * $3;
 HEAPF32[$2>>2] = $5;
 $6 = $1;
 $7 = ((($2)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 * $6;
 HEAPF32[$7>>2] = $9;
 $10 = $1;
 $11 = ((($2)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $12 * $10;
 HEAPF32[$11>>2] = $13;
 STACKTOP = sp;return ($2|0);
}
function __ZN8Renderer9PreRenderEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 _glClear(16384);
 STACKTOP = sp;return;
}
function __ZN8Renderer14DrawBackgroundERK6Camera($this,$cam) {
 $this = $this|0;
 $cam = $cam|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $mvp = 0, $pos = 0, $shader = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pos = sp + 232|0;
 $mvp = sp + 168|0;
 $4 = sp + 144|0;
 $5 = sp + 80|0;
 $6 = sp + 64|0;
 $7 = sp;
 $0 = $this;
 $1 = $cam;
 $8 = $0;
 $9 = ((($8)) + 56|0);
 $shader = $9;
 $10 = $shader;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 _glUseProgram(($12|0));
 _glEnableVertexAttribArray(0);
 $13 = ((($8)) + 108|0);
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 _glBindBuffer(34962,($15|0));
 _glVertexAttribPointer(0,3,5126,0,0,(0|0));
 $16 = $1;
 $17 = ((($8)) + 108|0);
 $18 = ((($17)) + 60|0);
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($pos,$16,$18);
 $19 = $1;
 $20 = ((($19)) + 140|0);
 __ZN3glm9translateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_RKNS_5tvec3IS3_XT0_EEE($mvp,$20,$pos);
 $21 = $shader;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 __THREW__ = 0;
 $24 = (invoke_iii(456,($mvp|0),0)|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 do {
  if (!($26)) {
   __THREW__ = 0;
   $27 = (invoke_iii(469,($24|0),0)|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    __THREW__ = 0;
    invoke_viiii(470,($23|0),1,0,($27|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if (!($31)) {
     $32 = $shader;
     $33 = ((($32)) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($8)) + 108|0);
     $36 = ((($35)) + 60|0);
     $37 = ((($36)) + 4|0);
     $38 = +HEAPF32[$37>>2];
     $39 = ((($8)) + 108|0);
     $40 = ((($39)) + 60|0);
     $41 = ((($40)) + 4|0);
     $42 = ((($41)) + 4|0);
     $43 = +HEAPF32[$42>>2];
     $44 = ((($8)) + 108|0);
     $45 = ((($44)) + 60|0);
     $46 = ((($45)) + 4|0);
     $47 = ((($46)) + 8|0);
     $48 = +HEAPF32[$47>>2];
     __THREW__ = 0;
     invoke_viddd(471,($34|0),(+$38),(+$43),(+$48));
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if (!($50)) {
      $51 = ((($8)) + 108|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = ($52*6)|0;
      $54 = $53<<1;
      $55 = ((($8)) + 108|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      invoke_viii(472,4,($54|0),($56|0));
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if (!($58)) {
       $59 = $1;
       $60 = ((($8)) + 108|0);
       $61 = ((($60)) + 44|0);
       __THREW__ = 0;
       invoke_viii(406,($4|0),($59|0),($61|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if (!($63)) {
        __THREW__ = 0;
        (invoke_iii(473,($pos|0),($4|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if (!($65)) {
         $66 = $1;
         $67 = ((($66)) + 140|0);
         __THREW__ = 0;
         invoke_viii(452,($5|0),($67|0),($pos|0));
         $68 = __THREW__; __THREW__ = 0;
         $69 = $68&1;
         if (!($69)) {
          __THREW__ = 0;
          (invoke_iii(453,($mvp|0),($5|0))|0);
          $70 = __THREW__; __THREW__ = 0;
          $71 = $70&1;
          if ($71) {
           $161 = ___cxa_find_matching_catch()|0;
           $162 = tempRet0;
           $2 = $161;
           $3 = $162;
           __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($5);
           __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
           $165 = $2;
           $166 = $3;
           ___resumeException($165|0);
           // unreachable;
          }
          __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($5);
          $72 = $shader;
          $73 = ((($72)) + 12|0);
          $74 = HEAP32[$73>>2]|0;
          __THREW__ = 0;
          $75 = (invoke_iii(456,($mvp|0),0)|0);
          $76 = __THREW__; __THREW__ = 0;
          $77 = $76&1;
          if (!($77)) {
           __THREW__ = 0;
           $78 = (invoke_iii(469,($75|0),0)|0);
           $79 = __THREW__; __THREW__ = 0;
           $80 = $79&1;
           if (!($80)) {
            __THREW__ = 0;
            invoke_viiii(470,($74|0),1,0,($78|0));
            $81 = __THREW__; __THREW__ = 0;
            $82 = $81&1;
            if (!($82)) {
             $83 = $shader;
             $84 = ((($83)) + 16|0);
             $85 = HEAP32[$84>>2]|0;
             $86 = ((($8)) + 108|0);
             $87 = ((($86)) + 44|0);
             $88 = ((($87)) + 4|0);
             $89 = +HEAPF32[$88>>2];
             $90 = ((($8)) + 108|0);
             $91 = ((($90)) + 44|0);
             $92 = ((($91)) + 4|0);
             $93 = ((($92)) + 4|0);
             $94 = +HEAPF32[$93>>2];
             $95 = ((($8)) + 108|0);
             $96 = ((($95)) + 44|0);
             $97 = ((($96)) + 4|0);
             $98 = ((($97)) + 8|0);
             $99 = +HEAPF32[$98>>2];
             __THREW__ = 0;
             invoke_viddd(471,($85|0),(+$89),(+$94),(+$99));
             $100 = __THREW__; __THREW__ = 0;
             $101 = $100&1;
             if (!($101)) {
              $102 = ((($8)) + 108|0);
              $103 = HEAP32[$102>>2]|0;
              $104 = ($103*6)|0;
              $105 = $104;
              $106 = ((($8)) + 108|0);
              $107 = HEAP32[$106>>2]|0;
              __THREW__ = 0;
              invoke_viii(472,4,($105|0),($107|0));
              $108 = __THREW__; __THREW__ = 0;
              $109 = $108&1;
              if (!($109)) {
               $110 = $1;
               $111 = ((($8)) + 108|0);
               $112 = ((($111)) + 28|0);
               __THREW__ = 0;
               invoke_viii(406,($6|0),($110|0),($112|0));
               $113 = __THREW__; __THREW__ = 0;
               $114 = $113&1;
               if (!($114)) {
                __THREW__ = 0;
                (invoke_iii(473,($pos|0),($6|0))|0);
                $115 = __THREW__; __THREW__ = 0;
                $116 = $115&1;
                if (!($116)) {
                 $117 = $1;
                 $118 = ((($117)) + 140|0);
                 __THREW__ = 0;
                 invoke_viii(452,($7|0),($118|0),($pos|0));
                 $119 = __THREW__; __THREW__ = 0;
                 $120 = $119&1;
                 if (!($120)) {
                  __THREW__ = 0;
                  (invoke_iii(453,($mvp|0),($7|0))|0);
                  $121 = __THREW__; __THREW__ = 0;
                  $122 = $121&1;
                  if ($122) {
                   $163 = ___cxa_find_matching_catch()|0;
                   $164 = tempRet0;
                   $2 = $163;
                   $3 = $164;
                   __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($7);
                   __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
                   $165 = $2;
                   $166 = $3;
                   ___resumeException($165|0);
                   // unreachable;
                  }
                  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($7);
                  $123 = $shader;
                  $124 = ((($123)) + 12|0);
                  $125 = HEAP32[$124>>2]|0;
                  __THREW__ = 0;
                  $126 = (invoke_iii(456,($mvp|0),0)|0);
                  $127 = __THREW__; __THREW__ = 0;
                  $128 = $127&1;
                  if (!($128)) {
                   __THREW__ = 0;
                   $129 = (invoke_iii(469,($126|0),0)|0);
                   $130 = __THREW__; __THREW__ = 0;
                   $131 = $130&1;
                   if ($131) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_viiii(470,($125|0),1,0,($129|0));
                   $132 = __THREW__; __THREW__ = 0;
                   $133 = $132&1;
                   if ($133) {
                    break;
                   }
                   $134 = $shader;
                   $135 = ((($134)) + 16|0);
                   $136 = HEAP32[$135>>2]|0;
                   $137 = ((($8)) + 108|0);
                   $138 = ((($137)) + 28|0);
                   $139 = ((($138)) + 4|0);
                   $140 = +HEAPF32[$139>>2];
                   $141 = ((($8)) + 108|0);
                   $142 = ((($141)) + 28|0);
                   $143 = ((($142)) + 4|0);
                   $144 = ((($143)) + 4|0);
                   $145 = +HEAPF32[$144>>2];
                   $146 = ((($8)) + 108|0);
                   $147 = ((($146)) + 28|0);
                   $148 = ((($147)) + 4|0);
                   $149 = ((($148)) + 8|0);
                   $150 = +HEAPF32[$149>>2];
                   __THREW__ = 0;
                   invoke_viddd(471,($136|0),(+$140),(+$145),(+$150));
                   $151 = __THREW__; __THREW__ = 0;
                   $152 = $151&1;
                   if ($152) {
                    break;
                   }
                   $153 = ((($8)) + 108|0);
                   $154 = HEAP32[$153>>2]|0;
                   __THREW__ = 0;
                   invoke_viii(472,4,0,($154|0));
                   $155 = __THREW__; __THREW__ = 0;
                   $156 = $155&1;
                   if ($156) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vi(474,0);
                   $157 = __THREW__; __THREW__ = 0;
                   $158 = $157&1;
                   if ($158) {
                    break;
                   }
                   __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
                   STACKTOP = sp;return;
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $159 = ___cxa_find_matching_catch()|0;
 $160 = tempRet0;
 $2 = $159;
 $3 = $160;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
 $165 = $2;
 $166 = $3;
 ___resumeException($165|0);
 // unreachable;
}
function __ZN8Renderer13DrawLandscapeERK6Camera($this,$cam) {
 $this = $this|0;
 $cam = $cam|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cam;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 116|0);
 __ZN8Renderer4DrawERK6CameraRKN5Asset5ModelEj($2,$3,$5,2);
 STACKTOP = sp;return;
}
function __ZN8Renderer4DrawERK6CameraRKNSt3__16vectorI7MissileNS3_9allocatorIS5_EEEE($this,$cam,$missiles) {
 $this = $this|0;
 $cam = $cam|0;
 $missiles = $missiles|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__begin = 0, $__begin2 = 0, $__begin5 = 0, $__end = 0, $__end3 = 0, $__end6 = 0, $__range = 0, $__range1 = 0, $__range4 = 0;
 var $l = 0, $m = 0, $missile = 0, $mvp = 0, $p = 0, $shader = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 732|0;
 $5 = sp + 720|0;
 $17 = sp + 672|0;
 $20 = sp + 660|0;
 $31 = sp + 616|0;
 $34 = sp + 604|0;
 $38 = sp + 588|0;
 $41 = sp + 576|0;
 $54 = sp + 524|0;
 $57 = sp + 512|0;
 $61 = sp + 496|0;
 $64 = sp + 484|0;
 $__begin = sp + 456|0;
 $__end = sp + 452|0;
 $mvp = sp + 384|0;
 $m = sp + 320|0;
 $69 = sp + 256|0;
 $70 = sp + 192|0;
 $73 = sp + 120|0;
 $74 = sp + 56|0;
 $75 = sp + 44|0;
 $76 = sp + 40|0;
 $77 = sp + 36|0;
 $78 = sp + 32|0;
 $__begin2 = sp + 24|0;
 $__end3 = sp + 20|0;
 $__begin5 = sp + 8|0;
 $__end6 = sp + 4|0;
 $66 = $this;
 $67 = $cam;
 $68 = $missiles;
 $79 = $66;
 _glEnable(3042);
 _glBlendEquationSeparate(32774,32774);
 _glBlendFuncSeparate(770,771,1,0);
 $80 = ((($79)) + 76|0);
 $shader = $80;
 $81 = $shader;
 $82 = ((($81)) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 _glUseProgram(($83|0));
 _glEnableVertexAttribArray(0);
 $84 = ((($79)) + 184|0);
 $85 = ((($84)) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 _glBindBuffer(34962,($86|0));
 _glVertexAttribPointer(0,3,5126,0,0,(0|0));
 _glEnableVertexAttribArray(1);
 $87 = ((($79)) + 184|0);
 $88 = ((($87)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 _glBindBuffer(34962,($89|0));
 _glVertexAttribPointer(1,2,5126,0,0,(0|0));
 _glActiveTexture(33984);
 $90 = ((($79)) + 104|0);
 $91 = HEAP32[$90>>2]|0;
 _glBindTexture(3553,($91|0));
 $92 = ((($79)) + 76|0);
 $93 = ((($92)) + 12|0);
 $94 = HEAP32[$93>>2]|0;
 _glUniform1i(($94|0),0);
 $95 = $68;
 $__range = $95;
 $96 = $__range;
 $65 = $96;
 $97 = $65;
 $98 = HEAP32[$97>>2]|0;
 $62 = $97;
 $63 = $98;
 $99 = $63;
 $59 = $61;
 $60 = $99;
 $100 = $59;
 $101 = $60;
 HEAP32[$100>>2] = $101;
 $102 = HEAP32[$61>>2]|0;
 HEAP32[$64>>2] = $102;
 $103 = HEAP32[$64>>2]|0;
 HEAP32[$__begin>>2] = $103;
 $104 = $__range;
 $58 = $104;
 $105 = $58;
 $106 = ((($105)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $55 = $105;
 $56 = $107;
 $108 = $56;
 $52 = $54;
 $53 = $108;
 $109 = $52;
 $110 = $53;
 HEAP32[$109>>2] = $110;
 $111 = HEAP32[$54>>2]|0;
 HEAP32[$57>>2] = $111;
 $112 = HEAP32[$57>>2]|0;
 HEAP32[$__end>>2] = $112;
 L1: while(1) {
  $49 = $__begin;
  $50 = $__end;
  $113 = $49;
  $114 = $50;
  $47 = $113;
  $48 = $114;
  $115 = $47;
  $46 = $115;
  $116 = $46;
  $117 = HEAP32[$116>>2]|0;
  $118 = $48;
  $45 = $118;
  $119 = $45;
  $120 = HEAP32[$119>>2]|0;
  $121 = ($117|0)==($120|0);
  $122 = $121 ^ 1;
  if (!($122)) {
   label = 31;
   break;
  }
  $44 = $__begin;
  $123 = $44;
  $124 = HEAP32[$123>>2]|0;
  $missile = $124;
  $125 = $67;
  $126 = ((($125)) + 76|0);
  $127 = $67;
  $128 = ((($127)) + 12|0);
  __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($mvp,$126,$128);
  __THREW__ = 0;
  invoke_vi(475,($70|0));
  $129 = __THREW__; __THREW__ = 0;
  $130 = $129&1;
  if ($130) {
   label = 19;
   break;
  }
  $131 = $missile;
  __THREW__ = 0;
  invoke_viii(452,($69|0),($70|0),($131|0));
  $132 = __THREW__; __THREW__ = 0;
  $133 = $132&1;
  if ($133) {
   label = 20;
   break;
  }
  __THREW__ = 0;
  invoke_vi(475,($74|0));
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   label = 21;
   break;
  }
  $136 = $missile;
  $137 = ((($136)) + 12|0);
  $138 = +HEAPF32[$137>>2];
  HEAPF32[$76>>2] = 0.0;
  HEAPF32[$77>>2] = 0.0;
  HEAPF32[$78>>2] = 1.0;
  __THREW__ = 0;
  invoke_viiii(405,($75|0),($76|0),($77|0),($78|0));
  $139 = __THREW__; __THREW__ = 0;
  $140 = $139&1;
  if ($140) {
   label = 22;
   break;
  }
  __THREW__ = 0;
  invoke_viidi(476,($73|0),($74|0),(+$138),($75|0));
  $141 = __THREW__; __THREW__ = 0;
  $142 = $141&1;
  if ($142) {
   label = 22;
   break;
  }
  __THREW__ = 0;
  invoke_viii(477,($m|0),($69|0),($73|0));
  $143 = __THREW__; __THREW__ = 0;
  $144 = $143&1;
  if ($144) {
   label = 23;
   break;
  }
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($73);
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($74);
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($69);
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($70);
  __THREW__ = 0;
  (invoke_iii(478,($mvp|0),($m|0))|0);
  $145 = __THREW__; __THREW__ = 0;
  $146 = $145&1;
  if ($146) {
   label = 27;
   break;
  }
  $147 = $shader;
  $148 = ((($147)) + 24|0);
  $149 = HEAP32[$148>>2]|0;
  __THREW__ = 0;
  $150 = (invoke_iii(456,($mvp|0),0)|0);
  $151 = __THREW__; __THREW__ = 0;
  $152 = $151&1;
  if ($152) {
   label = 27;
   break;
  }
  __THREW__ = 0;
  $153 = (invoke_iii(469,($150|0),0)|0);
  $154 = __THREW__; __THREW__ = 0;
  $155 = $154&1;
  if ($155) {
   label = 27;
   break;
  }
  __THREW__ = 0;
  invoke_viiii(470,($149|0),1,0,($153|0));
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   label = 27;
   break;
  }
  $158 = HEAP32[$79>>2]|0;
  $159 = ((($158)) + 168|0);
  $160 = ((($159)) + 12|0);
  $__range1 = $160;
  $161 = $__range1;
  $42 = $161;
  $162 = $42;
  $163 = HEAP32[$162>>2]|0;
  $39 = $162;
  $40 = $163;
  $164 = $40;
  $36 = $38;
  $37 = $164;
  $165 = $36;
  $166 = $37;
  HEAP32[$165>>2] = $166;
  $167 = HEAP32[$38>>2]|0;
  HEAP32[$41>>2] = $167;
  $168 = HEAP32[$41>>2]|0;
  HEAP32[$__begin2>>2] = $168;
  $169 = $__range1;
  $35 = $169;
  $170 = $35;
  $171 = ((($170)) + 4|0);
  $172 = HEAP32[$171>>2]|0;
  $32 = $170;
  $33 = $172;
  $173 = $33;
  $29 = $31;
  $30 = $173;
  $174 = $29;
  $175 = $30;
  HEAP32[$174>>2] = $175;
  $176 = HEAP32[$31>>2]|0;
  HEAP32[$34>>2] = $176;
  $177 = HEAP32[$34>>2]|0;
  HEAP32[$__end3>>2] = $177;
  while(1) {
   $27 = $__begin2;
   $28 = $__end3;
   $178 = $27;
   $179 = $28;
   $25 = $178;
   $26 = $179;
   $180 = $25;
   $24 = $180;
   $181 = $24;
   $182 = HEAP32[$181>>2]|0;
   $183 = $26;
   $23 = $183;
   $184 = $23;
   $185 = HEAP32[$184>>2]|0;
   $186 = ($182|0)==($185|0);
   $187 = $186 ^ 1;
   if (!($187)) {
    break;
   }
   $22 = $__begin2;
   $188 = $22;
   $189 = HEAP32[$188>>2]|0;
   $l = $189;
   $190 = $l;
   $191 = ((($190)) + 12|0);
   $__range4 = $191;
   $192 = $__range4;
   $21 = $192;
   $193 = $21;
   $194 = HEAP32[$193>>2]|0;
   $18 = $193;
   $19 = $194;
   $195 = $19;
   $15 = $17;
   $16 = $195;
   $196 = $15;
   $197 = $16;
   HEAP32[$196>>2] = $197;
   $198 = HEAP32[$17>>2]|0;
   HEAP32[$20>>2] = $198;
   $199 = HEAP32[$20>>2]|0;
   HEAP32[$__begin5>>2] = $199;
   $200 = $__range4;
   $6 = $200;
   $201 = $6;
   $202 = ((($201)) + 4|0);
   $203 = HEAP32[$202>>2]|0;
   $3 = $201;
   $4 = $203;
   $204 = $4;
   $0 = $2;
   $1 = $204;
   $205 = $0;
   $206 = $1;
   HEAP32[$205>>2] = $206;
   $207 = HEAP32[$2>>2]|0;
   HEAP32[$5>>2] = $207;
   $208 = HEAP32[$5>>2]|0;
   HEAP32[$__end6>>2] = $208;
   while(1) {
    $11 = $__begin5;
    $12 = $__end6;
    $209 = $11;
    $210 = $12;
    $9 = $209;
    $10 = $210;
    $211 = $9;
    $8 = $211;
    $212 = $8;
    $213 = HEAP32[$212>>2]|0;
    $214 = $10;
    $7 = $214;
    $215 = $7;
    $216 = HEAP32[$215>>2]|0;
    $217 = ($213|0)==($216|0);
    $218 = $217 ^ 1;
    if (!($218)) {
     break;
    }
    $13 = $__begin5;
    $219 = $13;
    $220 = HEAP32[$219>>2]|0;
    $p = $220;
    $221 = $p;
    $222 = HEAP32[$221>>2]|0;
    $223 = $p;
    $224 = ((($223)) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    __THREW__ = 0;
    invoke_viii(472,4,($222|0),($225|0));
    $226 = __THREW__; __THREW__ = 0;
    $227 = $226&1;
    if ($227) {
     label = 27;
     break L1;
    }
    $14 = $__begin5;
    $228 = $14;
    $229 = HEAP32[$228>>2]|0;
    $230 = ((($229)) + 20|0);
    HEAP32[$228>>2] = $230;
   }
   $43 = $__begin2;
   $243 = $43;
   $244 = HEAP32[$243>>2]|0;
   $245 = ((($244)) + 40|0);
   HEAP32[$243>>2] = $245;
  }
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($m);
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
  $51 = $__begin;
  $246 = $51;
  $247 = HEAP32[$246>>2]|0;
  $248 = ((($247)) + 24|0);
  HEAP32[$246>>2] = $248;
 }
 if ((label|0) == 19) {
  $231 = ___cxa_find_matching_catch()|0;
  $232 = tempRet0;
  $71 = $231;
  $72 = $232;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
  $249 = $71;
  $250 = $72;
  ___resumeException($249|0);
  // unreachable;
 }
 else if ((label|0) == 20) {
  $233 = ___cxa_find_matching_catch()|0;
  $234 = tempRet0;
  $71 = $233;
  $72 = $234;
 }
 else if ((label|0) == 21) {
  $235 = ___cxa_find_matching_catch()|0;
  $236 = tempRet0;
  $71 = $235;
  $72 = $236;
  label = 25;
 }
 else if ((label|0) == 22) {
  $237 = ___cxa_find_matching_catch()|0;
  $238 = tempRet0;
  $71 = $237;
  $72 = $238;
  label = 24;
 }
 else if ((label|0) == 23) {
  $239 = ___cxa_find_matching_catch()|0;
  $240 = tempRet0;
  $71 = $239;
  $72 = $240;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($73);
  label = 24;
 }
 else if ((label|0) == 27) {
  $241 = ___cxa_find_matching_catch()|0;
  $242 = tempRet0;
  $71 = $241;
  $72 = $242;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($m);
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
  $249 = $71;
  $250 = $72;
  ___resumeException($249|0);
  // unreachable;
 }
 else if ((label|0) == 31) {
  _glDisableVertexAttribArray(0);
  _glDisableVertexAttribArray(1);
  _glBindTexture(3553,0);
  _glUseProgram(0);
  _glDisable(3042);
  STACKTOP = sp;return;
 }
 if ((label|0) == 24) {
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($74);
  label = 25;
 }
 if ((label|0) == 25) {
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($69);
 }
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($70);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
 $249 = $71;
 $250 = $72;
 ___resumeException($249|0);
 // unreachable;
}
function __ZN8Renderer4DrawERK6CameraRK6ProtoX($this,$cam,$proto) {
 $this = $this|0;
 $cam = $cam|0;
 $proto = $proto|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__begin = 0, $__begin2 = 0, $__end = 0, $__end3 = 0, $__range = 0, $__range1 = 0, $m = 0, $mvp = 0, $mvp5 = 0, $p = 0, $p4 = 0;
 var $shader = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 628|0;
 $13 = sp + 616|0;
 $17 = sp + 600|0;
 $20 = sp + 588|0;
 $32 = sp + 540|0;
 $35 = sp + 528|0;
 $39 = sp + 512|0;
 $42 = sp + 500|0;
 $__begin = sp + 472|0;
 $__end = sp + 468|0;
 $mvp = sp + 400|0;
 $__begin2 = sp + 384|0;
 $__end3 = sp + 380|0;
 $m = sp + 312|0;
 $49 = sp + 248|0;
 $50 = sp + 232|0;
 $51 = sp + 168|0;
 $52 = sp + 156|0;
 $53 = sp + 152|0;
 $54 = sp + 148|0;
 $55 = sp + 144|0;
 $56 = sp + 80|0;
 $57 = sp + 64|0;
 $mvp5 = sp;
 $44 = $this;
 $45 = $cam;
 $46 = $proto;
 $58 = $44;
 _glEnableVertexAttribArray(0);
 $59 = ((($58)) + 184|0);
 $60 = HEAP32[$59>>2]|0;
 _glBindBuffer(34962,($60|0));
 _glVertexAttribPointer(0,3,5126,0,0,(0|0));
 $61 = ((($58)) + 56|0);
 $shader = $61;
 $62 = $shader;
 $63 = ((($62)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 _glUseProgram(($64|0));
 $65 = $46;
 $66 = ((($65)) + 92|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($67)) + 12|0);
 $__range = $68;
 $69 = $__range;
 $43 = $69;
 $70 = $43;
 $71 = HEAP32[$70>>2]|0;
 $40 = $70;
 $41 = $71;
 $72 = $41;
 $37 = $39;
 $38 = $72;
 $73 = $37;
 $74 = $38;
 HEAP32[$73>>2] = $74;
 $75 = HEAP32[$39>>2]|0;
 HEAP32[$42>>2] = $75;
 $76 = HEAP32[$42>>2]|0;
 HEAP32[$__begin>>2] = $76;
 $77 = $__range;
 $36 = $77;
 $78 = $36;
 $79 = ((($78)) + 4|0);
 $80 = HEAP32[$79>>2]|0;
 $33 = $78;
 $34 = $80;
 $81 = $34;
 $30 = $32;
 $31 = $81;
 $82 = $30;
 $83 = $31;
 HEAP32[$82>>2] = $83;
 $84 = HEAP32[$32>>2]|0;
 HEAP32[$35>>2] = $84;
 $85 = HEAP32[$35>>2]|0;
 HEAP32[$__end>>2] = $85;
 while(1) {
  $28 = $__begin;
  $29 = $__end;
  $86 = $28;
  $87 = $29;
  $26 = $86;
  $27 = $87;
  $88 = $26;
  $25 = $88;
  $89 = $25;
  $90 = HEAP32[$89>>2]|0;
  $91 = $27;
  $24 = $91;
  $92 = $24;
  $93 = HEAP32[$92>>2]|0;
  $94 = ($90|0)==($93|0);
  $95 = $94 ^ 1;
  if (!($95)) {
   break;
  }
  $23 = $__begin;
  $96 = $23;
  $97 = HEAP32[$96>>2]|0;
  $p = $97;
  $98 = $45;
  $99 = ((($98)) + 140|0);
  $100 = $46;
  $101 = ((($100)) + 44|0);
  __ZN3glm9translateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_RKNS_5tvec3IS3_XT0_EEE($mvp,$99,$101);
  $102 = ((($58)) + 56|0);
  $103 = ((($102)) + 12|0);
  $104 = HEAP32[$103>>2]|0;
  __THREW__ = 0;
  $105 = (invoke_iii(456,($mvp|0),0)|0);
  $106 = __THREW__; __THREW__ = 0;
  $107 = $106&1;
  if ($107) {
   label = 9;
   break;
  }
  __THREW__ = 0;
  $108 = (invoke_iii(469,($105|0),0)|0);
  $109 = __THREW__; __THREW__ = 0;
  $110 = $109&1;
  if ($110) {
   label = 9;
   break;
  }
  __THREW__ = 0;
  invoke_viiii(470,($104|0),1,0,($108|0));
  $111 = __THREW__; __THREW__ = 0;
  $112 = $111&1;
  if ($112) {
   label = 9;
   break;
  }
  $113 = $shader;
  $114 = ((($113)) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $p;
  $117 = ((($116)) + 8|0);
  $118 = +HEAPF32[$117>>2];
  $119 = $p;
  $120 = ((($119)) + 8|0);
  $121 = ((($120)) + 4|0);
  $122 = +HEAPF32[$121>>2];
  $123 = $p;
  $124 = ((($123)) + 8|0);
  $125 = ((($124)) + 8|0);
  $126 = +HEAPF32[$125>>2];
  __THREW__ = 0;
  invoke_viddd(471,($115|0),(+$118),(+$122),(+$126));
  $127 = __THREW__; __THREW__ = 0;
  $128 = $127&1;
  if ($128) {
   label = 9;
   break;
  }
  $129 = $p;
  $130 = HEAP32[$129>>2]|0;
  $131 = $p;
  $132 = ((($131)) + 4|0);
  $133 = HEAP32[$132>>2]|0;
  __THREW__ = 0;
  invoke_viii(472,4,($130|0),($133|0));
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   label = 9;
   break;
  }
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
  $22 = $__begin;
  $136 = $22;
  $137 = HEAP32[$136>>2]|0;
  $138 = ((($137)) + 20|0);
  HEAP32[$136>>2] = $138;
 }
 if ((label|0) == 9) {
  $139 = ___cxa_find_matching_catch()|0;
  $140 = tempRet0;
  $47 = $139;
  $48 = $140;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
  $267 = $47;
  $268 = $48;
  ___resumeException($267|0);
  // unreachable;
 }
 $141 = $46;
 $142 = ((($141)) + 240|0);
 $143 = ((($142)) + 16|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ((($144)) + 12|0);
 $__range1 = $145;
 $146 = $__range1;
 $21 = $146;
 $147 = $21;
 $148 = HEAP32[$147>>2]|0;
 $18 = $147;
 $19 = $148;
 $149 = $19;
 $15 = $17;
 $16 = $149;
 $150 = $15;
 $151 = $16;
 HEAP32[$150>>2] = $151;
 $152 = HEAP32[$17>>2]|0;
 HEAP32[$20>>2] = $152;
 $153 = HEAP32[$20>>2]|0;
 HEAP32[$__begin2>>2] = $153;
 $154 = $__range1;
 $14 = $154;
 $155 = $14;
 $156 = ((($155)) + 4|0);
 $157 = HEAP32[$156>>2]|0;
 $11 = $155;
 $12 = $157;
 $158 = $12;
 $8 = $10;
 $9 = $158;
 $159 = $8;
 $160 = $9;
 HEAP32[$159>>2] = $160;
 $161 = HEAP32[$10>>2]|0;
 HEAP32[$13>>2] = $161;
 $162 = HEAP32[$13>>2]|0;
 HEAP32[$__end3>>2] = $162;
 while(1) {
  $6 = $__begin2;
  $7 = $__end3;
  $163 = $6;
  $164 = $7;
  $4 = $163;
  $5 = $164;
  $165 = $4;
  $3 = $165;
  $166 = $3;
  $167 = HEAP32[$166>>2]|0;
  $168 = $5;
  $2 = $168;
  $169 = $2;
  $170 = HEAP32[$169>>2]|0;
  $171 = ($167|0)==($170|0);
  $172 = $171 ^ 1;
  if (!($172)) {
   label = 33;
   break;
  }
  $1 = $__begin2;
  $173 = $1;
  $174 = HEAP32[$173>>2]|0;
  $p4 = $174;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2Ev($49);
  $175 = $46;
  $176 = ((($175)) + 44|0);
  $177 = $46;
  $178 = ((($177)) + 240|0);
  $179 = ((($178)) + 16|0);
  $180 = HEAP32[$179>>2]|0;
  __THREW__ = 0;
  invoke_viii(479,($50|0),($176|0),($180|0));
  $181 = __THREW__; __THREW__ = 0;
  $182 = $181&1;
  if ($182) {
   label = 27;
   break;
  }
  __THREW__ = 0;
  invoke_viii(452,($m|0),($49|0),($50|0));
  $183 = __THREW__; __THREW__ = 0;
  $184 = $183&1;
  if ($184) {
   label = 27;
   break;
  }
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($49);
  $185 = $46;
  $186 = ((($185)) + 240|0);
  $187 = +HEAPF32[$186>>2];
  HEAPF32[$53>>2] = 0.0;
  HEAPF32[$54>>2] = 0.0;
  HEAPF32[$55>>2] = 1.0;
  __THREW__ = 0;
  invoke_viiii(405,($52|0),($53|0),($54|0),($55|0));
  $188 = __THREW__; __THREW__ = 0;
  $189 = $188&1;
  if ($189) {
   label = 28;
   break;
  }
  __THREW__ = 0;
  invoke_viidi(476,($51|0),($m|0),(+$187),($52|0));
  $190 = __THREW__; __THREW__ = 0;
  $191 = $190&1;
  if ($191) {
   label = 28;
   break;
  }
  __THREW__ = 0;
  (invoke_iii(453,($m|0),($51|0))|0);
  $192 = __THREW__; __THREW__ = 0;
  $193 = $192&1;
  if ($193) {
   label = 29;
   break;
  }
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($51);
  $194 = $46;
  $195 = ((($194)) + 240|0);
  $196 = ((($195)) + 16|0);
  $197 = HEAP32[$196>>2]|0;
  __THREW__ = 0;
  invoke_vii(480,($57|0),($197|0));
  $198 = __THREW__; __THREW__ = 0;
  $199 = $198&1;
  if ($199) {
   label = 28;
   break;
  }
  __THREW__ = 0;
  invoke_viii(452,($56|0),($m|0),($57|0));
  $200 = __THREW__; __THREW__ = 0;
  $201 = $200&1;
  if ($201) {
   label = 28;
   break;
  }
  __THREW__ = 0;
  (invoke_iii(453,($m|0),($56|0))|0);
  $202 = __THREW__; __THREW__ = 0;
  $203 = $202&1;
  if ($203) {
   label = 30;
   break;
  }
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($56);
  $204 = $45;
  $205 = ((($204)) + 140|0);
  __THREW__ = 0;
  invoke_viii(477,($mvp5|0),($205|0),($m|0));
  $206 = __THREW__; __THREW__ = 0;
  $207 = $206&1;
  if ($207) {
   label = 28;
   break;
  }
  $208 = ((($58)) + 56|0);
  $209 = ((($208)) + 12|0);
  $210 = HEAP32[$209>>2]|0;
  __THREW__ = 0;
  $211 = (invoke_iii(456,($mvp5|0),0)|0);
  $212 = __THREW__; __THREW__ = 0;
  $213 = $212&1;
  if ($213) {
   label = 31;
   break;
  }
  __THREW__ = 0;
  $214 = (invoke_iii(469,($211|0),0)|0);
  $215 = __THREW__; __THREW__ = 0;
  $216 = $215&1;
  if ($216) {
   label = 31;
   break;
  }
  __THREW__ = 0;
  invoke_viiii(470,($210|0),1,0,($214|0));
  $217 = __THREW__; __THREW__ = 0;
  $218 = $217&1;
  if ($218) {
   label = 31;
   break;
  }
  $219 = $shader;
  $220 = ((($219)) + 16|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = $p4;
  $223 = ((($222)) + 8|0);
  $224 = +HEAPF32[$223>>2];
  $225 = $p4;
  $226 = ((($225)) + 8|0);
  $227 = ((($226)) + 4|0);
  $228 = +HEAPF32[$227>>2];
  $229 = $p4;
  $230 = ((($229)) + 8|0);
  $231 = ((($230)) + 8|0);
  $232 = +HEAPF32[$231>>2];
  __THREW__ = 0;
  invoke_viddd(471,($221|0),(+$224),(+$228),(+$232));
  $233 = __THREW__; __THREW__ = 0;
  $234 = $233&1;
  if ($234) {
   label = 31;
   break;
  }
  $235 = $p4;
  $236 = HEAP32[$235>>2]|0;
  $237 = $p4;
  $238 = ((($237)) + 4|0);
  $239 = HEAP32[$238>>2]|0;
  __THREW__ = 0;
  invoke_viii(472,4,($236|0),($239|0));
  $240 = __THREW__; __THREW__ = 0;
  $241 = $240&1;
  if ($241) {
   label = 31;
   break;
  }
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp5);
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($m);
  $0 = $__begin2;
  $242 = $0;
  $243 = HEAP32[$242>>2]|0;
  $244 = ((($243)) + 20|0);
  HEAP32[$242>>2] = $244;
 }
 if ((label|0) == 27) {
  $245 = ___cxa_find_matching_catch()|0;
  $246 = tempRet0;
  $47 = $245;
  $48 = $246;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($49);
  $267 = $47;
  $268 = $48;
  ___resumeException($267|0);
  // unreachable;
 }
 else if ((label|0) == 28) {
  $247 = ___cxa_find_matching_catch()|0;
  $248 = tempRet0;
  $47 = $247;
  $48 = $248;
 }
 else if ((label|0) == 29) {
  $249 = ___cxa_find_matching_catch()|0;
  $250 = tempRet0;
  $47 = $249;
  $48 = $250;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($51);
 }
 else if ((label|0) == 30) {
  $251 = ___cxa_find_matching_catch()|0;
  $252 = tempRet0;
  $47 = $251;
  $48 = $252;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($56);
 }
 else if ((label|0) == 31) {
  $253 = ___cxa_find_matching_catch()|0;
  $254 = tempRet0;
  $47 = $253;
  $48 = $254;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp5);
 }
 else if ((label|0) == 33) {
  $255 = $45;
  $256 = $46;
  $257 = $46;
  $258 = ((($257)) + 96|0);
  __ZN8Renderer4DrawERK6CameraRK6ProtoXRKNS3_10PropulsionE($58,$255,$256,$258);
  $259 = $45;
  $260 = $46;
  $261 = $46;
  $262 = ((($261)) + 192|0);
  __ZN8Renderer4DrawERK6CameraRK6ProtoXRKNS3_10PropulsionE($58,$259,$260,$262);
  $263 = $45;
  $264 = $46;
  $265 = $46;
  $266 = ((($265)) + 144|0);
  __ZN8Renderer4DrawERK6CameraRK6ProtoXRKNS3_10PropulsionE($58,$263,$264,$266);
  _glDisableVertexAttribArray(0);
  STACKTOP = sp;return;
 }
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($m);
 $267 = $47;
 $268 = $48;
 ___resumeException($267|0);
 // unreachable;
}
function __ZN8Renderer4DrawERK6CameraRK4AABB($this,$cam,$aabb) {
 $this = $this|0;
 $cam = $cam|0;
 $aabb = $aabb|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $mvp = 0, $shader = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vertices = sp + 8|0;
 $1 = $this;
 $2 = $cam;
 $3 = $aabb;
 $4 = $1;
 $5 = $3;
 $6 = +HEAPF32[$5>>2];
 HEAPF32[$vertices>>2] = $6;
 $7 = ((($vertices)) + 4|0);
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 HEAPF32[$7>>2] = $10;
 $11 = ((($7)) + 4|0);
 HEAPF32[$11>>2] = 0.0;
 $12 = ((($11)) + 4|0);
 $13 = $3;
 $14 = ((($13)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 HEAPF32[$12>>2] = $15;
 $16 = ((($12)) + 4|0);
 $17 = $3;
 $18 = ((($17)) + 4|0);
 $19 = +HEAPF32[$18>>2];
 HEAPF32[$16>>2] = $19;
 $20 = ((($16)) + 4|0);
 HEAPF32[$20>>2] = 0.0;
 $21 = ((($20)) + 4|0);
 $22 = $3;
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 HEAPF32[$21>>2] = $24;
 $25 = ((($21)) + 4|0);
 $26 = $3;
 $27 = ((($26)) + 12|0);
 $28 = +HEAPF32[$27>>2];
 HEAPF32[$25>>2] = $28;
 $29 = ((($25)) + 4|0);
 HEAPF32[$29>>2] = 0.0;
 $30 = ((($29)) + 4|0);
 $31 = $3;
 $32 = +HEAPF32[$31>>2];
 HEAPF32[$30>>2] = $32;
 $33 = ((($30)) + 4|0);
 $34 = $3;
 $35 = ((($34)) + 12|0);
 $36 = +HEAPF32[$35>>2];
 HEAPF32[$33>>2] = $36;
 $37 = ((($33)) + 4|0);
 HEAPF32[$37>>2] = 0.0;
 $38 = ((($37)) + 4|0);
 $39 = $3;
 $40 = +HEAPF32[$39>>2];
 HEAPF32[$38>>2] = $40;
 $41 = ((($38)) + 4|0);
 $42 = $3;
 $43 = ((($42)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 HEAPF32[$41>>2] = $44;
 $45 = ((($41)) + 4|0);
 HEAPF32[$45>>2] = 0.0;
 _glEnableVertexAttribArray(0);
 $46 = ((($4)) + 184|0);
 $47 = ((($46)) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 _glBindBuffer(34962,($48|0));
 $0 = $vertices;
 $49 = $0;
 _glBufferData(34962,60,($49|0),35044);
 _glVertexAttribPointer(0,3,5126,0,0,(0|0));
 $50 = ((($4)) + 56|0);
 $shader = $50;
 $51 = $shader;
 $52 = ((($51)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 _glUseProgram(($53|0));
 $54 = $2;
 $55 = ((($54)) + 140|0);
 $mvp = $55;
 $56 = $shader;
 $57 = ((($56)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 _glUniform3f(($58|0),1.0,1.0,1.0);
 $59 = $shader;
 $60 = ((($59)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $mvp;
 $63 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($62,0)|0);
 $64 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($63,0)|0);
 _glUniformMatrix4fv(($61|0),1,0,($64|0));
 _glDrawArrays(3,0,5);
 _glDisableVertexAttribArray(0);
 STACKTOP = sp;return;
}
function __ZN8Renderer4DrawERK6CameraRKNSt3__14listINS_9ParticlesENS3_9allocatorIS5_EEEE($this,$cam,$particles) {
 $this = $this|0;
 $cam = $cam|0;
 $particles = $particles|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__begin = 0, $__end = 0, $__range = 0;
 var $i = 0, $mvp = 0, $p = 0, $shader = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 164|0;
 $20 = sp + 156|0;
 $25 = sp + 136|0;
 $27 = sp + 128|0;
 $__begin = sp + 100|0;
 $__end = sp + 96|0;
 $mvp = sp + 24|0;
 $32 = sp + 8|0;
 $29 = $this;
 $30 = $cam;
 $31 = $particles;
 $35 = $29;
 _glEnableVertexAttribArray(0);
 $36 = HEAP32[5164>>2]|0;
 _glBindBuffer(34962,($36|0));
 _glVertexAttribPointer(0,3,5126,0,0,(0|0));
 $37 = ((($35)) + 56|0);
 $shader = $37;
 $38 = $shader;
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 _glUseProgram(($40|0));
 $41 = $31;
 $__range = $41;
 $42 = $__range;
 $28 = $42;
 $43 = $28;
 $26 = $43;
 $44 = $26;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $23 = $25;
 $24 = $46;
 $47 = $23;
 $48 = $24;
 HEAP32[$47>>2] = $48;
 $49 = HEAP32[$25>>2]|0;
 HEAP32[$27>>2] = $49;
 $50 = HEAP32[$27>>2]|0;
 HEAP32[$__begin>>2] = $50;
 $51 = $__range;
 $21 = $51;
 $52 = $21;
 $19 = $52;
 $53 = $19;
 $17 = $53;
 $54 = $17;
 $16 = $54;
 $55 = $16;
 $14 = $18;
 $15 = $55;
 $56 = $14;
 $57 = $15;
 HEAP32[$56>>2] = $57;
 $58 = HEAP32[$18>>2]|0;
 HEAP32[$20>>2] = $58;
 $59 = HEAP32[$20>>2]|0;
 HEAP32[$__end>>2] = $59;
 L1: while(1) {
  $12 = $__begin;
  $13 = $__end;
  $60 = $12;
  $61 = $13;
  $10 = $60;
  $11 = $61;
  $62 = $10;
  $63 = HEAP32[$62>>2]|0;
  $64 = $11;
  $65 = HEAP32[$64>>2]|0;
  $66 = ($63|0)==($65|0);
  $67 = $66 ^ 1;
  if (!($67)) {
   label = 12;
   break;
  }
  $9 = $__begin;
  $68 = $9;
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 8|0);
  $p = $70;
  $i = 0;
  while(1) {
   $71 = $i;
   $72 = $p;
   $73 = ((($72)) + 16|0);
   $8 = $73;
   $74 = ($71>>>0)<(100);
   if (!($74)) {
    break;
   }
   $75 = $shader;
   $76 = ((($75)) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $p;
   $79 = ((($78)) + 16|0);
   $80 = $i;
   $6 = $79;
   $7 = $80;
   $81 = $6;
   $82 = $7;
   $83 = (($81) + (($82*44)|0)|0);
   $84 = ((($83)) + 24|0);
   $85 = +HEAPF32[$84>>2];
   $86 = $p;
   $87 = ((($86)) + 16|0);
   $88 = $i;
   $4 = $87;
   $5 = $88;
   $89 = $4;
   $90 = $5;
   $91 = (($89) + (($90*44)|0)|0);
   $92 = ((($91)) + 24|0);
   $93 = ((($92)) + 4|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $p;
   $96 = ((($95)) + 16|0);
   $97 = $i;
   $0 = $96;
   $1 = $97;
   $98 = $0;
   $99 = $1;
   $100 = (($98) + (($99*44)|0)|0);
   $101 = ((($100)) + 24|0);
   $102 = ((($101)) + 8|0);
   $103 = +HEAPF32[$102>>2];
   _glUniform3f(($77|0),(+$85),(+$94),(+$103));
   $104 = $30;
   $105 = ((($104)) + 140|0);
   $106 = $p;
   $107 = $p;
   $108 = ((($107)) + 16|0);
   $109 = $i;
   $2 = $108;
   $3 = $109;
   $110 = $2;
   $111 = $3;
   $112 = (($110) + (($111*44)|0)|0);
   __ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($32,$106,$112);
   __ZN3glm9translateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_RKNS_5tvec3IS3_XT0_EEE($mvp,$105,$32);
   $113 = $shader;
   $114 = ((($113)) + 12|0);
   $115 = HEAP32[$114>>2]|0;
   __THREW__ = 0;
   $116 = (invoke_iii(456,($mvp|0),0)|0);
   $117 = __THREW__; __THREW__ = 0;
   $118 = $117&1;
   if ($118) {
    label = 10;
    break L1;
   }
   __THREW__ = 0;
   $119 = (invoke_iii(469,($116|0),0)|0);
   $120 = __THREW__; __THREW__ = 0;
   $121 = $120&1;
   if ($121) {
    label = 10;
    break L1;
   }
   __THREW__ = 0;
   invoke_viiii(470,($115|0),1,0,($119|0));
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 10;
    break L1;
   }
   $124 = HEAP32[5168>>2]|0;
   __THREW__ = 0;
   invoke_viii(472,4,0,($124|0));
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if ($126) {
    label = 10;
    break L1;
   }
   __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
   $127 = $i;
   $128 = (($127) + 1)|0;
   $i = $128;
  }
  $22 = $__begin;
  $133 = $22;
  $134 = HEAP32[$133>>2]|0;
  $135 = ((($134)) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  HEAP32[$133>>2] = $136;
 }
 if ((label|0) == 10) {
  $129 = ___cxa_find_matching_catch()|0;
  $130 = tempRet0;
  $33 = $129;
  $34 = $130;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
  $131 = $33;
  $132 = $34;
  ___resumeException($131|0);
  // unreachable;
 }
 else if ((label|0) == 12) {
  _glDisableVertexAttribArray(0);
  STACKTOP = sp;return;
 }
}
function __ZN8Renderer10PostRenderEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = (__ZN3glm6detail15component_countINS_5tvec4IfLNS_9precisionE0EEEEEiRKT_($2)|0);
  $7 = ($5|0)<($6|0);
  if ($7) {
   $8 = $1;
   $9 = (($2) + ($8<<2)|0);
   STACKTOP = sp;return ($9|0);
  }
 }
 ___assert_fail((16883|0),(17015|0),238,(16872|0));
 // unreachable;
 return (0)|0;
}
function __ZN8Renderer4DrawERK6CameraRKN5Asset5ModelEj($this,$cam,$model,$vbo_index) {
 $this = $this|0;
 $cam = $cam|0;
 $model = $model|0;
 $vbo_index = $vbo_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__begin = 0, $__begin2 = 0, $__end = 0, $__end3 = 0, $__range = 0, $__range1 = 0, $l = 0, $mvp = 0, $p = 0, $shader = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 284|0;
 $6 = sp + 272|0;
 $10 = sp + 256|0;
 $13 = sp + 244|0;
 $32 = sp + 168|0;
 $35 = sp + 156|0;
 $39 = sp + 140|0;
 $42 = sp + 128|0;
 $mvp = sp + 40|0;
 $__begin = sp + 24|0;
 $__end = sp + 20|0;
 $__begin2 = sp + 8|0;
 $__end3 = sp + 4|0;
 $44 = $this;
 $45 = $cam;
 $46 = $model;
 $47 = $vbo_index;
 $50 = $44;
 $51 = ((($50)) + 56|0);
 $shader = $51;
 $52 = $shader;
 $53 = ((($52)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 _glUseProgram(($54|0));
 _glEnableVertexAttribArray(0);
 $55 = $47;
 $56 = ((($50)) + 184|0);
 $57 = (($56) + ($55<<2)|0);
 $58 = HEAP32[$57>>2]|0;
 _glBindBuffer(34962,($58|0));
 _glVertexAttribPointer(0,3,5126,0,0,(0|0));
 $59 = $45;
 $60 = ((($59)) + 140|0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKS2_($mvp,$60);
 $61 = $shader;
 $62 = ((($61)) + 12|0);
 $63 = HEAP32[$62>>2]|0;
 __THREW__ = 0;
 $64 = (invoke_iii(456,($mvp|0),0)|0);
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 L1: do {
  if (!($66)) {
   __THREW__ = 0;
   $67 = (invoke_iii(469,($64|0),0)|0);
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if (!($69)) {
    __THREW__ = 0;
    invoke_viiii(470,($63|0),1,0,($67|0));
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if (!($71)) {
     $72 = $46;
     $73 = ((($72)) + 12|0);
     $__range = $73;
     $74 = $__range;
     $43 = $74;
     $75 = $43;
     $76 = HEAP32[$75>>2]|0;
     $40 = $75;
     $41 = $76;
     $77 = $41;
     $37 = $39;
     $38 = $77;
     $78 = $37;
     $79 = $38;
     HEAP32[$78>>2] = $79;
     $80 = HEAP32[$39>>2]|0;
     HEAP32[$42>>2] = $80;
     $81 = HEAP32[$42>>2]|0;
     HEAP32[$__begin>>2] = $81;
     $82 = $__range;
     $36 = $82;
     $83 = $36;
     $84 = ((($83)) + 4|0);
     $85 = HEAP32[$84>>2]|0;
     $33 = $83;
     $34 = $85;
     $86 = $34;
     $30 = $32;
     $31 = $86;
     $87 = $30;
     $88 = $31;
     HEAP32[$87>>2] = $88;
     $89 = HEAP32[$32>>2]|0;
     HEAP32[$35>>2] = $89;
     $90 = HEAP32[$35>>2]|0;
     HEAP32[$__end>>2] = $90;
     while(1) {
      $27 = $__begin;
      $28 = $__end;
      $91 = $27;
      $92 = $28;
      $25 = $91;
      $26 = $92;
      $93 = $25;
      $24 = $93;
      $94 = $24;
      $95 = HEAP32[$94>>2]|0;
      $96 = $26;
      $23 = $96;
      $97 = $23;
      $98 = HEAP32[$97>>2]|0;
      $99 = ($95|0)==($98|0);
      $100 = $99 ^ 1;
      if (!($100)) {
       break;
      }
      $0 = $__begin;
      $101 = $0;
      $102 = HEAP32[$101>>2]|0;
      $l = $102;
      $103 = $l;
      $104 = ((($103)) + 12|0);
      $__range1 = $104;
      $105 = $__range1;
      $7 = $105;
      $106 = $7;
      $107 = HEAP32[$106>>2]|0;
      $4 = $106;
      $5 = $107;
      $108 = $5;
      $1 = $3;
      $2 = $108;
      $109 = $1;
      $110 = $2;
      HEAP32[$109>>2] = $110;
      $111 = HEAP32[$3>>2]|0;
      HEAP32[$6>>2] = $111;
      $112 = HEAP32[$6>>2]|0;
      HEAP32[$__begin2>>2] = $112;
      $113 = $__range1;
      $14 = $113;
      $114 = $14;
      $115 = ((($114)) + 4|0);
      $116 = HEAP32[$115>>2]|0;
      $11 = $114;
      $12 = $116;
      $117 = $12;
      $8 = $10;
      $9 = $117;
      $118 = $8;
      $119 = $9;
      HEAP32[$118>>2] = $119;
      $120 = HEAP32[$10>>2]|0;
      HEAP32[$13>>2] = $120;
      $121 = HEAP32[$13>>2]|0;
      HEAP32[$__end3>>2] = $121;
      while(1) {
       $19 = $__begin2;
       $20 = $__end3;
       $122 = $19;
       $123 = $20;
       $17 = $122;
       $18 = $123;
       $124 = $17;
       $16 = $124;
       $125 = $16;
       $126 = HEAP32[$125>>2]|0;
       $127 = $18;
       $15 = $127;
       $128 = $15;
       $129 = HEAP32[$128>>2]|0;
       $130 = ($126|0)==($129|0);
       $131 = $130 ^ 1;
       if (!($131)) {
        break;
       }
       $21 = $__begin2;
       $132 = $21;
       $133 = HEAP32[$132>>2]|0;
       $p = $133;
       $134 = $shader;
       $135 = ((($134)) + 16|0);
       $136 = HEAP32[$135>>2]|0;
       $137 = $p;
       $138 = ((($137)) + 8|0);
       $139 = +HEAPF32[$138>>2];
       $140 = $p;
       $141 = ((($140)) + 8|0);
       $142 = ((($141)) + 4|0);
       $143 = +HEAPF32[$142>>2];
       $144 = $p;
       $145 = ((($144)) + 8|0);
       $146 = ((($145)) + 8|0);
       $147 = +HEAPF32[$146>>2];
       __THREW__ = 0;
       invoke_viddd(471,($136|0),(+$139),(+$143),(+$147));
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       }
       $150 = $p;
       $151 = HEAP32[$150>>2]|0;
       $152 = $p;
       $153 = ((($152)) + 4|0);
       $154 = HEAP32[$153>>2]|0;
       __THREW__ = 0;
       invoke_viii(472,4,($151|0),($154|0));
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        break L1;
       }
       $22 = $__begin2;
       $157 = $22;
       $158 = HEAP32[$157>>2]|0;
       $159 = ((($158)) + 20|0);
       HEAP32[$157>>2] = $159;
      }
      $29 = $__begin;
      $164 = $29;
      $165 = HEAP32[$164>>2]|0;
      $166 = ((($165)) + 40|0);
      HEAP32[$164>>2] = $166;
     }
     __THREW__ = 0;
     invoke_vi(474,0);
     $167 = __THREW__; __THREW__ = 0;
     $168 = $167&1;
     if (!($168)) {
      __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $160 = ___cxa_find_matching_catch()|0;
 $161 = tempRet0;
 $48 = $160;
 $49 = $161;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
 $162 = $48;
 $163 = $49;
 ___resumeException($162|0);
 // unreachable;
}
function __ZN3glm6rotateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S3_RKNS_5tvec3IS3_XT0_EEE($agg$result,$m,$angle,$v) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $angle = +$angle;
 $v = $v|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0;
 var $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0;
 var $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0.0, $30 = 0.0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0.0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Rotate = 0;
 var $a = 0.0, $axis = 0, $c = 0.0, $s = 0.0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $axis = sp + 336|0;
 $temp = sp + 324|0;
 $5 = sp + 320|0;
 $Rotate = sp + 256|0;
 $8 = sp + 380|0;
 $9 = sp + 232|0;
 $10 = sp + 216|0;
 $11 = sp + 200|0;
 $12 = sp + 184|0;
 $13 = sp + 168|0;
 $14 = sp + 152|0;
 $15 = sp + 136|0;
 $16 = sp + 120|0;
 $17 = sp + 104|0;
 $18 = sp + 88|0;
 $19 = sp + 72|0;
 $20 = sp + 56|0;
 $21 = sp + 40|0;
 $22 = sp + 24|0;
 $23 = sp + 8|0;
 $2 = $m;
 $3 = $angle;
 $4 = $v;
 $25 = $3;
 $a = $25;
 $26 = $a;
 $1 = $26;
 $27 = $1;
 $28 = (+Math_cos((+$27)));
 $c = $28;
 $29 = $a;
 $0 = $29;
 $30 = $0;
 $31 = (+Math_sin((+$30)));
 $s = $31;
 $32 = $4;
 __ZN3glm9normalizeIfLNS_9precisionE0ENS_5tvec3EEET1_IT_XT0_EERKS5_($axis,$32);
 $33 = $c;
 $34 = 1.0 - $33;
 HEAPF32[$5>>2] = $34;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS3_RKS4_($temp,$5,$axis);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ENS_4ctorE($Rotate,0);
 $35 = $c;
 __THREW__ = 0;
 $36 = (invoke_iii(481,($temp|0),0)|0);
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 do {
  if (!($38)) {
   $39 = +HEAPF32[$36>>2];
   __THREW__ = 0;
   $40 = (invoke_iii(481,($axis|0),0)|0);
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if (!($42)) {
    $43 = +HEAPF32[$40>>2];
    $44 = $39 * $43;
    $45 = $35 + $44;
    __THREW__ = 0;
    $46 = (invoke_iii(456,($Rotate|0),0)|0);
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if (!($48)) {
     __THREW__ = 0;
     $49 = (invoke_iii(469,($46|0),0)|0);
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if (!($51)) {
      HEAPF32[$49>>2] = $45;
      __THREW__ = 0;
      $52 = (invoke_iii(481,($temp|0),0)|0);
      $53 = __THREW__; __THREW__ = 0;
      $54 = $53&1;
      if (!($54)) {
       $55 = +HEAPF32[$52>>2];
       __THREW__ = 0;
       $56 = (invoke_iii(481,($axis|0),1)|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if (!($58)) {
        $59 = +HEAPF32[$56>>2];
        $60 = $55 * $59;
        $61 = 0.0 + $60;
        $62 = $s;
        __THREW__ = 0;
        $63 = (invoke_iii(481,($axis|0),2)|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if (!($65)) {
         $66 = +HEAPF32[$63>>2];
         $67 = $62 * $66;
         $68 = $61 + $67;
         __THREW__ = 0;
         $69 = (invoke_iii(456,($Rotate|0),0)|0);
         $70 = __THREW__; __THREW__ = 0;
         $71 = $70&1;
         if (!($71)) {
          __THREW__ = 0;
          $72 = (invoke_iii(469,($69|0),1)|0);
          $73 = __THREW__; __THREW__ = 0;
          $74 = $73&1;
          if (!($74)) {
           HEAPF32[$72>>2] = $68;
           __THREW__ = 0;
           $75 = (invoke_iii(481,($temp|0),0)|0);
           $76 = __THREW__; __THREW__ = 0;
           $77 = $76&1;
           if (!($77)) {
            $78 = +HEAPF32[$75>>2];
            __THREW__ = 0;
            $79 = (invoke_iii(481,($axis|0),2)|0);
            $80 = __THREW__; __THREW__ = 0;
            $81 = $80&1;
            if (!($81)) {
             $82 = +HEAPF32[$79>>2];
             $83 = $78 * $82;
             $84 = 0.0 + $83;
             $85 = $s;
             __THREW__ = 0;
             $86 = (invoke_iii(481,($axis|0),1)|0);
             $87 = __THREW__; __THREW__ = 0;
             $88 = $87&1;
             if (!($88)) {
              $89 = +HEAPF32[$86>>2];
              $90 = $85 * $89;
              $91 = $84 - $90;
              __THREW__ = 0;
              $92 = (invoke_iii(456,($Rotate|0),0)|0);
              $93 = __THREW__; __THREW__ = 0;
              $94 = $93&1;
              if (!($94)) {
               __THREW__ = 0;
               $95 = (invoke_iii(469,($92|0),2)|0);
               $96 = __THREW__; __THREW__ = 0;
               $97 = $96&1;
               if (!($97)) {
                HEAPF32[$95>>2] = $91;
                __THREW__ = 0;
                $98 = (invoke_iii(481,($temp|0),1)|0);
                $99 = __THREW__; __THREW__ = 0;
                $100 = $99&1;
                if (!($100)) {
                 $101 = +HEAPF32[$98>>2];
                 __THREW__ = 0;
                 $102 = (invoke_iii(481,($axis|0),0)|0);
                 $103 = __THREW__; __THREW__ = 0;
                 $104 = $103&1;
                 if (!($104)) {
                  $105 = +HEAPF32[$102>>2];
                  $106 = $101 * $105;
                  $107 = 0.0 + $106;
                  $108 = $s;
                  __THREW__ = 0;
                  $109 = (invoke_iii(481,($axis|0),2)|0);
                  $110 = __THREW__; __THREW__ = 0;
                  $111 = $110&1;
                  if (!($111)) {
                   $112 = +HEAPF32[$109>>2];
                   $113 = $108 * $112;
                   $114 = $107 - $113;
                   __THREW__ = 0;
                   $115 = (invoke_iii(456,($Rotate|0),1)|0);
                   $116 = __THREW__; __THREW__ = 0;
                   $117 = $116&1;
                   if (!($117)) {
                    __THREW__ = 0;
                    $118 = (invoke_iii(469,($115|0),0)|0);
                    $119 = __THREW__; __THREW__ = 0;
                    $120 = $119&1;
                    if (!($120)) {
                     HEAPF32[$118>>2] = $114;
                     $121 = $c;
                     __THREW__ = 0;
                     $122 = (invoke_iii(481,($temp|0),1)|0);
                     $123 = __THREW__; __THREW__ = 0;
                     $124 = $123&1;
                     if ($124) {
                      break;
                     }
                     $125 = +HEAPF32[$122>>2];
                     __THREW__ = 0;
                     $126 = (invoke_iii(481,($axis|0),1)|0);
                     $127 = __THREW__; __THREW__ = 0;
                     $128 = $127&1;
                     if ($128) {
                      break;
                     }
                     $129 = +HEAPF32[$126>>2];
                     $130 = $125 * $129;
                     $131 = $121 + $130;
                     __THREW__ = 0;
                     $132 = (invoke_iii(456,($Rotate|0),1)|0);
                     $133 = __THREW__; __THREW__ = 0;
                     $134 = $133&1;
                     if ($134) {
                      break;
                     }
                     __THREW__ = 0;
                     $135 = (invoke_iii(469,($132|0),1)|0);
                     $136 = __THREW__; __THREW__ = 0;
                     $137 = $136&1;
                     if ($137) {
                      break;
                     }
                     HEAPF32[$135>>2] = $131;
                     __THREW__ = 0;
                     $138 = (invoke_iii(481,($temp|0),1)|0);
                     $139 = __THREW__; __THREW__ = 0;
                     $140 = $139&1;
                     if ($140) {
                      break;
                     }
                     $141 = +HEAPF32[$138>>2];
                     __THREW__ = 0;
                     $142 = (invoke_iii(481,($axis|0),2)|0);
                     $143 = __THREW__; __THREW__ = 0;
                     $144 = $143&1;
                     if ($144) {
                      break;
                     }
                     $145 = +HEAPF32[$142>>2];
                     $146 = $141 * $145;
                     $147 = 0.0 + $146;
                     $148 = $s;
                     __THREW__ = 0;
                     $149 = (invoke_iii(481,($axis|0),0)|0);
                     $150 = __THREW__; __THREW__ = 0;
                     $151 = $150&1;
                     if ($151) {
                      break;
                     }
                     $152 = +HEAPF32[$149>>2];
                     $153 = $148 * $152;
                     $154 = $147 + $153;
                     __THREW__ = 0;
                     $155 = (invoke_iii(456,($Rotate|0),1)|0);
                     $156 = __THREW__; __THREW__ = 0;
                     $157 = $156&1;
                     if ($157) {
                      break;
                     }
                     __THREW__ = 0;
                     $158 = (invoke_iii(469,($155|0),2)|0);
                     $159 = __THREW__; __THREW__ = 0;
                     $160 = $159&1;
                     if ($160) {
                      break;
                     }
                     HEAPF32[$158>>2] = $154;
                     __THREW__ = 0;
                     $161 = (invoke_iii(481,($temp|0),2)|0);
                     $162 = __THREW__; __THREW__ = 0;
                     $163 = $162&1;
                     if ($163) {
                      break;
                     }
                     $164 = +HEAPF32[$161>>2];
                     __THREW__ = 0;
                     $165 = (invoke_iii(481,($axis|0),0)|0);
                     $166 = __THREW__; __THREW__ = 0;
                     $167 = $166&1;
                     if ($167) {
                      break;
                     }
                     $168 = +HEAPF32[$165>>2];
                     $169 = $164 * $168;
                     $170 = 0.0 + $169;
                     $171 = $s;
                     __THREW__ = 0;
                     $172 = (invoke_iii(481,($axis|0),1)|0);
                     $173 = __THREW__; __THREW__ = 0;
                     $174 = $173&1;
                     if ($174) {
                      break;
                     }
                     $175 = +HEAPF32[$172>>2];
                     $176 = $171 * $175;
                     $177 = $170 + $176;
                     __THREW__ = 0;
                     $178 = (invoke_iii(456,($Rotate|0),2)|0);
                     $179 = __THREW__; __THREW__ = 0;
                     $180 = $179&1;
                     if ($180) {
                      break;
                     }
                     __THREW__ = 0;
                     $181 = (invoke_iii(469,($178|0),0)|0);
                     $182 = __THREW__; __THREW__ = 0;
                     $183 = $182&1;
                     if ($183) {
                      break;
                     }
                     HEAPF32[$181>>2] = $177;
                     __THREW__ = 0;
                     $184 = (invoke_iii(481,($temp|0),2)|0);
                     $185 = __THREW__; __THREW__ = 0;
                     $186 = $185&1;
                     if ($186) {
                      break;
                     }
                     $187 = +HEAPF32[$184>>2];
                     __THREW__ = 0;
                     $188 = (invoke_iii(481,($axis|0),1)|0);
                     $189 = __THREW__; __THREW__ = 0;
                     $190 = $189&1;
                     if ($190) {
                      break;
                     }
                     $191 = +HEAPF32[$188>>2];
                     $192 = $187 * $191;
                     $193 = 0.0 + $192;
                     $194 = $s;
                     __THREW__ = 0;
                     $195 = (invoke_iii(481,($axis|0),0)|0);
                     $196 = __THREW__; __THREW__ = 0;
                     $197 = $196&1;
                     if ($197) {
                      break;
                     }
                     $198 = +HEAPF32[$195>>2];
                     $199 = $194 * $198;
                     $200 = $193 - $199;
                     __THREW__ = 0;
                     $201 = (invoke_iii(456,($Rotate|0),2)|0);
                     $202 = __THREW__; __THREW__ = 0;
                     $203 = $202&1;
                     if ($203) {
                      break;
                     }
                     __THREW__ = 0;
                     $204 = (invoke_iii(469,($201|0),1)|0);
                     $205 = __THREW__; __THREW__ = 0;
                     $206 = $205&1;
                     if ($206) {
                      break;
                     }
                     HEAPF32[$204>>2] = $200;
                     $207 = $c;
                     __THREW__ = 0;
                     $208 = (invoke_iii(481,($temp|0),2)|0);
                     $209 = __THREW__; __THREW__ = 0;
                     $210 = $209&1;
                     if ($210) {
                      break;
                     }
                     $211 = +HEAPF32[$208>>2];
                     __THREW__ = 0;
                     $212 = (invoke_iii(481,($axis|0),2)|0);
                     $213 = __THREW__; __THREW__ = 0;
                     $214 = $213&1;
                     if ($214) {
                      break;
                     }
                     $215 = +HEAPF32[$212>>2];
                     $216 = $211 * $215;
                     $217 = $207 + $216;
                     __THREW__ = 0;
                     $218 = (invoke_iii(456,($Rotate|0),2)|0);
                     $219 = __THREW__; __THREW__ = 0;
                     $220 = $219&1;
                     if ($220) {
                      break;
                     }
                     __THREW__ = 0;
                     $221 = (invoke_iii(469,($218|0),2)|0);
                     $222 = __THREW__; __THREW__ = 0;
                     $223 = $222&1;
                     if ($223) {
                      break;
                     }
                     HEAPF32[$221>>2] = $217;
                     $$expand_i1_val = 0;
                     HEAP8[$8>>0] = $$expand_i1_val;
                     __THREW__ = 0;
                     invoke_vii(465,($agg$result|0),0);
                     $224 = __THREW__; __THREW__ = 0;
                     $225 = $224&1;
                     if ($225) {
                      break;
                     }
                     __THREW__ = 0;
                     $226 = (invoke_iii(456,($agg$result|0),0)|0);
                     $227 = __THREW__; __THREW__ = 0;
                     $228 = $227&1;
                     L45: do {
                      if ($228) {
                       label = 97;
                      } else {
                       $229 = $2;
                       __THREW__ = 0;
                       $230 = (invoke_iii(457,($229|0),0)|0);
                       $231 = __THREW__; __THREW__ = 0;
                       $232 = $231&1;
                       if ($232) {
                        label = 97;
                        break;
                       }
                       __THREW__ = 0;
                       $233 = (invoke_iii(456,($Rotate|0),0)|0);
                       $234 = __THREW__; __THREW__ = 0;
                       $235 = $234&1;
                       if ($235) {
                        label = 97;
                        break;
                       }
                       __THREW__ = 0;
                       $236 = (invoke_iii(469,($233|0),0)|0);
                       $237 = __THREW__; __THREW__ = 0;
                       $238 = $237&1;
                       if ($238) {
                        label = 97;
                        break;
                       }
                       $239 = +HEAPF32[$236>>2];
                       __THREW__ = 0;
                       invoke_viid(459,($11|0),($230|0),(+$239));
                       $240 = __THREW__; __THREW__ = 0;
                       $241 = $240&1;
                       if ($241) {
                        label = 97;
                        break;
                       }
                       $242 = $2;
                       __THREW__ = 0;
                       $243 = (invoke_iii(457,($242|0),1)|0);
                       $244 = __THREW__; __THREW__ = 0;
                       $245 = $244&1;
                       do {
                        if ($245) {
                         label = 98;
                        } else {
                         __THREW__ = 0;
                         $246 = (invoke_iii(456,($Rotate|0),0)|0);
                         $247 = __THREW__; __THREW__ = 0;
                         $248 = $247&1;
                         if ($248) {
                          label = 98;
                          break;
                         }
                         __THREW__ = 0;
                         $249 = (invoke_iii(469,($246|0),1)|0);
                         $250 = __THREW__; __THREW__ = 0;
                         $251 = $250&1;
                         if ($251) {
                          label = 98;
                          break;
                         }
                         $252 = +HEAPF32[$249>>2];
                         __THREW__ = 0;
                         invoke_viid(459,($12|0),($243|0),(+$252));
                         $253 = __THREW__; __THREW__ = 0;
                         $254 = $253&1;
                         if ($254) {
                          label = 98;
                          break;
                         }
                         __THREW__ = 0;
                         invoke_viii(460,($10|0),($11|0),($12|0));
                         $255 = __THREW__; __THREW__ = 0;
                         $256 = $255&1;
                         if ($256) {
                          $386 = ___cxa_find_matching_catch()|0;
                          $387 = tempRet0;
                          $6 = $386;
                          $7 = $387;
                         } else {
                          $257 = $2;
                          __THREW__ = 0;
                          $258 = (invoke_iii(457,($257|0),2)|0);
                          $259 = __THREW__; __THREW__ = 0;
                          $260 = $259&1;
                          do {
                           if ($260) {
                            label = 100;
                           } else {
                            __THREW__ = 0;
                            $261 = (invoke_iii(456,($Rotate|0),0)|0);
                            $262 = __THREW__; __THREW__ = 0;
                            $263 = $262&1;
                            if ($263) {
                             label = 100;
                             break;
                            }
                            __THREW__ = 0;
                            $264 = (invoke_iii(469,($261|0),2)|0);
                            $265 = __THREW__; __THREW__ = 0;
                            $266 = $265&1;
                            if ($266) {
                             label = 100;
                             break;
                            }
                            $267 = +HEAPF32[$264>>2];
                            __THREW__ = 0;
                            invoke_viid(459,($13|0),($258|0),(+$267));
                            $268 = __THREW__; __THREW__ = 0;
                            $269 = $268&1;
                            if ($269) {
                             label = 100;
                             break;
                            }
                            __THREW__ = 0;
                            invoke_viii(460,($9|0),($10|0),($13|0));
                            $270 = __THREW__; __THREW__ = 0;
                            $271 = $270&1;
                            do {
                             if ($271) {
                              $390 = ___cxa_find_matching_catch()|0;
                              $391 = tempRet0;
                              $6 = $390;
                              $7 = $391;
                             } else {
                              __THREW__ = 0;
                              (invoke_iii(461,($226|0),($9|0))|0);
                              $272 = __THREW__; __THREW__ = 0;
                              $273 = $272&1;
                              if ($273) {
                               $392 = ___cxa_find_matching_catch()|0;
                               $393 = tempRet0;
                               $6 = $392;
                               $7 = $393;
                               __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($9);
                               break;
                              }
                              __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($9);
                              __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($13);
                              __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($10);
                              __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($12);
                              __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($11);
                              __THREW__ = 0;
                              $274 = (invoke_iii(456,($agg$result|0),1)|0);
                              $275 = __THREW__; __THREW__ = 0;
                              $276 = $275&1;
                              if ($276) {
                               label = 97;
                               break L45;
                              }
                              $277 = $2;
                              __THREW__ = 0;
                              $278 = (invoke_iii(457,($277|0),0)|0);
                              $279 = __THREW__; __THREW__ = 0;
                              $280 = $279&1;
                              if ($280) {
                               label = 97;
                               break L45;
                              }
                              __THREW__ = 0;
                              $281 = (invoke_iii(456,($Rotate|0),1)|0);
                              $282 = __THREW__; __THREW__ = 0;
                              $283 = $282&1;
                              if ($283) {
                               label = 97;
                               break L45;
                              }
                              __THREW__ = 0;
                              $284 = (invoke_iii(469,($281|0),0)|0);
                              $285 = __THREW__; __THREW__ = 0;
                              $286 = $285&1;
                              if ($286) {
                               label = 97;
                               break L45;
                              }
                              $287 = +HEAPF32[$284>>2];
                              __THREW__ = 0;
                              invoke_viid(459,($16|0),($278|0),(+$287));
                              $288 = __THREW__; __THREW__ = 0;
                              $289 = $288&1;
                              if ($289) {
                               label = 97;
                               break L45;
                              }
                              $290 = $2;
                              __THREW__ = 0;
                              $291 = (invoke_iii(457,($290|0),1)|0);
                              $292 = __THREW__; __THREW__ = 0;
                              $293 = $292&1;
                              do {
                               if ($293) {
                                label = 107;
                               } else {
                                __THREW__ = 0;
                                $294 = (invoke_iii(456,($Rotate|0),1)|0);
                                $295 = __THREW__; __THREW__ = 0;
                                $296 = $295&1;
                                if ($296) {
                                 label = 107;
                                 break;
                                }
                                __THREW__ = 0;
                                $297 = (invoke_iii(469,($294|0),1)|0);
                                $298 = __THREW__; __THREW__ = 0;
                                $299 = $298&1;
                                if ($299) {
                                 label = 107;
                                 break;
                                }
                                $300 = +HEAPF32[$297>>2];
                                __THREW__ = 0;
                                invoke_viid(459,($17|0),($291|0),(+$300));
                                $301 = __THREW__; __THREW__ = 0;
                                $302 = $301&1;
                                if ($302) {
                                 label = 107;
                                 break;
                                }
                                __THREW__ = 0;
                                invoke_viii(460,($15|0),($16|0),($17|0));
                                $303 = __THREW__; __THREW__ = 0;
                                $304 = $303&1;
                                if ($304) {
                                 $396 = ___cxa_find_matching_catch()|0;
                                 $397 = tempRet0;
                                 $6 = $396;
                                 $7 = $397;
                                } else {
                                 $305 = $2;
                                 __THREW__ = 0;
                                 $306 = (invoke_iii(457,($305|0),2)|0);
                                 $307 = __THREW__; __THREW__ = 0;
                                 $308 = $307&1;
                                 do {
                                  if ($308) {
                                   label = 109;
                                  } else {
                                   __THREW__ = 0;
                                   $309 = (invoke_iii(456,($Rotate|0),1)|0);
                                   $310 = __THREW__; __THREW__ = 0;
                                   $311 = $310&1;
                                   if ($311) {
                                    label = 109;
                                    break;
                                   }
                                   __THREW__ = 0;
                                   $312 = (invoke_iii(469,($309|0),2)|0);
                                   $313 = __THREW__; __THREW__ = 0;
                                   $314 = $313&1;
                                   if ($314) {
                                    label = 109;
                                    break;
                                   }
                                   $315 = +HEAPF32[$312>>2];
                                   __THREW__ = 0;
                                   invoke_viid(459,($18|0),($306|0),(+$315));
                                   $316 = __THREW__; __THREW__ = 0;
                                   $317 = $316&1;
                                   if ($317) {
                                    label = 109;
                                    break;
                                   }
                                   __THREW__ = 0;
                                   invoke_viii(460,($14|0),($15|0),($18|0));
                                   $318 = __THREW__; __THREW__ = 0;
                                   $319 = $318&1;
                                   do {
                                    if ($319) {
                                     $400 = ___cxa_find_matching_catch()|0;
                                     $401 = tempRet0;
                                     $6 = $400;
                                     $7 = $401;
                                    } else {
                                     __THREW__ = 0;
                                     (invoke_iii(461,($274|0),($14|0))|0);
                                     $320 = __THREW__; __THREW__ = 0;
                                     $321 = $320&1;
                                     if ($321) {
                                      $402 = ___cxa_find_matching_catch()|0;
                                      $403 = tempRet0;
                                      $6 = $402;
                                      $7 = $403;
                                      __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($14);
                                      break;
                                     }
                                     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($14);
                                     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($18);
                                     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($15);
                                     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($17);
                                     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($16);
                                     __THREW__ = 0;
                                     $322 = (invoke_iii(456,($agg$result|0),2)|0);
                                     $323 = __THREW__; __THREW__ = 0;
                                     $324 = $323&1;
                                     if ($324) {
                                      label = 97;
                                      break L45;
                                     }
                                     $325 = $2;
                                     __THREW__ = 0;
                                     $326 = (invoke_iii(457,($325|0),0)|0);
                                     $327 = __THREW__; __THREW__ = 0;
                                     $328 = $327&1;
                                     if ($328) {
                                      label = 97;
                                      break L45;
                                     }
                                     __THREW__ = 0;
                                     $329 = (invoke_iii(456,($Rotate|0),2)|0);
                                     $330 = __THREW__; __THREW__ = 0;
                                     $331 = $330&1;
                                     if ($331) {
                                      label = 97;
                                      break L45;
                                     }
                                     __THREW__ = 0;
                                     $332 = (invoke_iii(469,($329|0),0)|0);
                                     $333 = __THREW__; __THREW__ = 0;
                                     $334 = $333&1;
                                     if ($334) {
                                      label = 97;
                                      break L45;
                                     }
                                     $335 = +HEAPF32[$332>>2];
                                     __THREW__ = 0;
                                     invoke_viid(459,($21|0),($326|0),(+$335));
                                     $336 = __THREW__; __THREW__ = 0;
                                     $337 = $336&1;
                                     if ($337) {
                                      label = 97;
                                      break L45;
                                     }
                                     $338 = $2;
                                     __THREW__ = 0;
                                     $339 = (invoke_iii(457,($338|0),1)|0);
                                     $340 = __THREW__; __THREW__ = 0;
                                     $341 = $340&1;
                                     do {
                                      if ($341) {
                                       label = 116;
                                      } else {
                                       __THREW__ = 0;
                                       $342 = (invoke_iii(456,($Rotate|0),2)|0);
                                       $343 = __THREW__; __THREW__ = 0;
                                       $344 = $343&1;
                                       if ($344) {
                                        label = 116;
                                        break;
                                       }
                                       __THREW__ = 0;
                                       $345 = (invoke_iii(469,($342|0),1)|0);
                                       $346 = __THREW__; __THREW__ = 0;
                                       $347 = $346&1;
                                       if ($347) {
                                        label = 116;
                                        break;
                                       }
                                       $348 = +HEAPF32[$345>>2];
                                       __THREW__ = 0;
                                       invoke_viid(459,($22|0),($339|0),(+$348));
                                       $349 = __THREW__; __THREW__ = 0;
                                       $350 = $349&1;
                                       if ($350) {
                                        label = 116;
                                        break;
                                       }
                                       __THREW__ = 0;
                                       invoke_viii(460,($20|0),($21|0),($22|0));
                                       $351 = __THREW__; __THREW__ = 0;
                                       $352 = $351&1;
                                       if ($352) {
                                        $406 = ___cxa_find_matching_catch()|0;
                                        $407 = tempRet0;
                                        $6 = $406;
                                        $7 = $407;
                                       } else {
                                        $353 = $2;
                                        __THREW__ = 0;
                                        $354 = (invoke_iii(457,($353|0),2)|0);
                                        $355 = __THREW__; __THREW__ = 0;
                                        $356 = $355&1;
                                        do {
                                         if ($356) {
                                          label = 118;
                                         } else {
                                          __THREW__ = 0;
                                          $357 = (invoke_iii(456,($Rotate|0),2)|0);
                                          $358 = __THREW__; __THREW__ = 0;
                                          $359 = $358&1;
                                          if ($359) {
                                           label = 118;
                                           break;
                                          }
                                          __THREW__ = 0;
                                          $360 = (invoke_iii(469,($357|0),2)|0);
                                          $361 = __THREW__; __THREW__ = 0;
                                          $362 = $361&1;
                                          if ($362) {
                                           label = 118;
                                           break;
                                          }
                                          $363 = +HEAPF32[$360>>2];
                                          __THREW__ = 0;
                                          invoke_viid(459,($23|0),($354|0),(+$363));
                                          $364 = __THREW__; __THREW__ = 0;
                                          $365 = $364&1;
                                          if ($365) {
                                           label = 118;
                                           break;
                                          }
                                          __THREW__ = 0;
                                          invoke_viii(460,($19|0),($20|0),($23|0));
                                          $366 = __THREW__; __THREW__ = 0;
                                          $367 = $366&1;
                                          do {
                                           if ($367) {
                                            $410 = ___cxa_find_matching_catch()|0;
                                            $411 = tempRet0;
                                            $6 = $410;
                                            $7 = $411;
                                           } else {
                                            __THREW__ = 0;
                                            (invoke_iii(461,($322|0),($19|0))|0);
                                            $368 = __THREW__; __THREW__ = 0;
                                            $369 = $368&1;
                                            if ($369) {
                                             $412 = ___cxa_find_matching_catch()|0;
                                             $413 = tempRet0;
                                             $6 = $412;
                                             $7 = $413;
                                             __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($19);
                                             break;
                                            }
                                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($19);
                                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($23);
                                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($20);
                                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($22);
                                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($21);
                                            __THREW__ = 0;
                                            $370 = (invoke_iii(456,($agg$result|0),3)|0);
                                            $371 = __THREW__; __THREW__ = 0;
                                            $372 = $371&1;
                                            if ($372) {
                                             label = 97;
                                             break L45;
                                            }
                                            $373 = $2;
                                            __THREW__ = 0;
                                            $374 = (invoke_iii(457,($373|0),3)|0);
                                            $375 = __THREW__; __THREW__ = 0;
                                            $376 = $375&1;
                                            if ($376) {
                                             label = 97;
                                             break L45;
                                            }
                                            __THREW__ = 0;
                                            (invoke_iii(461,($370|0),($374|0))|0);
                                            $377 = __THREW__; __THREW__ = 0;
                                            $378 = $377&1;
                                            if ($378) {
                                             label = 97;
                                             break L45;
                                            }
                                            $$expand_i1_val2 = 1;
                                            HEAP8[$8>>0] = $$expand_i1_val2;
                                            $24 = 1;
                                            $$pre_trunc = HEAP8[$8>>0]|0;
                                            $379 = $$pre_trunc&1;
                                            if ($379) {
                                             __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($Rotate);
                                             STACKTOP = sp;return;
                                            }
                                            __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($agg$result);
                                            __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($Rotate);
                                            STACKTOP = sp;return;
                                           }
                                          } while(0);
                                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($23);
                                         }
                                        } while(0);
                                        if ((label|0) == 118) {
                                         $408 = ___cxa_find_matching_catch()|0;
                                         $409 = tempRet0;
                                         $6 = $408;
                                         $7 = $409;
                                        }
                                        __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($20);
                                       }
                                       __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($22);
                                      }
                                     } while(0);
                                     if ((label|0) == 116) {
                                      $404 = ___cxa_find_matching_catch()|0;
                                      $405 = tempRet0;
                                      $6 = $404;
                                      $7 = $405;
                                     }
                                     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($21);
                                     break L45;
                                    }
                                   } while(0);
                                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($18);
                                  }
                                 } while(0);
                                 if ((label|0) == 109) {
                                  $398 = ___cxa_find_matching_catch()|0;
                                  $399 = tempRet0;
                                  $6 = $398;
                                  $7 = $399;
                                 }
                                 __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($15);
                                }
                                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($17);
                               }
                              } while(0);
                              if ((label|0) == 107) {
                               $394 = ___cxa_find_matching_catch()|0;
                               $395 = tempRet0;
                               $6 = $394;
                               $7 = $395;
                              }
                              __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($16);
                              break L45;
                             }
                            } while(0);
                            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($13);
                           }
                          } while(0);
                          if ((label|0) == 100) {
                           $388 = ___cxa_find_matching_catch()|0;
                           $389 = tempRet0;
                           $6 = $388;
                           $7 = $389;
                          }
                          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($10);
                         }
                         __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($12);
                        }
                       } while(0);
                       if ((label|0) == 98) {
                        $384 = ___cxa_find_matching_catch()|0;
                        $385 = tempRet0;
                        $6 = $384;
                        $7 = $385;
                       }
                       __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($11);
                      }
                     } while(0);
                     if ((label|0) == 97) {
                      $382 = ___cxa_find_matching_catch()|0;
                      $383 = tempRet0;
                      $6 = $382;
                      $7 = $383;
                     }
                     __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($agg$result);
                     __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($Rotate);
                     $414 = $6;
                     $415 = $7;
                     ___resumeException($414|0);
                     // unreachable;
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $380 = ___cxa_find_matching_catch()|0;
 $381 = tempRet0;
 $6 = $380;
 $7 = $381;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($Rotate);
 $414 = $6;
 $415 = $7;
 ___resumeException($414|0);
 // unreachable;
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EEmLIfEERS2_RKNS0_IT_LS1_0EEE($this,$m) {
 $this = $this|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $this;
 $1 = $m;
 $5 = $0;
 $6 = $1;
 __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($2,$5,$6);
 __THREW__ = 0;
 $7 = (invoke_iii(453,($5|0),($2|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $3 = $10;
  $4 = $11;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($2);
  $12 = $3;
  $13 = $4;
  ___resumeException($12|0);
  // unreachable;
 } else {
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($2);
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN3glm9normalizeIfLNS_9precisionE0ENS_5tvec3EEET1_IT_XT0_EERKS5_($agg$result,$x) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $x;
 $2 = $0;
 $3 = $0;
 $4 = $0;
 $5 = (+__ZN3glm3dotIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EES7_($3,$4));
 $6 = (+__ZN3glm11inversesqrtIfEET_S1_($5));
 HEAPF32[$1>>2] = $6;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_($agg$result,$2,$1);
 STACKTOP = sp;return;
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS3_RKS4_($agg$result,$s,$v) {
 $agg$result = $agg$result|0;
 $s = $s|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $s;
 $1 = $v;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 HEAPF32[$2>>2] = $9;
 $10 = $0;
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = ((($12)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 * $14;
 HEAPF32[$3>>2] = $15;
 $16 = $0;
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 HEAPF32[$4>>2] = $21;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZN3glm5tvec3IfLNS_9precisionE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = (__ZN3glm6detail15component_countINS_5tvec3IfLNS_9precisionE0EEEEEiRKT_($2)|0);
  $7 = ($5|0)<($6|0);
  if ($7) {
   $8 = $1;
   $9 = (($2) + ($8<<2)|0);
   STACKTOP = sp;return ($9|0);
  }
 }
 ___assert_fail((16883|0),(16968|0),176,(16872|0));
 // unreachable;
 return (0)|0;
}
function __ZN3glm11inversesqrtIfEET_S1_($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = (+Math_sqrt((+$3)));
 $5 = 1.0 / $4;
 STACKTOP = sp;return (+$5);
}
function __ZN3glmngIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_($agg$result,$v) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 $0 = $v;
 $4 = $0;
 $5 = +HEAPF32[$4>>2];
 $6 = -$5;
 HEAPF32[$1>>2] = $6;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = -$9;
 HEAPF32[$2>>2] = $10;
 $11 = $0;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF32[$12>>2];
 $14 = -$13;
 HEAPF32[$3>>2] = $14;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($agg$result,$1,$2,$3);
 STACKTOP = sp;return;
}
function __ZN8Renderer4DrawERK6CameraRK6ProtoXRKNS3_10PropulsionE($this,$cam,$proto,$prop) {
 $this = $this|0;
 $cam = $cam|0;
 $proto = $proto|0;
 $prop = $prop|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__begin = 0, $__end = 0, $__range = 0, $frame_count = 0, $layer = 0, $m = 0, $model = 0, $mvp = 0;
 var $p = 0, $shader = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 412|0;
 $13 = sp + 400|0;
 $17 = sp + 384|0;
 $20 = sp + 372|0;
 $m = sp + 264|0;
 $29 = sp + 200|0;
 $30 = sp + 184|0;
 $33 = sp + 112|0;
 $34 = sp + 100|0;
 $35 = sp + 96|0;
 $36 = sp + 92|0;
 $37 = sp + 88|0;
 $mvp = sp + 24|0;
 $__begin = sp + 8|0;
 $__end = sp + 4|0;
 $25 = $this;
 $26 = $cam;
 $27 = $proto;
 $28 = $prop;
 $38 = $25;
 $39 = ((($38)) + 56|0);
 $shader = $39;
 $40 = $shader;
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 _glUseProgram(($42|0));
 $43 = ((($38)) + 184|0);
 $44 = ((($43)) + 28|0);
 $45 = HEAP32[$44>>2]|0;
 _glBindBuffer(34962,($45|0));
 _glVertexAttribPointer(0,3,5126,0,0,(0|0));
 $46 = HEAP32[$38>>2]|0;
 $47 = ((($46)) + 64|0);
 $48 = ((($47)) + 12|0);
 $24 = $48;
 $49 = $24;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 40)&-1;
 $frame_count = $56;
 $57 = HEAP32[$38>>2]|0;
 $58 = ((($57)) + 64|0);
 $model = $58;
 $59 = $28;
 $60 = ((($59)) + 20|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&1;
 if (!($62)) {
  STACKTOP = sp;return;
 }
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2Ev($29);
 $63 = $27;
 $64 = ((($63)) + 44|0);
 $65 = $28;
 __THREW__ = 0;
 invoke_viii(479,($30|0),($64|0),($65|0));
 $66 = __THREW__; __THREW__ = 0;
 $67 = $66&1;
 if (!($67)) {
  __THREW__ = 0;
  invoke_viii(452,($m|0),($29|0),($30|0));
  $68 = __THREW__; __THREW__ = 0;
  $69 = $68&1;
  if (!($69)) {
   __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($29);
   $70 = $28;
   $71 = ((($70)) + 12|0);
   $72 = +HEAPF32[$71>>2];
   HEAPF32[$35>>2] = 0.0;
   HEAPF32[$36>>2] = 0.0;
   HEAPF32[$37>>2] = 1.0;
   __THREW__ = 0;
   invoke_viiii(405,($34|0),($35|0),($36|0),($37|0));
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   do {
    if ($74) {
     label = 17;
    } else {
     __THREW__ = 0;
     invoke_viidi(476,($33|0),($m|0),(+$72),($34|0));
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     if ($76) {
      label = 17;
     } else {
      __THREW__ = 0;
      (invoke_iii(453,($m|0),($33|0))|0);
      $77 = __THREW__; __THREW__ = 0;
      $78 = $77&1;
      if ($78) {
       $166 = ___cxa_find_matching_catch()|0;
       $167 = tempRet0;
       $31 = $166;
       $32 = $167;
       __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($33);
       break;
      }
      __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($33);
      $79 = $26;
      $80 = ((($79)) + 140|0);
      __THREW__ = 0;
      invoke_viii(477,($mvp|0),($80|0),($m|0));
      $81 = __THREW__; __THREW__ = 0;
      $82 = $81&1;
      if ($82) {
       label = 17;
      } else {
       $83 = ((($38)) + 56|0);
       $84 = ((($83)) + 12|0);
       $85 = HEAP32[$84>>2]|0;
       __THREW__ = 0;
       $86 = (invoke_iii(456,($mvp|0),0)|0);
       $87 = __THREW__; __THREW__ = 0;
       $88 = $87&1;
       L14: do {
        if (!($88)) {
         __THREW__ = 0;
         $89 = (invoke_iii(469,($86|0),0)|0);
         $90 = __THREW__; __THREW__ = 0;
         $91 = $90&1;
         if (!($91)) {
          __THREW__ = 0;
          invoke_viiii(470,($85|0),1,0,($89|0));
          $92 = __THREW__; __THREW__ = 0;
          $93 = $92&1;
          if (!($93)) {
           $94 = HEAP32[$38>>2]|0;
           $95 = ((($94)) + 64|0);
           $96 = ((($95)) + 12|0);
           $97 = $27;
           $98 = ((($97)) + 96|0);
           $99 = ((($98)) + 40|0);
           $100 = HEAP32[$99>>2]|0;
           $22 = $96;
           $23 = $100;
           $101 = $22;
           $102 = $23;
           $103 = HEAP32[$101>>2]|0;
           $104 = (($103) + (($102*40)|0)|0);
           $layer = $104;
           $105 = $layer;
           $106 = ((($105)) + 12|0);
           $__range = $106;
           $107 = $__range;
           $21 = $107;
           $108 = $21;
           $109 = HEAP32[$108>>2]|0;
           $18 = $108;
           $19 = $109;
           $110 = $19;
           $15 = $17;
           $16 = $110;
           $111 = $15;
           $112 = $16;
           HEAP32[$111>>2] = $112;
           $113 = HEAP32[$17>>2]|0;
           HEAP32[$20>>2] = $113;
           $114 = HEAP32[$20>>2]|0;
           HEAP32[$__begin>>2] = $114;
           $115 = $__range;
           $14 = $115;
           $116 = $14;
           $117 = ((($116)) + 4|0);
           $118 = HEAP32[$117>>2]|0;
           $11 = $116;
           $12 = $118;
           $119 = $12;
           $8 = $10;
           $9 = $119;
           $120 = $8;
           $121 = $9;
           HEAP32[$120>>2] = $121;
           $122 = HEAP32[$10>>2]|0;
           HEAP32[$13>>2] = $122;
           $123 = HEAP32[$13>>2]|0;
           HEAP32[$__end>>2] = $123;
           while(1) {
            $6 = $__begin;
            $7 = $__end;
            $124 = $6;
            $125 = $7;
            $4 = $124;
            $5 = $125;
            $126 = $4;
            $3 = $126;
            $127 = $3;
            $128 = HEAP32[$127>>2]|0;
            $129 = $5;
            $2 = $129;
            $130 = $2;
            $131 = HEAP32[$130>>2]|0;
            $132 = ($128|0)==($131|0);
            $133 = $132 ^ 1;
            if (!($133)) {
             break;
            }
            $1 = $__begin;
            $134 = $1;
            $135 = HEAP32[$134>>2]|0;
            $p = $135;
            $136 = $shader;
            $137 = ((($136)) + 16|0);
            $138 = HEAP32[$137>>2]|0;
            $139 = $p;
            $140 = ((($139)) + 8|0);
            $141 = +HEAPF32[$140>>2];
            $142 = $p;
            $143 = ((($142)) + 8|0);
            $144 = ((($143)) + 4|0);
            $145 = +HEAPF32[$144>>2];
            $146 = $p;
            $147 = ((($146)) + 8|0);
            $148 = ((($147)) + 8|0);
            $149 = +HEAPF32[$148>>2];
            __THREW__ = 0;
            invoke_viddd(471,($138|0),(+$141),(+$145),(+$149));
            $150 = __THREW__; __THREW__ = 0;
            $151 = $150&1;
            if ($151) {
             break L14;
            }
            $152 = $p;
            $153 = HEAP32[$152>>2]|0;
            $154 = $p;
            $155 = ((($154)) + 4|0);
            $156 = HEAP32[$155>>2]|0;
            __THREW__ = 0;
            invoke_viii(472,4,($153|0),($156|0));
            $157 = __THREW__; __THREW__ = 0;
            $158 = $157&1;
            if ($158) {
             break L14;
            }
            $0 = $__begin;
            $159 = $0;
            $160 = HEAP32[$159>>2]|0;
            $161 = ((($160)) + 20|0);
            HEAP32[$159>>2] = $161;
           }
           __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
           __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($m);
           STACKTOP = sp;return;
          }
         }
        }
       } while(0);
       $168 = ___cxa_find_matching_catch()|0;
       $169 = tempRet0;
       $31 = $168;
       $32 = $169;
       __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
      }
     }
    }
   } while(0);
   if ((label|0) == 17) {
    $164 = ___cxa_find_matching_catch()|0;
    $165 = tempRet0;
    $31 = $164;
    $32 = $165;
   }
   __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($m);
   $170 = $31;
   $171 = $32;
   ___resumeException($170|0);
   // unreachable;
  }
 }
 $162 = ___cxa_find_matching_catch()|0;
 $163 = tempRet0;
 $31 = $162;
 $32 = $163;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($29);
 $170 = $31;
 $171 = $32;
 ___resumeException($170|0);
 // unreachable;
}
function __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKfS4_($this,$s1,$s2) {
 $this = $this|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s1;
 $2 = $s2;
 $3 = $0;
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 HEAPF32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = $2;
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN5SceneD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 1116|0);
 __THREW__ = 0;
 invoke_vii(482,1,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = ((($3)) + 1120|0);
  __THREW__ = 0;
  invoke_vii(482,1,($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = ((($3)) + 1124|0);
   __THREW__ = 0;
   invoke_vii(483,1,($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    $13 = ((($3)) + 1132|0);
    __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($13);
    $14 = ((($3)) + 872|0);
    __ZN6CameraD2Ev($14);
    $15 = ((($3)) + 796|0);
    __ZN6ObjectD2Ev($15);
    $16 = ((($3)) + 784|0);
    __ZNSt3__14listIN8Renderer9ParticlesENS_9allocatorIS2_EEED2Ev($16);
    $17 = ((($3)) + 772|0);
    __ZNSt3__16vectorI6ProtoXNS_9allocatorIS1_EEED2Ev($17);
    $18 = ((($3)) + 760|0);
    __ZNSt3__16vectorI7MissileNS_9allocatorIS1_EEED2Ev($18);
    $19 = ((($3)) + 272|0);
    __ZN8RendererD2Ev($19);
    $20 = ((($3)) + 236|0);
    __ZN6Shader6SimpleD2Ev($20);
    __ZN5Asset6AssetsD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 }
 $21 = ___cxa_find_matching_catch(0|0)|0;
 $22 = tempRet0;
 $1 = $21;
 $2 = $22;
 $23 = ((($3)) + 1132|0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($23);
 $24 = ((($3)) + 872|0);
 __ZN6CameraD2Ev($24);
 $25 = ((($3)) + 796|0);
 __ZN6ObjectD2Ev($25);
 $26 = ((($3)) + 784|0);
 __ZNSt3__14listIN8Renderer9ParticlesENS_9allocatorIS2_EEED2Ev($26);
 $27 = ((($3)) + 772|0);
 __ZNSt3__16vectorI6ProtoXNS_9allocatorIS1_EEED2Ev($27);
 $28 = ((($3)) + 760|0);
 __ZNSt3__16vectorI7MissileNS_9allocatorIS1_EEED2Ev($28);
 $29 = ((($3)) + 272|0);
 __ZN8RendererD2Ev($29);
 $30 = ((($3)) + 236|0);
 __ZN6Shader6SimpleD2Ev($30);
 __ZN5Asset6AssetsD2Ev($3);
 $31 = $1;
 ___clang_call_terminate($31);
 // unreachable;
}
function __ZN6CameraD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 140|0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($2);
 $3 = ((($1)) + 76|0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($3);
 $4 = ((($1)) + 12|0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($4);
 STACKTOP = sp;return;
}
function __ZN6ObjectD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__14listIN8Renderer9ParticlesENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__110__list_impIN8Renderer9ParticlesENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6ProtoXNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI6ProtoXNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI7MissileNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI7MissileNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8RendererD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 184|0);
 __THREW__ = 0;
 invoke_vii(482,8,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = ((($3)) + 216|0);
  __THREW__ = 0;
  invoke_vii(483,1,($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = ((($3)) + 104|0);
   __ZN8Renderer7MissileD2Ev($10);
   $11 = ((($3)) + 76|0);
   __ZN6Shader7TextureD2Ev($11);
   $12 = ((($3)) + 56|0);
   __ZN6Shader5ColorD2Ev($12);
   $13 = ((($3)) + 4|0);
   __ZN2RTD2Ev($13);
   STACKTOP = sp;return;
  }
 }
 $14 = ___cxa_find_matching_catch(0|0)|0;
 $15 = tempRet0;
 $1 = $14;
 $2 = $15;
 $16 = ((($3)) + 104|0);
 __ZN8Renderer7MissileD2Ev($16);
 $17 = ((($3)) + 76|0);
 __ZN6Shader7TextureD2Ev($17);
 $18 = ((($3)) + 56|0);
 __ZN6Shader5ColorD2Ev($18);
 $19 = ((($3)) + 4|0);
 __ZN2RTD2Ev($19);
 $20 = $1;
 ___clang_call_terminate($20);
 // unreachable;
}
function __ZN6Shader6SimpleD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6Shader7ProgramD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN5Asset6AssetsD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 168|0);
 __ZN5Asset5ModelD2Ev($2);
 $3 = ((($1)) + 116|0);
 __ZN5Asset5ModelD2Ev($3);
 $4 = ((($1)) + 64|0);
 __ZN5Asset5ModelD2Ev($4);
 $5 = ((($1)) + 12|0);
 __ZN5Asset5ModelD2Ev($5);
 __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110__list_impIN8Renderer9ParticlesENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__110__list_impIN8Renderer9ParticlesENS_9allocatorIS2_EEE5clearEv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110__list_impIN8Renderer9ParticlesENS_9allocatorIS2_EEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $__f = 0, $__l = 0, $__n = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $11 = sp + 128|0;
 $28 = $this;
 $29 = $28;
 $27 = $29;
 $30 = $27;
 $26 = $30;
 $31 = $26;
 $32 = ((($31)) + 8|0);
 $25 = $32;
 $33 = $25;
 $24 = $33;
 $34 = $24;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  STACKTOP = sp;return;
 }
 $23 = $29;
 $37 = $23;
 $38 = ((($37)) + 8|0);
 $22 = $38;
 $39 = $22;
 $21 = $39;
 $40 = $21;
 $__na = $40;
 $41 = ((($29)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $__f = $42;
 $13 = $29;
 $43 = $13;
 $12 = $43;
 $44 = $12;
 $__l = $44;
 $45 = $__f;
 $46 = $__l;
 $47 = HEAP32[$46>>2]|0;
 $0 = $45;
 $1 = $47;
 $48 = $1;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $0;
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 4|0);
 HEAP32[$53>>2] = $50;
 $54 = $0;
 $55 = HEAP32[$54>>2]|0;
 $56 = $1;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 HEAP32[$58>>2] = $55;
 $4 = $29;
 $59 = $4;
 $60 = ((($59)) + 8|0);
 $3 = $60;
 $61 = $3;
 $2 = $61;
 $62 = $2;
 HEAP32[$62>>2] = 0;
 while(1) {
  $63 = $__f;
  $64 = $__l;
  $65 = ($63|0)!=($64|0);
  if (!($65)) {
   break;
  }
  $66 = $__f;
  $__n = $66;
  $67 = $__f;
  $68 = ((($67)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $__f = $69;
  $70 = $__na;
  $71 = $__n;
  $72 = ((($71)) + 8|0);
  $5 = $72;
  $73 = $5;
  $9 = $70;
  $10 = $73;
  $74 = $9;
  $75 = $10;
  ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
  $6 = $74;
  $7 = $75;
  $76 = $__na;
  $77 = $__n;
  $18 = $76;
  $19 = $77;
  $20 = 1;
  $78 = $18;
  $79 = $19;
  $80 = $20;
  $15 = $78;
  $16 = $79;
  $17 = $80;
  $81 = $16;
  $14 = $81;
  $82 = $14;
  __ZdlPv($82);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI6ProtoXNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -264|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 264)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI7MissileNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -24|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 24)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZN8Renderer7MissileD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __THREW__ = 0;
 invoke_vii(483,1,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6Shader7TextureD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6Shader7ProgramD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6Shader5ColorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6Shader7ProgramD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2RTD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 40|0);
 __THREW__ = 0;
 invoke_vii(484,1,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = ((($3)) + 36|0);
  __THREW__ = 0;
  invoke_vii(485,1,($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = ((($3)) + 24|0);
   __THREW__ = 0;
   invoke_vii(482,1,($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    $13 = ((($3)) + 28|0);
    __THREW__ = 0;
    invoke_vii(482,1,($13|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __ZN6Shader8RTShaderD2Ev($3);
     STACKTOP = sp;return;
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch(0|0)|0;
 $17 = tempRet0;
 $1 = $16;
 $2 = $17;
 __ZN6Shader8RTShaderD2Ev($3);
 $18 = $1;
 ___clang_call_terminate($18);
 // unreachable;
}
function __ZN6Shader7ProgramD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi(486,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6Shader8RTShaderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6Shader7ProgramD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN5Asset5ModelD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($2);
 $3 = ((($1)) + 12|0);
 __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEED2Ev($3);
 __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPN5Asset5ModelENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPN5Asset5ModelENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZN6ClientD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6SocketD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN6SocketD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(487,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(0|0)|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZN7SessionD2Ev($3);
  $8 = $1;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  __ZN7SessionD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN6Socket7cleanupEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = ((($1)) + 96|0);
  $6 = HEAP32[$5>>2]|0;
  (_close($6)|0);
 }
 $7 = ((($1)) + 96|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE4seedEj($this,$__sd) {
 $this = $this|0;
 $__sd = $__sd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $__sd;
 $3 = $1;
 $4 = $2;
 HEAP32[$3>>2] = $4;
 $__i = 1;
 while(1) {
  $5 = $__i;
  $6 = ($5>>>0)<(624);
  if (!($6)) {
   break;
  }
  $7 = $__i;
  $8 = (($7) - 1)|0;
  $9 = (($3) + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $__i;
  $12 = (($11) - 1)|0;
  $13 = (($3) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $0 = $14;
  $15 = $0;
  $16 = $15 >>> 30;
  $17 = $10 ^ $16;
  $18 = Math_imul(1812433253, $17)|0;
  $19 = $__i;
  $20 = (($18) + ($19))|0;
  $21 = $__i;
  $22 = (($3) + ($21<<2)|0);
  HEAP32[$22>>2] = $20;
  $23 = $__i;
  $24 = (($23) + 1)|0;
  $__i = $24;
 }
 $25 = ((($3)) + 2496|0);
 HEAP32[$25>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIcNS_9allocatorIcEEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $3 = $25;
 $26 = $3;
 $27 = (__Znwj($26)|0);
 $28 = ((($14)) + 4|0);
 HEAP32[$28>>2] = $27;
 HEAP32[$14>>2] = $27;
 $29 = HEAP32[$14>>2]|0;
 $30 = $13;
 $31 = (($29) + ($30)|0);
 $2 = $14;
 $32 = $2;
 $33 = ((($32)) + 8|0);
 $1 = $33;
 $34 = $1;
 $0 = $34;
 $35 = $0;
 HEAP32[$35>>2] = $31;
 __ZNKSt3__16vectorIcNS_9allocatorIcEEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIcNS_9allocatorIcEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  HEAP8[$27>>0] = 0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 1|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIcNS_9allocatorIcEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIcNS_9allocatorIcEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = -1;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIcNS_9allocatorIcEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $11 = $20;
 $42 = $11;
 $10 = $42;
 $43 = $10;
 $9 = $43;
 $44 = $9;
 $45 = ((($44)) + 8|0);
 $8 = $45;
 $46 = $8;
 $7 = $46;
 $47 = $7;
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$43>>2]|0;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($41) + ($52)|0);
 $13 = $20;
 $54 = $13;
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $12;
 $57 = $19;
 $58 = (($56) + ($57)|0);
 __ZNKSt3__16vectorIcNS_9allocatorIcEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$38,$53,$58);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIcNS_9allocatorIcEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEEC2EjjS7_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<3;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<3)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<3)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -8|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -8|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKS2_($79,$81);
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -8|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i>>2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91>>2]|0;
 $93 = $20;
 HEAP32[$93>>2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94>>2]|0;
 $96 = $21;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i2>>2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 HEAP32[$106>>2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $4;
 HEAP32[$109>>2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = ((($110)) + 8|0);
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = ((($115)) + 12|0);
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i1>>2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123>>2]|0;
 $125 = $14;
 HEAP32[$125>>2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126>>2]|0;
 $128 = $15;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 8)&-1;
 __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -8|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 8)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 8)&-1;
 $51 = (($42) + ($50<<3)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 8)&-1;
 $67 = (($54) + ($66<<3)|0);
 __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 8)&-1;
 $55 = (($42) + ($54<<3)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<3)|0);
 __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $26 = ($25*12)|0;
 $3 = $26;
 $27 = $3;
 $28 = (__Znwj($27)|0);
 $29 = ((($14)) + 4|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$14>>2] = $28;
 $30 = HEAP32[$14>>2]|0;
 $31 = $13;
 $32 = (($30) + (($31*12)|0)|0);
 $2 = $14;
 $33 = $2;
 $34 = ((($33)) + 8|0);
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 HEAP32[$36>>2] = $32;
 __ZNKSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 80|0;
 $6 = sp + 68|0;
 $14 = sp;
 $17 = sp + 97|0;
 $__annotator = sp + 96|0;
 $22 = $this;
 $23 = $__n;
 $24 = $22;
 $21 = $24;
 $25 = $21;
 $26 = ((($25)) + 8|0);
 $20 = $26;
 $27 = $20;
 $19 = $27;
 $28 = $19;
 $__a = $28;
 while(1) {
  __ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$24,1);
  $29 = $__a;
  $30 = ((($24)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $18 = $31;
  $32 = $18;
  $15 = $29;
  $16 = $32;
  $33 = $15;
  $34 = $16;
  ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
  $12 = $33;
  $13 = $34;
  $35 = $12;
  $36 = $13;
  $10 = $35;
  $11 = $36;
  $37 = $11;
  $9 = $37;
  $38 = $9;
  $8 = $38;
  $39 = $8;
  $7 = $39;
  HEAP32[$39>>2] = 0;
  $40 = ((($39)) + 4|0);
  HEAP32[$40>>2] = 0;
  $41 = ((($39)) + 8|0);
  $5 = $41;
  HEAP32[$6>>2] = 0;
  $42 = $5;
  $4 = $6;
  $43 = $4;
  $44 = HEAP32[$43>>2]|0;
  $2 = $42;
  HEAP32[$3>>2] = $44;
  $45 = $2;
  $1 = $45;
  $0 = $3;
  $46 = $0;
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$45>>2] = $47;
  $48 = ((($24)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 12|0);
  HEAP32[$48>>2] = $50;
  $51 = $23;
  $52 = (($51) + -1)|0;
  $23 = $52;
  __ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $53 = $23;
  $54 = ($53>>>0)>(0);
  if (!($54)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 357913941;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIRKjEEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$118>>2] = $121;
 $122 = ((($__v)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 4|0);
 HEAP32[$122>>2] = $124;
 __THREW__ = 0;
 invoke_vii(488,($43|0),($__v|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch()|0;
  $128 = tempRet0;
  $41 = $127;
  $42 = $128;
  __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($__v);
  $129 = $41;
  $130 = $42;
  ___resumeException($129|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $__n;
 $15 = $13;
 $16 = $14;
 $17 = (__ZNKSt3__16vectorIbNS_9allocatorIbEEE8max_sizeEv($15)|0);
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($15);
 }
 $19 = $14;
 $12 = $19;
 $20 = $12;
 $21 = (($20) - 1)|0;
 $22 = (($21>>>0) / 32)&-1;
 $23 = (($22) + 1)|0;
 $14 = $23;
 $2 = $15;
 $24 = $2;
 $25 = ((($24)) + 8|0);
 $1 = $25;
 $26 = $1;
 $0 = $26;
 $27 = $0;
 $28 = $14;
 $7 = $27;
 $8 = $28;
 $29 = $7;
 $30 = $8;
 $4 = $29;
 $5 = $30;
 $6 = 0;
 $31 = $5;
 $32 = $31<<2;
 $3 = $32;
 $33 = $3;
 $34 = (__Znwj($33)|0);
 HEAP32[$15>>2] = $34;
 $35 = ((($15)) + 4|0);
 HEAP32[$35>>2] = 0;
 $36 = $14;
 $11 = $15;
 $37 = $11;
 $38 = ((($37)) + 8|0);
 $10 = $38;
 $39 = $10;
 $9 = $39;
 $40 = $9;
 HEAP32[$40>>2] = $36;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIbNS_9allocatorIbEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__amax = 0, $__nmax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 48|0;
 $10 = $this;
 $11 = $10;
 $8 = $11;
 $12 = $8;
 $13 = ((($12)) + 8|0);
 $7 = $13;
 $14 = $7;
 $6 = $14;
 $15 = $6;
 $3 = $15;
 $16 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $__amax = 1073741823;
 $18 = (4294967295 / 2)&-1;
 $__nmax = $18;
 $19 = $__nmax;
 $20 = (($19>>>0) / 32)&-1;
 $21 = $__amax;
 $22 = ($20>>>0)<=($21>>>0);
 if ($22) {
  $23 = $__nmax;
  $9 = $23;
  $27 = $9;
  STACKTOP = sp;return ($27|0);
 } else {
  $24 = $__amax;
  $5 = $24;
  $25 = $5;
  $26 = $25<<5;
  $9 = $26;
  $27 = $9;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZNSt3__113__fill_n_trueINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($__first,$__n) {
 $__first = $__first|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__clz_f = 0, $__dn = 0, $__m = 0, $__m1 = 0, $__nw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 60|0;
 $10 = sp + 24|0;
 $__clz_f = sp + 20|0;
 HEAP32[$10>>2] = $__n;
 $11 = ((($__first)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = ((($__first)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (32 - ($15))|0;
  HEAP32[$__clz_f>>2] = $16;
  $7 = $__clz_f;
  $8 = $10;
  $17 = $7;
  $18 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $17;
  $5 = $18;
  $19 = $5;
  $20 = $4;
  $1 = $6;
  $2 = $19;
  $3 = $20;
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22>>>0)<($24>>>0);
  $26 = $5;
  $27 = $4;
  $28 = $25 ? $26 : $27;
  $29 = HEAP32[$28>>2]|0;
  $__dn = $29;
  $30 = ((($__first)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = -1 << $31;
  $33 = HEAP32[$__clz_f>>2]|0;
  $34 = $__dn;
  $35 = (($33) - ($34))|0;
  $36 = -1 >>> $35;
  $37 = $32 & $36;
  $__m = $37;
  $38 = $__m;
  $39 = HEAP32[$__first>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 | $38;
  HEAP32[$39>>2] = $41;
  $42 = $__dn;
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) - ($42))|0;
  HEAP32[$10>>2] = $44;
  $45 = HEAP32[$__first>>2]|0;
  $46 = ((($45)) + 4|0);
  HEAP32[$__first>>2] = $46;
 }
 $47 = HEAP32[$10>>2]|0;
 $48 = (($47>>>0) / 32)&-1;
 $__nw = $48;
 $49 = HEAP32[$__first>>2]|0;
 $0 = $49;
 $50 = $0;
 $51 = $__nw;
 $52 = $51<<2;
 _memset(($50|0),-1,($52|0))|0;
 $53 = $__nw;
 $54 = $53<<5;
 $55 = HEAP32[$10>>2]|0;
 $56 = (($55) - ($54))|0;
 HEAP32[$10>>2] = $56;
 $57 = HEAP32[$10>>2]|0;
 $58 = ($57>>>0)>(0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $59 = $__nw;
 $60 = HEAP32[$__first>>2]|0;
 $61 = (($60) + ($59<<2)|0);
 HEAP32[$__first>>2] = $61;
 $62 = HEAP32[$10>>2]|0;
 $63 = (32 - ($62))|0;
 $64 = -1 >>> $63;
 $__m1 = $64;
 $65 = $__m1;
 $66 = HEAP32[$__first>>2]|0;
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 | $65;
 HEAP32[$66>>2] = $68;
 STACKTOP = sp;return;
}
function __ZNSt3__114__fill_n_falseINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($__first,$__n) {
 $__first = $__first|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__clz_f = 0, $__dn = 0, $__m = 0, $__m1 = 0, $__nw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 60|0;
 $10 = sp + 24|0;
 $__clz_f = sp + 20|0;
 HEAP32[$10>>2] = $__n;
 $11 = ((($__first)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = ((($__first)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (32 - ($15))|0;
  HEAP32[$__clz_f>>2] = $16;
  $7 = $__clz_f;
  $8 = $10;
  $17 = $7;
  $18 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $17;
  $5 = $18;
  $19 = $5;
  $20 = $4;
  $1 = $6;
  $2 = $19;
  $3 = $20;
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22>>>0)<($24>>>0);
  $26 = $5;
  $27 = $4;
  $28 = $25 ? $26 : $27;
  $29 = HEAP32[$28>>2]|0;
  $__dn = $29;
  $30 = ((($__first)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = -1 << $31;
  $33 = HEAP32[$__clz_f>>2]|0;
  $34 = $__dn;
  $35 = (($33) - ($34))|0;
  $36 = -1 >>> $35;
  $37 = $32 & $36;
  $__m = $37;
  $38 = $__m;
  $39 = $38 ^ -1;
  $40 = HEAP32[$__first>>2]|0;
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 & $39;
  HEAP32[$40>>2] = $42;
  $43 = $__dn;
  $44 = HEAP32[$10>>2]|0;
  $45 = (($44) - ($43))|0;
  HEAP32[$10>>2] = $45;
  $46 = HEAP32[$__first>>2]|0;
  $47 = ((($46)) + 4|0);
  HEAP32[$__first>>2] = $47;
 }
 $48 = HEAP32[$10>>2]|0;
 $49 = (($48>>>0) / 32)&-1;
 $__nw = $49;
 $50 = HEAP32[$__first>>2]|0;
 $0 = $50;
 $51 = $0;
 $52 = $__nw;
 $53 = $52<<2;
 _memset(($51|0),0,($53|0))|0;
 $54 = $__nw;
 $55 = $54<<5;
 $56 = HEAP32[$10>>2]|0;
 $57 = (($56) - ($55))|0;
 HEAP32[$10>>2] = $57;
 $58 = HEAP32[$10>>2]|0;
 $59 = ($58>>>0)>(0);
 if (!($59)) {
  STACKTOP = sp;return;
 }
 $60 = $__nw;
 $61 = HEAP32[$__first>>2]|0;
 $62 = (($61) + ($60<<2)|0);
 HEAP32[$__first>>2] = $62;
 $63 = HEAP32[$10>>2]|0;
 $64 = (32 - ($63))|0;
 $65 = -1 >>> $64;
 $__m1 = $65;
 $66 = $__m1;
 $67 = $66 ^ -1;
 $68 = HEAP32[$__first>>2]|0;
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 & $67;
 HEAP32[$68>>2] = $70;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__emplace_back_slow_pathIJRffEEEvDpOT_($this,$__args,$__args1) {
 $this = $this|0;
 $__args = $__args|0;
 $__args1 = $__args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 8|0;
 $20 = sp + 233|0;
 $29 = sp;
 $32 = sp + 232|0;
 $40 = sp + 84|0;
 $41 = sp + 72|0;
 $__v = sp + 20|0;
 $46 = $this;
 $47 = $__args;
 $48 = $__args1;
 $51 = $46;
 $45 = $51;
 $52 = $45;
 $53 = ((($52)) + 8|0);
 $44 = $53;
 $54 = $44;
 $43 = $54;
 $55 = $43;
 $__a = $55;
 $42 = $51;
 $56 = $42;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$56>>2]|0;
 $60 = $58;
 $61 = $59;
 $62 = (($60) - ($61))|0;
 $63 = (($62|0) / 8)&-1;
 $64 = (($63) + 1)|0;
 $39 = $51;
 HEAP32[$40>>2] = $64;
 $65 = $39;
 $66 = (__ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($65)|0);
 $__ms$i = $66;
 $67 = HEAP32[$40>>2]|0;
 $68 = $__ms$i;
 $69 = ($67>>>0)>($68>>>0);
 if ($69) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($65);
 }
 $37 = $65;
 $70 = $37;
 $36 = $70;
 $71 = $36;
 $35 = $71;
 $72 = $35;
 $73 = ((($72)) + 8|0);
 $34 = $73;
 $74 = $34;
 $33 = $74;
 $75 = $33;
 $76 = HEAP32[$75>>2]|0;
 $77 = HEAP32[$71>>2]|0;
 $78 = $76;
 $79 = $77;
 $80 = (($78) - ($79))|0;
 $81 = (($80|0) / 8)&-1;
 $__cap$i = $81;
 $82 = $__cap$i;
 $83 = $__ms$i;
 $84 = (($83>>>0) / 2)&-1;
 $85 = ($82>>>0)>=($84>>>0);
 if ($85) {
  $86 = $__ms$i;
  $38 = $86;
 } else {
  $87 = $__cap$i;
  $88 = $87<<1;
  HEAP32[$41>>2] = $88;
  $30 = $41;
  $31 = $40;
  $89 = $30;
  $90 = $31;
  ;HEAP8[$29>>0]=HEAP8[$32>>0]|0;
  $27 = $89;
  $28 = $90;
  $91 = $27;
  $92 = $28;
  $24 = $29;
  $25 = $91;
  $26 = $92;
  $93 = $25;
  $94 = HEAP32[$93>>2]|0;
  $95 = $26;
  $96 = HEAP32[$95>>2]|0;
  $97 = ($94>>>0)<($96>>>0);
  $98 = $28;
  $99 = $27;
  $100 = $97 ? $98 : $99;
  $101 = HEAP32[$100>>2]|0;
  $38 = $101;
 }
 $102 = $38;
 $23 = $51;
 $103 = $23;
 $104 = ((($103)) + 4|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = HEAP32[$103>>2]|0;
 $107 = $105;
 $108 = $106;
 $109 = (($107) - ($108))|0;
 $110 = (($109|0) / 8)&-1;
 $111 = $__a;
 __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEEC2EjjS7_($__v,$102,$110,$111);
 $112 = $__a;
 $113 = ((($__v)) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $22 = $114;
 $115 = $22;
 $116 = $47;
 $21 = $116;
 $117 = $21;
 $118 = $48;
 $0 = $118;
 $119 = $0;
 $16 = $112;
 $17 = $115;
 $18 = $117;
 $19 = $119;
 $120 = $16;
 $121 = $17;
 $122 = $18;
 $15 = $122;
 $123 = $15;
 $124 = $19;
 $1 = $124;
 $125 = $1;
 ;HEAP8[$14>>0]=HEAP8[$20>>0]|0;
 $10 = $120;
 $11 = $121;
 $12 = $123;
 $13 = $125;
 $126 = $10;
 $127 = $11;
 $128 = $12;
 $9 = $128;
 $129 = $9;
 $130 = $13;
 $2 = $130;
 $131 = $2;
 $5 = $126;
 $6 = $127;
 $7 = $129;
 $8 = $131;
 $132 = $6;
 $133 = $7;
 $4 = $133;
 $134 = $4;
 $135 = $8;
 $3 = $135;
 $136 = $3;
 __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKfS4_($132,$134,$136);
 $137 = ((($__v)) + 8|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = ((($138)) + 8|0);
 HEAP32[$137>>2] = $139;
 __THREW__ = 0;
 invoke_vii(398,($51|0),($__v|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $142 = ___cxa_find_matching_catch()|0;
  $143 = tempRet0;
  $49 = $142;
  $50 = $143;
  __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  $144 = $49;
  $145 = $50;
  ___resumeException($144|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 536870911;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $26 = $25<<3;
 $3 = $26;
 $27 = $3;
 $28 = (__Znwj($27)|0);
 $29 = ((($14)) + 4|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$14>>2] = $28;
 $30 = HEAP32[$14>>2]|0;
 $31 = $13;
 $32 = (($30) + ($31<<3)|0);
 $2 = $14;
 $33 = $2;
 $34 = ((($33)) + 8|0);
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 HEAP32[$36>>2] = $32;
 __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  __ZN3glm5tvec2IfLNS_9precisionE0EEC2Ev($27);
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 8|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3glm5tvec2IfLNS_9precisionE0EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($1)) + 4|0);
 HEAPF32[$2>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN3glm6detail11compute_dotINS_5tvec2EfLNS_9precisionE0EE4callERKNS2_IfLS3_0EEES7_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = $x;
 $1 = $y;
 $2 = $0;
 $3 = $1;
 __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec2IT_XT0_EEERKS4_S6_($tmp,$2,$3);
 $4 = +HEAPF32[$tmp>>2];
 $5 = ((($tmp)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 + $6;
 STACKTOP = sp;return (+$7);
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec2IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 4|0;
 $3 = sp;
 $0 = $v1;
 $1 = $v2;
 $4 = $0;
 $5 = +HEAPF32[$4>>2];
 $6 = $1;
 $7 = +HEAPF32[$6>>2];
 $8 = $5 * $7;
 HEAPF32[$2>>2] = $8;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = ((($12)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 * $14;
 HEAPF32[$3>>2] = $15;
 __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKfS4_($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __ZN3glm6lengthIfLNS_9precisionE0ENS_5tvec2EEET_RKT1_IS3_XT0_EE($v) {
 $v = $v|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = $1;
 $3 = $1;
 $4 = (+__ZN3glm3dotIfLNS_9precisionE0ENS_5tvec2EEET_RKT1_IS3_XT0_EES7_($2,$3));
 $0 = $4;
 $5 = $0;
 $6 = (+Math_sqrt((+$5)));
 STACKTOP = sp;return (+$6);
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 12)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 12)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 12)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEEC2EjjS7_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($118,$120);
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 12|0);
 HEAP32[$121>>2] = $123;
 __THREW__ = 0;
 invoke_vii(489,($43|0),($__v|0));
 $124 = __THREW__; __THREW__ = 0;
 $125 = $124&1;
 if ($125) {
  $126 = ___cxa_find_matching_catch()|0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  $128 = $41;
  $129 = $42;
  ___resumeException($128|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEEC2EjjS7_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*12)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*12)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*12)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -12|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -12|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($79,$81);
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -12|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i>>2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91>>2]|0;
 $93 = $20;
 HEAP32[$93>>2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94>>2]|0;
 $96 = $21;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i2>>2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 HEAP32[$106>>2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $4;
 HEAP32[$109>>2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = ((($110)) + 8|0);
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = ((($115)) + 12|0);
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i1>>2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123>>2]|0;
 $125 = $14;
 HEAP32[$125>>2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126>>2]|0;
 $128 = $15;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 12)&-1;
 __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -12|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 12)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 357913941;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN5Asset5LayerERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*40)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*40)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*40)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -40|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -40|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN5Asset5LayerC2ERKS0_($79,$81);
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -40|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i>>2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91>>2]|0;
 $93 = $20;
 HEAP32[$93>>2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94>>2]|0;
 $96 = $21;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i2>>2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 HEAP32[$106>>2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $4;
 HEAP32[$109>>2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = ((($110)) + 8|0);
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = ((($115)) + 12|0);
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i1>>2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123>>2]|0;
 $125 = $14;
 HEAP32[$125>>2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126>>2]|0;
 $128 = $15;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 40)&-1;
 __ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN5Asset5LayerERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -40|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZN5Asset5LayerD2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = ((($62)) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = ((($70)) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 40)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 40)&-1;
 $39 = (($26) + (($38*40)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 40)&-1;
 $51 = (($42) + (($50*40)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 40)&-1;
 $67 = (($54) + (($66*40)|0)|0);
 __ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 40)&-1;
 $39 = (($26) + (($38*40)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 40)&-1;
 $55 = (($42) + (($54*40)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*40)|0)|0);
 __ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN5Asset5LayerC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($3,$4);
 $5 = ((($3)) + 12|0);
 $6 = $2;
 $7 = ((($6)) + 12|0);
 __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEEC2ERKS6_($5,$7);
 $8 = ((($3)) + 24|0);
 $9 = $2;
 $10 = ((($9)) + 24|0);
 ;HEAP32[$8>>2]=HEAP32[$10>>2]|0;HEAP32[$8+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$10+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEEC2ERKS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 84|0;
 $6 = sp + 16|0;
 $9 = sp + 72|0;
 $10 = sp + 111|0;
 $11 = sp + 8|0;
 $15 = sp + 110|0;
 $17 = sp;
 $19 = sp + 109|0;
 $25 = sp + 108|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = ((($30)) + 8|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 ;HEAP8[$17>>0]=HEAP8[$19>>0]|0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35>>2] = 0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($35)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $37;
 HEAP32[$9>>2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $38;
 HEAP32[$5>>2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = (($51|0) / 20)&-1;
 $__n = $52;
 $53 = $__n;
 $54 = ($53>>>0)>(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(425,($28|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 }
 $58 = $24;
 $59 = HEAP32[$58>>2]|0;
 $60 = $24;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_viii(490,($28|0),($59|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $26 = ($25*20)|0;
 $3 = $26;
 $27 = $3;
 $28 = (__Znwj($27)|0);
 $29 = ((($14)) + 4|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$14>>2] = $28;
 $30 = HEAP32[$14>>2]|0;
 $31 = $13;
 $32 = (($30) + (($31*20)|0)|0);
 $2 = $14;
 $33 = $2;
 $34 = ((($33)) + 8|0);
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 HEAP32[$36>>2] = $32;
 __ZNKSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  __ZN5Asset5Layer7SurfaceC2ERKS1_($42,$44);
  __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 20|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 20|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 214748364;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 20)&-1;
 $39 = (($26) + (($38*20)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 20)&-1;
 $55 = (($42) + (($54*20)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*20)|0)|0);
 __ZNKSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN5Asset5Layer7SurfaceC2ERKS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 ;HEAP32[$3>>2]=HEAP32[$4>>2]|0;HEAP32[$3+4>>2]=HEAP32[$4+4>>2]|0;
 $5 = ((($3)) + 8|0);
 $6 = $2;
 $7 = ((($6)) + 8|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($5,$7);
 STACKTOP = sp;return;
}
function __ZNK3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEeqERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if ($8) {
  $9 = HEAP32[$2>>2]|0;
  $10 = $1;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)==($11|0);
  STACKTOP = sp;return ($12|0);
 } else {
  __ZSt9terminatev();
  // unreachable;
 }
 return (0)|0;
}
function __ZNK3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEE12validateThisEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2>>>0)>=($5>>>0);
 if (!($6)) {
  __ZSt9terminatev();
  // unreachable;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZNK3gsl4spanI6Layer2Lin1EJEE4sizeEv($12)|0);
 $14 = (($10) + (($13*48)|0)|0);
 $15 = ($7>>>0)<($14>>>0);
 if ($15) {
  STACKTOP = sp;return;
 } else {
  __ZSt9terminatev();
  // unreachable;
 }
}
function __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 40)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 40)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 40)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN5Asset5LayerERNS_9allocatorIS2_EEEC2EjjS5_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 __THREW__ = 0;
 invoke_vii(407,($118|0),($120|0));
 $121 = __THREW__; __THREW__ = 0;
 $122 = $121&1;
 if ($122) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferIN5Asset5LayerERNS_9allocatorIS2_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 }
 $123 = ((($__v)) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($124)) + 40|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(415,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if ($127) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferIN5Asset5LayerERNS_9allocatorIS2_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN5Asset5LayerERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN5Asset5LayerC2EOS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 104|0;
 $6 = sp + 8|0;
 $9 = sp + 92|0;
 $10 = sp + 125|0;
 $11 = sp;
 $15 = sp + 124|0;
 $31 = $this;
 $32 = $0;
 $33 = $31;
 $34 = $32;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($33,$34);
 $35 = ((($33)) + 12|0);
 $36 = $32;
 $37 = ((($36)) + 12|0);
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 $28 = $39;
 $40 = $28;
 $41 = ((($40)) + 8|0);
 $27 = $41;
 $42 = $27;
 $26 = $42;
 $43 = $26;
 $25 = $43;
 $44 = $25;
 $13 = $38;
 $14 = $44;
 $45 = $13;
 $12 = $45;
 HEAP32[$45>>2] = 0;
 $46 = ((($45)) + 4|0);
 HEAP32[$46>>2] = 0;
 $47 = ((($45)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $47;
 HEAP32[$9>>2] = 0;
 $48 = $8;
 $7 = $9;
 $49 = $7;
 $50 = HEAP32[$49>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $48;
 HEAP32[$5>>2] = $50;
 $51 = $4;
 $3 = $6;
 $2 = $5;
 $52 = $2;
 $53 = HEAP32[$52>>2]|0;
 HEAP32[$51>>2] = $53;
 $54 = $30;
 $55 = HEAP32[$54>>2]|0;
 HEAP32[$38>>2] = $55;
 $56 = $30;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($38)) + 4|0);
 HEAP32[$59>>2] = $58;
 $60 = $30;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $21 = $38;
 $66 = $21;
 $67 = ((($66)) + 8|0);
 $20 = $67;
 $68 = $20;
 $19 = $68;
 $69 = $19;
 HEAP32[$69>>2] = $65;
 $70 = $30;
 $24 = $70;
 $71 = $24;
 $72 = ((($71)) + 8|0);
 $23 = $72;
 $73 = $23;
 $22 = $73;
 $74 = $22;
 HEAP32[$74>>2] = 0;
 $75 = $30;
 $76 = ((($75)) + 4|0);
 HEAP32[$76>>2] = 0;
 $77 = $30;
 HEAP32[$77>>2] = 0;
 $78 = ((($33)) + 24|0);
 $79 = $32;
 $80 = ((($79)) + 24|0);
 ;HEAP32[$78>>2]=HEAP32[$80>>2]|0;HEAP32[$78+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$78+8>>2]=HEAP32[$80+8>>2]|0;HEAP32[$78+12>>2]=HEAP32[$80+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 107374182;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 20)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 20)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 20)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN5Asset5Layer7SurfaceERNS_9allocatorIS3_EEEC2EjjS6_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 __THREW__ = 0;
 invoke_vii(410,($118|0),($120|0));
 $121 = __THREW__; __THREW__ = 0;
 $122 = $121&1;
 if ($122) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferIN5Asset5Layer7SurfaceERNS_9allocatorIS3_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 }
 $123 = ((($__v)) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($124)) + 20|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(491,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if ($127) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferIN5Asset5Layer7SurfaceERNS_9allocatorIS3_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN5Asset5Layer7SurfaceERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN5Asset5Layer7SurfaceC2EOS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 ;HEAP32[$3>>2]=HEAP32[$4>>2]|0;HEAP32[$3+4>>2]=HEAP32[$4+4>>2]|0;
 $5 = ((($3)) + 8|0);
 $6 = $2;
 $7 = ((($6)) + 8|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($5,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN5Asset5Layer7SurfaceERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*20)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*20)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*20)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -20|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -20|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN5Asset5Layer7SurfaceC2ERKS1_($79,$81);
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -20|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i>>2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91>>2]|0;
 $93 = $20;
 HEAP32[$93>>2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94>>2]|0;
 $96 = $21;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i2>>2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 HEAP32[$106>>2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $4;
 HEAP32[$109>>2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = ((($110)) + 8|0);
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = ((($115)) + 12|0);
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i1>>2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123>>2]|0;
 $125 = $14;
 HEAP32[$125>>2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126>>2]|0;
 $128 = $15;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 20)&-1;
 __ZNKSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN5Asset5Layer7SurfaceERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -20|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 20)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 20)&-1;
 $39 = (($26) + (($38*20)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 20)&-1;
 $51 = (($42) + (($50*20)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 20)&-1;
 $67 = (($54) + (($66*20)|0)|0);
 __ZNKSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $26 = ($25*12)|0;
 $3 = $26;
 $27 = $3;
 $28 = (__Znwj($27)|0);
 $29 = ((($14)) + 4|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$14>>2] = $28;
 $30 = HEAP32[$14>>2]|0;
 $31 = $13;
 $32 = (($30) + (($31*12)|0)|0);
 $2 = $14;
 $33 = $2;
 $34 = ((($33)) + 8|0);
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 HEAP32[$36>>2] = $32;
 __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($42,$44);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 12|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 12|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $26 = ($25*40)|0;
 $3 = $26;
 $27 = $3;
 $28 = (__Znwj($27)|0);
 $29 = ((($14)) + 4|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$14>>2] = $28;
 $30 = HEAP32[$14>>2]|0;
 $31 = $13;
 $32 = (($30) + (($31*40)|0)|0);
 $2 = $14;
 $33 = $2;
 $34 = ((($33)) + 8|0);
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 HEAP32[$36>>2] = $32;
 __ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  __ZN5Asset5LayerC2ERKS0_($42,$44);
  __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 40|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 40|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 8)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 8)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 8)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEEC2EjjS7_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKS2_($118,$120);
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 8|0);
 HEAP32[$121>>2] = $123;
 __THREW__ = 0;
 invoke_vii(398,($43|0),($__v|0));
 $124 = __THREW__; __THREW__ = 0;
 $125 = $124&1;
 if ($125) {
  $126 = ___cxa_find_matching_catch()|0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  $128 = $41;
  $129 = $42;
  ___resumeException($128|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN3glm5tvec2IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE18__construct_at_endIPKS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  __ZN5Asset5Layer7SurfaceC2ERKS1_($42,$44);
  __ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 20|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 20|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE18__construct_at_endIPKS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  __ZN5Asset5LayerC2ERKS0_($42,$44);
  __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 40|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 40|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKS2_($42,$44);
  __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 8|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 8|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__emplace_back_slow_pathIJfffEEEvDpOT_($this,$__args,$__args1,$__args2) {
 $this = $this|0;
 $__args = $__args|0;
 $__args1 = $__args1|0;
 $__args2 = $__args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $20 = sp + 8|0;
 $27 = sp + 265|0;
 $36 = sp;
 $39 = sp + 264|0;
 $47 = sp + 88|0;
 $48 = sp + 76|0;
 $__v = sp + 20|0;
 $53 = $this;
 $54 = $__args;
 $55 = $__args1;
 $56 = $__args2;
 $59 = $53;
 $52 = $59;
 $60 = $52;
 $61 = ((($60)) + 8|0);
 $51 = $61;
 $62 = $51;
 $50 = $62;
 $63 = $50;
 $__a = $63;
 $49 = $59;
 $64 = $49;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$64>>2]|0;
 $68 = $66;
 $69 = $67;
 $70 = (($68) - ($69))|0;
 $71 = (($70|0) / 12)&-1;
 $72 = (($71) + 1)|0;
 $46 = $59;
 HEAP32[$47>>2] = $72;
 $73 = $46;
 $74 = (__ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($73)|0);
 $__ms$i = $74;
 $75 = HEAP32[$47>>2]|0;
 $76 = $__ms$i;
 $77 = ($75>>>0)>($76>>>0);
 if ($77) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($73);
 }
 $44 = $73;
 $78 = $44;
 $43 = $78;
 $79 = $43;
 $42 = $79;
 $80 = $42;
 $81 = ((($80)) + 8|0);
 $41 = $81;
 $82 = $41;
 $40 = $82;
 $83 = $40;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 12)&-1;
 $__cap$i = $89;
 $90 = $__cap$i;
 $91 = $__ms$i;
 $92 = (($91>>>0) / 2)&-1;
 $93 = ($90>>>0)>=($92>>>0);
 if ($93) {
  $94 = $__ms$i;
  $45 = $94;
 } else {
  $95 = $__cap$i;
  $96 = $95<<1;
  HEAP32[$48>>2] = $96;
  $37 = $48;
  $38 = $47;
  $97 = $37;
  $98 = $38;
  ;HEAP8[$36>>0]=HEAP8[$39>>0]|0;
  $34 = $97;
  $35 = $98;
  $99 = $34;
  $100 = $35;
  $31 = $36;
  $32 = $99;
  $33 = $100;
  $101 = $32;
  $102 = HEAP32[$101>>2]|0;
  $103 = $33;
  $104 = HEAP32[$103>>2]|0;
  $105 = ($102>>>0)<($104>>>0);
  $106 = $35;
  $107 = $34;
  $108 = $105 ? $106 : $107;
  $109 = HEAP32[$108>>2]|0;
  $45 = $109;
 }
 $110 = $45;
 $30 = $59;
 $111 = $30;
 $112 = ((($111)) + 4|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = HEAP32[$111>>2]|0;
 $115 = $113;
 $116 = $114;
 $117 = (($115) - ($116))|0;
 $118 = (($117|0) / 12)&-1;
 $119 = $__a;
 __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEEC2EjjS7_($__v,$110,$118,$119);
 $120 = $__a;
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $29 = $122;
 $123 = $29;
 $124 = $54;
 $28 = $124;
 $125 = $28;
 $126 = $55;
 $1 = $126;
 $127 = $1;
 $128 = $56;
 $0 = $128;
 $129 = $0;
 $22 = $120;
 $23 = $123;
 $24 = $125;
 $25 = $127;
 $26 = $129;
 $130 = $22;
 $131 = $23;
 $132 = $24;
 $21 = $132;
 $133 = $21;
 $134 = $25;
 $3 = $134;
 $135 = $3;
 $136 = $26;
 $2 = $136;
 $137 = $2;
 ;HEAP8[$20>>0]=HEAP8[$27>>0]|0;
 $15 = $130;
 $16 = $131;
 $17 = $133;
 $18 = $135;
 $19 = $137;
 $138 = $15;
 $139 = $16;
 $140 = $17;
 $14 = $140;
 $141 = $14;
 $142 = $18;
 $5 = $142;
 $143 = $5;
 $144 = $19;
 $4 = $144;
 $145 = $4;
 $9 = $138;
 $10 = $139;
 $11 = $141;
 $12 = $143;
 $13 = $145;
 $146 = $10;
 $147 = $11;
 $8 = $147;
 $148 = $8;
 $149 = $12;
 $7 = $149;
 $150 = $7;
 $151 = $13;
 $6 = $151;
 $152 = $6;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($146,$148,$150,$152);
 $153 = ((($__v)) + 8|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ((($154)) + 12|0);
 HEAP32[$153>>2] = $155;
 __THREW__ = 0;
 invoke_vii(489,($59|0),($__v|0));
 $156 = __THREW__; __THREW__ = 0;
 $157 = $156&1;
 if ($157) {
  $158 = ___cxa_find_matching_catch()|0;
  $159 = tempRet0;
  $57 = $158;
  $58 = $159;
  __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  $160 = $57;
  $161 = $58;
  ___resumeException($160|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN5SceneC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $mvp = 0, $p = 0, $res1 = 0, $res2 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $22 = sp;
 $29 = sp + 605|0;
 $__annotator$i = sp + 604|0;
 $48 = sp + 416|0;
 $51 = sp + 404|0;
 $64 = sp + 352|0;
 $67 = sp + 340|0;
 $74 = sp + 312|0;
 $77 = sp + 300|0;
 $85 = sp + 268|0;
 $86 = sp + 264|0;
 $87 = sp + 260|0;
 $88 = sp + 256|0;
 $89 = sp + 252|0;
 $90 = sp + 184|0;
 $mvp = sp + 120|0;
 $91 = sp + 56|0;
 $v = sp + 40|0;
 $res1 = sp + 24|0;
 $res2 = sp + 8|0;
 $82 = $this;
 $92 = $82;
 __ZN5Asset6AssetsC2Ev($92);
 $93 = ((($92)) + 220|0);
 $94 = ((($92)) + 116|0);
 $95 = ((($94)) + 36|0);
 ;HEAP32[$93>>2]=HEAP32[$95>>2]|0;HEAP32[$93+4>>2]=HEAP32[$95+4>>2]|0;HEAP32[$93+8>>2]=HEAP32[$95+8>>2]|0;HEAP32[$93+12>>2]=HEAP32[$95+12>>2]|0;
 $96 = ((($92)) + 236|0);
 __ZN6Shader6SimpleC2Ev($96);
 $97 = ((($92)) + 272|0);
 $98 = ((($92)) + 220|0);
 __THREW__ = 0;
 invoke_viii(492,($97|0),($92|0),($98|0));
 $99 = __THREW__; __THREW__ = 0;
 $100 = $99&1;
 if ($100) {
  $301 = ___cxa_find_matching_catch()|0;
  $302 = tempRet0;
  $83 = $301;
  $84 = $302;
  __ZN6Shader6SimpleD2Ev($96);
  __ZN5Asset6AssetsD2Ev($92);
  $325 = $83;
  $326 = $84;
  ___resumeException($325|0);
  // unreachable;
 }
 $101 = ((($92)) + 496|0);
 $102 = ((($92)) + 12|0);
 $103 = ((($92)) + 64|0);
 $104 = ((($103)) + 12|0);
 $81 = $104;
 $105 = $81;
 $106 = ((($105)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = HEAP32[$105>>2]|0;
 $109 = $107;
 $110 = $108;
 $111 = (($109) - ($110))|0;
 $112 = (($111|0) / 40)&-1;
 __THREW__ = 0;
 invoke_viiii(493,($101|0),57005,($102|0),($112|0));
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $303 = ___cxa_find_matching_catch()|0;
  $304 = tempRet0;
  $83 = $303;
  $84 = $304;
 } else {
  $115 = ((($92)) + 760|0);
  $80 = $115;
  $116 = $80;
  $79 = $116;
  $117 = $79;
  $78 = $117;
  HEAP32[$117>>2] = 0;
  $118 = ((($117)) + 4|0);
  HEAP32[$118>>2] = 0;
  $119 = ((($117)) + 8|0);
  $76 = $119;
  HEAP32[$77>>2] = 0;
  $120 = $76;
  $75 = $77;
  $121 = $75;
  $122 = HEAP32[$121>>2]|0;
  $73 = $120;
  HEAP32[$74>>2] = $122;
  $123 = $73;
  $72 = $123;
  $71 = $74;
  $124 = $71;
  $125 = HEAP32[$124>>2]|0;
  HEAP32[$123>>2] = $125;
  $126 = ((($92)) + 772|0);
  $70 = $126;
  $127 = $70;
  $69 = $127;
  $128 = $69;
  $68 = $128;
  HEAP32[$128>>2] = 0;
  $129 = ((($128)) + 4|0);
  HEAP32[$129>>2] = 0;
  $130 = ((($128)) + 8|0);
  $66 = $130;
  HEAP32[$67>>2] = 0;
  $131 = $66;
  $65 = $67;
  $132 = $65;
  $133 = HEAP32[$132>>2]|0;
  $63 = $131;
  HEAP32[$64>>2] = $133;
  $134 = $63;
  $62 = $134;
  $61 = $64;
  $135 = $61;
  $136 = HEAP32[$135>>2]|0;
  HEAP32[$134>>2] = $136;
  $137 = ((($92)) + 784|0);
  $60 = $137;
  $138 = $60;
  $59 = $138;
  $139 = $59;
  $58 = $139;
  $140 = $58;
  $57 = $140;
  $141 = $57;
  $56 = $141;
  $142 = $56;
  $55 = $142;
  $143 = $55;
  HEAP32[$140>>2] = $143;
  $144 = ((($140)) + 4|0);
  $54 = $140;
  $145 = $54;
  $53 = $145;
  $146 = $53;
  $52 = $146;
  $147 = $52;
  HEAP32[$144>>2] = $147;
  $148 = ((($139)) + 8|0);
  $50 = $148;
  HEAP32[$51>>2] = 0;
  $149 = $50;
  $49 = $51;
  $150 = $49;
  $151 = HEAP32[$150>>2]|0;
  $47 = $149;
  HEAP32[$48>>2] = $151;
  $152 = $47;
  $46 = $152;
  $45 = $48;
  $153 = $45;
  $154 = HEAP32[$153>>2]|0;
  HEAP32[$152>>2] = $154;
  $155 = ((($92)) + 796|0);
  HEAPF32[$85>>2] = 5.0;
  HEAPF32[$86>>2] = 0.0;
  HEAPF32[$87>>2] = 0.0;
  __THREW__ = 0;
  invoke_viiii(405,($155|0),($85|0),($86|0),($87|0));
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   label = 30;
  } else {
   $158 = ((($155)) + 12|0);
   __THREW__ = 0;
   invoke_vi(475,($158|0));
   $159 = __THREW__; __THREW__ = 0;
   $160 = $159&1;
   if ($160) {
    label = 30;
   } else {
    $161 = ((($92)) + 872|0);
    $162 = HEAP32[(2616)>>2]|0;
    $163 = HEAP32[(2620)>>2]|0;
    __THREW__ = 0;
    invoke_viii(494,($161|0),($162|0),($163|0));
    $164 = __THREW__; __THREW__ = 0;
    $165 = $164&1;
    if ($165) {
     $307 = ___cxa_find_matching_catch()|0;
     $308 = tempRet0;
     $83 = $307;
     $84 = $308;
    } else {
     $166 = ((($92)) + 1076|0);
     __THREW__ = 0;
     invoke_vi(495,($166|0));
     $167 = __THREW__; __THREW__ = 0;
     $168 = $167&1;
     if ($168) {
      label = 32;
     } else {
      $169 = ((($92)) + 1080|0);
      __THREW__ = 0;
      invoke_vi(496,($169|0));
      $170 = __THREW__; __THREW__ = 0;
      $171 = $170&1;
      if ($171) {
       label = 32;
      } else {
       $172 = ((($92)) + 1132|0);
       __THREW__ = 0;
       invoke_vi(475,($172|0));
       $173 = __THREW__; __THREW__ = 0;
       $174 = $173&1;
       if ($174) {
        label = 32;
       } else {
        $175 = ((($92)) + 772|0);
        HEAP32[$88>>2] = 48879;
        $176 = ((($92)) + 12|0);
        $177 = ((($92)) + 64|0);
        $178 = ((($177)) + 12|0);
        $44 = $178;
        $179 = $44;
        $180 = ((($179)) + 4|0);
        $181 = HEAP32[$180>>2]|0;
        $182 = HEAP32[$179>>2]|0;
        $183 = $181;
        $184 = $182;
        $185 = (($183) - ($184))|0;
        $186 = (($185|0) / 40)&-1;
        HEAP32[$89>>2] = $186;
        $40 = $175;
        $41 = $88;
        $42 = $176;
        $43 = $89;
        $187 = $40;
        $188 = ((($187)) + 4|0);
        $189 = HEAP32[$188>>2]|0;
        $39 = $187;
        $190 = $39;
        $191 = ((($190)) + 8|0);
        $38 = $191;
        $192 = $38;
        $37 = $192;
        $193 = $37;
        $194 = HEAP32[$193>>2]|0;
        $195 = ($189>>>0)<($194>>>0);
        if ($195) {
         __ZNSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i,$187,1);
         $36 = $187;
         $196 = $36;
         $197 = ((($196)) + 8|0);
         $35 = $197;
         $198 = $35;
         $34 = $198;
         $199 = $34;
         $200 = ((($187)) + 4|0);
         $201 = HEAP32[$200>>2]|0;
         $30 = $201;
         $202 = $30;
         $203 = $41;
         $3 = $203;
         $204 = $3;
         $205 = $42;
         $1 = $205;
         $206 = $1;
         $207 = $43;
         $2 = $207;
         $208 = $2;
         $24 = $199;
         $25 = $202;
         $26 = $204;
         $27 = $206;
         $28 = $208;
         $209 = $24;
         $210 = $25;
         $211 = $26;
         $23 = $211;
         $212 = $23;
         $213 = $27;
         $5 = $213;
         $214 = $5;
         $215 = $28;
         $4 = $215;
         $216 = $4;
         ;HEAP8[$22>>0]=HEAP8[$29>>0]|0;
         $17 = $209;
         $18 = $210;
         $19 = $212;
         $20 = $214;
         $21 = $216;
         $217 = $17;
         $218 = $18;
         $219 = $19;
         $16 = $219;
         $220 = $16;
         $221 = $20;
         $7 = $221;
         $222 = $7;
         $223 = $21;
         $6 = $223;
         $224 = $6;
         $11 = $217;
         $12 = $218;
         $13 = $220;
         $14 = $222;
         $15 = $224;
         $225 = $12;
         $226 = $13;
         $10 = $226;
         $227 = $10;
         $228 = HEAP32[$227>>2]|0;
         $229 = $14;
         $9 = $229;
         $230 = $9;
         $231 = $15;
         $8 = $231;
         $232 = $8;
         $233 = HEAP32[$232>>2]|0;
         __THREW__ = 0;
         invoke_viiii(493,($225|0),($228|0),($230|0),($233|0));
         $234 = __THREW__; __THREW__ = 0;
         $235 = $234&1;
         if ($235) {
          label = 33;
         } else {
          __ZNSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
          $236 = ((($187)) + 4|0);
          $237 = HEAP32[$236>>2]|0;
          $238 = ((($237)) + 264|0);
          HEAP32[$236>>2] = $238;
          label = 13;
         }
        } else {
         $239 = $41;
         $31 = $239;
         $240 = $31;
         $241 = $42;
         $32 = $241;
         $242 = $32;
         $243 = $43;
         $33 = $243;
         $244 = $33;
         __THREW__ = 0;
         invoke_viiii(497,($187|0),($240|0),($242|0),($244|0));
         $245 = __THREW__; __THREW__ = 0;
         $246 = $245&1;
         if ($246) {
          label = 33;
         } else {
          label = 13;
         }
        }
        do {
         if ((label|0) == 13) {
          $247 = ((($92)) + 772|0);
          $0 = $247;
          $248 = $0;
          $249 = ((($248)) + 4|0);
          $250 = HEAP32[$249>>2]|0;
          $251 = ((($250)) + -264|0);
          $p = $251;
          $252 = $p;
          $253 = ((($252)) + 44|0);
          HEAPF32[$253>>2] = 100.0;
          __THREW__ = 0;
          $254 = (invoke_iiii(498,($92|0),256,256)|0);
          $255 = __THREW__; __THREW__ = 0;
          $256 = $255&1;
          if ($256) {
           label = 33;
          } else {
           $257 = ((($92)) + 1124|0);
           HEAP32[$257>>2] = $254;
           $258 = ((($92)) + 796|0);
           $259 = ((($258)) + 12|0);
           $260 = ((($92)) + 796|0);
           $261 = ((($260)) + 12|0);
           $262 = ((($92)) + 796|0);
           __THREW__ = 0;
           invoke_viii(452,($90|0),($261|0),($262|0));
           $263 = __THREW__; __THREW__ = 0;
           $264 = $263&1;
           if ($264) {
            label = 33;
           } else {
            __THREW__ = 0;
            (invoke_iii(453,($259|0),($90|0))|0);
            $265 = __THREW__; __THREW__ = 0;
            $266 = $265&1;
            if ($266) {
             $313 = ___cxa_find_matching_catch()|0;
             $314 = tempRet0;
             $83 = $313;
             $84 = $314;
             __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($90);
             break;
            }
            __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($90);
            $267 = ((($92)) + 872|0);
            $268 = ((($267)) + 76|0);
            $269 = ((($92)) + 872|0);
            $270 = ((($269)) + 12|0);
            __THREW__ = 0;
            invoke_viii(477,($91|0),($268|0),($270|0));
            $271 = __THREW__; __THREW__ = 0;
            $272 = $271&1;
            if ($272) {
             label = 33;
            } else {
             $273 = ((($92)) + 796|0);
             $274 = ((($273)) + 12|0);
             __THREW__ = 0;
             invoke_viii(477,($mvp|0),($91|0),($274|0));
             $275 = __THREW__; __THREW__ = 0;
             $276 = $275&1;
             if ($276) {
              $315 = ___cxa_find_matching_catch()|0;
              $316 = tempRet0;
              $83 = $315;
              $84 = $316;
              __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($91);
              break;
             }
             __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($91);
             __THREW__ = 0;
             invoke_vidddd(499,($v|0),-1.0,-1.0,0.0,1.0);
             $277 = __THREW__; __THREW__ = 0;
             $278 = $277&1;
             if ($278) {
              $317 = ___cxa_find_matching_catch()|0;
              $318 = tempRet0;
              $83 = $317;
              $84 = $318;
             } else {
              __THREW__ = 0;
              invoke_viii(500,($res1|0),($v|0),($mvp|0));
              $279 = __THREW__; __THREW__ = 0;
              $280 = $279&1;
              if ($280) {
               $319 = ___cxa_find_matching_catch()|0;
               $320 = tempRet0;
               $83 = $319;
               $84 = $320;
              } else {
               __THREW__ = 0;
               invoke_viii(501,($res2|0),($mvp|0),($v|0));
               $281 = __THREW__; __THREW__ = 0;
               $282 = $281&1;
               if ($282) {
                $321 = ___cxa_find_matching_catch()|0;
                $322 = tempRet0;
                $83 = $321;
                $84 = $322;
               } else {
                $283 = ((($92)) + 1116|0);
                __THREW__ = 0;
                invoke_vii(502,1,($283|0));
                $284 = __THREW__; __THREW__ = 0;
                $285 = $284&1;
                do {
                 if (!($285)) {
                  $286 = ((($92)) + 1116|0);
                  $287 = HEAP32[$286>>2]|0;
                  __THREW__ = 0;
                  invoke_vii(503,34962,($287|0));
                  $288 = __THREW__; __THREW__ = 0;
                  $289 = $288&1;
                  if ($289) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viiii(504,34962,36,(5220|0),35044);
                  $290 = __THREW__; __THREW__ = 0;
                  $291 = $290&1;
                  if ($291) {
                   break;
                  }
                  $292 = ((($92)) + 1120|0);
                  __THREW__ = 0;
                  invoke_vii(502,1,($292|0));
                  $293 = __THREW__; __THREW__ = 0;
                  $294 = $293&1;
                  if ($294) {
                   break;
                  }
                  $295 = ((($92)) + 1120|0);
                  $296 = HEAP32[$295>>2]|0;
                  __THREW__ = 0;
                  invoke_vii(503,34962,($296|0));
                  $297 = __THREW__; __THREW__ = 0;
                  $298 = $297&1;
                  if ($298) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viiii(504,34962,24,(5256|0),35044);
                  $299 = __THREW__; __THREW__ = 0;
                  $300 = $299&1;
                  if ($300) {
                   break;
                  }
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($res2);
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($res1);
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($v);
                  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
                  STACKTOP = sp;return;
                 }
                } while(0);
                $323 = ___cxa_find_matching_catch()|0;
                $324 = tempRet0;
                $83 = $323;
                $84 = $324;
                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($res2);
               }
               __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($res1);
              }
              __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($v);
             }
             __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($mvp);
            }
           }
          }
         }
        } while(0);
        if ((label|0) == 33) {
         $311 = ___cxa_find_matching_catch()|0;
         $312 = tempRet0;
         $83 = $311;
         $84 = $312;
        }
        __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($172);
       }
      }
     }
     if ((label|0) == 32) {
      $309 = ___cxa_find_matching_catch()|0;
      $310 = tempRet0;
      $83 = $309;
      $84 = $310;
     }
     __ZN6CameraD2Ev($161);
    }
    __ZN6ObjectD2Ev($155);
   }
  }
  if ((label|0) == 30) {
   $305 = ___cxa_find_matching_catch()|0;
   $306 = tempRet0;
   $83 = $305;
   $84 = $306;
  }
  __ZNSt3__14listIN8Renderer9ParticlesENS_9allocatorIS2_EEED2Ev($137);
  __ZNSt3__16vectorI6ProtoXNS_9allocatorIS1_EEED2Ev($126);
  __ZNSt3__16vectorI7MissileNS_9allocatorIS1_EEED2Ev($115);
 }
 __ZN8RendererD2Ev($97);
 __ZN6Shader6SimpleD2Ev($96);
 __ZN5Asset6AssetsD2Ev($92);
 $325 = $83;
 $326 = $84;
 ___resumeException($325|0);
 // unreachable;
}
function __ZN5Asset6AssetsC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0.0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0.0, $564 = 0.0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0.0, $581 = 0.0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0.0, $611 = 0.0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0.0, $617 = 0.0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0.0, $623 = 0.0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__annotator$i = 0, $__annotator$i14 = 0, $__annotator$i17 = 0, $__annotator$i20 = 0, $__annotator$i32 = 0, $__begin = 0, $__begin7 = 0, $__end = 0, $__end8 = 0, $__range = 0, $__range6 = 0, $aabb = 0, $eh$lpad$body$index30Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body13$index36Z2D = 0;
 var $eh$lpad$body13$indexZ2D = 0, $eh$lpad$body30$index41Z2D = 0, $eh$lpad$body30$indexZ2D = 0, $i = 0, $i9 = 0, $l = 0, $lines = 0, $lines4 = 0, $m = 0, $mesh = 0, $mesh1 = 0, $mesh2 = 0, $propulsion_scale = 0.0, $scale = 0.0, $texcoord = 0, $texcoord5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer20 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $vertices = 0, $vertices3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer20 = sp + 184|0;
 $vararg_buffer11 = sp + 128|0;
 $vararg_buffer6 = sp + 112|0;
 $vararg_buffer1 = sp + 96|0;
 $vararg_buffer = sp + 88|0;
 $22 = sp + 2364|0;
 $25 = sp + 2352|0;
 $29 = sp + 2336|0;
 $32 = sp + 2324|0;
 $43 = sp + 2280|0;
 $46 = sp + 2268|0;
 $50 = sp + 2252|0;
 $53 = sp + 2240|0;
 $64 = sp + 80|0;
 $69 = sp + 2465|0;
 $__annotator$i32 = sp + 2464|0;
 $87 = sp + 2112|0;
 $90 = sp + 2100|0;
 $96 = sp + 72|0;
 $104 = sp + 2048|0;
 $107 = sp + 2036|0;
 $113 = sp + 64|0;
 $121 = sp + 1984|0;
 $124 = sp + 1972|0;
 $130 = sp + 56|0;
 $140 = sp + 48|0;
 $145 = sp + 2463|0;
 $__annotator$i20 = sp + 2462|0;
 $165 = sp + 40|0;
 $170 = sp + 2461|0;
 $__annotator$i17 = sp + 2460|0;
 $190 = sp + 32|0;
 $195 = sp + 2459|0;
 $__annotator$i14 = sp + 2458|0;
 $217 = sp + 24|0;
 $222 = sp + 2457|0;
 $__annotator$i = sp + 2456|0;
 $240 = sp + 1544|0;
 $243 = sp + 1532|0;
 $249 = sp + 16|0;
 $257 = sp + 1480|0;
 $260 = sp + 1468|0;
 $266 = sp + 8|0;
 $274 = sp + 1416|0;
 $277 = sp + 1404|0;
 $283 = sp;
 $287 = sp + 1368|0;
 $290 = sp + 1356|0;
 $vertices = sp + 1320|0;
 $295 = sp + 1312|0;
 $296 = sp + 1272|0;
 $297 = sp + 1268|0;
 $298 = sp + 1264|0;
 $299 = sp + 1260|0;
 $302 = sp + 1248|0;
 $303 = sp + 1244|0;
 $304 = sp + 1240|0;
 $305 = sp + 1236|0;
 $306 = sp + 1232|0;
 $307 = sp + 1228|0;
 $lines = sp + 1216|0;
 $308 = sp + 1208|0;
 $texcoord = sp + 1192|0;
 $309 = sp + 1184|0;
 $310 = sp + 1160|0;
 $311 = sp + 1156|0;
 $312 = sp + 1152|0;
 $313 = sp + 1148|0;
 $314 = sp + 1144|0;
 $315 = sp + 1140|0;
 $316 = sp + 1136|0;
 $317 = sp + 1084|0;
 $318 = sp + 1080|0;
 $mesh = sp + 980|0;
 $319 = sp + 928|0;
 $320 = sp + 924|0;
 $mesh1 = sp + 824|0;
 $321 = sp + 772|0;
 $322 = sp + 768|0;
 $mesh2 = sp + 668|0;
 $323 = sp + 616|0;
 $324 = sp + 612|0;
 $vertices3 = sp + 600|0;
 $325 = sp + 592|0;
 $326 = sp + 552|0;
 $327 = sp + 548|0;
 $328 = sp + 544|0;
 $329 = sp + 540|0;
 $330 = sp + 536|0;
 $331 = sp + 532|0;
 $332 = sp + 528|0;
 $333 = sp + 524|0;
 $334 = sp + 520|0;
 $335 = sp + 516|0;
 $lines4 = sp + 504|0;
 $336 = sp + 496|0;
 $texcoord5 = sp + 480|0;
 $337 = sp + 472|0;
 $338 = sp + 448|0;
 $339 = sp + 444|0;
 $340 = sp + 440|0;
 $341 = sp + 436|0;
 $342 = sp + 432|0;
 $343 = sp + 428|0;
 $344 = sp + 424|0;
 $345 = sp + 372|0;
 $346 = sp + 368|0;
 $__begin = sp + 360|0;
 $__end = sp + 356|0;
 $__begin7 = sp + 344|0;
 $__end8 = sp + 340|0;
 $347 = sp + 320|0;
 $348 = sp + 308|0;
 $aabb = sp + 288|0;
 $349 = sp + 272|0;
 $350 = sp + 256|0;
 $351 = sp + 232|0;
 $294 = $this;
 $352 = $294;
 $293 = $352;
 $353 = $293;
 $292 = $353;
 $354 = $292;
 $291 = $354;
 HEAP32[$354>>2] = 0;
 $355 = ((($354)) + 4|0);
 HEAP32[$355>>2] = 0;
 $356 = ((($354)) + 8|0);
 $289 = $356;
 HEAP32[$290>>2] = 0;
 $357 = $289;
 $288 = $290;
 $358 = $288;
 $359 = HEAP32[$358>>2]|0;
 $286 = $357;
 HEAP32[$287>>2] = $359;
 $360 = $286;
 $285 = $360;
 $284 = $287;
 $361 = $284;
 $362 = HEAP32[$361>>2]|0;
 HEAP32[$360>>2] = $362;
 $363 = ((($352)) + 12|0);
 __ZN5Asset5ModelC2Ev($363);
 $364 = ((($352)) + 64|0);
 __ZN5Asset5ModelC2Ev($364);
 $365 = ((($352)) + 116|0);
 __ZN5Asset5ModelC2Ev($365);
 $366 = ((($352)) + 168|0);
 __ZN5Asset5ModelC2Ev($366);
 $scale = 40.0;
 $propulsion_scale = 80.0;
 HEAPF32[$297>>2] = 0.0;
 HEAPF32[$298>>2] = 0.0;
 HEAPF32[$299>>2] = 0.0;
 __THREW__ = 0;
 invoke_viiii(405,($296|0),($297|0),($298|0),($299|0));
 $367 = __THREW__; __THREW__ = 0;
 $368 = $367&1;
 L1: do {
  if ($368) {
   label = 80;
  } else {
   $369 = ((($296)) + 12|0);
   HEAPF32[$302>>2] = 1.0;
   HEAPF32[$303>>2] = 0.0;
   HEAPF32[$304>>2] = 0.0;
   __THREW__ = 0;
   invoke_viiii(405,($369|0),($302|0),($303|0),($304|0));
   $370 = __THREW__; __THREW__ = 0;
   $371 = $370&1;
   if ($371) {
    label = 80;
   } else {
    $372 = ((($369)) + 12|0);
    HEAPF32[$305>>2] = 1.0;
    HEAPF32[$306>>2] = -1.0;
    HEAPF32[$307>>2] = 0.0;
    __THREW__ = 0;
    invoke_viiii(405,($372|0),($305|0),($306|0),($307|0));
    $373 = __THREW__; __THREW__ = 0;
    $374 = $373&1;
    if ($374) {
     label = 80;
    } else {
     HEAP32[$295>>2] = $296;
     $375 = ((($295)) + 4|0);
     HEAP32[$375>>2] = 3;
     ;HEAP8[$283>>0]=HEAP8[$295>>0]|0;HEAP8[$283+1>>0]=HEAP8[$295+1>>0]|0;HEAP8[$283+2>>0]=HEAP8[$295+2>>0]|0;HEAP8[$283+3>>0]=HEAP8[$295+3>>0]|0;HEAP8[$283+4>>0]=HEAP8[$295+4>>0]|0;HEAP8[$283+5>>0]=HEAP8[$295+5>>0]|0;HEAP8[$283+6>>0]=HEAP8[$295+6>>0]|0;HEAP8[$283+7>>0]=HEAP8[$295+7>>0]|0;
     $280 = $vertices;
     $376 = $280;
     $279 = $376;
     $377 = $279;
     $278 = $377;
     HEAP32[$377>>2] = 0;
     $378 = ((($377)) + 4|0);
     HEAP32[$378>>2] = 0;
     $379 = ((($377)) + 8|0);
     $276 = $379;
     HEAP32[$277>>2] = 0;
     $380 = $276;
     $275 = $277;
     $381 = $275;
     $382 = HEAP32[$381>>2]|0;
     $273 = $380;
     HEAP32[$274>>2] = $382;
     $383 = $273;
     $272 = $383;
     $271 = $274;
     $384 = $271;
     $385 = HEAP32[$384>>2]|0;
     HEAP32[$383>>2] = $385;
     $270 = $283;
     $386 = $270;
     $387 = ((($386)) + 4|0);
     $388 = HEAP32[$387>>2]|0;
     $389 = ($388>>>0)>(0);
     do {
      if ($389) {
       $269 = $283;
       $390 = $269;
       $391 = ((($390)) + 4|0);
       $392 = HEAP32[$391>>2]|0;
       __THREW__ = 0;
       invoke_vii(419,($376|0),($392|0));
       $393 = __THREW__; __THREW__ = 0;
       $394 = $393&1;
       if (!($394)) {
        $267 = $283;
        $395 = $267;
        $396 = HEAP32[$395>>2]|0;
        $268 = $283;
        $397 = $268;
        $398 = HEAP32[$397>>2]|0;
        $399 = ((($397)) + 4|0);
        $400 = HEAP32[$399>>2]|0;
        $401 = (($398) + (($400*12)|0)|0);
        __THREW__ = 0;
        invoke_viii(505,($376|0),($396|0),($401|0));
        $402 = __THREW__; __THREW__ = 0;
        $403 = $402&1;
        if (!($403)) {
         break;
        }
       }
       $404 = ___cxa_find_matching_catch()|0;
       $405 = tempRet0;
       $281 = $404;
       $282 = $405;
       __ZNSt3__113__vector_baseIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($376);
       $406 = $281;
       $407 = $282;
       $eh$lpad$body$index30Z2D = $407;$eh$lpad$body$indexZ2D = $406;
       break L1;
      }
     } while(0);
     HEAP32[$308>>2] = 5280;
     $408 = ((($308)) + 4|0);
     HEAP32[$408>>2] = 2;
     ;HEAP8[$266>>0]=HEAP8[$308>>0]|0;HEAP8[$266+1>>0]=HEAP8[$308+1>>0]|0;HEAP8[$266+2>>0]=HEAP8[$308+2>>0]|0;HEAP8[$266+3>>0]=HEAP8[$308+3>>0]|0;HEAP8[$266+4>>0]=HEAP8[$308+4>>0]|0;HEAP8[$266+5>>0]=HEAP8[$308+5>>0]|0;HEAP8[$266+6>>0]=HEAP8[$308+6>>0]|0;HEAP8[$266+7>>0]=HEAP8[$308+7>>0]|0;
     $263 = $lines;
     $409 = $263;
     $262 = $409;
     $410 = $262;
     $261 = $410;
     HEAP32[$410>>2] = 0;
     $411 = ((($410)) + 4|0);
     HEAP32[$411>>2] = 0;
     $412 = ((($410)) + 8|0);
     $259 = $412;
     HEAP32[$260>>2] = 0;
     $413 = $259;
     $258 = $260;
     $414 = $258;
     $415 = HEAP32[$414>>2]|0;
     $256 = $413;
     HEAP32[$257>>2] = $415;
     $416 = $256;
     $255 = $416;
     $254 = $257;
     $417 = $254;
     $418 = HEAP32[$417>>2]|0;
     HEAP32[$416>>2] = $418;
     $253 = $266;
     $419 = $253;
     $420 = ((($419)) + 4|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = ($421>>>0)>(0);
     do {
      if ($422) {
       $252 = $266;
       $423 = $252;
       $424 = ((($423)) + 4|0);
       $425 = HEAP32[$424>>2]|0;
       __THREW__ = 0;
       invoke_vii(506,($409|0),($425|0));
       $426 = __THREW__; __THREW__ = 0;
       $427 = $426&1;
       if (!($427)) {
        $250 = $266;
        $428 = $250;
        $429 = HEAP32[$428>>2]|0;
        $251 = $266;
        $430 = $251;
        $431 = HEAP32[$430>>2]|0;
        $432 = ((($430)) + 4|0);
        $433 = HEAP32[$432>>2]|0;
        $434 = (($431) + ($433<<3)|0);
        __THREW__ = 0;
        invoke_viii(507,($409|0),($429|0),($434|0));
        $435 = __THREW__; __THREW__ = 0;
        $436 = $435&1;
        if (!($436)) {
         label = 12;
         break;
        }
       }
       $437 = ___cxa_find_matching_catch()|0;
       $438 = tempRet0;
       $264 = $437;
       $265 = $438;
       __ZNSt3__113__vector_baseIN10MeshLoader8PolyLineENS_9allocatorIS2_EEED2Ev($409);
       $439 = $264;
       $440 = $265;
       $300 = $439;
       $301 = $440;
      } else {
       label = 12;
      }
     } while(0);
     if ((label|0) == 12) {
      HEAPF32[$311>>2] = 0.0;
      HEAPF32[$312>>2] = 0.0;
      __THREW__ = 0;
      invoke_viii(508,($310|0),($311|0),($312|0));
      $441 = __THREW__; __THREW__ = 0;
      $442 = $441&1;
      L18: do {
       if ($442) {
        label = 82;
       } else {
        $443 = ((($310)) + 8|0);
        HEAPF32[$313>>2] = 0.5;
        HEAPF32[$314>>2] = 0.0;
        __THREW__ = 0;
        invoke_viii(508,($443|0),($313|0),($314|0));
        $444 = __THREW__; __THREW__ = 0;
        $445 = $444&1;
        if ($445) {
         label = 82;
        } else {
         $446 = ((($443)) + 8|0);
         HEAPF32[$315>>2] = 1.0;
         HEAPF32[$316>>2] = 0.0;
         __THREW__ = 0;
         invoke_viii(508,($446|0),($315|0),($316|0));
         $447 = __THREW__; __THREW__ = 0;
         $448 = $447&1;
         if ($448) {
          label = 82;
         } else {
          HEAP32[$309>>2] = $310;
          $449 = ((($309)) + 4|0);
          HEAP32[$449>>2] = 3;
          ;HEAP8[$249>>0]=HEAP8[$309>>0]|0;HEAP8[$249+1>>0]=HEAP8[$309+1>>0]|0;HEAP8[$249+2>>0]=HEAP8[$309+2>>0]|0;HEAP8[$249+3>>0]=HEAP8[$309+3>>0]|0;HEAP8[$249+4>>0]=HEAP8[$309+4>>0]|0;HEAP8[$249+5>>0]=HEAP8[$309+5>>0]|0;HEAP8[$249+6>>0]=HEAP8[$309+6>>0]|0;HEAP8[$249+7>>0]=HEAP8[$309+7>>0]|0;
          $246 = $texcoord;
          $450 = $246;
          $245 = $450;
          $451 = $245;
          $244 = $451;
          HEAP32[$451>>2] = 0;
          $452 = ((($451)) + 4|0);
          HEAP32[$452>>2] = 0;
          $453 = ((($451)) + 8|0);
          $242 = $453;
          HEAP32[$243>>2] = 0;
          $454 = $242;
          $241 = $243;
          $455 = $241;
          $456 = HEAP32[$455>>2]|0;
          $239 = $454;
          HEAP32[$240>>2] = $456;
          $457 = $239;
          $238 = $457;
          $237 = $240;
          $458 = $237;
          $459 = HEAP32[$458>>2]|0;
          HEAP32[$457>>2] = $459;
          $236 = $249;
          $460 = $236;
          $461 = ((($460)) + 4|0);
          $462 = HEAP32[$461>>2]|0;
          $463 = ($462>>>0)>(0);
          do {
           if ($463) {
            $235 = $249;
            $464 = $235;
            $465 = ((($464)) + 4|0);
            $466 = HEAP32[$465>>2]|0;
            __THREW__ = 0;
            invoke_vii(401,($450|0),($466|0));
            $467 = __THREW__; __THREW__ = 0;
            $468 = $467&1;
            if (!($468)) {
             $233 = $249;
             $469 = $233;
             $470 = HEAP32[$469>>2]|0;
             $234 = $249;
             $471 = $234;
             $472 = HEAP32[$471>>2]|0;
             $473 = ((($471)) + 4|0);
             $474 = HEAP32[$473>>2]|0;
             $475 = (($472) + ($474<<3)|0);
             __THREW__ = 0;
             invoke_viii(509,($450|0),($470|0),($475|0));
             $476 = __THREW__; __THREW__ = 0;
             $477 = $476&1;
             if (!($477)) {
              break;
             }
            }
            $478 = ___cxa_find_matching_catch()|0;
            $479 = tempRet0;
            $247 = $478;
            $248 = $479;
            __ZNSt3__113__vector_baseIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($450);
            $480 = $247;
            $481 = $248;
            $eh$lpad$body13$index36Z2D = $481;$eh$lpad$body13$indexZ2D = $480;
            label = 83;
            break L18;
           }
          } while(0);
          $482 = ((($352)) + 168|0);
          __THREW__ = 0;
          invoke_viiiidd(510,($317|0),($vertices|0),($lines|0),($texcoord|0),40.0,3.0);
          $483 = __THREW__; __THREW__ = 0;
          $484 = $483&1;
          do {
           if (!($484)) {
            (__ZN5Asset5ModelaSEOS0_($482,$317)|0);
            __ZN5Asset5ModelD2Ev($317);
            $485 = ((($352)) + 168|0);
            HEAP32[$318>>2] = $485;
            $231 = $352;
            $232 = $318;
            $486 = $231;
            $487 = ((($486)) + 4|0);
            $488 = HEAP32[$487>>2]|0;
            $230 = $486;
            $489 = $230;
            $490 = ((($489)) + 8|0);
            $229 = $490;
            $491 = $229;
            $228 = $491;
            $492 = $228;
            $493 = HEAP32[$492>>2]|0;
            $494 = ($488>>>0)<($493>>>0);
            if ($494) {
             __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$486,1);
             $227 = $486;
             $495 = $227;
             $496 = ((($495)) + 8|0);
             $226 = $496;
             $497 = $226;
             $225 = $497;
             $498 = $225;
             $499 = ((($486)) + 4|0);
             $500 = HEAP32[$499>>2]|0;
             $223 = $500;
             $501 = $223;
             $502 = $232;
             $208 = $502;
             $503 = $208;
             $219 = $498;
             $220 = $501;
             $221 = $503;
             $504 = $219;
             $505 = $220;
             $506 = $221;
             $218 = $506;
             $507 = $218;
             ;HEAP8[$217>>0]=HEAP8[$222>>0]|0;
             $214 = $504;
             $215 = $505;
             $216 = $507;
             $508 = $214;
             $509 = $215;
             $510 = $216;
             $213 = $510;
             $511 = $213;
             $210 = $508;
             $211 = $509;
             $212 = $511;
             $512 = $211;
             $513 = $212;
             $209 = $513;
             $514 = $209;
             $515 = HEAP32[$514>>2]|0;
             HEAP32[$512>>2] = $515;
             __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
             $516 = ((($486)) + 4|0);
             $517 = HEAP32[$516>>2]|0;
             $518 = ((($517)) + 4|0);
             HEAP32[$516>>2] = $518;
            } else {
             $519 = $232;
             $224 = $519;
             $520 = $224;
             __THREW__ = 0;
             invoke_vii(511,($486|0),($520|0));
             $521 = __THREW__; __THREW__ = 0;
             $522 = $521&1;
             if ($522) {
              break;
             }
            }
            __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($texcoord);
            __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEED2Ev($lines);
            __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertices);
            __THREW__ = 0;
            HEAP32[$vararg_buffer>>2] = 17062;
            invoke_vii(432,1,($vararg_buffer|0));
            $523 = __THREW__; __THREW__ = 0;
            $524 = $523&1;
            if ($524) {
             label = 80;
             break L1;
            }
            __THREW__ = 0;
            invoke_vi(512,($mesh|0));
            $525 = __THREW__; __THREW__ = 0;
            $526 = $525&1;
            if ($526) {
             label = 80;
             break L1;
            }
            __THREW__ = 0;
            invoke_vii(513,(17078|0),($mesh|0));
            $527 = __THREW__; __THREW__ = 0;
            $528 = $527&1;
            do {
             if (!($528)) {
              $529 = ((($mesh)) + 24|0);
              $207 = $529;
              $530 = $207;
              $531 = ((($530)) + 4|0);
              $532 = HEAP32[$531>>2]|0;
              $533 = HEAP32[$530>>2]|0;
              $534 = $532;
              $535 = $533;
              $536 = (($534) - ($535))|0;
              $537 = (($536|0) / 12)&-1;
              $206 = $mesh;
              $538 = $206;
              $539 = ((($538)) + 4|0);
              $540 = HEAP32[$539>>2]|0;
              $541 = HEAP32[$538>>2]|0;
              $542 = $540;
              $543 = $541;
              $544 = (($542) - ($543))|0;
              $545 = (($544|0) / 12)&-1;
              __THREW__ = 0;
              HEAP32[$vararg_buffer1>>2] = 17096;
              $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
              HEAP32[$vararg_ptr4>>2] = $537;
              $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
              HEAP32[$vararg_ptr5>>2] = $545;
              invoke_vii(432,1,($vararg_buffer1|0));
              $546 = __THREW__; __THREW__ = 0;
              $547 = $546&1;
              if (!($547)) {
               $548 = ((($mesh)) + 60|0);
               $549 = (__ZNK3gsl4spanI6Layer2Lin1EJEE4sizeEv($548)|0);
               $550 = ((($mesh)) + 68|0);
               $551 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEE4sizeEv($550)|0);
               __THREW__ = 0;
               HEAP32[$vararg_buffer6>>2] = 17124;
               $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
               HEAP32[$vararg_ptr9>>2] = $549;
               $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
               HEAP32[$vararg_ptr10>>2] = $551;
               invoke_vii(432,1,($vararg_buffer6|0));
               $552 = __THREW__; __THREW__ = 0;
               $553 = $552&1;
               if ($553) {
                break;
               }
               $554 = ((($mesh)) + 68|0);
               $555 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($554,5296)|0);
               $556 = ((($555)) + 4|0);
               $557 = +HEAPF32[$556>>2];
               $558 = $557;
               $559 = ((($mesh)) + 68|0);
               $560 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($559,5300)|0);
               $561 = ((($560)) + 4|0);
               $562 = ((($561)) + 4|0);
               $563 = +HEAPF32[$562>>2];
               $564 = $563;
               $565 = ((($mesh)) + 68|0);
               $566 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($565,5304)|0);
               $567 = ((($566)) + 4|0);
               $568 = ((($567)) + 8|0);
               $569 = +HEAPF32[$568>>2];
               $570 = $569;
               $571 = ((($mesh)) + 68|0);
               $572 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($571,5308)|0);
               $573 = ((($572)) + 4|0);
               $574 = +HEAPF32[$573>>2];
               $575 = $574;
               $576 = ((($mesh)) + 68|0);
               $577 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($576,5312)|0);
               $578 = ((($577)) + 4|0);
               $579 = ((($578)) + 4|0);
               $580 = +HEAPF32[$579>>2];
               $581 = $580;
               $582 = ((($mesh)) + 68|0);
               $583 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($582,5316)|0);
               $584 = ((($583)) + 4|0);
               $585 = ((($584)) + 8|0);
               $586 = +HEAPF32[$585>>2];
               $587 = $586;
               __THREW__ = 0;
               HEAP32[$vararg_buffer11>>2] = 17131;
               $vararg_ptr14 = ((($vararg_buffer11)) + 8|0);
               HEAPF64[$vararg_ptr14>>3] = $558;
               $vararg_ptr15 = ((($vararg_buffer11)) + 16|0);
               HEAPF64[$vararg_ptr15>>3] = $564;
               $vararg_ptr16 = ((($vararg_buffer11)) + 24|0);
               HEAPF64[$vararg_ptr16>>3] = $570;
               $vararg_ptr17 = ((($vararg_buffer11)) + 32|0);
               HEAPF64[$vararg_ptr17>>3] = $575;
               $vararg_ptr18 = ((($vararg_buffer11)) + 40|0);
               HEAPF64[$vararg_ptr18>>3] = $581;
               $vararg_ptr19 = ((($vararg_buffer11)) + 48|0);
               HEAPF64[$vararg_ptr19>>3] = $587;
               invoke_vii(432,1,($vararg_buffer11|0));
               $588 = __THREW__; __THREW__ = 0;
               $589 = $588&1;
               if ($589) {
                break;
               }
               $590 = ((($mesh)) + 68|0);
               $591 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($590,5320)|0);
               $592 = ((($591)) + 4|0);
               $593 = +HEAPF32[$592>>2];
               $594 = $593;
               $595 = ((($mesh)) + 68|0);
               $596 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($595,5324)|0);
               $597 = ((($596)) + 4|0);
               $598 = ((($597)) + 4|0);
               $599 = +HEAPF32[$598>>2];
               $600 = $599;
               $601 = ((($mesh)) + 68|0);
               $602 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($601,5328)|0);
               $603 = ((($602)) + 4|0);
               $604 = ((($603)) + 8|0);
               $605 = +HEAPF32[$604>>2];
               $606 = $605;
               $607 = ((($mesh)) + 68|0);
               $608 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($607,5332)|0);
               $609 = ((($608)) + 4|0);
               $610 = +HEAPF32[$609>>2];
               $611 = $610;
               $612 = ((($mesh)) + 68|0);
               $613 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($612,5336)|0);
               $614 = ((($613)) + 4|0);
               $615 = ((($614)) + 4|0);
               $616 = +HEAPF32[$615>>2];
               $617 = $616;
               $618 = ((($mesh)) + 68|0);
               $619 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($618,5340)|0);
               $620 = ((($619)) + 4|0);
               $621 = ((($620)) + 8|0);
               $622 = +HEAPF32[$621>>2];
               $623 = $622;
               __THREW__ = 0;
               HEAPF64[$vararg_buffer20>>3] = $594;
               $vararg_ptr23 = ((($vararg_buffer20)) + 8|0);
               HEAPF64[$vararg_ptr23>>3] = $600;
               $vararg_ptr24 = ((($vararg_buffer20)) + 16|0);
               HEAPF64[$vararg_ptr24>>3] = $606;
               $vararg_ptr25 = ((($vararg_buffer20)) + 24|0);
               HEAPF64[$vararg_ptr25>>3] = $611;
               $vararg_ptr26 = ((($vararg_buffer20)) + 32|0);
               HEAPF64[$vararg_ptr26>>3] = $617;
               $vararg_ptr27 = ((($vararg_buffer20)) + 40|0);
               HEAPF64[$vararg_ptr27>>3] = $623;
               (invoke_iii(514,(17131|0),($vararg_buffer20|0))|0);
               $624 = __THREW__; __THREW__ = 0;
               $625 = $624&1;
               if ($625) {
                break;
               }
               $626 = ((($352)) + 12|0);
               __THREW__ = 0;
               invoke_viidd(515,($319|0),($mesh|0),40.0,3.0);
               $627 = __THREW__; __THREW__ = 0;
               $628 = $627&1;
               if ($628) {
                break;
               }
               (__ZN5Asset5ModelaSEOS0_($626,$319)|0);
               __ZN5Asset5ModelD2Ev($319);
               $629 = ((($352)) + 12|0);
               HEAP32[$320>>2] = $629;
               $204 = $352;
               $205 = $320;
               $630 = $204;
               $631 = ((($630)) + 4|0);
               $632 = HEAP32[$631>>2]|0;
               $203 = $630;
               $633 = $203;
               $634 = ((($633)) + 8|0);
               $202 = $634;
               $635 = $202;
               $201 = $635;
               $636 = $201;
               $637 = HEAP32[$636>>2]|0;
               $638 = ($632>>>0)<($637>>>0);
               if ($638) {
                __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i14,$630,1);
                $200 = $630;
                $639 = $200;
                $640 = ((($639)) + 8|0);
                $199 = $640;
                $641 = $199;
                $198 = $641;
                $642 = $198;
                $643 = ((($630)) + 4|0);
                $644 = HEAP32[$643>>2]|0;
                $196 = $644;
                $645 = $196;
                $646 = $205;
                $181 = $646;
                $647 = $181;
                $192 = $642;
                $193 = $645;
                $194 = $647;
                $648 = $192;
                $649 = $193;
                $650 = $194;
                $191 = $650;
                $651 = $191;
                ;HEAP8[$190>>0]=HEAP8[$195>>0]|0;
                $187 = $648;
                $188 = $649;
                $189 = $651;
                $652 = $187;
                $653 = $188;
                $654 = $189;
                $186 = $654;
                $655 = $186;
                $183 = $652;
                $184 = $653;
                $185 = $655;
                $656 = $184;
                $657 = $185;
                $182 = $657;
                $658 = $182;
                $659 = HEAP32[$658>>2]|0;
                HEAP32[$656>>2] = $659;
                __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i14);
                $660 = ((($630)) + 4|0);
                $661 = HEAP32[$660>>2]|0;
                $662 = ((($661)) + 4|0);
                HEAP32[$660>>2] = $662;
               } else {
                $663 = $205;
                $197 = $663;
                $664 = $197;
                __THREW__ = 0;
                invoke_vii(511,($630|0),($664|0));
                $665 = __THREW__; __THREW__ = 0;
                $666 = $665&1;
                if ($666) {
                 break;
                }
               }
               __ZN10MeshLoader4MeshD2Ev($mesh);
               __THREW__ = 0;
               invoke_vi(512,($mesh1|0));
               $667 = __THREW__; __THREW__ = 0;
               $668 = $667&1;
               if ($668) {
                label = 80;
                break L1;
               }
               __THREW__ = 0;
               invoke_vii(513,(17151|0),($mesh1|0));
               $669 = __THREW__; __THREW__ = 0;
               $670 = $669&1;
               do {
                if (!($670)) {
                 $671 = ((($352)) + 64|0);
                 __THREW__ = 0;
                 invoke_viidd(515,($321|0),($mesh1|0),80.0,3.0);
                 $672 = __THREW__; __THREW__ = 0;
                 $673 = $672&1;
                 if ($673) {
                  break;
                 }
                 (__ZN5Asset5ModelaSEOS0_($671,$321)|0);
                 __ZN5Asset5ModelD2Ev($321);
                 $674 = ((($352)) + 64|0);
                 HEAP32[$322>>2] = $674;
                 $179 = $352;
                 $180 = $322;
                 $675 = $179;
                 $676 = ((($675)) + 4|0);
                 $677 = HEAP32[$676>>2]|0;
                 $178 = $675;
                 $678 = $178;
                 $679 = ((($678)) + 8|0);
                 $177 = $679;
                 $680 = $177;
                 $176 = $680;
                 $681 = $176;
                 $682 = HEAP32[$681>>2]|0;
                 $683 = ($677>>>0)<($682>>>0);
                 if ($683) {
                  __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i17,$675,1);
                  $175 = $675;
                  $684 = $175;
                  $685 = ((($684)) + 8|0);
                  $174 = $685;
                  $686 = $174;
                  $173 = $686;
                  $687 = $173;
                  $688 = ((($675)) + 4|0);
                  $689 = HEAP32[$688>>2]|0;
                  $171 = $689;
                  $690 = $171;
                  $691 = $180;
                  $156 = $691;
                  $692 = $156;
                  $167 = $687;
                  $168 = $690;
                  $169 = $692;
                  $693 = $167;
                  $694 = $168;
                  $695 = $169;
                  $166 = $695;
                  $696 = $166;
                  ;HEAP8[$165>>0]=HEAP8[$170>>0]|0;
                  $162 = $693;
                  $163 = $694;
                  $164 = $696;
                  $697 = $162;
                  $698 = $163;
                  $699 = $164;
                  $161 = $699;
                  $700 = $161;
                  $158 = $697;
                  $159 = $698;
                  $160 = $700;
                  $701 = $159;
                  $702 = $160;
                  $157 = $702;
                  $703 = $157;
                  $704 = HEAP32[$703>>2]|0;
                  HEAP32[$701>>2] = $704;
                  __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i17);
                  $705 = ((($675)) + 4|0);
                  $706 = HEAP32[$705>>2]|0;
                  $707 = ((($706)) + 4|0);
                  HEAP32[$705>>2] = $707;
                 } else {
                  $708 = $180;
                  $172 = $708;
                  $709 = $172;
                  __THREW__ = 0;
                  invoke_vii(511,($675|0),($709|0));
                  $710 = __THREW__; __THREW__ = 0;
                  $711 = $710&1;
                  if ($711) {
                   break;
                  }
                 }
                 __ZN10MeshLoader4MeshD2Ev($mesh1);
                 __THREW__ = 0;
                 invoke_vi(512,($mesh2|0));
                 $712 = __THREW__; __THREW__ = 0;
                 $713 = $712&1;
                 if ($713) {
                  label = 80;
                  break L1;
                 }
                 __THREW__ = 0;
                 invoke_vii(513,(17174|0),($mesh2|0));
                 $714 = __THREW__; __THREW__ = 0;
                 $715 = $714&1;
                 do {
                  if (!($715)) {
                   $716 = ((($352)) + 116|0);
                   __THREW__ = 0;
                   invoke_viidd(515,($323|0),($mesh2|0),40.0,3.0);
                   $717 = __THREW__; __THREW__ = 0;
                   $718 = $717&1;
                   if ($718) {
                    break;
                   }
                   (__ZN5Asset5ModelaSEOS0_($716,$323)|0);
                   __ZN5Asset5ModelD2Ev($323);
                   $719 = ((($352)) + 116|0);
                   HEAP32[$324>>2] = $719;
                   $154 = $352;
                   $155 = $324;
                   $720 = $154;
                   $721 = ((($720)) + 4|0);
                   $722 = HEAP32[$721>>2]|0;
                   $153 = $720;
                   $723 = $153;
                   $724 = ((($723)) + 8|0);
                   $152 = $724;
                   $725 = $152;
                   $151 = $725;
                   $726 = $151;
                   $727 = HEAP32[$726>>2]|0;
                   $728 = ($722>>>0)<($727>>>0);
                   if ($728) {
                    __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i20,$720,1);
                    $150 = $720;
                    $729 = $150;
                    $730 = ((($729)) + 8|0);
                    $149 = $730;
                    $731 = $149;
                    $148 = $731;
                    $732 = $148;
                    $733 = ((($720)) + 4|0);
                    $734 = HEAP32[$733>>2]|0;
                    $146 = $734;
                    $735 = $146;
                    $736 = $155;
                    $131 = $736;
                    $737 = $131;
                    $142 = $732;
                    $143 = $735;
                    $144 = $737;
                    $738 = $142;
                    $739 = $143;
                    $740 = $144;
                    $141 = $740;
                    $741 = $141;
                    ;HEAP8[$140>>0]=HEAP8[$145>>0]|0;
                    $137 = $738;
                    $138 = $739;
                    $139 = $741;
                    $742 = $137;
                    $743 = $138;
                    $744 = $139;
                    $136 = $744;
                    $745 = $136;
                    $133 = $742;
                    $134 = $743;
                    $135 = $745;
                    $746 = $134;
                    $747 = $135;
                    $132 = $747;
                    $748 = $132;
                    $749 = HEAP32[$748>>2]|0;
                    HEAP32[$746>>2] = $749;
                    __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i20);
                    $750 = ((($720)) + 4|0);
                    $751 = HEAP32[$750>>2]|0;
                    $752 = ((($751)) + 4|0);
                    HEAP32[$750>>2] = $752;
                   } else {
                    $753 = $155;
                    $147 = $753;
                    $754 = $147;
                    __THREW__ = 0;
                    invoke_vii(511,($720|0),($754|0));
                    $755 = __THREW__; __THREW__ = 0;
                    $756 = $755&1;
                    if ($756) {
                     break;
                    }
                   }
                   __ZN10MeshLoader4MeshD2Ev($mesh2);
                   HEAPF32[$327>>2] = 0.0;
                   HEAPF32[$328>>2] = 0.0;
                   HEAPF32[$329>>2] = 0.0;
                   __THREW__ = 0;
                   invoke_viiii(405,($326|0),($327|0),($328|0),($329|0));
                   $757 = __THREW__; __THREW__ = 0;
                   $758 = $757&1;
                   if ($758) {
                    label = 80;
                    break L1;
                   }
                   $759 = ((($326)) + 12|0);
                   HEAPF32[$330>>2] = 0.5;
                   HEAPF32[$331>>2] = 0.0;
                   HEAPF32[$332>>2] = 0.0;
                   __THREW__ = 0;
                   invoke_viiii(405,($759|0),($330|0),($331|0),($332|0));
                   $760 = __THREW__; __THREW__ = 0;
                   $761 = $760&1;
                   if ($761) {
                    label = 80;
                    break L1;
                   }
                   $762 = ((($759)) + 12|0);
                   HEAPF32[$333>>2] = 1.0;
                   HEAPF32[$334>>2] = 0.0;
                   HEAPF32[$335>>2] = 0.0;
                   __THREW__ = 0;
                   invoke_viiii(405,($762|0),($333|0),($334|0),($335|0));
                   $763 = __THREW__; __THREW__ = 0;
                   $764 = $763&1;
                   if ($764) {
                    label = 80;
                    break L1;
                   }
                   HEAP32[$325>>2] = $326;
                   $765 = ((($325)) + 4|0);
                   HEAP32[$765>>2] = 3;
                   ;HEAP8[$130>>0]=HEAP8[$325>>0]|0;HEAP8[$130+1>>0]=HEAP8[$325+1>>0]|0;HEAP8[$130+2>>0]=HEAP8[$325+2>>0]|0;HEAP8[$130+3>>0]=HEAP8[$325+3>>0]|0;HEAP8[$130+4>>0]=HEAP8[$325+4>>0]|0;HEAP8[$130+5>>0]=HEAP8[$325+5>>0]|0;HEAP8[$130+6>>0]=HEAP8[$325+6>>0]|0;HEAP8[$130+7>>0]=HEAP8[$325+7>>0]|0;
                   $127 = $vertices3;
                   $766 = $127;
                   $126 = $766;
                   $767 = $126;
                   $125 = $767;
                   HEAP32[$767>>2] = 0;
                   $768 = ((($767)) + 4|0);
                   HEAP32[$768>>2] = 0;
                   $769 = ((($767)) + 8|0);
                   $123 = $769;
                   HEAP32[$124>>2] = 0;
                   $770 = $123;
                   $122 = $124;
                   $771 = $122;
                   $772 = HEAP32[$771>>2]|0;
                   $120 = $770;
                   HEAP32[$121>>2] = $772;
                   $773 = $120;
                   $119 = $773;
                   $118 = $121;
                   $774 = $118;
                   $775 = HEAP32[$774>>2]|0;
                   HEAP32[$773>>2] = $775;
                   $117 = $130;
                   $776 = $117;
                   $777 = ((($776)) + 4|0);
                   $778 = HEAP32[$777>>2]|0;
                   $779 = ($778>>>0)>(0);
                   do {
                    if ($779) {
                     $116 = $130;
                     $780 = $116;
                     $781 = ((($780)) + 4|0);
                     $782 = HEAP32[$781>>2]|0;
                     __THREW__ = 0;
                     invoke_vii(419,($766|0),($782|0));
                     $783 = __THREW__; __THREW__ = 0;
                     $784 = $783&1;
                     if (!($784)) {
                      $114 = $130;
                      $785 = $114;
                      $786 = HEAP32[$785>>2]|0;
                      $115 = $130;
                      $787 = $115;
                      $788 = HEAP32[$787>>2]|0;
                      $789 = ((($787)) + 4|0);
                      $790 = HEAP32[$789>>2]|0;
                      $791 = (($788) + (($790*12)|0)|0);
                      __THREW__ = 0;
                      invoke_viii(505,($766|0),($786|0),($791|0));
                      $792 = __THREW__; __THREW__ = 0;
                      $793 = $792&1;
                      if (!($793)) {
                       break;
                      }
                     }
                     $794 = ___cxa_find_matching_catch()|0;
                     $795 = tempRet0;
                     $128 = $794;
                     $129 = $795;
                     __ZNSt3__113__vector_baseIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($766);
                     $796 = $128;
                     $797 = $129;
                     $eh$lpad$body$index30Z2D = $797;$eh$lpad$body$indexZ2D = $796;
                     break L1;
                    }
                   } while(0);
                   HEAP32[$336>>2] = 5344;
                   $798 = ((($336)) + 4|0);
                   HEAP32[$798>>2] = 2;
                   ;HEAP8[$113>>0]=HEAP8[$336>>0]|0;HEAP8[$113+1>>0]=HEAP8[$336+1>>0]|0;HEAP8[$113+2>>0]=HEAP8[$336+2>>0]|0;HEAP8[$113+3>>0]=HEAP8[$336+3>>0]|0;HEAP8[$113+4>>0]=HEAP8[$336+4>>0]|0;HEAP8[$113+5>>0]=HEAP8[$336+5>>0]|0;HEAP8[$113+6>>0]=HEAP8[$336+6>>0]|0;HEAP8[$113+7>>0]=HEAP8[$336+7>>0]|0;
                   $110 = $lines4;
                   $799 = $110;
                   $109 = $799;
                   $800 = $109;
                   $108 = $800;
                   HEAP32[$800>>2] = 0;
                   $801 = ((($800)) + 4|0);
                   HEAP32[$801>>2] = 0;
                   $802 = ((($800)) + 8|0);
                   $106 = $802;
                   HEAP32[$107>>2] = 0;
                   $803 = $106;
                   $105 = $107;
                   $804 = $105;
                   $805 = HEAP32[$804>>2]|0;
                   $103 = $803;
                   HEAP32[$104>>2] = $805;
                   $806 = $103;
                   $102 = $806;
                   $101 = $104;
                   $807 = $101;
                   $808 = HEAP32[$807>>2]|0;
                   HEAP32[$806>>2] = $808;
                   $100 = $113;
                   $809 = $100;
                   $810 = ((($809)) + 4|0);
                   $811 = HEAP32[$810>>2]|0;
                   $812 = ($811>>>0)>(0);
                   do {
                    if ($812) {
                     $99 = $113;
                     $813 = $99;
                     $814 = ((($813)) + 4|0);
                     $815 = HEAP32[$814>>2]|0;
                     __THREW__ = 0;
                     invoke_vii(506,($799|0),($815|0));
                     $816 = __THREW__; __THREW__ = 0;
                     $817 = $816&1;
                     if (!($817)) {
                      $97 = $113;
                      $818 = $97;
                      $819 = HEAP32[$818>>2]|0;
                      $98 = $113;
                      $820 = $98;
                      $821 = HEAP32[$820>>2]|0;
                      $822 = ((($820)) + 4|0);
                      $823 = HEAP32[$822>>2]|0;
                      $824 = (($821) + ($823<<3)|0);
                      __THREW__ = 0;
                      invoke_viii(507,($799|0),($819|0),($824|0));
                      $825 = __THREW__; __THREW__ = 0;
                      $826 = $825&1;
                      if (!($826)) {
                       label = 57;
                       break;
                      }
                     }
                     $827 = ___cxa_find_matching_catch()|0;
                     $828 = tempRet0;
                     $111 = $827;
                     $112 = $828;
                     __ZNSt3__113__vector_baseIN10MeshLoader8PolyLineENS_9allocatorIS2_EEED2Ev($799);
                     $829 = $111;
                     $830 = $112;
                     $300 = $829;
                     $301 = $830;
                    } else {
                     label = 57;
                    }
                   } while(0);
                   if ((label|0) == 57) {
                    HEAPF32[$339>>2] = 0.0;
                    HEAPF32[$340>>2] = 0.0;
                    __THREW__ = 0;
                    invoke_viii(508,($338|0),($339|0),($340|0));
                    $831 = __THREW__; __THREW__ = 0;
                    $832 = $831&1;
                    L79: do {
                     if ($832) {
                      label = 90;
                     } else {
                      $833 = ((($338)) + 8|0);
                      HEAPF32[$341>>2] = 0.5;
                      HEAPF32[$342>>2] = 0.0;
                      __THREW__ = 0;
                      invoke_viii(508,($833|0),($341|0),($342|0));
                      $834 = __THREW__; __THREW__ = 0;
                      $835 = $834&1;
                      if ($835) {
                       label = 90;
                       break;
                      }
                      $836 = ((($833)) + 8|0);
                      HEAPF32[$343>>2] = 1.0;
                      HEAPF32[$344>>2] = 0.0;
                      __THREW__ = 0;
                      invoke_viii(508,($836|0),($343|0),($344|0));
                      $837 = __THREW__; __THREW__ = 0;
                      $838 = $837&1;
                      if ($838) {
                       label = 90;
                       break;
                      }
                      HEAP32[$337>>2] = $338;
                      $839 = ((($337)) + 4|0);
                      HEAP32[$839>>2] = 3;
                      ;HEAP8[$96>>0]=HEAP8[$337>>0]|0;HEAP8[$96+1>>0]=HEAP8[$337+1>>0]|0;HEAP8[$96+2>>0]=HEAP8[$337+2>>0]|0;HEAP8[$96+3>>0]=HEAP8[$337+3>>0]|0;HEAP8[$96+4>>0]=HEAP8[$337+4>>0]|0;HEAP8[$96+5>>0]=HEAP8[$337+5>>0]|0;HEAP8[$96+6>>0]=HEAP8[$337+6>>0]|0;HEAP8[$96+7>>0]=HEAP8[$337+7>>0]|0;
                      $93 = $texcoord5;
                      $840 = $93;
                      $92 = $840;
                      $841 = $92;
                      $91 = $841;
                      HEAP32[$841>>2] = 0;
                      $842 = ((($841)) + 4|0);
                      HEAP32[$842>>2] = 0;
                      $843 = ((($841)) + 8|0);
                      $89 = $843;
                      HEAP32[$90>>2] = 0;
                      $844 = $89;
                      $88 = $90;
                      $845 = $88;
                      $846 = HEAP32[$845>>2]|0;
                      $86 = $844;
                      HEAP32[$87>>2] = $846;
                      $847 = $86;
                      $85 = $847;
                      $84 = $87;
                      $848 = $84;
                      $849 = HEAP32[$848>>2]|0;
                      HEAP32[$847>>2] = $849;
                      $83 = $96;
                      $850 = $83;
                      $851 = ((($850)) + 4|0);
                      $852 = HEAP32[$851>>2]|0;
                      $853 = ($852>>>0)>(0);
                      do {
                       if ($853) {
                        $82 = $96;
                        $854 = $82;
                        $855 = ((($854)) + 4|0);
                        $856 = HEAP32[$855>>2]|0;
                        __THREW__ = 0;
                        invoke_vii(401,($840|0),($856|0));
                        $857 = __THREW__; __THREW__ = 0;
                        $858 = $857&1;
                        if (!($858)) {
                         $80 = $96;
                         $859 = $80;
                         $860 = HEAP32[$859>>2]|0;
                         $81 = $96;
                         $861 = $81;
                         $862 = HEAP32[$861>>2]|0;
                         $863 = ((($861)) + 4|0);
                         $864 = HEAP32[$863>>2]|0;
                         $865 = (($862) + ($864<<3)|0);
                         __THREW__ = 0;
                         invoke_viii(509,($840|0),($860|0),($865|0));
                         $866 = __THREW__; __THREW__ = 0;
                         $867 = $866&1;
                         if (!($867)) {
                          break;
                         }
                        }
                        $868 = ___cxa_find_matching_catch()|0;
                        $869 = tempRet0;
                        $94 = $868;
                        $95 = $869;
                        __ZNSt3__113__vector_baseIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($840);
                        $870 = $94;
                        $871 = $95;
                        $eh$lpad$body30$index41Z2D = $871;$eh$lpad$body30$indexZ2D = $870;
                        label = 91;
                        break L79;
                       }
                      } while(0);
                      $872 = ((($352)) + 168|0);
                      __THREW__ = 0;
                      invoke_viiiidd(510,($345|0),($vertices3|0),($lines4|0),($texcoord5|0),40.0,3.0);
                      $873 = __THREW__; __THREW__ = 0;
                      $874 = $873&1;
                      do {
                       if (!($874)) {
                        (__ZN5Asset5ModelaSEOS0_($872,$345)|0);
                        __ZN5Asset5ModelD2Ev($345);
                        $875 = ((($352)) + 168|0);
                        HEAP32[$346>>2] = $875;
                        $78 = $352;
                        $79 = $346;
                        $876 = $78;
                        $877 = ((($876)) + 4|0);
                        $878 = HEAP32[$877>>2]|0;
                        $77 = $876;
                        $879 = $77;
                        $880 = ((($879)) + 8|0);
                        $76 = $880;
                        $881 = $76;
                        $75 = $881;
                        $882 = $75;
                        $883 = HEAP32[$882>>2]|0;
                        $884 = ($878>>>0)<($883>>>0);
                        if ($884) {
                         __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i32,$876,1);
                         $74 = $876;
                         $885 = $74;
                         $886 = ((($885)) + 8|0);
                         $73 = $886;
                         $887 = $73;
                         $72 = $887;
                         $888 = $72;
                         $889 = ((($876)) + 4|0);
                         $890 = HEAP32[$889>>2]|0;
                         $70 = $890;
                         $891 = $70;
                         $892 = $79;
                         $55 = $892;
                         $893 = $55;
                         $66 = $888;
                         $67 = $891;
                         $68 = $893;
                         $894 = $66;
                         $895 = $67;
                         $896 = $68;
                         $65 = $896;
                         $897 = $65;
                         ;HEAP8[$64>>0]=HEAP8[$69>>0]|0;
                         $61 = $894;
                         $62 = $895;
                         $63 = $897;
                         $898 = $61;
                         $899 = $62;
                         $900 = $63;
                         $60 = $900;
                         $901 = $60;
                         $57 = $898;
                         $58 = $899;
                         $59 = $901;
                         $902 = $58;
                         $903 = $59;
                         $56 = $903;
                         $904 = $56;
                         $905 = HEAP32[$904>>2]|0;
                         HEAP32[$902>>2] = $905;
                         __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i32);
                         $906 = ((($876)) + 4|0);
                         $907 = HEAP32[$906>>2]|0;
                         $908 = ((($907)) + 4|0);
                         HEAP32[$906>>2] = $908;
                        } else {
                         $909 = $79;
                         $71 = $909;
                         $910 = $71;
                         __THREW__ = 0;
                         invoke_vii(511,($876|0),($910|0));
                         $911 = __THREW__; __THREW__ = 0;
                         $912 = $911&1;
                         if ($912) {
                          break;
                         }
                        }
                        __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($texcoord5);
                        __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEED2Ev($lines4);
                        __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertices3);
                        $__range = $352;
                        $913 = $__range;
                        $54 = $913;
                        $914 = $54;
                        $915 = HEAP32[$914>>2]|0;
                        $51 = $914;
                        $52 = $915;
                        $916 = $52;
                        $48 = $50;
                        $49 = $916;
                        $917 = $48;
                        $918 = $49;
                        HEAP32[$917>>2] = $918;
                        $919 = HEAP32[$50>>2]|0;
                        HEAP32[$53>>2] = $919;
                        $920 = HEAP32[$53>>2]|0;
                        HEAP32[$__begin>>2] = $920;
                        $921 = $__range;
                        $47 = $921;
                        $922 = $47;
                        $923 = ((($922)) + 4|0);
                        $924 = HEAP32[$923>>2]|0;
                        $44 = $922;
                        $45 = $924;
                        $925 = $45;
                        $41 = $43;
                        $42 = $925;
                        $926 = $41;
                        $927 = $42;
                        HEAP32[$926>>2] = $927;
                        $928 = HEAP32[$43>>2]|0;
                        HEAP32[$46>>2] = $928;
                        $929 = HEAP32[$46>>2]|0;
                        HEAP32[$__end>>2] = $929;
                        L95: while(1) {
                         $39 = $__begin;
                         $40 = $__end;
                         $930 = $39;
                         $931 = $40;
                         $37 = $930;
                         $38 = $931;
                         $932 = $37;
                         $36 = $932;
                         $933 = $36;
                         $934 = HEAP32[$933>>2]|0;
                         $935 = $38;
                         $35 = $935;
                         $936 = $35;
                         $937 = HEAP32[$936>>2]|0;
                         $938 = ($934|0)==($937|0);
                         $939 = $938 ^ 1;
                         if (!($939)) {
                          label = 103;
                          break;
                         }
                         $34 = $__begin;
                         $940 = $34;
                         $941 = HEAP32[$940>>2]|0;
                         $m = $941;
                         $942 = $m;
                         $943 = HEAP32[$942>>2]|0;
                         $944 = ((($943)) + 12|0);
                         $__range6 = $944;
                         $945 = $__range6;
                         $33 = $945;
                         $946 = $33;
                         $947 = HEAP32[$946>>2]|0;
                         $30 = $946;
                         $31 = $947;
                         $948 = $31;
                         $27 = $29;
                         $28 = $948;
                         $949 = $27;
                         $950 = $28;
                         HEAP32[$949>>2] = $950;
                         $951 = HEAP32[$29>>2]|0;
                         HEAP32[$32>>2] = $951;
                         $952 = HEAP32[$32>>2]|0;
                         HEAP32[$__begin7>>2] = $952;
                         $953 = $__range6;
                         $26 = $953;
                         $954 = $26;
                         $955 = ((($954)) + 4|0);
                         $956 = HEAP32[$955>>2]|0;
                         $23 = $954;
                         $24 = $956;
                         $957 = $24;
                         $20 = $22;
                         $21 = $957;
                         $958 = $20;
                         $959 = $21;
                         HEAP32[$958>>2] = $959;
                         $960 = HEAP32[$22>>2]|0;
                         HEAP32[$25>>2] = $960;
                         $961 = HEAP32[$25>>2]|0;
                         HEAP32[$__end8>>2] = $961;
                         while(1) {
                          $18 = $__begin7;
                          $19 = $__end8;
                          $962 = $18;
                          $963 = $19;
                          $16 = $962;
                          $17 = $963;
                          $964 = $16;
                          $15 = $964;
                          $965 = $15;
                          $966 = HEAP32[$965>>2]|0;
                          $967 = $17;
                          $14 = $967;
                          $968 = $14;
                          $969 = HEAP32[$968>>2]|0;
                          $970 = ($966|0)==($969|0);
                          $971 = $970 ^ 1;
                          if (!($971)) {
                           break;
                          }
                          $13 = $__begin7;
                          $972 = $13;
                          $973 = HEAP32[$972>>2]|0;
                          $l = $973;
                          $974 = $l;
                          $975 = ((($974)) + 24|0);
                          $976 = $m;
                          $977 = HEAP32[$976>>2]|0;
                          __THREW__ = 0;
                          invoke_vii(413,($348|0),($977|0));
                          $978 = __THREW__; __THREW__ = 0;
                          $979 = $978&1;
                          if ($979) {
                           label = 80;
                           break L1;
                          }
                          $980 = $l;
                          $981 = ((($980)) + 12|0);
                          $12 = $981;
                          $982 = $12;
                          $983 = HEAP32[$982>>2]|0;
                          $984 = HEAP32[$983>>2]|0;
                          $985 = $l;
                          $986 = ((($985)) + 12|0);
                          $11 = $986;
                          $987 = $11;
                          $988 = HEAP32[$987>>2]|0;
                          $989 = ((($988)) + 4|0);
                          $990 = HEAP32[$989>>2]|0;
                          __THREW__ = 0;
                          invoke_viiii(516,($347|0),($348|0),($984|0),($990|0));
                          $991 = __THREW__; __THREW__ = 0;
                          $992 = $991&1;
                          if ($992) {
                           label = 95;
                           break L95;
                          }
                          ;HEAP32[$975>>2]=HEAP32[$347>>2]|0;HEAP32[$975+4>>2]=HEAP32[$347+4>>2]|0;HEAP32[$975+8>>2]=HEAP32[$347+8>>2]|0;HEAP32[$975+12>>2]=HEAP32[$347+12>>2]|0;
                          __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($348);
                          $i = 1;
                          while(1) {
                           $993 = $i;
                           $994 = $l;
                           $995 = ((($994)) + 12|0);
                           $10 = $995;
                           $996 = $10;
                           $997 = ((($996)) + 4|0);
                           $998 = HEAP32[$997>>2]|0;
                           $999 = HEAP32[$996>>2]|0;
                           $1000 = $998;
                           $1001 = $999;
                           $1002 = (($1000) - ($1001))|0;
                           $1003 = (($1002|0) / 20)&-1;
                           $1004 = ($993>>>0)<($1003>>>0);
                           if (!($1004)) {
                            break;
                           }
                           $1005 = $m;
                           $1006 = HEAP32[$1005>>2]|0;
                           __THREW__ = 0;
                           invoke_vii(413,($349|0),($1006|0));
                           $1007 = __THREW__; __THREW__ = 0;
                           $1008 = $1007&1;
                           if ($1008) {
                            label = 80;
                            break L1;
                           }
                           $1009 = $l;
                           $1010 = ((($1009)) + 12|0);
                           $1011 = $i;
                           $8 = $1010;
                           $9 = $1011;
                           $1012 = $8;
                           $1013 = $9;
                           $1014 = HEAP32[$1012>>2]|0;
                           $1015 = (($1014) + (($1013*20)|0)|0);
                           $1016 = HEAP32[$1015>>2]|0;
                           $1017 = $l;
                           $1018 = ((($1017)) + 12|0);
                           $1019 = $i;
                           $6 = $1018;
                           $7 = $1019;
                           $1020 = $6;
                           $1021 = $7;
                           $1022 = HEAP32[$1020>>2]|0;
                           $1023 = (($1022) + (($1021*20)|0)|0);
                           $1024 = ((($1023)) + 4|0);
                           $1025 = HEAP32[$1024>>2]|0;
                           __THREW__ = 0;
                           invoke_viiii(516,($aabb|0),($349|0),($1016|0),($1025|0));
                           $1026 = __THREW__; __THREW__ = 0;
                           $1027 = $1026&1;
                           if ($1027) {
                            label = 96;
                            break L95;
                           }
                           __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($349);
                           $1028 = $l;
                           $1029 = ((($1028)) + 24|0);
                           $1030 = $l;
                           $1031 = ((($1030)) + 24|0);
                           __THREW__ = 0;
                           invoke_viii(517,($350|0),($1031|0),($aabb|0));
                           $1032 = __THREW__; __THREW__ = 0;
                           $1033 = $1032&1;
                           if ($1033) {
                            label = 80;
                            break L1;
                           }
                           ;HEAP32[$1029>>2]=HEAP32[$350>>2]|0;HEAP32[$1029+4>>2]=HEAP32[$350+4>>2]|0;HEAP32[$1029+8>>2]=HEAP32[$350+8>>2]|0;HEAP32[$1029+12>>2]=HEAP32[$350+12>>2]|0;
                           $1034 = $i;
                           $1035 = (($1034) + 1)|0;
                           $i = $1035;
                          }
                          $5 = $__begin7;
                          $1056 = $5;
                          $1057 = HEAP32[$1056>>2]|0;
                          $1058 = ((($1057)) + 40|0);
                          HEAP32[$1056>>2] = $1058;
                         }
                         $1059 = $m;
                         $1060 = HEAP32[$1059>>2]|0;
                         $1061 = ((($1060)) + 36|0);
                         $1062 = $m;
                         $1063 = HEAP32[$1062>>2]|0;
                         $1064 = ((($1063)) + 12|0);
                         $4 = $1064;
                         $1065 = $4;
                         $1066 = HEAP32[$1065>>2]|0;
                         $1067 = ((($1066)) + 24|0);
                         ;HEAP32[$1061>>2]=HEAP32[$1067>>2]|0;HEAP32[$1061+4>>2]=HEAP32[$1067+4>>2]|0;HEAP32[$1061+8>>2]=HEAP32[$1067+8>>2]|0;HEAP32[$1061+12>>2]=HEAP32[$1067+12>>2]|0;
                         $i9 = 1;
                         while(1) {
                          $1068 = $i9;
                          $1069 = $m;
                          $1070 = HEAP32[$1069>>2]|0;
                          $1071 = ((($1070)) + 12|0);
                          $3 = $1071;
                          $1072 = $3;
                          $1073 = ((($1072)) + 4|0);
                          $1074 = HEAP32[$1073>>2]|0;
                          $1075 = HEAP32[$1072>>2]|0;
                          $1076 = $1074;
                          $1077 = $1075;
                          $1078 = (($1076) - ($1077))|0;
                          $1079 = (($1078|0) / 40)&-1;
                          $1080 = ($1068>>>0)<($1079>>>0);
                          if (!($1080)) {
                           break;
                          }
                          $1081 = $m;
                          $1082 = HEAP32[$1081>>2]|0;
                          $1083 = ((($1082)) + 36|0);
                          $1084 = $m;
                          $1085 = HEAP32[$1084>>2]|0;
                          $1086 = ((($1085)) + 36|0);
                          $1087 = $m;
                          $1088 = HEAP32[$1087>>2]|0;
                          $1089 = ((($1088)) + 12|0);
                          $1090 = $i9;
                          $1 = $1089;
                          $2 = $1090;
                          $1091 = $1;
                          $1092 = $2;
                          $1093 = HEAP32[$1091>>2]|0;
                          $1094 = (($1093) + (($1092*40)|0)|0);
                          $1095 = ((($1094)) + 24|0);
                          __THREW__ = 0;
                          invoke_viii(517,($351|0),($1086|0),($1095|0));
                          $1096 = __THREW__; __THREW__ = 0;
                          $1097 = $1096&1;
                          if ($1097) {
                           label = 80;
                           break L1;
                          }
                          ;HEAP32[$1083>>2]=HEAP32[$351>>2]|0;HEAP32[$1083+4>>2]=HEAP32[$351+4>>2]|0;HEAP32[$1083+8>>2]=HEAP32[$351+8>>2]|0;HEAP32[$1083+12>>2]=HEAP32[$351+12>>2]|0;
                          $1098 = $i9;
                          $1099 = (($1098) + 1)|0;
                          $i9 = $1099;
                         }
                         $0 = $__begin;
                         $1100 = $0;
                         $1101 = HEAP32[$1100>>2]|0;
                         $1102 = ((($1101)) + 4|0);
                         HEAP32[$1100>>2] = $1102;
                        }
                        if ((label|0) == 95) {
                         $1052 = ___cxa_find_matching_catch()|0;
                         $1053 = tempRet0;
                         $300 = $1052;
                         $301 = $1053;
                         __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($348);
                         __ZN5Asset5ModelD2Ev($366);
                         __ZN5Asset5ModelD2Ev($365);
                         __ZN5Asset5ModelD2Ev($364);
                         __ZN5Asset5ModelD2Ev($363);
                         __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEED2Ev($352);
                         $1103 = $300;
                         $1104 = $301;
                         ___resumeException($1103|0);
                         // unreachable;
                        }
                        else if ((label|0) == 96) {
                         $1054 = ___cxa_find_matching_catch()|0;
                         $1055 = tempRet0;
                         $300 = $1054;
                         $301 = $1055;
                         __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($349);
                         __ZN5Asset5ModelD2Ev($366);
                         __ZN5Asset5ModelD2Ev($365);
                         __ZN5Asset5ModelD2Ev($364);
                         __ZN5Asset5ModelD2Ev($363);
                         __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEED2Ev($352);
                         $1103 = $300;
                         $1104 = $301;
                         ___resumeException($1103|0);
                         // unreachable;
                        }
                        else if ((label|0) == 103) {
                         STACKTOP = sp;return;
                        }
                       }
                      } while(0);
                      $1050 = ___cxa_find_matching_catch()|0;
                      $1051 = tempRet0;
                      $300 = $1050;
                      $301 = $1051;
                      __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($texcoord5);
                     }
                    } while(0);
                    if ((label|0) == 90) {
                     $1048 = ___cxa_find_matching_catch()|0;
                     $1049 = tempRet0;
                     $eh$lpad$body30$index41Z2D = $1049;$eh$lpad$body30$indexZ2D = $1048;
                     label = 91;
                    }
                    if ((label|0) == 91) {
                     $300 = $eh$lpad$body30$indexZ2D;
                     $301 = $eh$lpad$body30$index41Z2D;
                    }
                    __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEED2Ev($lines4);
                   }
                   __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertices3);
                   __ZN5Asset5ModelD2Ev($366);
                   __ZN5Asset5ModelD2Ev($365);
                   __ZN5Asset5ModelD2Ev($364);
                   __ZN5Asset5ModelD2Ev($363);
                   __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEED2Ev($352);
                   $1103 = $300;
                   $1104 = $301;
                   ___resumeException($1103|0);
                   // unreachable;
                  }
                 } while(0);
                 $1046 = ___cxa_find_matching_catch()|0;
                 $1047 = tempRet0;
                 $300 = $1046;
                 $301 = $1047;
                 __ZN10MeshLoader4MeshD2Ev($mesh2);
                 __ZN5Asset5ModelD2Ev($366);
                 __ZN5Asset5ModelD2Ev($365);
                 __ZN5Asset5ModelD2Ev($364);
                 __ZN5Asset5ModelD2Ev($363);
                 __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEED2Ev($352);
                 $1103 = $300;
                 $1104 = $301;
                 ___resumeException($1103|0);
                 // unreachable;
                }
               } while(0);
               $1044 = ___cxa_find_matching_catch()|0;
               $1045 = tempRet0;
               $300 = $1044;
               $301 = $1045;
               __ZN10MeshLoader4MeshD2Ev($mesh1);
               __ZN5Asset5ModelD2Ev($366);
               __ZN5Asset5ModelD2Ev($365);
               __ZN5Asset5ModelD2Ev($364);
               __ZN5Asset5ModelD2Ev($363);
               __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEED2Ev($352);
               $1103 = $300;
               $1104 = $301;
               ___resumeException($1103|0);
               // unreachable;
              }
             }
            } while(0);
            $1042 = ___cxa_find_matching_catch()|0;
            $1043 = tempRet0;
            $300 = $1042;
            $301 = $1043;
            __ZN10MeshLoader4MeshD2Ev($mesh);
            __ZN5Asset5ModelD2Ev($366);
            __ZN5Asset5ModelD2Ev($365);
            __ZN5Asset5ModelD2Ev($364);
            __ZN5Asset5ModelD2Ev($363);
            __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEED2Ev($352);
            $1103 = $300;
            $1104 = $301;
            ___resumeException($1103|0);
            // unreachable;
           }
          } while(0);
          $1040 = ___cxa_find_matching_catch()|0;
          $1041 = tempRet0;
          $300 = $1040;
          $301 = $1041;
          __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($texcoord);
         }
        }
       }
      } while(0);
      if ((label|0) == 82) {
       $1038 = ___cxa_find_matching_catch()|0;
       $1039 = tempRet0;
       $eh$lpad$body13$index36Z2D = $1039;$eh$lpad$body13$indexZ2D = $1038;
       label = 83;
      }
      if ((label|0) == 83) {
       $300 = $eh$lpad$body13$indexZ2D;
       $301 = $eh$lpad$body13$index36Z2D;
      }
      __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEED2Ev($lines);
     }
     __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($vertices);
     __ZN5Asset5ModelD2Ev($366);
     __ZN5Asset5ModelD2Ev($365);
     __ZN5Asset5ModelD2Ev($364);
     __ZN5Asset5ModelD2Ev($363);
     __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEED2Ev($352);
     $1103 = $300;
     $1104 = $301;
     ___resumeException($1103|0);
     // unreachable;
    }
   }
  }
 } while(0);
 if ((label|0) == 80) {
  $1036 = ___cxa_find_matching_catch()|0;
  $1037 = tempRet0;
  $eh$lpad$body$index30Z2D = $1037;$eh$lpad$body$indexZ2D = $1036;
 }
 $300 = $eh$lpad$body$indexZ2D;
 $301 = $eh$lpad$body$index30Z2D;
 __ZN5Asset5ModelD2Ev($366);
 __ZN5Asset5ModelD2Ev($365);
 __ZN5Asset5ModelD2Ev($364);
 __ZN5Asset5ModelD2Ev($363);
 __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEED2Ev($352);
 $1103 = $300;
 $1104 = $301;
 ___resumeException($1103|0);
 // unreachable;
}
function __ZN6Shader6SimpleC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 17347;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 17606;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8RendererC2ERN5Asset6AssetsERK4AABB($this,$assets,$scene_bounds) {
 $this = $this|0;
 $assets = $assets|0;
 $scene_bounds = $scene_bounds|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $assets;
 $2 = $scene_bounds;
 $5 = $0;
 $6 = $1;
 HEAP32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 __ZN2RTC2Ev($7);
 $8 = ((($5)) + 56|0);
 __THREW__ = 0;
 invoke_vi(518,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $3 = $21;
  $4 = $22;
  __ZN2RTD2Ev($7);
  $27 = $3;
  $28 = $4;
  ___resumeException($27|0);
  // unreachable;
 }
 $11 = ((($5)) + 76|0);
 __THREW__ = 0;
 invoke_vi(519,($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $3 = $23;
  $4 = $24;
 } else {
  $14 = ((($5)) + 104|0);
  $15 = ((($5)) + 108|0);
  __THREW__ = 0;
  invoke_vi(520,($15|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $18 = $2;
   __THREW__ = 0;
   invoke_vii(521,($5|0),($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    STACKTOP = sp;return;
   }
  }
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $3 = $25;
  $4 = $26;
  __ZN8Renderer7MissileD2Ev($14);
  __ZN6Shader7TextureD2Ev($11);
 }
 __ZN6Shader5ColorD2Ev($8);
 __ZN2RTD2Ev($7);
 $27 = $3;
 $28 = $4;
 ___resumeException($27|0);
 // unreachable;
}
function __ZN6ProtoXC2EjRKN5Asset5ModelEj($this,$id,$model,$frame_count) {
 $this = $this|0;
 $id = $id|0;
 $model = $model|0;
 $frame_count = $frame_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 48|0;
 $10 = sp + 44|0;
 $11 = sp + 40|0;
 $12 = sp + 36|0;
 $13 = sp + 24|0;
 $14 = sp + 12|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $17 = sp;
 $5 = $this;
 $6 = $id;
 $7 = $model;
 $8 = $frame_count;
 $18 = $5;
 $19 = $6;
 HEAP32[$18>>2] = $19;
 $20 = ((($18)) + 20|0);
 HEAPF32[$20>>2] = 0.30000001192092896;
 $21 = ((($18)) + 24|0);
 HEAPF32[$21>>2] = 500.0;
 $22 = ((($18)) + 28|0);
 HEAPF32[$22>>2] = 0.10000000149011612;
 $23 = ((($18)) + 32|0);
 HEAPF32[$23>>2] = 3.0000001424923539E-4;
 $24 = ((($18)) + 36|0);
 HEAPF32[$24>>2] = -0.10000000149011612;
 $25 = ((($18)) + 40|0);
 HEAPF32[$25>>2] = 20.0;
 $26 = ((($18)) + 44|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($26);
 $27 = ((($18)) + 56|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($27);
 $28 = ((($18)) + 68|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($28);
 $29 = ((($18)) + 80|0);
 $30 = $7;
 $31 = ((($30)) + 12|0);
 $32 = $7;
 $33 = ((($32)) + 12|0);
 $4 = $33;
 $34 = $4;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$34>>2]|0;
 $38 = $36;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 40)&-1;
 $42 = (($41) - 1)|0;
 $2 = $31;
 $3 = $42;
 $43 = $2;
 $44 = $3;
 $45 = HEAP32[$43>>2]|0;
 $46 = (($45) + (($44*40)|0)|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($29,$46);
 $47 = ((($18)) + 92|0);
 $48 = $7;
 $49 = ((($48)) + 12|0);
 $0 = $49;
 $50 = $0;
 $51 = HEAP32[$50>>2]|0;
 HEAP32[$47>>2] = $51;
 $52 = ((($18)) + 96|0);
 HEAPF32[$10>>2] = 25.0;
 HEAPF32[$11>>2] = 15.0;
 HEAPF32[$12>>2] = 0.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($9,$10,$11,$12);
 $53 = (+__ZN3glm7half_piIfEET_v());
 $54 = $8;
 __ZN6ProtoX10PropulsionC2ERKN3glm5tvec3IfLNS1_9precisionE0EEEfj($52,$9,$53,$54);
 $55 = ((($18)) + 144|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($13);
 $56 = $8;
 __ZN6ProtoX10PropulsionC2ERKN3glm5tvec3IfLNS1_9precisionE0EEEfj($55,$13,0.0,$56);
 $57 = ((($18)) + 192|0);
 HEAPF32[$15>>2] = -25.0;
 HEAPF32[$16>>2] = 15.0;
 HEAPF32[$17>>2] = 0.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($14,$15,$16,$17);
 $58 = (+__ZN3glm7half_piIfEET_v());
 $59 = -$58;
 $60 = $8;
 __ZN6ProtoX10PropulsionC2ERKN3glm5tvec3IfLNS1_9precisionE0EEEfj($57,$14,$59,$60);
 $61 = ((($18)) + 240|0);
 $62 = $7;
 $63 = ((($62)) + 12|0);
 $1 = $63;
 $64 = $1;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($66)) + -40|0);
 __ZN6ProtoX6TurretC2ERKN5Asset5LayerE($61,$67);
 $68 = ((($18)) + 4|0);
 $69 = $7;
 $70 = ((($69)) + 36|0);
 ;HEAP32[$68>>2]=HEAP32[$70>>2]|0;HEAP32[$68+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$68+8>>2]=HEAP32[$70+8>>2]|0;HEAP32[$68+12>>2]=HEAP32[$70+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6CameraC2Eii($this,$w,$h) {
 $this = $this|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 80|0;
 $4 = sp + 76|0;
 $5 = sp + 72|0;
 $6 = sp + 8|0;
 $0 = $this;
 $1 = $w;
 $2 = $h;
 $9 = $0;
 HEAPF32[$3>>2] = 0.0;
 HEAPF32[$4>>2] = 0.0;
 HEAPF32[$5>>2] = -10.0;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($9,$3,$4,$5);
 $10 = ((($9)) + 12|0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2Ev($6);
 __THREW__ = 0;
 invoke_viii(452,($10|0),($6|0),($9|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $35 = ___cxa_find_matching_catch()|0;
  $36 = tempRet0;
  $7 = $35;
  $8 = $36;
  __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($6);
  $41 = $7;
  $42 = $8;
  ___resumeException($41|0);
  // unreachable;
 }
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($6);
 $13 = ((($9)) + 76|0);
 $14 = $1;
 $15 = $14 >> 1;
 $16 = (0 - ($15))|0;
 $17 = (+($16|0));
 $18 = $1;
 $19 = $18 >> 1;
 $20 = (+($19|0));
 $21 = $2;
 $22 = $21 >> 1;
 $23 = (0 - ($22))|0;
 $24 = (+($23|0));
 $25 = $2;
 $26 = $25 >> 1;
 $27 = (+($26|0));
 __THREW__ = 0;
 invoke_vidddddd(522,($13|0),(+$17),(+$20),(+$24),(+$27),0.10000000149011612,100.0);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 do {
  if ($29) {
   $37 = ___cxa_find_matching_catch()|0;
   $38 = tempRet0;
   $7 = $37;
   $8 = $38;
  } else {
   $30 = ((($9)) + 140|0);
   $31 = ((($9)) + 76|0);
   $32 = ((($9)) + 12|0);
   __THREW__ = 0;
   invoke_viii(477,($30|0),($31|0),($32|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $39 = ___cxa_find_matching_catch()|0;
    $40 = tempRet0;
    $7 = $39;
    $8 = $40;
    __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($13);
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($10);
 $41 = $7;
 $42 = $8;
 ___resumeException($41|0);
 // unreachable;
}
function __ZN12InputHandlerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = HEAP32[5196>>2]|0;
 (_glfwSetKeyCallback(($1|0),(523|0))|0);
 $2 = HEAP32[5196>>2]|0;
 _glfwSetInputMode(($2|0),208897,212995);
 $3 = HEAP32[5196>>2]|0;
 (_glfwSetCursorPosCallback(($3|0),(524|0))|0);
 $4 = HEAP32[5196>>2]|0;
 (_glfwSetMouseButtonCallback(($4|0),(525|0))|0);
 $5 = HEAP32[5196>>2]|0;
 (_glfwSetCursorEnterCallback(($5|0),(526|0))|0);
 STACKTOP = sp;return;
}
function __ZN5Scene10GenTextureEjj($this,$w,$h) {
 $this = $this|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $dist = 0, $fmt = 0, $g = 0, $i = 0, $internalFmt = 0;
 var $mt = 0, $p = 0, $pv = 0, $r = 0, $textureID = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $textureID = sp + 2564|0;
 $pv = sp + 2544|0;
 $17 = sp + 2532|0;
 $mt = sp + 24|0;
 $dist = sp + 16|0;
 $14 = $this;
 $15 = $w;
 $16 = $h;
 _glGenTextures(1,($textureID|0));
 $21 = HEAP32[$textureID>>2]|0;
 _glBindTexture(3553,($21|0));
 $internalFmt = 6407;
 $fmt = 6407;
 $22 = $15;
 $23 = $16;
 $24 = Math_imul($22, $23)|0;
 $25 = ($24*3)|0;
 __ZNSt3__16vectorIhNS_9allocatorIhEEEC2Ej($pv,$25);
 $b = 0;
 $g = 0;
 $r = 0;
 $26 = HEAP8[232>>0]|0;
 $27 = ($26<<24>>24)==(0);
 L1: do {
  if ($27) {
   $28 = (___cxa_guard_acquire((232|0))|0);
   $29 = ($28|0)!=(0);
   if ($29) {
    $12 = $17;
    $13 = 16224;
    $30 = $12;
    $11 = $30;
    $31 = $11;
    $10 = $31;
    $32 = $10;
    $9 = $32;
    $33 = $13;
    $34 = $13;
    __THREW__ = 0;
    $35 = (invoke_ii(527,($34|0))|0);
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    do {
     if ($37) {
      label = 16;
     } else {
      __THREW__ = 0;
      invoke_viii(528,($30|0),($33|0),($35|0));
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 16;
      } else {
       __THREW__ = 0;
       invoke_vii(380,(5780|0),($17|0));
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if ($41) {
        $90 = ___cxa_find_matching_catch()|0;
        $91 = tempRet0;
        $18 = $90;
        $19 = $91;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($17);
        break;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($17);
        ___cxa_guard_release((232|0));
        break L1;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     $88 = ___cxa_find_matching_catch()|0;
     $89 = tempRet0;
     $18 = $88;
     $19 = $89;
    }
    ___cxa_guard_abort((232|0));
    __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($pv);
    $112 = $18;
    $113 = $19;
    ___resumeException($112|0);
    // unreachable;
   }
  }
 } while(0);
 __THREW__ = 0;
 $42 = (invoke_ii(529,(5780|0))|0);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 L15: do {
  if (!($44)) {
   $7 = $mt;
   $8 = $42;
   $45 = $7;
   $46 = $8;
   __THREW__ = 0;
   invoke_vii(530,($45|0),($46|0));
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if (!($48)) {
    __THREW__ = 0;
    invoke_viii(531,($dist|0),0,255);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if (!($50)) {
     $i = 0;
     while(1) {
      $51 = $i;
      $52 = $15;
      $53 = $16;
      $54 = Math_imul($52, $53)|0;
      $55 = ($54*3)|0;
      $56 = ($51>>>0)<($55>>>0);
      if (!($56)) {
       break;
      }
      __THREW__ = 0;
      $57 = (invoke_iii(532,($dist|0),($mt|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       break L15;
      }
      $60 = $57&255;
      $61 = $i;
      $5 = $pv;
      $6 = $61;
      $62 = $5;
      $63 = $6;
      $64 = HEAP32[$62>>2]|0;
      $65 = (($64) + ($63)|0);
      HEAP8[$65>>0] = $60;
      __THREW__ = 0;
      $66 = (invoke_iii(532,($dist|0),($mt|0))|0);
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       break L15;
      }
      $69 = $66&255;
      $70 = $i;
      $71 = (($70) + 1)|0;
      $3 = $pv;
      $4 = $71;
      $72 = $3;
      $73 = $4;
      $74 = HEAP32[$72>>2]|0;
      $75 = (($74) + ($73)|0);
      HEAP8[$75>>0] = $69;
      __THREW__ = 0;
      $76 = (invoke_iii(532,($dist|0),($mt|0))|0);
      $77 = __THREW__; __THREW__ = 0;
      $78 = $77&1;
      if ($78) {
       break L15;
      }
      $79 = $76&255;
      $80 = $i;
      $81 = (($80) + 2)|0;
      $1 = $pv;
      $2 = $81;
      $82 = $1;
      $83 = $2;
      $84 = HEAP32[$82>>2]|0;
      $85 = (($84) + ($83)|0);
      HEAP8[$85>>0] = $79;
      $86 = $i;
      $87 = (($86) + 3)|0;
      $i = $87;
     }
     $0 = $pv;
     $94 = $0;
     $95 = HEAP32[$94>>2]|0;
     $p = $95;
     $96 = $internalFmt;
     $97 = $15;
     $98 = $16;
     $99 = $fmt;
     $100 = $p;
     __THREW__ = 0;
     invoke_viiiiiiiii(533,3553,0,($96|0),($97|0),($98|0),0,($99|0),5121,($100|0));
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if (!($102)) {
      __THREW__ = 0;
      invoke_viii(534,3553,10242,10497);
      $103 = __THREW__; __THREW__ = 0;
      $104 = $103&1;
      if (!($104)) {
       __THREW__ = 0;
       invoke_viii(534,3553,10243,10497);
       $105 = __THREW__; __THREW__ = 0;
       $106 = $105&1;
       if (!($106)) {
        __THREW__ = 0;
        invoke_viii(534,3553,10240,9729);
        $107 = __THREW__; __THREW__ = 0;
        $108 = $107&1;
        if (!($108)) {
         __THREW__ = 0;
         invoke_viii(534,3553,10241,9729);
         $109 = __THREW__; __THREW__ = 0;
         $110 = $109&1;
         if (!($110)) {
          $111 = HEAP32[$textureID>>2]|0;
          $20 = 1;
          __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($pv);
          STACKTOP = sp;return ($111|0);
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $92 = ___cxa_find_matching_catch()|0;
 $93 = tempRet0;
 $18 = $92;
 $19 = $93;
 __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($pv);
 $112 = $18;
 $113 = $19;
 ___resumeException($112|0);
 // unreachable;
 return (0)|0;
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EE8row_typeERKNS4_8col_typeERKS4_($agg$result,$v,$m) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0;
 var $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $m;
 $2 = $1;
 $3 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($2,0)|0);
 $4 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($3,0)|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $0;
 $7 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($6,0)|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $5 * $8;
 $10 = $1;
 $11 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($10,0)|0);
 $12 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($11,1)|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $0;
 $15 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($14,1)|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $13 * $16;
 $18 = $9 + $17;
 $19 = $1;
 $20 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($19,0)|0);
 $21 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($20,2)|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $0;
 $24 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($23,2)|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $22 * $25;
 $27 = $18 + $26;
 $28 = $1;
 $29 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($28,0)|0);
 $30 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($29,3)|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $0;
 $33 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($32,3)|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $31 * $34;
 $36 = $27 + $35;
 $37 = $1;
 $38 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($37,1)|0);
 $39 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($38,0)|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $0;
 $42 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($41,0)|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $40 * $43;
 $45 = $1;
 $46 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($45,1)|0);
 $47 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($46,1)|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $0;
 $50 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($49,1)|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $48 * $51;
 $53 = $44 + $52;
 $54 = $1;
 $55 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($54,1)|0);
 $56 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($55,2)|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $0;
 $59 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($58,2)|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $57 * $60;
 $62 = $53 + $61;
 $63 = $1;
 $64 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($63,1)|0);
 $65 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($64,3)|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $0;
 $68 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($67,3)|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $66 * $69;
 $71 = $62 + $70;
 $72 = $1;
 $73 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($72,2)|0);
 $74 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($73,0)|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $0;
 $77 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($76,0)|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $75 * $78;
 $80 = $1;
 $81 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($80,2)|0);
 $82 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($81,1)|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $0;
 $85 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($84,1)|0);
 $86 = +HEAPF32[$85>>2];
 $87 = $83 * $86;
 $88 = $79 + $87;
 $89 = $1;
 $90 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($89,2)|0);
 $91 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($90,2)|0);
 $92 = +HEAPF32[$91>>2];
 $93 = $0;
 $94 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($93,2)|0);
 $95 = +HEAPF32[$94>>2];
 $96 = $92 * $95;
 $97 = $88 + $96;
 $98 = $1;
 $99 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($98,2)|0);
 $100 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($99,3)|0);
 $101 = +HEAPF32[$100>>2];
 $102 = $0;
 $103 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($102,3)|0);
 $104 = +HEAPF32[$103>>2];
 $105 = $101 * $104;
 $106 = $97 + $105;
 $107 = $1;
 $108 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($107,3)|0);
 $109 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($108,0)|0);
 $110 = +HEAPF32[$109>>2];
 $111 = $0;
 $112 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($111,0)|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $110 * $113;
 $115 = $1;
 $116 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($115,3)|0);
 $117 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($116,1)|0);
 $118 = +HEAPF32[$117>>2];
 $119 = $0;
 $120 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($119,1)|0);
 $121 = +HEAPF32[$120>>2];
 $122 = $118 * $121;
 $123 = $114 + $122;
 $124 = $1;
 $125 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($124,3)|0);
 $126 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($125,2)|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $0;
 $129 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($128,2)|0);
 $130 = +HEAPF32[$129>>2];
 $131 = $127 * $130;
 $132 = $123 + $131;
 $133 = $1;
 $134 = (__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi($133,3)|0);
 $135 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($134,3)|0);
 $136 = +HEAPF32[$135>>2];
 $137 = $0;
 $138 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($137,3)|0);
 $139 = +HEAPF32[$138>>2];
 $140 = $136 * $139;
 $141 = $132 + $140;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($agg$result,$36,$71,$106,$141);
 STACKTOP = sp;return;
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EE8col_typeERKS4_RKNS4_8row_typeE($agg$result,$m,$v) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $v = $v|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $Add0 = 0, $Add1 = 0, $Mov0 = 0, $Mov1 = 0, $Mov2 = 0, $Mov3 = 0, $Mul0 = 0, $Mul1 = 0, $Mul2 = 0, $Mul3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $Mov0 = sp + 160|0;
 $Mov1 = sp + 144|0;
 $Mul0 = sp + 120|0;
 $Mul1 = sp + 104|0;
 $Add0 = sp + 88|0;
 $Mov2 = sp + 72|0;
 $Mov3 = sp + 56|0;
 $Mul2 = sp + 40|0;
 $Mul3 = sp + 24|0;
 $Add1 = sp + 8|0;
 $4 = sp + 184|0;
 $0 = $m;
 $1 = $v;
 $6 = $1;
 $7 = (__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi($6,0)|0);
 $8 = +HEAPF32[$7>>2];
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Ef($Mov0,$8);
 $9 = $1;
 __THREW__ = 0;
 $10 = (invoke_iii(466,($9|0),1)|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  $13 = +HEAPF32[$10>>2];
  __THREW__ = 0;
  invoke_vid(535,($Mov1|0),(+$13));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if (!($15)) {
   $16 = $0;
   __THREW__ = 0;
   $17 = (invoke_iii(457,($16|0),0)|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    label = 20;
   } else {
    __THREW__ = 0;
    invoke_viii(536,($Mul0|0),($17|0),($Mov0|0));
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     label = 20;
    } else {
     $22 = $0;
     __THREW__ = 0;
     $23 = (invoke_iii(457,($22|0),1)|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 21;
     } else {
      __THREW__ = 0;
      invoke_viii(536,($Mul1|0),($23|0),($Mov1|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 21;
      } else {
       __THREW__ = 0;
       invoke_viii(460,($Add0|0),($Mul0|0),($Mul1|0));
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        $67 = ___cxa_find_matching_catch()|0;
        $68 = tempRet0;
        $2 = $67;
        $3 = $68;
       } else {
        $30 = $1;
        __THREW__ = 0;
        $31 = (invoke_iii(466,($30|0),2)|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         label = 23;
        } else {
         $34 = +HEAPF32[$31>>2];
         __THREW__ = 0;
         invoke_vid(535,($Mov2|0),(+$34));
         $35 = __THREW__; __THREW__ = 0;
         $36 = $35&1;
         if ($36) {
          label = 23;
         } else {
          $37 = $1;
          __THREW__ = 0;
          $38 = (invoke_iii(466,($37|0),3)|0);
          $39 = __THREW__; __THREW__ = 0;
          $40 = $39&1;
          if ($40) {
           label = 24;
          } else {
           $41 = +HEAPF32[$38>>2];
           __THREW__ = 0;
           invoke_vid(535,($Mov3|0),(+$41));
           $42 = __THREW__; __THREW__ = 0;
           $43 = $42&1;
           if ($43) {
            label = 24;
           } else {
            $44 = $0;
            __THREW__ = 0;
            $45 = (invoke_iii(457,($44|0),2)|0);
            $46 = __THREW__; __THREW__ = 0;
            $47 = $46&1;
            if ($47) {
             label = 25;
            } else {
             __THREW__ = 0;
             invoke_viii(536,($Mul2|0),($45|0),($Mov2|0));
             $48 = __THREW__; __THREW__ = 0;
             $49 = $48&1;
             if ($49) {
              label = 25;
             } else {
              $50 = $0;
              __THREW__ = 0;
              $51 = (invoke_iii(457,($50|0),3)|0);
              $52 = __THREW__; __THREW__ = 0;
              $53 = $52&1;
              do {
               if ($53) {
                label = 26;
               } else {
                __THREW__ = 0;
                invoke_viii(536,($Mul3|0),($51|0),($Mov3|0));
                $54 = __THREW__; __THREW__ = 0;
                $55 = $54&1;
                if ($55) {
                 label = 26;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(460,($Add1|0),($Mul2|0),($Mul3|0));
                $56 = __THREW__; __THREW__ = 0;
                $57 = $56&1;
                do {
                 if ($57) {
                  $77 = ___cxa_find_matching_catch()|0;
                  $78 = tempRet0;
                  $2 = $77;
                  $3 = $78;
                 } else {
                  $$expand_i1_val = 0;
                  HEAP8[$4>>0] = $$expand_i1_val;
                  __THREW__ = 0;
                  invoke_viii(460,($agg$result|0),($Add0|0),($Add1|0));
                  $58 = __THREW__; __THREW__ = 0;
                  $59 = $58&1;
                  if ($59) {
                   $79 = ___cxa_find_matching_catch()|0;
                   $80 = tempRet0;
                   $2 = $79;
                   $3 = $80;
                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Add1);
                   break;
                  }
                  $$expand_i1_val2 = 1;
                  HEAP8[$4>>0] = $$expand_i1_val2;
                  $5 = 1;
                  $$pre_trunc = HEAP8[$4>>0]|0;
                  $60 = $$pre_trunc&1;
                  if ($60) {
                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Add1);
                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mul3);
                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mul2);
                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov3);
                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov2);
                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Add0);
                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mul1);
                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mul0);
                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov1);
                   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov0);
                   STACKTOP = sp;return;
                  }
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($agg$result);
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Add1);
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mul3);
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mul2);
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov3);
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov2);
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Add0);
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mul1);
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mul0);
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov1);
                  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov0);
                  STACKTOP = sp;return;
                 }
                } while(0);
                __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mul3);
               }
              } while(0);
              if ((label|0) == 26) {
               $75 = ___cxa_find_matching_catch()|0;
               $76 = tempRet0;
               $2 = $75;
               $3 = $76;
              }
              __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mul2);
             }
            }
            if ((label|0) == 25) {
             $73 = ___cxa_find_matching_catch()|0;
             $74 = tempRet0;
             $2 = $73;
             $3 = $74;
            }
            __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov3);
           }
          }
          if ((label|0) == 24) {
           $71 = ___cxa_find_matching_catch()|0;
           $72 = tempRet0;
           $2 = $71;
           $3 = $72;
          }
          __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov2);
         }
        }
        if ((label|0) == 23) {
         $69 = ___cxa_find_matching_catch()|0;
         $70 = tempRet0;
         $2 = $69;
         $3 = $70;
        }
        __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Add0);
       }
       __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mul1);
      }
     }
     if ((label|0) == 21) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      $2 = $65;
      $3 = $66;
     }
     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mul0);
    }
   }
   if ((label|0) == 20) {
    $63 = ___cxa_find_matching_catch()|0;
    $64 = tempRet0;
    $2 = $63;
    $3 = $64;
   }
   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov1);
   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov0);
   $81 = $2;
   $82 = $3;
   ___resumeException($81|0);
   // unreachable;
  }
 }
 $61 = ___cxa_find_matching_catch()|0;
 $62 = tempRet0;
 $2 = $61;
 $3 = $62;
 __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($Mov0);
 $81 = $2;
 $82 = $3;
 ___resumeException($81|0);
 // unreachable;
}
function __ZN5Asset5ModelC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 108|0;
 $6 = sp + 96|0;
 $13 = sp + 68|0;
 $16 = sp + 56|0;
 $23 = sp + 28|0;
 $26 = sp + 16|0;
 $30 = $this;
 $31 = $30;
 $29 = $31;
 $32 = $29;
 $28 = $32;
 $33 = $28;
 $27 = $33;
 HEAP32[$33>>2] = 0;
 $34 = ((($33)) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($33)) + 8|0);
 $25 = $35;
 HEAP32[$26>>2] = 0;
 $36 = $25;
 $24 = $26;
 $37 = $24;
 $38 = HEAP32[$37>>2]|0;
 $22 = $36;
 HEAP32[$23>>2] = $38;
 $39 = $22;
 $21 = $39;
 $20 = $23;
 $40 = $20;
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$39>>2] = $41;
 $42 = ((($31)) + 12|0);
 $9 = $42;
 $43 = $9;
 $8 = $43;
 $44 = $8;
 $7 = $44;
 HEAP32[$44>>2] = 0;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($44)) + 8|0);
 $5 = $46;
 HEAP32[$6>>2] = 0;
 $47 = $5;
 $4 = $6;
 $48 = $4;
 $49 = HEAP32[$48>>2]|0;
 $2 = $47;
 HEAP32[$3>>2] = $49;
 $50 = $2;
 $1 = $50;
 $0 = $3;
 $51 = $0;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$50>>2] = $52;
 $53 = ((($31)) + 24|0);
 $19 = $53;
 $54 = $19;
 $18 = $54;
 $55 = $18;
 $17 = $55;
 HEAP32[$55>>2] = 0;
 $56 = ((($55)) + 4|0);
 HEAP32[$56>>2] = 0;
 $57 = ((($55)) + 8|0);
 $15 = $57;
 HEAP32[$16>>2] = 0;
 $58 = $15;
 $14 = $16;
 $59 = $14;
 $60 = HEAP32[$59>>2]|0;
 $12 = $58;
 HEAP32[$13>>2] = $60;
 $61 = $12;
 $11 = $61;
 $10 = $13;
 $62 = $10;
 $63 = HEAP32[$62>>2]|0;
 HEAP32[$61>>2] = $63;
 STACKTOP = sp;return;
}
function __ZN5Asset5ModelaSEOS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 37|0;
 $$byval_copy1 = sp + 36|0;
 $$byval_copy = sp + 35|0;
 $3 = sp + 34|0;
 $6 = sp + 33|0;
 $9 = sp + 32|0;
 $10 = $this;
 $11 = $0;
 $12 = $10;
 $13 = $11;
 $7 = $12;
 $8 = $13;
 $14 = $7;
 $15 = $8;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$9>>0]|0;
 __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE13__move_assignERS7_NS_17integral_constantIbLb1EEE($14,$15,$$byval_copy);
 $16 = ((($12)) + 12|0);
 $17 = $11;
 $18 = ((($17)) + 12|0);
 $4 = $16;
 $5 = $18;
 $19 = $4;
 $20 = $5;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$6>>0]|0;
 __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($19,$20,$$byval_copy1);
 $21 = ((($12)) + 24|0);
 $22 = $11;
 $23 = ((($22)) + 24|0);
 $1 = $21;
 $2 = $23;
 $24 = $1;
 $25 = $2;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$3>>0]|0;
 __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE13__move_assignERS7_NS_17integral_constantIbLb1EEE($24,$25,$$byval_copy2);
 $26 = ((($12)) + 36|0);
 $27 = $11;
 $28 = ((($27)) + 36|0);
 ;HEAP32[$26>>2]=HEAP32[$28>>2]|0;HEAP32[$26+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$26+12>>2]=HEAP32[$28+12>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN10MeshLoader8PolyLineENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN10MeshLoader4MeshC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 196|0;
 $6 = sp + 184|0;
 $13 = sp + 156|0;
 $16 = sp + 144|0;
 $23 = sp + 116|0;
 $26 = sp + 104|0;
 $33 = sp + 76|0;
 $36 = sp + 64|0;
 $43 = sp + 36|0;
 $46 = sp + 24|0;
 $50 = $this;
 $53 = $50;
 $49 = $53;
 $54 = $49;
 $48 = $54;
 $55 = $48;
 $47 = $55;
 HEAP32[$55>>2] = 0;
 $56 = ((($55)) + 4|0);
 HEAP32[$56>>2] = 0;
 $57 = ((($55)) + 8|0);
 $45 = $57;
 HEAP32[$46>>2] = 0;
 $58 = $45;
 $44 = $46;
 $59 = $44;
 $60 = HEAP32[$59>>2]|0;
 $42 = $58;
 HEAP32[$43>>2] = $60;
 $61 = $42;
 $41 = $61;
 $40 = $43;
 $62 = $40;
 $63 = HEAP32[$62>>2]|0;
 HEAP32[$61>>2] = $63;
 $64 = ((($53)) + 12|0);
 $39 = $64;
 $65 = $39;
 $38 = $65;
 $66 = $38;
 $37 = $66;
 HEAP32[$66>>2] = 0;
 $67 = ((($66)) + 4|0);
 HEAP32[$67>>2] = 0;
 $68 = ((($66)) + 8|0);
 $35 = $68;
 HEAP32[$36>>2] = 0;
 $69 = $35;
 $34 = $36;
 $70 = $34;
 $71 = HEAP32[$70>>2]|0;
 $32 = $69;
 HEAP32[$33>>2] = $71;
 $72 = $32;
 $31 = $72;
 $30 = $33;
 $73 = $30;
 $74 = HEAP32[$73>>2]|0;
 HEAP32[$72>>2] = $74;
 $75 = ((($53)) + 24|0);
 $29 = $75;
 $76 = $29;
 $28 = $76;
 $77 = $28;
 $27 = $77;
 HEAP32[$77>>2] = 0;
 $78 = ((($77)) + 4|0);
 HEAP32[$78>>2] = 0;
 $79 = ((($77)) + 8|0);
 $25 = $79;
 HEAP32[$26>>2] = 0;
 $80 = $25;
 $24 = $26;
 $81 = $24;
 $82 = HEAP32[$81>>2]|0;
 $22 = $80;
 HEAP32[$23>>2] = $82;
 $83 = $22;
 $21 = $83;
 $20 = $23;
 $84 = $20;
 $85 = HEAP32[$84>>2]|0;
 HEAP32[$83>>2] = $85;
 $86 = ((($53)) + 36|0);
 $19 = $86;
 $87 = $19;
 $18 = $87;
 $88 = $18;
 $17 = $88;
 HEAP32[$88>>2] = 0;
 $89 = ((($88)) + 4|0);
 HEAP32[$89>>2] = 0;
 $90 = ((($88)) + 8|0);
 $15 = $90;
 HEAP32[$16>>2] = 0;
 $91 = $15;
 $14 = $16;
 $92 = $14;
 $93 = HEAP32[$92>>2]|0;
 $12 = $91;
 HEAP32[$13>>2] = $93;
 $94 = $12;
 $11 = $94;
 $10 = $13;
 $95 = $10;
 $96 = HEAP32[$95>>2]|0;
 HEAP32[$94>>2] = $96;
 $97 = ((($53)) + 48|0);
 $9 = $97;
 $98 = $9;
 $8 = $98;
 $99 = $8;
 $7 = $99;
 HEAP32[$99>>2] = 0;
 $100 = ((($99)) + 4|0);
 HEAP32[$100>>2] = 0;
 $101 = ((($99)) + 8|0);
 $5 = $101;
 HEAP32[$6>>2] = 0;
 $102 = $5;
 $4 = $6;
 $103 = $4;
 $104 = HEAP32[$103>>2]|0;
 $2 = $102;
 HEAP32[$3>>2] = $104;
 $105 = $2;
 $1 = $105;
 $0 = $3;
 $106 = $0;
 $107 = HEAP32[$106>>2]|0;
 HEAP32[$105>>2] = $107;
 $108 = ((($53)) + 60|0);
 __ZN3gsl4spanI6Layer2Lin1EJEEC2Ev($108);
 $109 = ((($53)) + 68|0);
 __ZN3gsl4spanI10st_SurfaceLin1EJEEC2Ev($109);
 $110 = ((($53)) + 76|0);
 __THREW__ = 0;
 invoke_vi(537,($110|0));
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 if ($112) {
  $113 = ___cxa_find_matching_catch()|0;
  $114 = tempRet0;
  $51 = $113;
  $52 = $114;
  __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEED2Ev($97);
  __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEED2Ev($86);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($75);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($64);
  __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEED2Ev($53);
  $115 = $51;
  $116 = $52;
  ___resumeException($115|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZL12ReadMeshFilePKcRN10MeshLoader4MeshE($fname,$mesh) {
 $fname = $fname|0;
 $mesh = $mesh|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$i$i$i$i = 0, $__a$i$i1$i$i = 0, $__i$i$i$i$i = 0, $__i$i$i2$i$i = 0, $data = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $f = 0, $fpos = 0, $ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 228|0;
 $ss = sp + 40|0;
 $43 = sp + 16|0;
 $44 = sp + 376|0;
 $data = sp;
 $39 = $fname;
 $40 = $mesh;
 $45 = $39;
 $46 = (_fopen($45,17191)|0);
 $f = $46;
 $47 = $f;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $185 = $f;
  (_fseek($185,0,2)|0);
  $186 = $f;
  $187 = (_ftell($186)|0);
  $fpos = $187;
  $188 = $fpos;
  __ZNSt3__16vectorIcNS_9allocatorIcEEEC2Ej($data,$188);
  $189 = $f;
  __THREW__ = 0;
  (invoke_iiii(545,($189|0),0,0)|0);
  $190 = __THREW__; __THREW__ = 0;
  $191 = $190&1;
  if (!($191)) {
   $2 = $data;
   $192 = $2;
   $193 = HEAP32[$192>>2]|0;
   $194 = $fpos;
   $195 = $f;
   __THREW__ = 0;
   (invoke_iiiii(546,($193|0),1,($194|0),($195|0))|0);
   $196 = __THREW__; __THREW__ = 0;
   $197 = $196&1;
   if (!($197)) {
    $198 = $f;
    __THREW__ = 0;
    (invoke_ii(547,($198|0))|0);
    $199 = __THREW__; __THREW__ = 0;
    $200 = $199&1;
    if (!($200)) {
     $1 = $data;
     $201 = $1;
     $202 = HEAP32[$201>>2]|0;
     $0 = $data;
     $203 = $0;
     $204 = ((($203)) + 4|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = HEAP32[$203>>2]|0;
     $207 = $205;
     $208 = $206;
     $209 = (($207) - ($208))|0;
     $210 = $40;
     __THREW__ = 0;
     invoke_viii(548,($202|0),($209|0),($210|0));
     $211 = __THREW__; __THREW__ = 0;
     $212 = $211&1;
     if (!($212)) {
      __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($data);
      STACKTOP = sp;return;
     }
    }
   }
  }
  $213 = ___cxa_find_matching_catch()|0;
  $214 = tempRet0;
  $41 = $213;
  $42 = $214;
  __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($data);
  $215 = $41;
  $216 = $42;
  ___resumeException($215|0);
  // unreachable;
 }
 $35 = $ss;
 $36 = 24;
 $49 = $35;
 $50 = ((($49)) + 64|0);
 $34 = $50;
 $51 = $34;
 $33 = $51;
 $52 = $33;
 $53 = 10712;
 HEAP32[$52>>2] = $53;
 $54 = 10612;
 HEAP32[$51>>2] = $54;
 $55 = 5372;
 HEAP32[$49>>2] = $55;
 $56 = ((($49)) + 64|0);
 $57 = 5412;
 HEAP32[$56>>2] = $57;
 $58 = ((($49)) + 8|0);
 $59 = 5392;
 HEAP32[$58>>2] = $59;
 $60 = ((($49)) + 12|0);
 $11 = $49;
 $61 = 5424;
 $12 = $61;
 $13 = $60;
 $62 = $11;
 $63 = $12;
 $64 = $13;
 $65 = ((($63)) + 4|0);
 $8 = $62;
 $9 = $65;
 $10 = $64;
 $66 = $8;
 $67 = $9;
 $68 = HEAP32[$67>>2]|0;
 HEAP32[$66>>2] = $68;
 $69 = ((($67)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$66>>2]|0;
 $72 = ((($71)) + -12|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($66) + ($73)|0);
 HEAP32[$74>>2] = $70;
 $75 = ((($66)) + 4|0);
 HEAP32[$75>>2] = 0;
 $76 = HEAP32[$66>>2]|0;
 $77 = ((($76)) + -12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($66) + ($78)|0);
 $80 = $10;
 $6 = $79;
 $7 = $80;
 $81 = $6;
 $82 = $7;
 __THREW__ = 0;
 invoke_vii(538,($81|0),($82|0));
 $83 = __THREW__; __THREW__ = 0;
 $84 = $83&1;
 if ($84) {
  $156 = ___cxa_find_matching_catch()|0;
  $157 = tempRet0;
  $37 = $156;
  $38 = $157;
  $160 = ((($49)) + 64|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($160);
  $161 = $37;
  $162 = $38;
  ___resumeException($161|0);
  // unreachable;
 }
 $85 = ((($81)) + 72|0);
 HEAP32[$85>>2] = 0;
 $86 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $87 = ((($81)) + 76|0);
 HEAP32[$87>>2] = $86;
 $88 = ((($62)) + 8|0);
 $89 = ((($63)) + 12|0);
 $4 = $88;
 $5 = $89;
 $90 = $4;
 $91 = $5;
 $92 = HEAP32[$91>>2]|0;
 HEAP32[$90>>2] = $92;
 $93 = ((($91)) + 4|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = HEAP32[$90>>2]|0;
 $96 = ((($95)) + -12|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($90) + ($97)|0);
 HEAP32[$98>>2] = $94;
 $99 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $99;
 $100 = ((($63)) + 20|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = HEAP32[$62>>2]|0;
 $103 = ((($102)) + -12|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($62) + ($104)|0);
 HEAP32[$105>>2] = $101;
 $106 = ((($63)) + 24|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($62)) + 8|0);
 HEAP32[$108>>2] = $107;
 $109 = 5372;
 HEAP32[$49>>2] = $109;
 $110 = ((($49)) + 64|0);
 $111 = 5412;
 HEAP32[$110>>2] = $111;
 $112 = ((($49)) + 8|0);
 $113 = 5392;
 HEAP32[$112>>2] = $113;
 $114 = ((($49)) + 12|0);
 $115 = $36;
 $28 = $114;
 $29 = $115;
 $116 = $28;
 __THREW__ = 0;
 invoke_vi(539,($116|0));
 $117 = __THREW__; __THREW__ = 0;
 $118 = $117&1;
 do {
  if ($118) {
   $158 = ___cxa_find_matching_catch()|0;
   $159 = tempRet0;
   $eh$lpad$body$i$index2Z2D = $159;$eh$lpad$body$i$indexZ2D = $158;
  } else {
   $119 = 5608;
   HEAP32[$116>>2] = $119;
   $120 = ((($116)) + 32|0);
   $27 = $120;
   $121 = $27;
   $26 = $121;
   $122 = $26;
   $25 = $122;
   $123 = $25;
   $24 = $123;
   $23 = $121;
   $124 = $23;
   $22 = $124;
   $125 = $22;
   $21 = $125;
   $126 = $21;
   $__a$i$i$i$i = $126;
   $__i$i$i$i$i = 0;
   while(1) {
    $127 = $__i$i$i$i$i;
    $128 = ($127>>>0)<(3);
    if (!($128)) {
     break;
    }
    $129 = $__i$i$i$i$i;
    $130 = $__a$i$i$i$i;
    $131 = (($130) + ($129<<2)|0);
    HEAP32[$131>>2] = 0;
    $132 = $__i$i$i$i$i;
    $133 = (($132) + 1)|0;
    $__i$i$i$i$i = $133;
   }
   $134 = ((($116)) + 44|0);
   HEAP32[$134>>2] = 0;
   $135 = ((($116)) + 48|0);
   $136 = $29;
   HEAP32[$135>>2] = $136;
   $20 = $30;
   $137 = $20;
   $19 = $137;
   $138 = $19;
   $18 = $138;
   $139 = $18;
   $17 = $139;
   $16 = $137;
   $140 = $16;
   $15 = $140;
   $141 = $15;
   $14 = $141;
   $142 = $14;
   $__a$i$i1$i$i = $142;
   $__i$i$i2$i$i = 0;
   while(1) {
    $143 = $__i$i$i2$i$i;
    $144 = ($143>>>0)<(3);
    if (!($144)) {
     break;
    }
    $145 = $__i$i$i2$i$i;
    $146 = $__a$i$i1$i$i;
    $147 = (($146) + ($145<<2)|0);
    HEAP32[$147>>2] = 0;
    $148 = $__i$i$i2$i$i;
    $149 = (($148) + 1)|0;
    $__i$i$i2$i$i = $149;
   }
   __THREW__ = 0;
   invoke_vii(540,($116|0),($30|0));
   $150 = __THREW__; __THREW__ = 0;
   $151 = $150&1;
   if ($151) {
    $152 = ___cxa_find_matching_catch()|0;
    $153 = tempRet0;
    $31 = $152;
    $32 = $153;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($120);
    __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($116);
    $154 = $31;
    $155 = $32;
    $eh$lpad$body$i$index2Z2D = $155;$eh$lpad$body$i$indexZ2D = $154;
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
   $163 = ((($ss)) + 8|0);
   __THREW__ = 0;
   $164 = (invoke_iii(541,($163|0),(17194|0))|0);
   $165 = __THREW__; __THREW__ = 0;
   $166 = $165&1;
   if ($166) {
    label = 21;
   } else {
    $167 = $39;
    __THREW__ = 0;
    (invoke_iii(541,($164|0),($167|0))|0);
    $168 = __THREW__; __THREW__ = 0;
    $169 = $168&1;
    if ($169) {
     label = 21;
    } else {
     $170 = (___cxa_allocate_exception(16)|0);
     $$expand_i1_val = 1;
     HEAP8[$44>>0] = $$expand_i1_val;
     $3 = $ss;
     $171 = $3;
     $172 = ((($171)) + 12|0);
     __THREW__ = 0;
     invoke_vii(542,($43|0),($172|0));
     $173 = __THREW__; __THREW__ = 0;
     $174 = $173&1;
     if ($174) {
      $180 = ___cxa_find_matching_catch()|0;
      $181 = tempRet0;
      $41 = $180;
      $42 = $181;
     } else {
      __THREW__ = 0;
      invoke_vii(543,($170|0),($43|0));
      $175 = __THREW__; __THREW__ = 0;
      $176 = $175&1;
      if (!($176)) {
       $$expand_i1_val7 = 0;
       HEAP8[$44>>0] = $$expand_i1_val7;
       __THREW__ = 0;
       invoke_viii(544,($170|0),(80|0),(38|0));
       $177 = __THREW__; __THREW__ = 0;
      }
      $182 = ___cxa_find_matching_catch()|0;
      $183 = tempRet0;
      $41 = $182;
      $42 = $183;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($43);
     }
     $$pre_trunc = HEAP8[$44>>0]|0;
     $184 = $$pre_trunc&1;
     if ($184) {
      ___cxa_free_exception(($170|0));
     }
    }
   }
   if ((label|0) == 21) {
    $178 = ___cxa_find_matching_catch()|0;
    $179 = tempRet0;
    $41 = $178;
    $42 = $179;
   }
   __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
   $215 = $41;
   $216 = $42;
   ___resumeException($215|0);
   // unreachable;
  }
 } while(0);
 $37 = $eh$lpad$body$i$indexZ2D;
 $38 = $eh$lpad$body$i$index2Z2D;
 $160 = ((($49)) + 64|0);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($160);
 $161 = $37;
 $162 = $38;
 ___resumeException($161|0);
 // unreachable;
}
function __ZNK3gsl4spanI10st_SurfaceLin1EJEE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = (__ZNK3gsl13static_boundsIJLin1EEE4sizeEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN10MeshLoader4MeshD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 76|0);
 __ZN10MeshLoader6UVMapsD2Ev($2);
 $3 = ((($1)) + 48|0);
 __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEED2Ev($3);
 $4 = ((($1)) + 36|0);
 __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEED2Ev($4);
 $5 = ((($1)) + 24|0);
 __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($5);
 $6 = ((($1)) + 12|0);
 __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($6);
 __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZL8CalcAABBNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEEEii($agg$result,$v,$first,$count) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $first = $first|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 24|0;
 $8 = sp + 187|0;
 $16 = sp + 16|0;
 $19 = sp + 186|0;
 $27 = sp + 8|0;
 $30 = sp + 185|0;
 $38 = sp;
 $41 = sp + 184|0;
 $44 = $first;
 $45 = $count;
 ;HEAP32[$agg$result>>2]=HEAP32[5684>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[5684+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[5684+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[5684+12>>2]|0;
 $46 = $44;
 $i = $46;
 while(1) {
  $47 = $i;
  $48 = $44;
  $49 = $45;
  $50 = (($48) + ($49))|0;
  $51 = ($47|0)<($50|0);
  if (!($51)) {
   break;
  }
  $52 = $i;
  $42 = $v;
  $43 = $52;
  $53 = $42;
  $54 = $43;
  $55 = HEAP32[$53>>2]|0;
  $56 = (($55) + (($54*12)|0)|0);
  $6 = $56;
  $7 = $agg$result;
  $57 = $6;
  $58 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $57;
  $4 = $58;
  $59 = $4;
  $60 = $3;
  $0 = $5;
  $1 = $59;
  $2 = $60;
  $61 = $1;
  $62 = +HEAPF32[$61>>2];
  $63 = $2;
  $64 = +HEAPF32[$63>>2];
  $65 = $62 < $64;
  $66 = $4;
  $67 = $3;
  $68 = $65 ? $66 : $67;
  $69 = +HEAPF32[$68>>2];
  HEAPF32[$agg$result>>2] = $69;
  $70 = $i;
  $9 = $v;
  $10 = $70;
  $71 = $9;
  $72 = $10;
  $73 = HEAP32[$71>>2]|0;
  $74 = (($73) + (($72*12)|0)|0);
  $75 = ((($74)) + 4|0);
  $76 = ((($agg$result)) + 4|0);
  $17 = $75;
  $18 = $76;
  $77 = $17;
  $78 = $18;
  ;HEAP8[$16>>0]=HEAP8[$19>>0]|0;
  $14 = $77;
  $15 = $78;
  $79 = $14;
  $80 = $15;
  $11 = $16;
  $12 = $79;
  $13 = $80;
  $81 = $12;
  $82 = +HEAPF32[$81>>2];
  $83 = $13;
  $84 = +HEAPF32[$83>>2];
  $85 = $82 < $84;
  $86 = $15;
  $87 = $14;
  $88 = $85 ? $86 : $87;
  $89 = +HEAPF32[$88>>2];
  $90 = ((($agg$result)) + 4|0);
  HEAPF32[$90>>2] = $89;
  $91 = $i;
  $20 = $v;
  $21 = $91;
  $92 = $20;
  $93 = $21;
  $94 = HEAP32[$92>>2]|0;
  $95 = (($94) + (($93*12)|0)|0);
  $96 = ((($agg$result)) + 8|0);
  $28 = $95;
  $29 = $96;
  $97 = $28;
  $98 = $29;
  ;HEAP8[$27>>0]=HEAP8[$30>>0]|0;
  $25 = $97;
  $26 = $98;
  $99 = $25;
  $100 = $26;
  $22 = $27;
  $23 = $99;
  $24 = $100;
  $101 = $23;
  $102 = +HEAPF32[$101>>2];
  $103 = $24;
  $104 = +HEAPF32[$103>>2];
  $105 = $102 < $104;
  $106 = $26;
  $107 = $25;
  $108 = $105 ? $106 : $107;
  $109 = +HEAPF32[$108>>2];
  $110 = ((($agg$result)) + 8|0);
  HEAPF32[$110>>2] = $109;
  $111 = $i;
  $31 = $v;
  $32 = $111;
  $112 = $31;
  $113 = $32;
  $114 = HEAP32[$112>>2]|0;
  $115 = (($114) + (($113*12)|0)|0);
  $116 = ((($115)) + 4|0);
  $117 = ((($agg$result)) + 12|0);
  $39 = $116;
  $40 = $117;
  $118 = $39;
  $119 = $40;
  ;HEAP8[$38>>0]=HEAP8[$41>>0]|0;
  $36 = $118;
  $37 = $119;
  $120 = $37;
  $121 = $36;
  $33 = $38;
  $34 = $120;
  $35 = $121;
  $122 = $34;
  $123 = +HEAPF32[$122>>2];
  $124 = $35;
  $125 = +HEAPF32[$124>>2];
  $126 = $123 < $125;
  $127 = $37;
  $128 = $36;
  $129 = $126 ? $127 : $128;
  $130 = +HEAPF32[$129>>2];
  $131 = ((($agg$result)) + 12|0);
  HEAPF32[$131>>2] = $130;
  $132 = $i;
  $133 = (($132) + 1)|0;
  $i = $133;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endIPKS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($42,$44);
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 12|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 12|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $26 = $25<<3;
 $3 = $26;
 $27 = $3;
 $28 = (__Znwj($27)|0);
 $29 = ((($14)) + 4|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$14>>2] = $28;
 $30 = HEAP32[$14>>2]|0;
 $31 = $13;
 $32 = (($30) + ($31<<3)|0);
 $2 = $14;
 $33 = $2;
 $34 = ((($33)) + 8|0);
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 HEAP32[$36>>2] = $32;
 __ZNKSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE18__construct_at_endIPKS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  ;HEAP32[$42>>2]=HEAP32[$44>>2]|0;HEAP32[$42+4>>2]=HEAP32[$44+4>>2]|0;
  __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 8|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 8|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN10MeshLoader8PolyLineENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -8|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 8)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 536870911;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 8)&-1;
 $55 = (($42) + ($54<<3)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<3)|0);
 __ZNKSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endIPKS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  __ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKS2_($42,$44);
  __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 8|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 8|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE13__move_assignERS7_NS_17integral_constantIbLb1EEE($this,$__c,$0) {
 $this = $this|0;
 $__c = $__c|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 92|0;
 $23 = $this;
 $24 = $__c;
 $25 = $23;
 __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE10deallocateEv($25);
 $26 = $24;
 $20 = $25;
 $21 = $26;
 $27 = $20;
 $28 = $21;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = ((($30)) + 8|0);
 $15 = $31;
 $32 = $15;
 $14 = $32;
 $33 = $18;
 $12 = $33;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $13 = $37;
 $38 = $24;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $24;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($25)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = $24;
 $3 = $44;
 $45 = $3;
 $46 = ((($45)) + 8|0);
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $6 = $25;
 $50 = $6;
 $51 = ((($50)) + 8|0);
 $5 = $51;
 $52 = $5;
 $4 = $52;
 $53 = $4;
 HEAP32[$53>>2] = $49;
 $54 = $24;
 $9 = $54;
 $55 = $9;
 $56 = ((($55)) + 8|0);
 $8 = $56;
 $57 = $8;
 $7 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = $24;
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 12)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -12|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(549,($40|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $73 = $17;
 $74 = ((($73)) + 8|0);
 $16 = $74;
 $75 = $16;
 $15 = $75;
 $76 = $15;
 $77 = HEAP32[$37>>2]|0;
 $14 = $37;
 $78 = $14;
 $13 = $78;
 $79 = $13;
 $12 = $79;
 $80 = $12;
 $81 = ((($80)) + 8|0);
 $11 = $81;
 $82 = $11;
 $10 = $82;
 $83 = $10;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 12)&-1;
 $4 = $76;
 $5 = $77;
 $6 = $89;
 $90 = $4;
 $91 = $5;
 $92 = $6;
 $1 = $90;
 $2 = $91;
 $3 = $92;
 $93 = $2;
 $0 = $93;
 $94 = $0;
 __ZdlPv($94);
 $9 = $37;
 $95 = $9;
 $96 = ((($95)) + 8|0);
 $8 = $96;
 $97 = $8;
 $7 = $97;
 $98 = $7;
 HEAP32[$98>>2] = 0;
 $99 = ((($37)) + 4|0);
 HEAP32[$99>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($22) + (($34*12)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*12)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 __ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this,$__c,$0) {
 $this = $this|0;
 $__c = $__c|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 92|0;
 $23 = $this;
 $24 = $__c;
 $25 = $23;
 __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE10deallocateEv($25);
 $26 = $24;
 $20 = $25;
 $21 = $26;
 $27 = $20;
 $28 = $21;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = ((($30)) + 8|0);
 $15 = $31;
 $32 = $15;
 $14 = $32;
 $33 = $18;
 $12 = $33;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $13 = $37;
 $38 = $24;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $24;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($25)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = $24;
 $3 = $44;
 $45 = $3;
 $46 = ((($45)) + 8|0);
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $6 = $25;
 $50 = $6;
 $51 = ((($50)) + 8|0);
 $5 = $51;
 $52 = $5;
 $4 = $52;
 $53 = $4;
 HEAP32[$53>>2] = $49;
 $54 = $24;
 $9 = $54;
 $55 = $9;
 $56 = ((($55)) + 8|0);
 $8 = $56;
 $57 = $8;
 $7 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = $24;
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 40)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -40|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
  $68 = $20;
  __ZN5Asset5LayerD2Ev($68);
 }
 $69 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(550,($40|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $72 = ___cxa_find_matching_catch(0|0)|0;
  $73 = tempRet0;
  ___clang_call_terminate($72);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $74 = $17;
 $75 = ((($74)) + 8|0);
 $16 = $75;
 $76 = $16;
 $15 = $76;
 $77 = $15;
 $78 = HEAP32[$37>>2]|0;
 $14 = $37;
 $79 = $14;
 $13 = $79;
 $80 = $13;
 $12 = $80;
 $81 = $12;
 $82 = ((($81)) + 8|0);
 $11 = $82;
 $83 = $11;
 $10 = $83;
 $84 = $10;
 $85 = HEAP32[$84>>2]|0;
 $86 = HEAP32[$80>>2]|0;
 $87 = $85;
 $88 = $86;
 $89 = (($87) - ($88))|0;
 $90 = (($89|0) / 40)&-1;
 $7 = $77;
 $8 = $78;
 $9 = $90;
 $91 = $7;
 $92 = $8;
 $93 = $9;
 $4 = $91;
 $5 = $92;
 $6 = $93;
 $94 = $5;
 $3 = $94;
 $95 = $3;
 __ZdlPv($95);
 $2 = $37;
 $96 = $2;
 $97 = ((($96)) + 8|0);
 $1 = $97;
 $98 = $1;
 $0 = $98;
 $99 = $0;
 HEAP32[$99>>2] = 0;
 $100 = ((($37)) + 4|0);
 HEAP32[$100>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 40)&-1;
 $35 = (($22) + (($34*40)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*40)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 40)&-1;
 $52 = (($43) + (($51*40)|0)|0);
 __ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE13__move_assignERS7_NS_17integral_constantIbLb1EEE($this,$__c,$0) {
 $this = $this|0;
 $__c = $__c|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 92|0;
 $23 = $this;
 $24 = $__c;
 $25 = $23;
 __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE10deallocateEv($25);
 $26 = $24;
 $20 = $25;
 $21 = $26;
 $27 = $20;
 $28 = $21;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = ((($30)) + 8|0);
 $15 = $31;
 $32 = $15;
 $14 = $32;
 $33 = $18;
 $12 = $33;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $13 = $37;
 $38 = $24;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $24;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($25)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = $24;
 $3 = $44;
 $45 = $3;
 $46 = ((($45)) + 8|0);
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $6 = $25;
 $50 = $6;
 $51 = ((($50)) + 8|0);
 $5 = $51;
 $52 = $5;
 $4 = $52;
 $53 = $4;
 HEAP32[$53>>2] = $49;
 $54 = $24;
 $9 = $54;
 $55 = $9;
 $56 = ((($55)) + 8|0);
 $8 = $56;
 $57 = $8;
 $7 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = $24;
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 8)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -8|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(551,($40|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $73 = $17;
 $74 = ((($73)) + 8|0);
 $16 = $74;
 $75 = $16;
 $15 = $75;
 $76 = $15;
 $77 = HEAP32[$37>>2]|0;
 $14 = $37;
 $78 = $14;
 $13 = $78;
 $79 = $13;
 $12 = $79;
 $80 = $12;
 $81 = ((($80)) + 8|0);
 $11 = $81;
 $82 = $11;
 $10 = $82;
 $83 = $10;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 8)&-1;
 $4 = $76;
 $5 = $77;
 $6 = $89;
 $90 = $4;
 $91 = $5;
 $92 = $6;
 $1 = $90;
 $2 = $91;
 $3 = $92;
 $93 = $2;
 $0 = $93;
 $94 = $0;
 __ZdlPv($94);
 $9 = $37;
 $95 = $9;
 $96 = ((($95)) + 8|0);
 $8 = $96;
 $97 = $8;
 $7 = $97;
 $98 = $7;
 HEAP32[$98>>2] = 0;
 $99 = ((($37)) + 4|0);
 HEAP32[$99>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 8)&-1;
 $35 = (($22) + ($34<<3)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<3)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 8)&-1;
 $52 = (($43) + ($51<<3)|0);
 __ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIPN5Asset5ModelERNS_9allocatorIS3_EEEC2EjjS6_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$118>>2] = $121;
 $122 = ((($__v)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 4|0);
 HEAP32[$122>>2] = $124;
 __THREW__ = 0;
 invoke_vii(552,($43|0),($__v|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch()|0;
  $128 = tempRet0;
  $41 = $127;
  $42 = $128;
  __ZNSt3__114__split_bufferIPN5Asset5ModelERNS_9allocatorIS3_EEED2Ev($__v);
  $129 = $41;
  $130 = $42;
  ___resumeException($129|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIPN5Asset5ModelERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__split_bufferIPN5Asset5ModelERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN5Asset5ModelERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN3gsl4spanI6Layer2Lin1EJEEC2Ev($this) {
 $this = $this|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 ;HEAP32[$1>>2]=0|0;
 __THREW__ = 0;
 invoke_vi(553,($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZN3gsl4spanI6Layer2Lin1EJEEC2EPS1_NS_13static_boundsIJLin1EEEE($2,0,$$byval_copy);
  STACKTOP = sp;return;
 }
}
function __ZN3gsl4spanI10st_SurfaceLin1EJEEC2Ev($this) {
 $this = $this|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 ;HEAP32[$1>>2]=0|0;
 __THREW__ = 0;
 invoke_vi(553,($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZN3gsl4spanI10st_SurfaceLin1EJEEC2EPS1_NS_13static_boundsIJLin1EEEE($2,0,$$byval_copy);
  STACKTOP = sp;return;
 }
}
function __ZN10MeshLoader6UVMapsC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 28|0;
 $6 = sp + 16|0;
 $10 = $this;
 $11 = $10;
 $9 = $11;
 $12 = $9;
 $8 = $12;
 $13 = $8;
 $7 = $13;
 HEAP32[$13>>2] = 0;
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($13)) + 8|0);
 $5 = $15;
 HEAP32[$6>>2] = 0;
 $16 = $5;
 $4 = $6;
 $17 = $4;
 $18 = HEAP32[$17>>2]|0;
 $2 = $16;
 HEAP32[$3>>2] = $18;
 $19 = $2;
 $1 = $19;
 $0 = $3;
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $21;
 $22 = ((($11)) + 12|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($11)) + 16|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($11)) + 20|0);
 HEAP32[$24>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN10MeshLoader6NormalENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN10MeshLoader7PolygonENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3gsl13static_boundsIJLin1EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3gsl7details12BoundsRangesIJLin1EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3gsl4spanI6Layer2Lin1EJEEC2EPS1_NS_13static_boundsIJLin1EEEE($this,$data,$bounds) {
 $this = $this|0;
 $data = $data|0;
 $bounds = $bounds|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $data;
 $3 = $1;
 $4 = $2;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $0 = $bounds;
 $6 = $0;
 ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;
 $7 = ((($3)) + 4|0);
 $8 = (__ZNK3gsl13static_boundsIJLin1EEE4sizeEv($7)|0);
 $9 = ($8|0)>(0);
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 $or$cond = $9 & $11;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $12 = ((($3)) + 4|0);
 $13 = (__ZNK3gsl13static_boundsIJLin1EEE4sizeEv($12)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 } else {
  __ZSt9terminatev();
  // unreachable;
 }
}
function __ZN3gsl7details12BoundsRangesIJLin1EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN3gsl4spanI10st_SurfaceLin1EJEEC2EPS1_NS_13static_boundsIJLin1EEEE($this,$data,$bounds) {
 $this = $this|0;
 $data = $data|0;
 $bounds = $bounds|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $data;
 $3 = $1;
 $4 = $2;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $0 = $bounds;
 $6 = $0;
 ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;
 $7 = ((($3)) + 4|0);
 $8 = (__ZNK3gsl13static_boundsIJLin1EEE4sizeEv($7)|0);
 $9 = ($8|0)>(0);
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 $or$cond = $9 & $11;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $12 = ((($3)) + 4|0);
 $13 = (__ZNK3gsl13static_boundsIJLin1EEE4sizeEv($12)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 } else {
  __ZSt9terminatev();
  // unreachable;
 }
}
function __ZNSt3__113__vector_baseIN10MeshLoader6NormalENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -36|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 36)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN10MeshLoader7PolygonENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -12|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 12)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__os;
 $1 = $__str;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (__ZNSt3__111char_traitsIcE6lengthEPKc($4)|0);
 $6 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($2,$3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN9exceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$message) {
 $this = $this|0;
 $message = $message|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $message;
 $5 = $1;
 $0 = $5;
 $6 = $0;
 $7 = 6104;
 HEAP32[$6>>2] = $7;
 $8 = 5672;
 HEAP32[$5>>2] = $8;
 $9 = ((($5)) + 4|0);
 $10 = $2;
 __THREW__ = 0;
 invoke_vii(554,($9|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $3 = $13;
  $4 = $14;
  $15 = $3;
  $16 = $4;
  ___resumeException($15|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN9exceptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5672;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1,5420);
 $2 = ((($1)) + 64|0);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -8|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -8|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($2);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $132 = $this;
 $133 = $__s;
 $134 = $132;
 $135 = ((($134)) + 32|0);
 $136 = $133;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($135,$136)|0);
 $137 = ((($134)) + 44|0);
 HEAP32[$137>>2] = 0;
 $138 = ((($134)) + 48|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = $139 & 8;
 $141 = ($140|0)!=(0);
 if ($141) {
  $142 = ((($134)) + 32|0);
  $131 = $142;
  $143 = $131;
  $130 = $143;
  $144 = $130;
  $129 = $144;
  $145 = $129;
  $128 = $145;
  $146 = $128;
  $127 = $146;
  $147 = $127;
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = $149 & 1;
  $151 = ($150|0)!=(0);
  if ($151) {
   $121 = $144;
   $152 = $121;
   $120 = $152;
   $153 = $120;
   $119 = $153;
   $154 = $119;
   $155 = ((($154)) + 8|0);
   $156 = HEAP32[$155>>2]|0;
   $163 = $156;
  } else {
   $126 = $144;
   $157 = $126;
   $125 = $157;
   $158 = $125;
   $124 = $158;
   $159 = $124;
   $160 = ((($159)) + 1|0);
   $123 = $160;
   $161 = $123;
   $122 = $161;
   $162 = $122;
   $163 = $162;
  }
  $118 = $163;
  $164 = $118;
  $165 = ((($134)) + 32|0);
  $72 = $165;
  $166 = $72;
  $71 = $166;
  $167 = $71;
  $70 = $167;
  $168 = $70;
  $69 = $168;
  $169 = $69;
  $170 = HEAP8[$169>>0]|0;
  $171 = $170&255;
  $172 = $171 & 1;
  $173 = ($172|0)!=(0);
  if ($173) {
   $65 = $166;
   $174 = $65;
   $64 = $174;
   $175 = $64;
   $63 = $175;
   $176 = $63;
   $177 = ((($176)) + 4|0);
   $178 = HEAP32[$177>>2]|0;
   $186 = $178;
  } else {
   $68 = $166;
   $179 = $68;
   $67 = $179;
   $180 = $67;
   $66 = $180;
   $181 = $66;
   $182 = HEAP8[$181>>0]|0;
   $183 = $182&255;
   $184 = $183 >> 1;
   $186 = $184;
  }
  $185 = (($164) + ($186)|0);
  $187 = ((($134)) + 44|0);
  HEAP32[$187>>2] = $185;
  $188 = ((($134)) + 32|0);
  $13 = $188;
  $189 = $13;
  $12 = $189;
  $190 = $12;
  $11 = $190;
  $191 = $11;
  $10 = $191;
  $192 = $10;
  $9 = $192;
  $193 = $9;
  $194 = HEAP8[$193>>0]|0;
  $195 = $194&255;
  $196 = $195 & 1;
  $197 = ($196|0)!=(0);
  if ($197) {
   $3 = $190;
   $198 = $3;
   $2 = $198;
   $199 = $2;
   $1 = $199;
   $200 = $1;
   $201 = ((($200)) + 8|0);
   $202 = HEAP32[$201>>2]|0;
   $209 = $202;
  } else {
   $8 = $190;
   $203 = $8;
   $7 = $203;
   $204 = $7;
   $6 = $204;
   $205 = $6;
   $206 = ((($205)) + 1|0);
   $5 = $206;
   $207 = $5;
   $4 = $207;
   $208 = $4;
   $209 = $208;
  }
  $0 = $209;
  $210 = $0;
  $211 = ((($134)) + 32|0);
  $27 = $211;
  $212 = $27;
  $26 = $212;
  $213 = $26;
  $25 = $213;
  $214 = $25;
  $24 = $214;
  $215 = $24;
  $23 = $215;
  $216 = $23;
  $217 = HEAP8[$216>>0]|0;
  $218 = $217&255;
  $219 = $218 & 1;
  $220 = ($219|0)!=(0);
  if ($220) {
   $17 = $213;
   $221 = $17;
   $16 = $221;
   $222 = $16;
   $15 = $222;
   $223 = $15;
   $224 = ((($223)) + 8|0);
   $225 = HEAP32[$224>>2]|0;
   $232 = $225;
  } else {
   $22 = $213;
   $226 = $22;
   $21 = $226;
   $227 = $21;
   $20 = $227;
   $228 = $20;
   $229 = ((($228)) + 1|0);
   $19 = $229;
   $230 = $19;
   $18 = $230;
   $231 = $18;
   $232 = $231;
  }
  $14 = $232;
  $233 = $14;
  $234 = ((($134)) + 44|0);
  $235 = HEAP32[$234>>2]|0;
  $28 = $134;
  $29 = $210;
  $30 = $233;
  $31 = $235;
  $236 = $28;
  $237 = $29;
  $238 = ((($236)) + 8|0);
  HEAP32[$238>>2] = $237;
  $239 = $30;
  $240 = ((($236)) + 12|0);
  HEAP32[$240>>2] = $239;
  $241 = $31;
  $242 = ((($236)) + 16|0);
  HEAP32[$242>>2] = $241;
 }
 $243 = ((($134)) + 48|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = $244 & 16;
 $246 = ($245|0)!=(0);
 if (!($246)) {
  STACKTOP = sp;return;
 }
 $247 = ((($134)) + 32|0);
 $41 = $247;
 $248 = $41;
 $40 = $248;
 $249 = $40;
 $39 = $249;
 $250 = $39;
 $38 = $250;
 $251 = $38;
 $252 = HEAP8[$251>>0]|0;
 $253 = $252&255;
 $254 = $253 & 1;
 $255 = ($254|0)!=(0);
 if ($255) {
  $34 = $248;
  $256 = $34;
  $33 = $256;
  $257 = $33;
  $32 = $257;
  $258 = $32;
  $259 = ((($258)) + 4|0);
  $260 = HEAP32[$259>>2]|0;
  $267 = $260;
 } else {
  $37 = $248;
  $261 = $37;
  $36 = $261;
  $262 = $36;
  $35 = $262;
  $263 = $35;
  $264 = HEAP8[$263>>0]|0;
  $265 = $264&255;
  $266 = $265 >> 1;
  $267 = $266;
 }
 $__sz = $267;
 $268 = ((($134)) + 32|0);
 $55 = $268;
 $269 = $55;
 $54 = $269;
 $270 = $54;
 $53 = $270;
 $271 = $53;
 $52 = $271;
 $272 = $52;
 $51 = $272;
 $273 = $51;
 $274 = HEAP8[$273>>0]|0;
 $275 = $274&255;
 $276 = $275 & 1;
 $277 = ($276|0)!=(0);
 if ($277) {
  $45 = $270;
  $278 = $45;
  $44 = $278;
  $279 = $44;
  $43 = $279;
  $280 = $43;
  $281 = ((($280)) + 8|0);
  $282 = HEAP32[$281>>2]|0;
  $289 = $282;
 } else {
  $50 = $270;
  $283 = $50;
  $49 = $283;
  $284 = $49;
  $48 = $284;
  $285 = $48;
  $286 = ((($285)) + 1|0);
  $47 = $286;
  $287 = $47;
  $46 = $287;
  $288 = $46;
  $289 = $288;
 }
 $42 = $289;
 $290 = $42;
 $291 = $__sz;
 $292 = (($290) + ($291)|0);
 $293 = ((($134)) + 44|0);
 HEAP32[$293>>2] = $292;
 $294 = ((($134)) + 32|0);
 $295 = ((($134)) + 32|0);
 $62 = $295;
 $296 = $62;
 $61 = $296;
 $297 = $61;
 $60 = $297;
 $298 = $60;
 $59 = $298;
 $299 = $59;
 $300 = HEAP8[$299>>0]|0;
 $301 = $300&255;
 $302 = $301 & 1;
 $303 = ($302|0)!=(0);
 if ($303) {
  $58 = $296;
  $304 = $58;
  $57 = $304;
  $305 = $57;
  $56 = $305;
  $306 = $56;
  $307 = HEAP32[$306>>2]|0;
  $308 = $307 & -2;
  $310 = $308;
 } else {
  $310 = 11;
 }
 $309 = (($310) - 1)|0;
 $73 = $294;
 $74 = $309;
 $311 = $73;
 $312 = $74;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($311,$312,0);
 $313 = ((($134)) + 32|0);
 $88 = $313;
 $314 = $88;
 $87 = $314;
 $315 = $87;
 $86 = $315;
 $316 = $86;
 $85 = $316;
 $317 = $85;
 $84 = $317;
 $318 = $84;
 $319 = HEAP8[$318>>0]|0;
 $320 = $319&255;
 $321 = $320 & 1;
 $322 = ($321|0)!=(0);
 if ($322) {
  $78 = $315;
  $323 = $78;
  $77 = $323;
  $324 = $77;
  $76 = $324;
  $325 = $76;
  $326 = ((($325)) + 8|0);
  $327 = HEAP32[$326>>2]|0;
  $334 = $327;
 } else {
  $83 = $315;
  $328 = $83;
  $82 = $328;
  $329 = $82;
  $81 = $329;
  $330 = $81;
  $331 = ((($330)) + 1|0);
  $80 = $331;
  $332 = $80;
  $79 = $332;
  $333 = $79;
  $334 = $333;
 }
 $75 = $334;
 $335 = $75;
 $336 = ((($134)) + 32|0);
 $102 = $336;
 $337 = $102;
 $101 = $337;
 $338 = $101;
 $100 = $338;
 $339 = $100;
 $99 = $339;
 $340 = $99;
 $98 = $340;
 $341 = $98;
 $342 = HEAP8[$341>>0]|0;
 $343 = $342&255;
 $344 = $343 & 1;
 $345 = ($344|0)!=(0);
 if ($345) {
  $92 = $338;
  $346 = $92;
  $91 = $346;
  $347 = $91;
  $90 = $347;
  $348 = $90;
  $349 = ((($348)) + 8|0);
  $350 = HEAP32[$349>>2]|0;
  $357 = $350;
 } else {
  $97 = $338;
  $351 = $97;
  $96 = $351;
  $352 = $96;
  $95 = $352;
  $353 = $95;
  $354 = ((($353)) + 1|0);
  $94 = $354;
  $355 = $94;
  $93 = $355;
  $356 = $93;
  $357 = $356;
 }
 $89 = $357;
 $358 = $89;
 $359 = ((($134)) + 32|0);
 $112 = $359;
 $360 = $112;
 $111 = $360;
 $361 = $111;
 $110 = $361;
 $362 = $110;
 $109 = $362;
 $363 = $109;
 $364 = HEAP8[$363>>0]|0;
 $365 = $364&255;
 $366 = $365 & 1;
 $367 = ($366|0)!=(0);
 if ($367) {
  $105 = $360;
  $368 = $105;
  $104 = $368;
  $369 = $104;
  $103 = $369;
  $370 = $103;
  $371 = ((($370)) + 4|0);
  $372 = HEAP32[$371>>2]|0;
  $380 = $372;
 } else {
  $108 = $360;
  $373 = $108;
  $107 = $373;
  $374 = $107;
  $106 = $374;
  $375 = $106;
  $376 = HEAP8[$375>>0]|0;
  $377 = $376&255;
  $378 = $377 >> 1;
  $380 = $378;
 }
 $379 = (($358) + ($380)|0);
 $113 = $134;
 $114 = $335;
 $115 = $379;
 $381 = $113;
 $382 = $114;
 $383 = ((($381)) + 24|0);
 HEAP32[$383>>2] = $382;
 $384 = ((($381)) + 20|0);
 HEAP32[$384>>2] = $382;
 $385 = $115;
 $386 = ((($381)) + 28|0);
 HEAP32[$386>>2] = $385;
 $387 = ((($134)) + 48|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = $388 & 3;
 $390 = ($389|0)!=(0);
 if (!($390)) {
  STACKTOP = sp;return;
 }
 $391 = $__sz;
 $116 = $134;
 $117 = $391;
 $392 = $116;
 $393 = $117;
 $394 = ((($392)) + 24|0);
 $395 = HEAP32[$394>>2]|0;
 $396 = (($395) + ($393)|0);
 HEAP32[$394>>2] = $396;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5608;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 32|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $__wch = $__wch|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__noff = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 64|0;
 $6 = sp + 56|0;
 $26 = sp + 48|0;
 $42 = sp + 40|0;
 $45 = sp + 32|0;
 $48 = sp + 24|0;
 $63 = sp + 16|0;
 $66 = sp + 8|0;
 $__noff = sp;
 $65 = $this;
 $69 = $66;
 $70 = $69;
 HEAP32[$70>>2] = $0;
 $71 = (($69) + 4)|0;
 $72 = $71;
 HEAP32[$72>>2] = $1;
 $67 = $__way;
 $68 = $__wch;
 $73 = $65;
 $74 = ((($73)) + 44|0);
 $75 = HEAP32[$74>>2]|0;
 $64 = $73;
 $76 = $64;
 $77 = ((($76)) + 24|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($75>>>0)<($78>>>0);
 if ($79) {
  $2 = $73;
  $80 = $2;
  $81 = ((($80)) + 24|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($73)) + 44|0);
  HEAP32[$83>>2] = $82;
 }
 $84 = $68;
 $85 = $84 & 24;
 $86 = ($85|0)==(0);
 if ($86) {
  $3 = $agg$result;
  $87 = $4;
  $88 = $87;
  HEAP32[$88>>2] = -1;
  $89 = (($87) + 4)|0;
  $90 = $89;
  HEAP32[$90>>2] = -1;
  $91 = $3;
  ;HEAP32[$91>>2]=0|0;HEAP32[$91+4>>2]=0|0;
  $92 = ((($91)) + 8|0);
  $93 = $4;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($93) + 4)|0;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = $92;
  $100 = $99;
  HEAP32[$100>>2] = $95;
  $101 = (($99) + 4)|0;
  $102 = $101;
  HEAP32[$102>>2] = $98;
  STACKTOP = sp;return;
 }
 $103 = $68;
 $104 = $103 & 24;
 $105 = ($104|0)==(24);
 $106 = $67;
 $107 = ($106|0)==(1);
 $or$cond = $105 & $107;
 if ($or$cond) {
  $5 = $agg$result;
  $108 = $6;
  $109 = $108;
  HEAP32[$109>>2] = -1;
  $110 = (($108) + 4)|0;
  $111 = $110;
  HEAP32[$111>>2] = -1;
  $112 = $5;
  ;HEAP32[$112>>2]=0|0;HEAP32[$112+4>>2]=0|0;
  $113 = ((($112)) + 8|0);
  $114 = $6;
  $115 = $114;
  $116 = HEAP32[$115>>2]|0;
  $117 = (($114) + 4)|0;
  $118 = $117;
  $119 = HEAP32[$118>>2]|0;
  $120 = $113;
  $121 = $120;
  HEAP32[$121>>2] = $116;
  $122 = (($120) + 4)|0;
  $123 = $122;
  HEAP32[$123>>2] = $119;
  STACKTOP = sp;return;
 }
 $124 = $67;
 L12: do {
  switch ($124|0) {
  case 0:  {
   $125 = $__noff;
   $126 = $125;
   HEAP32[$126>>2] = 0;
   $127 = (($125) + 4)|0;
   $128 = $127;
   HEAP32[$128>>2] = 0;
   break;
  }
  case 1:  {
   $129 = $68;
   $130 = $129 & 8;
   $131 = ($130|0)!=(0);
   if ($131) {
    $7 = $73;
    $132 = $7;
    $133 = ((($132)) + 12|0);
    $134 = HEAP32[$133>>2]|0;
    $8 = $73;
    $135 = $8;
    $136 = ((($135)) + 8|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $134;
    $139 = $137;
    $140 = (($138) - ($139))|0;
    $141 = ($140|0)<(0);
    $142 = $141 << 31 >> 31;
    $143 = $__noff;
    $144 = $143;
    HEAP32[$144>>2] = $140;
    $145 = (($143) + 4)|0;
    $146 = $145;
    HEAP32[$146>>2] = $142;
    break L12;
   } else {
    $9 = $73;
    $147 = $9;
    $148 = ((($147)) + 24|0);
    $149 = HEAP32[$148>>2]|0;
    $10 = $73;
    $150 = $10;
    $151 = ((($150)) + 20|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $149;
    $154 = $152;
    $155 = (($153) - ($154))|0;
    $156 = ($155|0)<(0);
    $157 = $156 << 31 >> 31;
    $158 = $__noff;
    $159 = $158;
    HEAP32[$159>>2] = $155;
    $160 = (($158) + 4)|0;
    $161 = $160;
    HEAP32[$161>>2] = $157;
    break L12;
   }
   break;
  }
  case 2:  {
   $162 = ((($73)) + 44|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = ((($73)) + 32|0);
   $24 = $164;
   $165 = $24;
   $23 = $165;
   $166 = $23;
   $22 = $166;
   $167 = $22;
   $21 = $167;
   $168 = $21;
   $20 = $168;
   $169 = $20;
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = $171 & 1;
   $173 = ($172|0)!=(0);
   if ($173) {
    $14 = $166;
    $174 = $14;
    $13 = $174;
    $175 = $13;
    $12 = $175;
    $176 = $12;
    $177 = ((($176)) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    $185 = $178;
   } else {
    $19 = $166;
    $179 = $19;
    $18 = $179;
    $180 = $18;
    $17 = $180;
    $181 = $17;
    $182 = ((($181)) + 1|0);
    $16 = $182;
    $183 = $16;
    $15 = $183;
    $184 = $15;
    $185 = $184;
   }
   $11 = $185;
   $186 = $11;
   $187 = $163;
   $188 = $186;
   $189 = (($187) - ($188))|0;
   $190 = ($189|0)<(0);
   $191 = $190 << 31 >> 31;
   $192 = $__noff;
   $193 = $192;
   HEAP32[$193>>2] = $189;
   $194 = (($192) + 4)|0;
   $195 = $194;
   HEAP32[$195>>2] = $191;
   break;
  }
  default: {
   $25 = $agg$result;
   $196 = $26;
   $197 = $196;
   HEAP32[$197>>2] = -1;
   $198 = (($196) + 4)|0;
   $199 = $198;
   HEAP32[$199>>2] = -1;
   $200 = $25;
   ;HEAP32[$200>>2]=0|0;HEAP32[$200+4>>2]=0|0;
   $201 = ((($200)) + 8|0);
   $202 = $26;
   $203 = $202;
   $204 = HEAP32[$203>>2]|0;
   $205 = (($202) + 4)|0;
   $206 = $205;
   $207 = HEAP32[$206>>2]|0;
   $208 = $201;
   $209 = $208;
   HEAP32[$209>>2] = $204;
   $210 = (($208) + 4)|0;
   $211 = $210;
   HEAP32[$211>>2] = $207;
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $212 = $66;
 $213 = $212;
 $214 = HEAP32[$213>>2]|0;
 $215 = (($212) + 4)|0;
 $216 = $215;
 $217 = HEAP32[$216>>2]|0;
 $218 = $__noff;
 $219 = $218;
 $220 = HEAP32[$219>>2]|0;
 $221 = (($218) + 4)|0;
 $222 = $221;
 $223 = HEAP32[$222>>2]|0;
 $224 = (_i64Add(($220|0),($223|0),($214|0),($217|0))|0);
 $225 = tempRet0;
 $226 = $__noff;
 $227 = $226;
 HEAP32[$227>>2] = $224;
 $228 = (($226) + 4)|0;
 $229 = $228;
 HEAP32[$229>>2] = $225;
 $230 = $__noff;
 $231 = $230;
 $232 = HEAP32[$231>>2]|0;
 $233 = (($230) + 4)|0;
 $234 = $233;
 $235 = HEAP32[$234>>2]|0;
 $236 = ($235|0)<(0);
 if (!($236)) {
  $237 = ((($73)) + 44|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = ((($73)) + 32|0);
  $40 = $239;
  $240 = $40;
  $39 = $240;
  $241 = $39;
  $38 = $241;
  $242 = $38;
  $37 = $242;
  $243 = $37;
  $36 = $243;
  $244 = $36;
  $245 = HEAP8[$244>>0]|0;
  $246 = $245&255;
  $247 = $246 & 1;
  $248 = ($247|0)!=(0);
  if ($248) {
   $30 = $241;
   $249 = $30;
   $29 = $249;
   $250 = $29;
   $28 = $250;
   $251 = $28;
   $252 = ((($251)) + 8|0);
   $253 = HEAP32[$252>>2]|0;
   $260 = $253;
  } else {
   $35 = $241;
   $254 = $35;
   $34 = $254;
   $255 = $34;
   $33 = $255;
   $256 = $33;
   $257 = ((($256)) + 1|0);
   $32 = $257;
   $258 = $32;
   $31 = $258;
   $259 = $31;
   $260 = $259;
  }
  $27 = $260;
  $261 = $27;
  $262 = $238;
  $263 = $261;
  $264 = (($262) - ($263))|0;
  $265 = ($264|0)<(0);
  $266 = $265 << 31 >> 31;
  $267 = $__noff;
  $268 = $267;
  $269 = HEAP32[$268>>2]|0;
  $270 = (($267) + 4)|0;
  $271 = $270;
  $272 = HEAP32[$271>>2]|0;
  $273 = ($266|0)<($272|0);
  $274 = ($264>>>0)<($269>>>0);
  $275 = ($266|0)==($272|0);
  $276 = $275 & $274;
  $277 = $273 | $276;
  if (!($277)) {
   $294 = $__noff;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = (($294) + 4)|0;
   $298 = $297;
   $299 = HEAP32[$298>>2]|0;
   $300 = ($296|0)!=(0);
   $301 = ($299|0)!=(0);
   $302 = $300 | $301;
   if ($302) {
    $303 = $68;
    $304 = $303 & 8;
    $305 = ($304|0)!=(0);
    if ($305) {
     $43 = $73;
     $306 = $43;
     $307 = ((($306)) + 12|0);
     $308 = HEAP32[$307>>2]|0;
     $309 = ($308|0)==(0|0);
     if ($309) {
      $44 = $agg$result;
      $310 = $45;
      $311 = $310;
      HEAP32[$311>>2] = -1;
      $312 = (($310) + 4)|0;
      $313 = $312;
      HEAP32[$313>>2] = -1;
      $314 = $44;
      ;HEAP32[$314>>2]=0|0;HEAP32[$314+4>>2]=0|0;
      $315 = ((($314)) + 8|0);
      $316 = $45;
      $317 = $316;
      $318 = HEAP32[$317>>2]|0;
      $319 = (($316) + 4)|0;
      $320 = $319;
      $321 = HEAP32[$320>>2]|0;
      $322 = $315;
      $323 = $322;
      HEAP32[$323>>2] = $318;
      $324 = (($322) + 4)|0;
      $325 = $324;
      HEAP32[$325>>2] = $321;
      STACKTOP = sp;return;
     }
    }
    $326 = $68;
    $327 = $326 & 16;
    $328 = ($327|0)!=(0);
    if ($328) {
     $46 = $73;
     $329 = $46;
     $330 = ((($329)) + 24|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = ($331|0)==(0|0);
     if ($332) {
      $47 = $agg$result;
      $333 = $48;
      $334 = $333;
      HEAP32[$334>>2] = -1;
      $335 = (($333) + 4)|0;
      $336 = $335;
      HEAP32[$336>>2] = -1;
      $337 = $47;
      ;HEAP32[$337>>2]=0|0;HEAP32[$337+4>>2]=0|0;
      $338 = ((($337)) + 8|0);
      $339 = $48;
      $340 = $339;
      $341 = HEAP32[$340>>2]|0;
      $342 = (($339) + 4)|0;
      $343 = $342;
      $344 = HEAP32[$343>>2]|0;
      $345 = $338;
      $346 = $345;
      HEAP32[$346>>2] = $341;
      $347 = (($345) + 4)|0;
      $348 = $347;
      HEAP32[$348>>2] = $344;
      STACKTOP = sp;return;
     }
    }
   }
   $349 = $68;
   $350 = $349 & 8;
   $351 = ($350|0)!=(0);
   if ($351) {
    $49 = $73;
    $352 = $49;
    $353 = ((($352)) + 8|0);
    $354 = HEAP32[$353>>2]|0;
    $50 = $73;
    $355 = $50;
    $356 = ((($355)) + 8|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = $__noff;
    $359 = $358;
    $360 = HEAP32[$359>>2]|0;
    $361 = (($358) + 4)|0;
    $362 = $361;
    $363 = HEAP32[$362>>2]|0;
    $364 = (($357) + ($360)|0);
    $365 = ((($73)) + 44|0);
    $366 = HEAP32[$365>>2]|0;
    $51 = $73;
    $52 = $354;
    $53 = $364;
    $54 = $366;
    $367 = $51;
    $368 = $52;
    $369 = ((($367)) + 8|0);
    HEAP32[$369>>2] = $368;
    $370 = $53;
    $371 = ((($367)) + 12|0);
    HEAP32[$371>>2] = $370;
    $372 = $54;
    $373 = ((($367)) + 16|0);
    HEAP32[$373>>2] = $372;
   }
   $374 = $68;
   $375 = $374 & 16;
   $376 = ($375|0)!=(0);
   if ($376) {
    $55 = $73;
    $377 = $55;
    $378 = ((($377)) + 20|0);
    $379 = HEAP32[$378>>2]|0;
    $56 = $73;
    $380 = $56;
    $381 = ((($380)) + 28|0);
    $382 = HEAP32[$381>>2]|0;
    $57 = $73;
    $58 = $379;
    $59 = $382;
    $383 = $57;
    $384 = $58;
    $385 = ((($383)) + 24|0);
    HEAP32[$385>>2] = $384;
    $386 = ((($383)) + 20|0);
    HEAP32[$386>>2] = $384;
    $387 = $59;
    $388 = ((($383)) + 28|0);
    HEAP32[$388>>2] = $387;
    $389 = $__noff;
    $390 = $389;
    $391 = HEAP32[$390>>2]|0;
    $392 = (($389) + 4)|0;
    $393 = $392;
    $394 = HEAP32[$393>>2]|0;
    $60 = $73;
    $61 = $391;
    $395 = $60;
    $396 = $61;
    $397 = ((($395)) + 24|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = (($398) + ($396)|0);
    HEAP32[$397>>2] = $399;
   }
   $400 = $__noff;
   $401 = $400;
   $402 = HEAP32[$401>>2]|0;
   $403 = (($400) + 4)|0;
   $404 = $403;
   $405 = HEAP32[$404>>2]|0;
   $62 = $agg$result;
   $406 = $63;
   $407 = $406;
   HEAP32[$407>>2] = $402;
   $408 = (($406) + 4)|0;
   $409 = $408;
   HEAP32[$409>>2] = $405;
   $410 = $62;
   ;HEAP32[$410>>2]=0|0;HEAP32[$410+4>>2]=0|0;
   $411 = ((($410)) + 8|0);
   $412 = $63;
   $413 = $412;
   $414 = HEAP32[$413>>2]|0;
   $415 = (($412) + 4)|0;
   $416 = $415;
   $417 = HEAP32[$416>>2]|0;
   $418 = $411;
   $419 = $418;
   HEAP32[$419>>2] = $414;
   $420 = (($418) + 4)|0;
   $421 = $420;
   HEAP32[$421>>2] = $417;
   STACKTOP = sp;return;
  }
 }
 $41 = $agg$result;
 $278 = $42;
 $279 = $278;
 HEAP32[$279>>2] = -1;
 $280 = (($278) + 4)|0;
 $281 = $280;
 HEAP32[$281>>2] = -1;
 $282 = $41;
 ;HEAP32[$282>>2]=0|0;HEAP32[$282+4>>2]=0|0;
 $283 = ((($282)) + 8|0);
 $284 = $42;
 $285 = $284;
 $286 = HEAP32[$285>>2]|0;
 $287 = (($284) + 4)|0;
 $288 = $287;
 $289 = HEAP32[$288>>2]|0;
 $290 = $283;
 $291 = $290;
 HEAP32[$291>>2] = $286;
 $292 = (($290) + 4)|0;
 $293 = $292;
 HEAP32[$293>>2] = $289;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $__wch = $__wch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $__wch;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $0 = $__sp;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 FUNCTION_TABLE_viiiiii[$6 & 511]($agg$result,$3,$11,$14,0,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $13;
 $15 = ((($14)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $11 = $14;
 $17 = $11;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)<($19>>>0);
 if ($20) {
  $10 = $14;
  $21 = $10;
  $22 = ((($21)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($14)) + 44|0);
  HEAP32[$24>>2] = $23;
 }
 $25 = ((($14)) + 48|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 8;
 $28 = ($27|0)!=(0);
 if ($28) {
  $9 = $14;
  $29 = $9;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($14)) + 44|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($31>>>0)<($33>>>0);
  if ($34) {
   $0 = $14;
   $35 = $0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $1 = $14;
   $38 = $1;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($14)) + 44|0);
   $42 = HEAP32[$41>>2]|0;
   $2 = $14;
   $3 = $37;
   $4 = $40;
   $5 = $42;
   $43 = $2;
   $44 = $3;
   $45 = ((($43)) + 8|0);
   HEAP32[$45>>2] = $44;
   $46 = $4;
   $47 = ((($43)) + 12|0);
   HEAP32[$47>>2] = $46;
   $48 = $5;
   $49 = ((($43)) + 16|0);
   HEAP32[$49>>2] = $48;
  }
  $6 = $14;
  $50 = $6;
  $51 = ((($50)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $7 = $14;
  $53 = $7;
  $54 = ((($53)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($52>>>0)<($55>>>0);
  if ($56) {
   $8 = $14;
   $57 = $8;
   $58 = ((($57)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP8[$59>>0]|0;
   $61 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($60)|0);
   $12 = $61;
   $63 = $12;
   STACKTOP = sp;return ($63|0);
  }
 }
 $62 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $12 = $62;
 $63 = $12;
 STACKTOP = sp;return ($63|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $__c;
 $21 = $19;
 $22 = ((($21)) + 44|0);
 $23 = HEAP32[$22>>2]|0;
 $17 = $21;
 $24 = $17;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($23>>>0)<($26>>>0);
 if ($27) {
  $16 = $21;
  $28 = $16;
  $29 = ((($28)) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($21)) + 44|0);
  HEAP32[$31>>2] = $30;
 }
 $14 = $21;
 $32 = $14;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $7 = $21;
 $35 = $7;
 $36 = ((($35)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($34>>>0)<($37>>>0);
 do {
  if ($38) {
   $39 = $20;
   $40 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $41 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($39,$40)|0);
   if ($41) {
    $5 = $21;
    $42 = $5;
    $43 = ((($42)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $4 = $21;
    $45 = $4;
    $46 = ((($45)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($47)) + -1|0);
    $49 = ((($21)) + 44|0);
    $50 = HEAP32[$49>>2]|0;
    $0 = $21;
    $1 = $44;
    $2 = $48;
    $3 = $50;
    $51 = $0;
    $52 = $1;
    $53 = ((($51)) + 8|0);
    HEAP32[$53>>2] = $52;
    $54 = $2;
    $55 = ((($51)) + 12|0);
    HEAP32[$55>>2] = $54;
    $56 = $3;
    $57 = ((($51)) + 16|0);
    HEAP32[$57>>2] = $56;
    $58 = $20;
    $59 = (__ZNSt3__111char_traitsIcE7not_eofEi($58)|0);
    $18 = $59;
    $95 = $18;
    STACKTOP = sp;return ($95|0);
   }
   $60 = ((($21)) + 48|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & 16;
   $63 = ($62|0)!=(0);
   if (!($63)) {
    $64 = $20;
    $65 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($64)|0);
    $6 = $21;
    $66 = $6;
    $67 = ((($66)) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((($68)) + -1|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = (__ZNSt3__111char_traitsIcE2eqEcc($65,$70)|0);
    if (!($71)) {
     break;
    }
   }
   $8 = $21;
   $72 = $8;
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $9 = $21;
   $75 = $9;
   $76 = ((($75)) + 12|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($77)) + -1|0);
   $79 = ((($21)) + 44|0);
   $80 = HEAP32[$79>>2]|0;
   $10 = $21;
   $11 = $74;
   $12 = $78;
   $13 = $80;
   $81 = $10;
   $82 = $11;
   $83 = ((($81)) + 8|0);
   HEAP32[$83>>2] = $82;
   $84 = $12;
   $85 = ((($81)) + 12|0);
   HEAP32[$85>>2] = $84;
   $86 = $13;
   $87 = ((($81)) + 16|0);
   HEAP32[$87>>2] = $86;
   $88 = $20;
   $89 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($88)|0);
   $15 = $21;
   $90 = $15;
   $91 = ((($90)) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   HEAP8[$92>>0] = $89;
   $93 = $20;
   $18 = $93;
   $95 = $18;
   STACKTOP = sp;return ($95|0);
  }
 } while(0);
 $94 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $18 = $94;
 $95 = $18;
 STACKTOP = sp;return ($95|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__hm = 0, $__ninp = 0, $__nout = 0, $__p = 0, $__p1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $47 = sp;
 $50 = sp + 349|0;
 $83 = sp + 8|0;
 $78 = $this;
 $79 = $__c;
 $84 = $78;
 $85 = $79;
 $86 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $87 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($85,$86)|0);
 if ($87) {
  $299 = $79;
  $300 = (__ZNSt3__111char_traitsIcE7not_eofEi($299)|0);
  $77 = $300;
  $301 = $77;
  STACKTOP = sp;return ($301|0);
 }
 $76 = $84;
 $88 = $76;
 $89 = ((($88)) + 12|0);
 $90 = HEAP32[$89>>2]|0;
 $75 = $84;
 $91 = $75;
 $92 = ((($91)) + 8|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $90;
 $95 = $93;
 $96 = (($94) - ($95))|0;
 $__ninp = $96;
 $71 = $84;
 $97 = $71;
 $98 = ((($97)) + 24|0);
 $99 = HEAP32[$98>>2]|0;
 $70 = $84;
 $100 = $70;
 $101 = ((($100)) + 28|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($99|0)==($102|0);
 do {
  if ($103) {
   $104 = ((($84)) + 48|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 16;
   $107 = ($106|0)!=(0);
   if (!($107)) {
    $108 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $77 = $108;
    $301 = $77;
    STACKTOP = sp;return ($301|0);
   }
   $69 = $84;
   $109 = $69;
   $110 = ((($109)) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $40 = $84;
   $112 = $40;
   $113 = ((($112)) + 20|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $111;
   $116 = $114;
   $117 = (($115) - ($116))|0;
   $__nout = $117;
   $118 = ((($84)) + 44|0);
   $119 = HEAP32[$118>>2]|0;
   $7 = $84;
   $120 = $7;
   $121 = ((($120)) + 20|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $119;
   $124 = $122;
   $125 = (($123) - ($124))|0;
   $__hm = $125;
   $126 = ((($84)) + 32|0);
   __THREW__ = 0;
   invoke_vii(555,($126|0),0);
   $127 = __THREW__; __THREW__ = 0;
   $128 = $127&1;
   if (!($128)) {
    $129 = ((($84)) + 32|0);
    $130 = ((($84)) + 32|0);
    $6 = $130;
    $131 = $6;
    $5 = $131;
    $132 = $5;
    $4 = $132;
    $133 = $4;
    $3 = $133;
    $134 = $3;
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = $136 & 1;
    $138 = ($137|0)!=(0);
    if ($138) {
     $2 = $131;
     $139 = $2;
     $1 = $139;
     $140 = $1;
     $0 = $140;
     $141 = $0;
     $142 = HEAP32[$141>>2]|0;
     $143 = $142 & -2;
     $145 = $143;
    } else {
     $145 = 11;
    }
    $144 = (($145) - 1)|0;
    $8 = $129;
    $9 = $144;
    $146 = $8;
    $147 = $9;
    __THREW__ = 0;
    invoke_viii(556,($146|0),($147|0),0);
    $148 = __THREW__; __THREW__ = 0;
    $149 = $148&1;
    if (!($149)) {
     $150 = ((($84)) + 32|0);
     $23 = $150;
     $151 = $23;
     $22 = $151;
     $152 = $22;
     $21 = $152;
     $153 = $21;
     $20 = $153;
     $154 = $20;
     $19 = $154;
     $155 = $19;
     $156 = HEAP8[$155>>0]|0;
     $157 = $156&255;
     $158 = $157 & 1;
     $159 = ($158|0)!=(0);
     if ($159) {
      $13 = $152;
      $160 = $13;
      $12 = $160;
      $161 = $12;
      $11 = $161;
      $162 = $11;
      $163 = ((($162)) + 8|0);
      $164 = HEAP32[$163>>2]|0;
      $171 = $164;
     } else {
      $18 = $152;
      $165 = $18;
      $17 = $165;
      $166 = $17;
      $16 = $166;
      $167 = $16;
      $168 = ((($167)) + 1|0);
      $15 = $168;
      $169 = $15;
      $14 = $169;
      $170 = $14;
      $171 = $170;
     }
     $10 = $171;
     $172 = $10;
     $__p = $172;
     $173 = $__p;
     $174 = $__p;
     $175 = ((($84)) + 32|0);
     $33 = $175;
     $176 = $33;
     $32 = $176;
     $177 = $32;
     $31 = $177;
     $178 = $31;
     $30 = $178;
     $179 = $30;
     $180 = HEAP8[$179>>0]|0;
     $181 = $180&255;
     $182 = $181 & 1;
     $183 = ($182|0)!=(0);
     if ($183) {
      $26 = $176;
      $184 = $26;
      $25 = $184;
      $185 = $25;
      $24 = $185;
      $186 = $24;
      $187 = ((($186)) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $196 = $188;
     } else {
      $29 = $176;
      $189 = $29;
      $28 = $189;
      $190 = $28;
      $27 = $190;
      $191 = $27;
      $192 = HEAP8[$191>>0]|0;
      $193 = $192&255;
      $194 = $193 >> 1;
      $196 = $194;
     }
     $195 = (($174) + ($196)|0);
     $34 = $84;
     $35 = $173;
     $36 = $195;
     $197 = $34;
     $198 = $35;
     $199 = ((($197)) + 24|0);
     HEAP32[$199>>2] = $198;
     $200 = ((($197)) + 20|0);
     HEAP32[$200>>2] = $198;
     $201 = $36;
     $202 = ((($197)) + 28|0);
     HEAP32[$202>>2] = $201;
     $203 = $__nout;
     $37 = $84;
     $38 = $203;
     $204 = $37;
     $205 = $38;
     $206 = ((($204)) + 24|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + ($205)|0);
     HEAP32[$206>>2] = $208;
     $39 = $84;
     $209 = $39;
     $210 = ((($209)) + 20|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $__hm;
     $213 = (($211) + ($212)|0);
     $214 = ((($84)) + 44|0);
     HEAP32[$214>>2] = $213;
     break;
    }
   }
   $215 = ___cxa_find_matching_catch(0|0)|0;
   $216 = tempRet0;
   $80 = $215;
   $81 = $216;
   $217 = $80;
   (___cxa_begin_catch(($217|0))|0);
   $218 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $77 = $218;
   $82 = 1;
   ___cxa_end_catch();
   $301 = $77;
   STACKTOP = sp;return ($301|0);
  }
 } while(0);
 $41 = $84;
 $219 = $41;
 $220 = ((($219)) + 24|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = ((($221)) + 1|0);
 HEAP32[$83>>2] = $222;
 $223 = ((($84)) + 44|0);
 $48 = $83;
 $49 = $223;
 $224 = $48;
 $225 = $49;
 ;HEAP8[$47>>0]=HEAP8[$50>>0]|0;
 $45 = $224;
 $46 = $225;
 $226 = $45;
 $227 = $46;
 $42 = $47;
 $43 = $226;
 $44 = $227;
 $228 = $43;
 $229 = HEAP32[$228>>2]|0;
 $230 = $44;
 $231 = HEAP32[$230>>2]|0;
 $232 = ($229>>>0)<($231>>>0);
 $233 = $46;
 $234 = $45;
 $235 = $232 ? $233 : $234;
 $236 = HEAP32[$235>>2]|0;
 $237 = ((($84)) + 44|0);
 HEAP32[$237>>2] = $236;
 $238 = ((($84)) + 48|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = $239 & 8;
 $241 = ($240|0)!=(0);
 if ($241) {
  $242 = ((($84)) + 32|0);
  $64 = $242;
  $243 = $64;
  $63 = $243;
  $244 = $63;
  $62 = $244;
  $245 = $62;
  $61 = $245;
  $246 = $61;
  $60 = $246;
  $247 = $60;
  $248 = HEAP8[$247>>0]|0;
  $249 = $248&255;
  $250 = $249 & 1;
  $251 = ($250|0)!=(0);
  if ($251) {
   $54 = $244;
   $252 = $54;
   $53 = $252;
   $253 = $53;
   $52 = $253;
   $254 = $52;
   $255 = ((($254)) + 8|0);
   $256 = HEAP32[$255>>2]|0;
   $263 = $256;
  } else {
   $59 = $244;
   $257 = $59;
   $58 = $257;
   $258 = $58;
   $57 = $258;
   $259 = $57;
   $260 = ((($259)) + 1|0);
   $56 = $260;
   $261 = $56;
   $55 = $261;
   $262 = $55;
   $263 = $262;
  }
  $51 = $263;
  $264 = $51;
  $__p1 = $264;
  $265 = $__p1;
  $266 = $__p1;
  $267 = $__ninp;
  $268 = (($266) + ($267)|0);
  $269 = ((($84)) + 44|0);
  $270 = HEAP32[$269>>2]|0;
  $65 = $84;
  $66 = $265;
  $67 = $268;
  $68 = $270;
  $271 = $65;
  $272 = $66;
  $273 = ((($271)) + 8|0);
  HEAP32[$273>>2] = $272;
  $274 = $67;
  $275 = ((($271)) + 12|0);
  HEAP32[$275>>2] = $274;
  $276 = $68;
  $277 = ((($271)) + 16|0);
  HEAP32[$277>>2] = $276;
 }
 $278 = $79;
 $279 = $278&255;
 $73 = $84;
 $74 = $279;
 $280 = $73;
 $281 = ((($280)) + 24|0);
 $282 = HEAP32[$281>>2]|0;
 $283 = ((($280)) + 28|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = ($282|0)==($284|0);
 if ($285) {
  $286 = HEAP32[$280>>2]|0;
  $287 = ((($286)) + 52|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = $74;
  $290 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($289)|0);
  $291 = (FUNCTION_TABLE_iii[$288 & 1023]($280,$290)|0);
  $72 = $291;
 } else {
  $292 = $74;
  $293 = ((($280)) + 24|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = ((($294)) + 1|0);
  HEAP32[$293>>2] = $295;
  HEAP8[$294>>0] = $292;
  $296 = $74;
  $297 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($296)|0);
  $72 = $297;
 }
 $298 = $72;
 $77 = $298;
 $301 = $77;
 STACKTOP = sp;return ($301|0);
}
function __ZNSt3__111char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__111char_traitsIcE7not_eofEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $3 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($1,$2)|0);
 if ($3) {
  $4 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $5 = $4 ^ -1;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 } else {
  $6 = $0;
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__111char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os,$__str,$__len) {
 $__os = $__os|0;
 $__str = $__str|0;
 $__len = $__len|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 108|0;
 $5 = sp + 92|0;
 $__s = sp + 16|0;
 $25 = sp + 4|0;
 $26 = sp;
 $20 = $__os;
 $21 = $__str;
 $22 = $__len;
 $27 = $20;
 __THREW__ = 0;
 invoke_vii(557,($__s|0),($27|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 L1: do {
  if ($29) {
   $123 = ___cxa_find_matching_catch(0|0)|0;
   $124 = tempRet0;
   $23 = $123;
   $24 = $124;
  } else {
   $19 = $__s;
   $30 = $19;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&1;
   do {
    if ($32) {
     $33 = $20;
     $17 = $25;
     $18 = $33;
     $34 = $17;
     $35 = $18;
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($36)) + -12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($35) + ($38)|0);
     $16 = $39;
     $40 = $16;
     $15 = $40;
     $41 = $15;
     $42 = ((($41)) + 24|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP32[$34>>2] = $43;
     $44 = $21;
     $45 = $20;
     $46 = HEAP32[$45>>2]|0;
     $47 = ((($46)) + -12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($45) + ($48)|0);
     $10 = $49;
     $50 = $10;
     $51 = ((($50)) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $52 & 176;
     $54 = ($53|0)==(32);
     $55 = $21;
     $56 = $22;
     $57 = (($55) + ($56)|0);
     $58 = $54 ? $57 : $55;
     $59 = $21;
     $60 = $22;
     $61 = (($59) + ($60)|0);
     $62 = $20;
     $63 = HEAP32[$62>>2]|0;
     $64 = ((($63)) + -12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($62) + ($65)|0);
     $67 = $20;
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + -12|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($67) + ($70)|0);
     $8 = $71;
     $72 = $8;
     $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $74 = ((($72)) + 76|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($73,$75)|0);
     do {
      if ($76) {
       $3 = $72;
       $4 = 32;
       $77 = $3;
       __THREW__ = 0;
       $78 = (invoke_ii(558,($77|0))|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 13;
       } else {
        HEAP32[$5>>2] = $78;
        $2 = $5;
        $81 = $2;
        __THREW__ = 0;
        $82 = (invoke_iii(559,($81|0),(11864|0))|0);
        $83 = __THREW__; __THREW__ = 0;
        $84 = $83&1;
        if (!($84)) {
         $85 = $4;
         $0 = $82;
         $1 = $85;
         $86 = $0;
         $87 = HEAP32[$86>>2]|0;
         $88 = ((($87)) + 28|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = $1;
         __THREW__ = 0;
         $91 = (invoke_iii($89|0,($86|0),($90|0))|0);
         $92 = __THREW__; __THREW__ = 0;
         $93 = $92&1;
         if (!($93)) {
          __ZNSt3__16localeD2Ev($5);
          $98 = $91 << 24 >> 24;
          $99 = ((($72)) + 76|0);
          HEAP32[$99>>2] = $98;
          label = 9;
          break;
         }
        }
        $94 = ___cxa_find_matching_catch(0|0)|0;
        $95 = tempRet0;
        $6 = $94;
        $7 = $95;
        __ZNSt3__16localeD2Ev($5);
        $96 = $6;
        $97 = $7;
        $eh$lpad$body$index2Z2D = $97;$eh$lpad$body$indexZ2D = $96;
       }
      } else {
       label = 9;
      }
     } while(0);
     if ((label|0) == 9) {
      $100 = ((($72)) + 76|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = $101&255;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$25>>2]|0;
      $103 = (invoke_iiiiiii(560,($$byval_copy|0),($44|0),($58|0),($61|0),($66|0),($102|0))|0);
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if ($105) {
       label = 13;
      } else {
       HEAP32[$26>>2] = $103;
       $9 = $26;
       $106 = $9;
       $107 = HEAP32[$106>>2]|0;
       $108 = ($107|0)==(0|0);
       if (!($108)) {
        break;
       }
       $109 = $20;
       $110 = HEAP32[$109>>2]|0;
       $111 = ((($110)) + -12|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = (($109) + ($112)|0);
       $13 = $113;
       $14 = 5;
       $114 = $13;
       $115 = $14;
       $11 = $114;
       $12 = $115;
       $116 = $11;
       $117 = ((($116)) + 16|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = $12;
       $120 = $118 | $119;
       __THREW__ = 0;
       invoke_vii(561,($116|0),($120|0));
       $121 = __THREW__; __THREW__ = 0;
       $122 = $121&1;
       if ($122) {
        label = 13;
       } else {
        break;
       }
      }
     }
     if ((label|0) == 13) {
      $125 = ___cxa_find_matching_catch(0|0)|0;
      $126 = tempRet0;
      $eh$lpad$body$index2Z2D = $126;$eh$lpad$body$indexZ2D = $125;
     }
     $23 = $eh$lpad$body$indexZ2D;
     $24 = $eh$lpad$body$index2Z2D;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   $135 = $20;
   STACKTOP = sp;return ($135|0);
  }
 } while(0);
 $127 = $23;
 (___cxa_begin_catch(($127|0))|0);
 $128 = $20;
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + -12|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($128) + ($131)|0);
 __THREW__ = 0;
 invoke_vi(562,($132|0));
 $133 = __THREW__; __THREW__ = 0;
 $134 = $133&1;
 if (!($134)) {
  ___cxa_end_catch();
  $135 = $20;
  STACKTOP = sp;return ($135|0);
 }
 $136 = ___cxa_find_matching_catch()|0;
 $137 = tempRet0;
 $23 = $136;
 $24 = $137;
 __THREW__ = 0;
 invoke_v(440);
 $138 = __THREW__; __THREW__ = 0;
 $139 = $138&1;
 if ($139) {
  $142 = ___cxa_find_matching_catch(0|0)|0;
  $143 = tempRet0;
  ___clang_call_terminate($142);
  // unreachable;
 } else {
  $140 = $23;
  $141 = $24;
  ___resumeException($140|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__np = 0, $__ns = 0, $__r$i = 0, $__sp = 0, $__sz = 0, $cleanup$dest = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $32 = sp + 52|0;
 $__sp = sp + 12|0;
 $33 = $__ob;
 $34 = $__op;
 $35 = $__oe;
 $36 = $__iob;
 $37 = $__fl;
 $41 = HEAP32[$__s>>2]|0;
 $42 = ($41|0)==(0|0);
 if ($42) {
  ;HEAP32[$32>>2]=HEAP32[$__s>>2]|0;
  $150 = HEAP32[$32>>2]|0;
  STACKTOP = sp;return ($150|0);
 }
 $43 = $35;
 $44 = $33;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $__sz = $47;
 $48 = $36;
 $31 = $48;
 $49 = $31;
 $50 = ((($49)) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $__ns = $51;
 $52 = $__ns;
 $53 = $__sz;
 $54 = ($52|0)>($53|0);
 if ($54) {
  $55 = $__sz;
  $56 = $__ns;
  $57 = (($56) - ($55))|0;
  $__ns = $57;
 } else {
  $__ns = 0;
 }
 $58 = $34;
 $59 = $33;
 $60 = $58;
 $61 = $59;
 $62 = (($60) - ($61))|0;
 $__np = $62;
 $63 = $__np;
 $64 = ($63|0)>(0);
 if ($64) {
  $65 = HEAP32[$__s>>2]|0;
  $66 = $33;
  $67 = $__np;
  $23 = $65;
  $24 = $66;
  $25 = $67;
  $68 = $23;
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 48|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $24;
  $73 = $25;
  $74 = (FUNCTION_TABLE_iiii[$71 & 1023]($68,$72,$73)|0);
  $75 = $__np;
  $76 = ($74|0)!=($75|0);
  if ($76) {
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$32>>2]=HEAP32[$__s>>2]|0;
   $150 = HEAP32[$32>>2]|0;
   STACKTOP = sp;return ($150|0);
  }
 }
 $77 = $__ns;
 $78 = ($77|0)>(0);
 if ($78) {
  $79 = $__ns;
  $80 = $37;
  $20 = $__sp;
  $21 = $79;
  $22 = $80;
  $81 = $20;
  $19 = $81;
  $82 = $19;
  $18 = $82;
  $83 = $18;
  $17 = $83;
  $84 = $21;
  $85 = $22;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($81,$84,$85);
  $86 = HEAP32[$__s>>2]|0;
  $16 = $__sp;
  $87 = $16;
  $15 = $87;
  $88 = $15;
  $14 = $88;
  $89 = $14;
  $13 = $89;
  $90 = $13;
  $12 = $90;
  $91 = $12;
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = $93 & 1;
  $95 = ($94|0)!=(0);
  if ($95) {
   $6 = $88;
   $96 = $6;
   $5 = $96;
   $97 = $5;
   $4 = $97;
   $98 = $4;
   $99 = ((($98)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   $107 = $100;
  } else {
   $11 = $88;
   $101 = $11;
   $10 = $101;
   $102 = $10;
   $9 = $102;
   $103 = $9;
   $104 = ((($103)) + 1|0);
   $8 = $104;
   $105 = $8;
   $7 = $105;
   $106 = $7;
   $107 = $106;
  }
  $3 = $107;
  $108 = $3;
  $109 = $__ns;
  $0 = $86;
  $1 = $108;
  $2 = $109;
  $110 = $0;
  $111 = HEAP32[$110>>2]|0;
  $112 = ((($111)) + 48|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $1;
  $115 = $2;
  __THREW__ = 0;
  $116 = (invoke_iiii($113|0,($110|0),($114|0),($115|0))|0);
  $117 = __THREW__; __THREW__ = 0;
  $118 = $117&1;
  if ($118) {
   $121 = ___cxa_find_matching_catch()|0;
   $122 = tempRet0;
   $38 = $121;
   $39 = $122;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
   $123 = $38;
   $124 = $39;
   ___resumeException($123|0);
   // unreachable;
  }
  $119 = $__ns;
  $120 = ($116|0)!=($119|0);
  if ($120) {
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$32>>2]=HEAP32[$__s>>2]|0;
   $40 = 1;
  } else {
   $40 = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
  $cleanup$dest = $40;
  $switch = ($cleanup$dest>>>0)<(1);
  if (!($switch)) {
   $150 = HEAP32[$32>>2]|0;
   STACKTOP = sp;return ($150|0);
  }
 }
 $125 = $35;
 $126 = $34;
 $127 = $125;
 $128 = $126;
 $129 = (($127) - ($128))|0;
 $__np = $129;
 $130 = $__np;
 $131 = ($130|0)>(0);
 if ($131) {
  $132 = HEAP32[$__s>>2]|0;
  $133 = $34;
  $134 = $__np;
  $26 = $132;
  $27 = $133;
  $28 = $134;
  $135 = $26;
  $136 = HEAP32[$135>>2]|0;
  $137 = ((($136)) + 48|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $27;
  $140 = $28;
  $141 = (FUNCTION_TABLE_iiii[$138 & 1023]($135,$139,$140)|0);
  $142 = $__np;
  $143 = ($141|0)!=($142|0);
  if ($143) {
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$32>>2]=HEAP32[$__s>>2]|0;
   $150 = HEAP32[$32>>2]|0;
   STACKTOP = sp;return ($150|0);
  }
 }
 $144 = $36;
 $29 = $144;
 $30 = 0;
 $145 = $29;
 $146 = ((($145)) + 12|0);
 $147 = HEAP32[$146>>2]|0;
 $__r$i = $147;
 $148 = $30;
 $149 = ((($145)) + 12|0);
 HEAP32[$149>>2] = $148;
 ;HEAP32[$32>>2]=HEAP32[$__s>>2]|0;
 $150 = HEAP32[$32>>2]|0;
 STACKTOP = sp;return ($150|0);
}
function __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 40|0;
 $10 = sp + 232|0;
 $11 = sp + 32|0;
 $16 = sp + 231|0;
 $26 = sp + 24|0;
 $29 = sp + 230|0;
 $30 = sp + 16|0;
 $35 = sp + 229|0;
 $45 = sp + 8|0;
 $48 = sp + 228|0;
 $49 = sp;
 $52 = sp + 227|0;
 $55 = sp + 226|0;
 $56 = sp + 225|0;
 $57 = sp + 224|0;
 $54 = $this;
 $58 = $54;
 $59 = ((($58)) + 48|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 & 16;
 $62 = ($61|0)!=(0);
 if ($62) {
  $63 = ((($58)) + 44|0);
  $64 = HEAP32[$63>>2]|0;
  $53 = $58;
  $65 = $53;
  $66 = ((($65)) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($64>>>0)<($67>>>0);
  if ($68) {
   $23 = $58;
   $69 = $23;
   $70 = ((($69)) + 24|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($58)) + 44|0);
   HEAP32[$72>>2] = $71;
  }
  $4 = $58;
  $73 = $4;
  $74 = ((($73)) + 20|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($58)) + 44|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($58)) + 32|0);
  $3 = $78;
  $79 = $3;
  $2 = $79;
  $80 = $2;
  $1 = $80;
  $81 = $1;
  $0 = $81;
  $12 = $agg$result;
  $13 = $75;
  $14 = $77;
  $15 = $55;
  $82 = $12;
  ;HEAP8[$11>>0]=HEAP8[$16>>0]|0;
  $9 = $82;
  $83 = $9;
  $8 = $11;
  ;HEAP8[$7>>0]=HEAP8[$10>>0]|0;
  $6 = $83;
  $5 = $7;
  $84 = $13;
  $85 = $14;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($82,$84,$85);
  STACKTOP = sp;return;
 }
 $86 = ((($58)) + 48|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $87 & 8;
 $89 = ($88|0)!=(0);
 if ($89) {
  $17 = $58;
  $90 = $17;
  $91 = ((($90)) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $18 = $58;
  $93 = $18;
  $94 = ((($93)) + 16|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ((($58)) + 32|0);
  $22 = $96;
  $97 = $22;
  $21 = $97;
  $98 = $21;
  $20 = $98;
  $99 = $20;
  $19 = $99;
  $31 = $agg$result;
  $32 = $92;
  $33 = $95;
  $34 = $56;
  $100 = $31;
  ;HEAP8[$30>>0]=HEAP8[$35>>0]|0;
  $28 = $100;
  $101 = $28;
  $27 = $30;
  ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
  $25 = $101;
  $24 = $26;
  $102 = $32;
  $103 = $33;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($100,$102,$103);
  STACKTOP = sp;return;
 }
 $104 = ((($58)) + 32|0);
 $39 = $104;
 $105 = $39;
 $38 = $105;
 $106 = $38;
 $37 = $106;
 $107 = $37;
 $36 = $107;
 $50 = $agg$result;
 $51 = $57;
 $108 = $50;
 ;HEAP8[$49>>0]=HEAP8[$52>>0]|0;
 $47 = $108;
 $109 = $47;
 $46 = $49;
 ;HEAP8[$45>>0]=HEAP8[$48>>0]|0;
 $44 = $109;
 $43 = $45;
 $42 = $108;
 $110 = $42;
 $41 = $110;
 $111 = $41;
 $40 = $111;
 $112 = $40;
 $__a$i$i = $112;
 $__i$i$i = 0;
 while(1) {
  $113 = $__i$i$i;
  $114 = ($113>>>0)<(3);
  if (!($114)) {
   break;
  }
  $115 = $__i$i$i;
  $116 = $__a$i$i;
  $117 = (($116) + ($115<<2)|0);
  HEAP32[$117>>2] = 0;
  $118 = $__i$i$i;
  $119 = (($118) + 1)|0;
  $__i$i$i = $119;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap = 0, $__m$i = 0, $__p = 0, $__sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $34 = sp + 8|0;
 $36 = sp + 214|0;
 $43 = sp;
 $46 = sp + 213|0;
 $50 = sp + 212|0;
 $47 = $this;
 $48 = $__first;
 $49 = $__last;
 $51 = $47;
 $52 = $48;
 $53 = $49;
 $44 = $52;
 $45 = $53;
 $54 = $44;
 $55 = $45;
 ;HEAP8[$43>>0]=HEAP8[$46>>0]|0;
 $41 = $54;
 $42 = $55;
 $56 = $42;
 $57 = $41;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $__sz = $60;
 $61 = $__sz;
 $40 = $51;
 $62 = $40;
 $39 = $62;
 $63 = $39;
 $38 = $63;
 $64 = $38;
 $37 = $64;
 $65 = $37;
 $35 = $65;
 $66 = $35;
 ;HEAP8[$34>>0]=HEAP8[$36>>0]|0;
 $33 = $66;
 $67 = $33;
 $32 = $67;
 $__m$i = -1;
 $68 = $__m$i;
 $69 = (($68) - 16)|0;
 $70 = ($61>>>0)>($69>>>0);
 if ($70) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($51);
  // unreachable;
 }
 $71 = $__sz;
 $72 = ($71>>>0)<(11);
 $73 = $__sz;
 if ($72) {
  $30 = $51;
  $31 = $73;
  $74 = $30;
  $75 = $31;
  $76 = $75 << 1;
  $77 = $76&255;
  $29 = $74;
  $78 = $29;
  $28 = $78;
  $79 = $28;
  HEAP8[$79>>0] = $77;
  $9 = $51;
  $80 = $9;
  $8 = $80;
  $81 = $8;
  $7 = $81;
  $82 = $7;
  $83 = ((($82)) + 1|0);
  $6 = $83;
  $84 = $6;
  $5 = $84;
  $85 = $5;
  $__p = $85;
 } else {
  $1 = $73;
  $86 = $1;
  $87 = ($86>>>0)<(11);
  if ($87) {
   $94 = 11;
  } else {
   $88 = $1;
   $89 = (($88) + 1)|0;
   $0 = $89;
   $90 = $0;
   $91 = (($90) + 15)|0;
   $92 = $91 & -16;
   $94 = $92;
  }
  $93 = (($94) - 1)|0;
  $__cap = $93;
  $4 = $51;
  $95 = $4;
  $3 = $95;
  $96 = $3;
  $2 = $96;
  $97 = $2;
  $98 = $__cap;
  $99 = (($98) + 1)|0;
  $14 = $97;
  $15 = $99;
  $100 = $14;
  $101 = $15;
  $11 = $100;
  $12 = $101;
  $13 = 0;
  $102 = $12;
  $10 = $102;
  $103 = $10;
  $104 = (__Znwj($103)|0);
  $__p = $104;
  $105 = $__p;
  $18 = $51;
  $19 = $105;
  $106 = $18;
  $107 = $19;
  $17 = $106;
  $108 = $17;
  $16 = $108;
  $109 = $16;
  $110 = ((($109)) + 8|0);
  HEAP32[$110>>2] = $107;
  $111 = $__cap;
  $112 = (($111) + 1)|0;
  $22 = $51;
  $23 = $112;
  $113 = $22;
  $114 = $23;
  $115 = 1 | $114;
  $21 = $113;
  $116 = $21;
  $20 = $116;
  $117 = $20;
  HEAP32[$117>>2] = $115;
  $118 = $__sz;
  $26 = $51;
  $27 = $118;
  $119 = $26;
  $120 = $27;
  $25 = $119;
  $121 = $25;
  $24 = $121;
  $122 = $24;
  $123 = ((($122)) + 4|0);
  HEAP32[$123>>2] = $120;
 }
 while(1) {
  $124 = $48;
  $125 = $49;
  $126 = ($124|0)!=($125|0);
  $127 = $__p;
  if (!($126)) {
   break;
  }
  $128 = $48;
  __ZNSt3__111char_traitsIcE6assignERcRKc($127,$128);
  $129 = $48;
  $130 = ((($129)) + 1|0);
  $48 = $130;
  $131 = $__p;
  $132 = ((($131)) + 1|0);
  $__p = $132;
 }
 HEAP8[$50>>0] = 0;
 __ZNSt3__111char_traitsIcE6assignERcRKc($127,$50);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZN9exceptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9exceptionD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($3)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($2) + ($9)|0);
 HEAP32[$10>>2] = $6;
 $11 = ((($3)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($2)) + 12|0);
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 STACKTOP = sp;return;
}
function __ZN10MeshLoader6UVMapsD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(563,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(0|0)|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEED2Ev($3);
  $8 = $1;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEED2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_6vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS4_EEEENS5_IS7_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_6vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS4_EEEENS5_IS7_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -12|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEED2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 12)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -8|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZN10MeshLoader6UVMaps15st_SurfaceUVMapD2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 8)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZN10MeshLoader6UVMaps15st_SurfaceUVMapD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 __ZdaPv($3);
 STACKTOP = sp;return;
}
function __ZN2RTC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN6Shader8RTShaderC2Ev($3);
 $4 = ((($3)) + 44|0);
 HEAP32[$4>>2] = 256;
 $5 = ((($3)) + 48|0);
 HEAP32[$5>>2] = 256;
 $6 = ((($3)) + 24|0);
 __THREW__ = 0;
 invoke_vii(502,1,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if (!($8)) {
   $9 = ((($3)) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   __THREW__ = 0;
   invoke_vii(503,34962,($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    __THREW__ = 0;
    invoke_viiii(504,34962,48,(5700|0),35044);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     $15 = ((($3)) + 28|0);
     __THREW__ = 0;
     invoke_vii(502,1,($15|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      $18 = ((($3)) + 28|0);
      $19 = HEAP32[$18>>2]|0;
      __THREW__ = 0;
      invoke_vii(503,34962,($19|0));
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if (!($21)) {
       __THREW__ = 0;
       invoke_viiii(504,34962,32,(5748|0),35044);
       $22 = __THREW__; __THREW__ = 0;
       $23 = $22&1;
       if (!($23)) {
        $24 = ((($3)) + 32|0);
        __THREW__ = 0;
        invoke_vii(564,1,($24|0));
        $25 = __THREW__; __THREW__ = 0;
        $26 = $25&1;
        if (!($26)) {
         $27 = ((($3)) + 32|0);
         $28 = HEAP32[$27>>2]|0;
         __THREW__ = 0;
         invoke_vii(565,3553,($28|0));
         $29 = __THREW__; __THREW__ = 0;
         $30 = $29&1;
         if (!($30)) {
          __THREW__ = 0;
          invoke_viid(566,3553,10240,9728.0);
          $31 = __THREW__; __THREW__ = 0;
          $32 = $31&1;
          if (!($32)) {
           __THREW__ = 0;
           invoke_viid(566,3553,10241,9728.0);
           $33 = __THREW__; __THREW__ = 0;
           $34 = $33&1;
           if (!($34)) {
            __THREW__ = 0;
            invoke_viid(566,3553,10242,10497.0);
            $35 = __THREW__; __THREW__ = 0;
            $36 = $35&1;
            if (!($36)) {
             __THREW__ = 0;
             invoke_viid(566,3553,10243,10497.0);
             $37 = __THREW__; __THREW__ = 0;
             $38 = $37&1;
             if (!($38)) {
              $39 = ((($3)) + 44|0);
              $40 = HEAP32[$39>>2]|0;
              $41 = ((($3)) + 48|0);
              $42 = HEAP32[$41>>2]|0;
              __THREW__ = 0;
              invoke_viiiiiiiii(533,3553,0,6408,($40|0),($42|0),0,6408,5121,(0|0));
              $43 = __THREW__; __THREW__ = 0;
              $44 = $43&1;
              if (!($44)) {
               __THREW__ = 0;
               invoke_vii(565,3553,0);
               $45 = __THREW__; __THREW__ = 0;
               $46 = $45&1;
               if (!($46)) {
                $47 = ((($3)) + 36|0);
                __THREW__ = 0;
                invoke_vii(567,1,($47|0));
                $48 = __THREW__; __THREW__ = 0;
                $49 = $48&1;
                if (!($49)) {
                 $50 = ((($3)) + 36|0);
                 $51 = HEAP32[$50>>2]|0;
                 __THREW__ = 0;
                 invoke_vii(568,36161,($51|0));
                 $52 = __THREW__; __THREW__ = 0;
                 $53 = $52&1;
                 if (!($53)) {
                  $54 = ((($3)) + 44|0);
                  $55 = HEAP32[$54>>2]|0;
                  $56 = ((($3)) + 48|0);
                  $57 = HEAP32[$56>>2]|0;
                  __THREW__ = 0;
                  invoke_viiii(569,36161,34041,($55|0),($57|0));
                  $58 = __THREW__; __THREW__ = 0;
                  $59 = $58&1;
                  if (!($59)) {
                   __THREW__ = 0;
                   invoke_vii(568,36161,0);
                   $60 = __THREW__; __THREW__ = 0;
                   $61 = $60&1;
                   if (!($61)) {
                    $62 = ((($3)) + 40|0);
                    __THREW__ = 0;
                    invoke_vii(570,1,($62|0));
                    $63 = __THREW__; __THREW__ = 0;
                    $64 = $63&1;
                    if (!($64)) {
                     $65 = ((($3)) + 40|0);
                     $66 = HEAP32[$65>>2]|0;
                     __THREW__ = 0;
                     invoke_vii(571,36160,($66|0));
                     $67 = __THREW__; __THREW__ = 0;
                     $68 = $67&1;
                     if ($68) {
                      break;
                     }
                     $69 = ((($3)) + 36|0);
                     $70 = HEAP32[$69>>2]|0;
                     __THREW__ = 0;
                     invoke_viiii(572,36160,33306,36161,($70|0));
                     $71 = __THREW__; __THREW__ = 0;
                     $72 = $71&1;
                     if ($72) {
                      break;
                     }
                     $73 = ((($3)) + 32|0);
                     $74 = HEAP32[$73>>2]|0;
                     __THREW__ = 0;
                     invoke_viiiii(573,36160,36064,3553,($74|0),0);
                     $75 = __THREW__; __THREW__ = 0;
                     $76 = $75&1;
                     if ($76) {
                      break;
                     }
                     __THREW__ = 0;
                     invoke_vii(571,36160,0);
                     $77 = __THREW__; __THREW__ = 0;
                     $78 = $77&1;
                     if ($78) {
                      break;
                     }
                     STACKTOP = sp;return;
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch()|0;
 $80 = tempRet0;
 $1 = $79;
 $2 = $80;
 __ZN6Shader8RTShaderD2Ev($3);
 $81 = $1;
 $82 = $2;
 ___resumeException($81|0);
 // unreachable;
}
function __ZN6Shader5ColorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 HEAP32[$3>>2] = 21117;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 21242;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = 0;
 __THREW__ = 0;
 invoke_vi(574,($3|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $1 = $8;
  $2 = $9;
  __ZN6Shader7ProgramD2Ev($3);
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6Shader7TextureC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 HEAP32[$3>>2] = 21351;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 21540;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = 0;
 __THREW__ = 0;
 invoke_vi(575,($3|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $1 = $8;
  $2 = $9;
  __ZN6Shader7ProgramD2Ev($3);
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN8Renderer9StarFieldC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 __ZN8Renderer9StarField5LayerC2Ev($2);
 $3 = ((($1)) + 44|0);
 __ZN8Renderer9StarField5LayerC2Ev($3);
 $4 = ((($1)) + 60|0);
 __ZN8Renderer9StarField5LayerC2Ev($4);
 STACKTOP = sp;return;
}
function __ZN8Renderer4InitERK4AABB($this,$scene_bounds) {
 $this = $this|0;
 $scene_bounds = $scene_bounds|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0.0;
 var $332 = 0.0, $333 = 0.0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0.0, $37 = 0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0.0, $403 = 0.0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $count_per_layer = 0, $data = 0, $data2 = 0, $dist = 0, $dist_x = 0, $dist_y = 0, $fmt = 0, $i = 0, $i1 = 0;
 var $idx = 0, $internalFmt = 0, $j = 0, $layer_count = 0, $mul = 0.0, $p = 0, $particle_size = 0.0, $rnd = 0, $size = 0, $star_size = 0.0, $texture_data = 0, $u_dist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 728|0;
 $9 = sp + 716|0;
 $52 = sp + 128|0;
 $55 = sp + 757|0;
 $61 = sp + 120|0;
 $64 = sp + 756|0;
 $82 = sp + 488|0;
 $85 = sp + 476|0;
 $dist = sp + 56|0;
 $texture_data = sp + 400|0;
 $u_dist = sp + 392|0;
 $rnd = sp + 48|0;
 $102 = sp + 40|0;
 $103 = sp + 32|0;
 $data = sp + 340|0;
 $dist_x = sp + 16|0;
 $dist_y = sp;
 $104 = sp + 252|0;
 $105 = sp + 248|0;
 $106 = sp + 244|0;
 $107 = sp + 240|0;
 $108 = sp + 236|0;
 $109 = sp + 232|0;
 $110 = sp + 228|0;
 $111 = sp + 224|0;
 $112 = sp + 220|0;
 $113 = sp + 216|0;
 $data2 = sp + 200|0;
 $98 = $this;
 $99 = $scene_bounds;
 $114 = $98;
 $115 = ((($114)) + 184|0);
 _glGenBuffers(8,($115|0));
 $116 = ((($114)) + 184|0);
 $117 = HEAP32[$116>>2]|0;
 _glBindBuffer(34962,($117|0));
 $118 = HEAP32[$114>>2]|0;
 $119 = ((($118)) + 12|0);
 $97 = $119;
 $120 = $97;
 $121 = ((($120)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = HEAP32[$120>>2]|0;
 $124 = $122;
 $125 = $123;
 $126 = (($124) - ($125))|0;
 $127 = (($126|0) / 12)&-1;
 $128 = ($127*12)|0;
 $129 = HEAP32[$114>>2]|0;
 $130 = ((($129)) + 12|0);
 $96 = $130;
 $131 = $96;
 $132 = HEAP32[$131>>2]|0;
 _glBufferData(34962,($128|0),($132|0),35044);
 _glBindBuffer(34962,0);
 $133 = ((($114)) + 184|0);
 $134 = ((($133)) + 8|0);
 $135 = HEAP32[$134>>2]|0;
 _glBindBuffer(34962,($135|0));
 $136 = HEAP32[$114>>2]|0;
 $137 = ((($136)) + 116|0);
 $93 = $137;
 $138 = $93;
 $139 = ((($138)) + 4|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = HEAP32[$138>>2]|0;
 $142 = $140;
 $143 = $141;
 $144 = (($142) - ($143))|0;
 $145 = (($144|0) / 12)&-1;
 $146 = ($145*12)|0;
 $147 = HEAP32[$114>>2]|0;
 $148 = ((($147)) + 116|0);
 $89 = $148;
 $149 = $89;
 $150 = HEAP32[$149>>2]|0;
 _glBufferData(34962,($146|0),($150|0),35044);
 $151 = ((($114)) + 184|0);
 $152 = ((($151)) + 4|0);
 $153 = HEAP32[$152>>2]|0;
 _glBindBuffer(34962,($153|0));
 $154 = HEAP32[$114>>2]|0;
 $155 = ((($154)) + 168|0);
 $156 = ((($155)) + 24|0);
 $78 = $156;
 $157 = $78;
 $158 = ((($157)) + 4|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = HEAP32[$157>>2]|0;
 $161 = $159;
 $162 = $160;
 $163 = (($161) - ($162))|0;
 $164 = (($163|0) / 8)&-1;
 $165 = $164<<3;
 $166 = HEAP32[$114>>2]|0;
 $167 = ((($166)) + 168|0);
 $168 = ((($167)) + 24|0);
 $77 = $168;
 $169 = $77;
 $170 = HEAP32[$169>>2]|0;
 _glBufferData(34962,($165|0),($170|0),35044);
 $171 = ((($114)) + 184|0);
 $172 = ((($171)) + 12|0);
 $173 = HEAP32[$172>>2]|0;
 _glBindBuffer(34962,($173|0));
 $174 = HEAP32[$114>>2]|0;
 $175 = ((($174)) + 168|0);
 $76 = $175;
 $176 = $76;
 $177 = ((($176)) + 4|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = HEAP32[$176>>2]|0;
 $180 = $178;
 $181 = $179;
 $182 = (($180) - ($181))|0;
 $183 = (($182|0) / 12)&-1;
 $184 = ($183*12)|0;
 $185 = HEAP32[$114>>2]|0;
 $186 = ((($185)) + 168|0);
 $75 = $186;
 $187 = $75;
 $188 = HEAP32[$187>>2]|0;
 _glBufferData(34962,($184|0),($188|0),35044);
 $72 = $dist;
 $73 = 32.0;
 $74 = 10.0;
 $189 = $72;
 $190 = $73;
 $191 = $74;
 $69 = $189;
 $70 = $190;
 $71 = $191;
 $192 = $69;
 $193 = $70;
 HEAPF64[$192>>3] = $193;
 $194 = ((($192)) + 8|0);
 $195 = $71;
 HEAPF64[$194>>3] = $195;
 $196 = ((($189)) + 24|0);
 HEAP8[$196>>0] = 0;
 $count = 128;
 $size = 32;
 __ZNSt3__16vectorIhNS_9allocatorIhEEEC2Ej($texture_data,128);
 __THREW__ = 0;
 invoke_viii(576,($u_dist|0),0,32);
 $197 = __THREW__; __THREW__ = 0;
 $198 = $197&1;
 L1: do {
  if (!($198)) {
   $i = 0;
   while(1) {
    $199 = $i;
    $200 = ($199>>>0)<(128);
    if (!($200)) {
     break;
    }
    $65 = $dist;
    $66 = 2648;
    $201 = $65;
    $202 = $66;
    __THREW__ = 0;
    $203 = (+invoke_diii(577,($201|0),($202|0),($201|0)));
    $204 = __THREW__; __THREW__ = 0;
    $205 = $204&1;
    if ($205) {
     break L1;
    }
    HEAPF64[$rnd>>3] = $203;
    HEAPF64[$102>>3] = 0.0;
    HEAPF64[$103>>3] = 31.0;
    $62 = $103;
    $63 = $rnd;
    $206 = $62;
    $207 = $63;
    ;HEAP8[$61>>0]=HEAP8[$64>>0]|0;
    $59 = $206;
    $60 = $207;
    $208 = $60;
    $209 = $59;
    $56 = $61;
    $57 = $208;
    $58 = $209;
    $210 = $57;
    $211 = +HEAPF64[$210>>3];
    $212 = $58;
    $213 = +HEAPF64[$212>>3];
    $214 = $211 < $213;
    $215 = $60;
    $216 = $59;
    $217 = $214 ? $215 : $216;
    $53 = $102;
    $54 = $217;
    $218 = $53;
    $219 = $54;
    ;HEAP8[$52>>0]=HEAP8[$55>>0]|0;
    $50 = $218;
    $51 = $219;
    $220 = $50;
    $221 = $51;
    $47 = $52;
    $48 = $220;
    $49 = $221;
    $222 = $48;
    $223 = +HEAPF64[$222>>3];
    $224 = $49;
    $225 = +HEAPF64[$224>>3];
    $226 = $223 < $225;
    $227 = $51;
    $228 = $50;
    $229 = $226 ? $227 : $228;
    $230 = +HEAPF64[$229>>3];
    $231 = (~~(($230))>>>0);
    $idx = $231;
    $232 = $idx;
    $233 = $232<<2;
    $idx = $233;
    __THREW__ = 0;
    $234 = (invoke_iii(578,($u_dist|0),(2648|0))|0);
    $235 = __THREW__; __THREW__ = 0;
    $236 = $235&1;
    if ($236) {
     break L1;
    }
    $237 = $idx;
    $238 = (($237) + 1)|0;
    $idx = $238;
    $37 = $texture_data;
    $38 = $237;
    $239 = $37;
    $240 = $38;
    $241 = HEAP32[$239>>2]|0;
    $242 = (($241) + ($240)|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = (($244) + ($234))|0;
    $246 = $245&255;
    HEAP8[$242>>0] = $246;
    __THREW__ = 0;
    $247 = (invoke_iii(578,($u_dist|0),(2648|0))|0);
    $248 = __THREW__; __THREW__ = 0;
    $249 = $248&1;
    if ($249) {
     break L1;
    }
    $250 = $idx;
    $251 = (($250) + 1)|0;
    $idx = $251;
    $27 = $texture_data;
    $28 = $250;
    $252 = $27;
    $253 = $28;
    $254 = HEAP32[$252>>2]|0;
    $255 = (($254) + ($253)|0);
    $256 = HEAP8[$255>>0]|0;
    $257 = $256&255;
    $258 = (($257) + ($247))|0;
    $259 = $258&255;
    HEAP8[$255>>0] = $259;
    __THREW__ = 0;
    $260 = (invoke_iii(578,($u_dist|0),(2648|0))|0);
    $261 = __THREW__; __THREW__ = 0;
    $262 = $261&1;
    if ($262) {
     break L1;
    }
    $263 = $idx;
    $264 = (($263) + 1)|0;
    $idx = $264;
    $13 = $texture_data;
    $14 = $263;
    $265 = $13;
    $266 = $14;
    $267 = HEAP32[$265>>2]|0;
    $268 = (($267) + ($266)|0);
    $269 = HEAP8[$268>>0]|0;
    $270 = $269&255;
    $271 = (($270) + ($260))|0;
    $272 = $271&255;
    HEAP8[$268>>0] = $272;
    $273 = $idx;
    $1 = $texture_data;
    $2 = $273;
    $274 = $1;
    $275 = $2;
    $276 = HEAP32[$274>>2]|0;
    $277 = (($276) + ($275)|0);
    HEAP8[$277>>0] = -1;
    $278 = $i;
    $279 = (($278) + 1)|0;
    $i = $279;
   }
   $282 = ((($114)) + 104|0);
   __THREW__ = 0;
   invoke_vii(564,1,($282|0));
   $283 = __THREW__; __THREW__ = 0;
   $284 = $283&1;
   if (!($284)) {
    $285 = ((($114)) + 104|0);
    $286 = HEAP32[$285>>2]|0;
    __THREW__ = 0;
    invoke_vii(565,3553,($286|0));
    $287 = __THREW__; __THREW__ = 0;
    $288 = $287&1;
    if (!($288)) {
     $internalFmt = 6408;
     $fmt = 6408;
     $0 = $texture_data;
     $289 = $0;
     $290 = HEAP32[$289>>2]|0;
     $p = $290;
     $291 = $internalFmt;
     $292 = $fmt;
     $293 = $p;
     __THREW__ = 0;
     invoke_viiiiiiiii(533,3553,0,($291|0),32,1,0,($292|0),5121,($293|0));
     $294 = __THREW__; __THREW__ = 0;
     $295 = $294&1;
     if (!($295)) {
      __THREW__ = 0;
      invoke_viii(534,3553,10242,10497);
      $296 = __THREW__; __THREW__ = 0;
      $297 = $296&1;
      if (!($297)) {
       __THREW__ = 0;
       invoke_viii(534,3553,10243,10497);
       $298 = __THREW__; __THREW__ = 0;
       $299 = $298&1;
       if (!($299)) {
        __THREW__ = 0;
        invoke_viii(534,3553,10240,9728);
        $300 = __THREW__; __THREW__ = 0;
        $301 = $300&1;
        if (!($301)) {
         __THREW__ = 0;
         invoke_viii(534,3553,10241,9728);
         $302 = __THREW__; __THREW__ = 0;
         $303 = $302&1;
         if (!($303)) {
          __THREW__ = 0;
          invoke_vii(565,3553,0);
          $304 = __THREW__; __THREW__ = 0;
          $305 = $304&1;
          if (!($305)) {
           __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($texture_data);
           $306 = ((($114)) + 184|0);
           $307 = ((($306)) + 16|0);
           $308 = HEAP32[$307>>2]|0;
           _glBindBuffer(34962,($308|0));
           _glBufferData(34962,60,(0|0),35044);
           $star_size = 3.0;
           $count_per_layer = 3000;
           $layer_count = 3;
           $12 = $data;
           $309 = $12;
           $11 = $309;
           $310 = $11;
           $10 = $310;
           HEAP32[$310>>2] = 0;
           $311 = ((($310)) + 4|0);
           HEAP32[$311>>2] = 0;
           $312 = ((($310)) + 8|0);
           $8 = $312;
           HEAP32[$9>>2] = 0;
           $313 = $8;
           $7 = $9;
           $314 = $7;
           $315 = HEAP32[$314>>2]|0;
           $5 = $313;
           HEAP32[$6>>2] = $315;
           $316 = $5;
           $4 = $316;
           $3 = $6;
           $317 = $3;
           $318 = HEAP32[$317>>2]|0;
           HEAP32[$316>>2] = $318;
           __THREW__ = 0;
           invoke_vii(579,($data|0),54000);
           $319 = __THREW__; __THREW__ = 0;
           $320 = $319&1;
           L19: do {
            if (!($320)) {
             $mul = 2.0;
             $j = 0;
             while(1) {
              $321 = $j;
              $322 = ($321>>>0)<(3);
              if (!($322)) {
               break;
              }
              $323 = $99;
              $324 = +HEAPF32[$323>>2];
              $325 = $mul;
              $326 = $324 * $325;
              $327 = $326;
              $328 = $99;
              $329 = ((($328)) + 8|0);
              $330 = +HEAPF32[$329>>2];
              $331 = $mul;
              $332 = $330 * $331;
              $333 = $332;
              $18 = $dist_x;
              $19 = $327;
              $20 = $333;
              $334 = $18;
              $335 = $19;
              $336 = $20;
              $15 = $334;
              $16 = $335;
              $17 = $336;
              $337 = $15;
              $338 = $16;
              HEAPF64[$337>>3] = $338;
              $339 = ((($337)) + 8|0);
              $340 = $17;
              HEAPF64[$339>>3] = $340;
              $341 = $99;
              $342 = ((($341)) + 12|0);
              $343 = +HEAPF32[$342>>2];
              $344 = $mul;
              $345 = $343 * $344;
              $346 = $345;
              $347 = $99;
              $348 = ((($347)) + 4|0);
              $349 = +HEAPF32[$348>>2];
              $350 = $mul;
              $351 = $349 * $350;
              $352 = $351;
              $24 = $dist_y;
              $25 = $346;
              $26 = $352;
              $353 = $24;
              $354 = $25;
              $355 = $26;
              $21 = $353;
              $22 = $354;
              $23 = $355;
              $356 = $21;
              $357 = $22;
              HEAPF64[$356>>3] = $357;
              $358 = ((($356)) + 8|0);
              $359 = $23;
              HEAPF64[$358>>3] = $359;
              $360 = $mul;
              $361 = $360 - 0.5;
              $mul = $361;
              $i1 = 0;
              while(1) {
               $362 = $i1;
               $363 = ($362>>>0)<(3000);
               if (!($363)) {
                break;
               }
               $35 = $dist_x;
               $36 = 2648;
               $364 = $35;
               $365 = $36;
               $32 = $364;
               $33 = $365;
               $34 = $364;
               $366 = $34;
               $31 = $366;
               $367 = $31;
               $368 = ((($367)) + 8|0);
               $369 = +HEAPF64[$368>>3];
               $370 = $34;
               $29 = $370;
               $371 = $29;
               $372 = +HEAPF64[$371>>3];
               $373 = $369 - $372;
               $374 = $33;
               __THREW__ = 0;
               $375 = (+invoke_di(580,($374|0)));
               $376 = __THREW__; __THREW__ = 0;
               $377 = $376&1;
               if ($377) {
                break L19;
               }
               $378 = $373 * $375;
               $379 = $34;
               $30 = $379;
               $380 = $30;
               $381 = +HEAPF64[$380>>3];
               $382 = $378 + $381;
               $383 = $382;
               $45 = $dist_y;
               $46 = 2648;
               $384 = $45;
               $385 = $46;
               $42 = $384;
               $43 = $385;
               $44 = $384;
               $386 = $44;
               $41 = $386;
               $387 = $41;
               $388 = ((($387)) + 8|0);
               $389 = +HEAPF64[$388>>3];
               $390 = $44;
               $39 = $390;
               $391 = $39;
               $392 = +HEAPF64[$391>>3];
               $393 = $389 - $392;
               $394 = $43;
               __THREW__ = 0;
               $395 = (+invoke_di(580,($394|0)));
               $396 = __THREW__; __THREW__ = 0;
               $397 = $396&1;
               if ($397) {
                break L19;
               }
               $398 = $393 * $395;
               $399 = $44;
               $40 = $399;
               $400 = $40;
               $401 = +HEAPF64[$400>>3];
               $402 = $398 + $401;
               $403 = $402;
               __THREW__ = 0;
               invoke_vdddi(581,(+$383),(+$403),3.0,($data|0));
               $404 = __THREW__; __THREW__ = 0;
               $405 = $404&1;
               if ($405) {
                break L19;
               }
               $406 = $i1;
               $407 = (($406) + 1)|0;
               $i1 = $407;
              }
              $410 = $j;
              $411 = (($410) + 1)|0;
              $j = $411;
             }
             $412 = ((($114)) + 184|0);
             $413 = ((($412)) + 20|0);
             $414 = HEAP32[$413>>2]|0;
             __THREW__ = 0;
             invoke_vii(503,34962,($414|0));
             $415 = __THREW__; __THREW__ = 0;
             $416 = $415&1;
             if (!($416)) {
              $67 = $data;
              $417 = $67;
              $418 = ((($417)) + 4|0);
              $419 = HEAP32[$418>>2]|0;
              $420 = HEAP32[$417>>2]|0;
              $421 = $419;
              $422 = $420;
              $423 = (($421) - ($422))|0;
              $424 = (($423|0) / 12)&-1;
              $425 = ($424*12)|0;
              $68 = $data;
              $426 = $68;
              $427 = HEAP32[$426>>2]|0;
              __THREW__ = 0;
              invoke_viiii(504,34962,($425|0),($427|0),35044);
              $428 = __THREW__; __THREW__ = 0;
              $429 = $428&1;
              if (!($429)) {
               $430 = ((($114)) + 108|0);
               HEAP32[$104>>2] = 3000;
               $431 = ((($104)) + 4|0);
               $432 = $99;
               ;HEAP32[$431>>2]=HEAP32[$432>>2]|0;HEAP32[$431+4>>2]=HEAP32[$432+4>>2]|0;HEAP32[$431+8>>2]=HEAP32[$432+8>>2]|0;HEAP32[$431+12>>2]=HEAP32[$432+12>>2]|0;
               $433 = ((($104)) + 20|0);
               $434 = ((($114)) + 184|0);
               $435 = ((($434)) + 20|0);
               $436 = HEAP32[$435>>2]|0;
               HEAP32[$433>>2] = $436;
               $437 = ((($104)) + 24|0);
               HEAP32[$437>>2] = 9000;
               $438 = ((($104)) + 28|0);
               HEAPF32[$438>>2] = 1.0;
               $439 = ((($438)) + 4|0);
               HEAPF32[$105>>2] = 1.0;
               HEAPF32[$106>>2] = 1.0;
               HEAPF32[$107>>2] = 1.0;
               __THREW__ = 0;
               invoke_viiii(405,($439|0),($105|0),($106|0),($107|0));
               $440 = __THREW__; __THREW__ = 0;
               $441 = $440&1;
               if (!($441)) {
                $442 = ((($104)) + 44|0);
                HEAPF32[$442>>2] = 0.5;
                $443 = ((($442)) + 4|0);
                HEAPF32[$108>>2] = 0.5;
                HEAPF32[$109>>2] = 0.0;
                HEAPF32[$110>>2] = 0.0;
                __THREW__ = 0;
                invoke_viiii(405,($443|0),($108|0),($109|0),($110|0));
                $444 = __THREW__; __THREW__ = 0;
                $445 = $444&1;
                if (!($445)) {
                 $446 = ((($104)) + 60|0);
                 HEAPF32[$446>>2] = 0.25;
                 $447 = ((($446)) + 4|0);
                 HEAPF32[$111>>2] = 0.0;
                 HEAPF32[$112>>2] = 0.0;
                 HEAPF32[$113>>2] = 0.5;
                 __THREW__ = 0;
                 invoke_viiii(405,($447|0),($111|0),($112|0),($113|0));
                 $448 = __THREW__; __THREW__ = 0;
                 $449 = $448&1;
                 if (!($449)) {
                  __THREW__ = 0;
                  (invoke_iii(582,($430|0),($104|0))|0);
                  $450 = __THREW__; __THREW__ = 0;
                  $451 = $450&1;
                  if (!($451)) {
                   __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($data);
                   $particle_size = 3.0;
                   $452 = ((($114)) + 184|0);
                   $453 = ((($452)) + 24|0);
                   $454 = HEAP32[$453>>2]|0;
                   HEAP32[5164>>2] = $454;
                   _glBindBuffer(34962,($454|0));
                   $88 = $data2;
                   $455 = $88;
                   $87 = $455;
                   $456 = $87;
                   $86 = $456;
                   HEAP32[$456>>2] = 0;
                   $457 = ((($456)) + 4|0);
                   HEAP32[$457>>2] = 0;
                   $458 = ((($456)) + 8|0);
                   $84 = $458;
                   HEAP32[$85>>2] = 0;
                   $459 = $84;
                   $83 = $85;
                   $460 = $83;
                   $461 = HEAP32[$460>>2]|0;
                   $81 = $459;
                   HEAP32[$82>>2] = $461;
                   $462 = $81;
                   $80 = $462;
                   $79 = $82;
                   $463 = $79;
                   $464 = HEAP32[$463>>2]|0;
                   HEAP32[$462>>2] = $464;
                   __THREW__ = 0;
                   invoke_vdddi(581,0.0,0.0,3.0,($data2|0));
                   $465 = __THREW__; __THREW__ = 0;
                   $466 = $465&1;
                   do {
                    if (!($466)) {
                     $90 = $data2;
                     $467 = $90;
                     $468 = ((($467)) + 4|0);
                     $469 = HEAP32[$468>>2]|0;
                     $470 = HEAP32[$467>>2]|0;
                     $471 = $469;
                     $472 = $470;
                     $473 = (($471) - ($472))|0;
                     $474 = (($473|0) / 12)&-1;
                     $475 = ($474*12)|0;
                     $91 = $data2;
                     $476 = $91;
                     $477 = HEAP32[$476>>2]|0;
                     __THREW__ = 0;
                     invoke_viiii(504,34962,($475|0),($477|0),35044);
                     $478 = __THREW__; __THREW__ = 0;
                     $479 = $478&1;
                     if ($479) {
                      break;
                     }
                     $92 = $data2;
                     $480 = $92;
                     $481 = ((($480)) + 4|0);
                     $482 = HEAP32[$481>>2]|0;
                     $483 = HEAP32[$480>>2]|0;
                     $484 = $482;
                     $485 = $483;
                     $486 = (($484) - ($485))|0;
                     $487 = (($486|0) / 12)&-1;
                     HEAP32[5168>>2] = $487;
                     __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($data2);
                     $488 = ((($114)) + 184|0);
                     $489 = ((($488)) + 28|0);
                     $490 = HEAP32[$489>>2]|0;
                     _glBindBuffer(34962,($490|0));
                     $491 = HEAP32[$114>>2]|0;
                     $492 = ((($491)) + 64|0);
                     $94 = $492;
                     $493 = $94;
                     $494 = ((($493)) + 4|0);
                     $495 = HEAP32[$494>>2]|0;
                     $496 = HEAP32[$493>>2]|0;
                     $497 = $495;
                     $498 = $496;
                     $499 = (($497) - ($498))|0;
                     $500 = (($499|0) / 12)&-1;
                     $501 = ($500*12)|0;
                     $502 = HEAP32[$114>>2]|0;
                     $503 = ((($502)) + 64|0);
                     $95 = $503;
                     $504 = $95;
                     $505 = HEAP32[$504>>2]|0;
                     _glBufferData(34962,($501|0),($505|0),35044);
                     STACKTOP = sp;return;
                    }
                   } while(0);
                   $506 = ___cxa_find_matching_catch()|0;
                   $507 = tempRet0;
                   $100 = $506;
                   $101 = $507;
                   __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($data2);
                   $508 = $100;
                   $509 = $101;
                   ___resumeException($508|0);
                   // unreachable;
                  }
                 }
                }
               }
              }
             }
            }
           } while(0);
           $408 = ___cxa_find_matching_catch()|0;
           $409 = tempRet0;
           $100 = $408;
           $101 = $409;
           __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($data);
           $508 = $100;
           $509 = $101;
           ___resumeException($508|0);
           // unreachable;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $280 = ___cxa_find_matching_catch()|0;
 $281 = tempRet0;
 $100 = $280;
 $101 = $281;
 __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($texture_data);
 $508 = $100;
 $509 = $101;
 ___resumeException($508|0);
 // unreachable;
}
function __ZN6Shader8RTShaderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 HEAP32[$3>>2] = 19095;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 19256;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = 0;
 __THREW__ = 0;
 invoke_vi(583,($3|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $1 = $8;
  $2 = $9;
  __ZN6Shader7ProgramD2Ev($3);
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6Shader8RTShader13ReloadProgramEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = ((($3)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  _glDeleteProgram(($8|0));
 }
 $9 = HEAP32[$3>>2]|0;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__Z11LoadShadersPKcS0_($9,$11)|0);
 $13 = ((($3)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($3)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $24 = ((($3)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_glGetUniformLocation(($25|0),(21100|0))|0);
  $27 = ((($3)) + 12|0);
  HEAP32[$27>>2] = $26;
  $28 = ((($3)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_glGetUniformLocation(($29|0),(21105|0))|0);
  $31 = ((($3)) + 16|0);
  HEAP32[$31>>2] = $30;
  STACKTOP = sp;return;
 }
 $17 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(430,($17|0),(21062|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $1 = $20;
  $2 = $21;
  ___cxa_free_exception(($17|0));
  $22 = $1;
  $23 = $2;
  ___resumeException($22|0);
  // unreachable;
 } else {
  ___cxa_throw(($17|0),(8|0),(1|0));
  // unreachable;
 }
}
function __ZN6Shader5Color13ReloadProgramEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = ((($3)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  _glDeleteProgram(($8|0));
 }
 $9 = HEAP32[$3>>2]|0;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__Z11LoadShadersPKcS0_($9,$11)|0);
 $13 = ((($3)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($3)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $24 = ((($3)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_glGetUniformLocation(($25|0),(21341|0))|0);
  $27 = ((($3)) + 12|0);
  HEAP32[$27>>2] = $26;
  $28 = ((($3)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_glGetUniformLocation(($29|0),(21346|0))|0);
  $31 = ((($3)) + 16|0);
  HEAP32[$31>>2] = $30;
  STACKTOP = sp;return;
 }
 $17 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(430,($17|0),(21062|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $1 = $20;
  $2 = $21;
  ___cxa_free_exception(($17|0));
  $22 = $1;
  $23 = $2;
  ___resumeException($22|0);
  // unreachable;
 } else {
  ___cxa_throw(($17|0),(8|0),(1|0));
  // unreachable;
 }
}
function __ZN6Shader7Texture13ReloadProgramEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = ((($3)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  _glDeleteProgram(($8|0));
 }
 $9 = HEAP32[$3>>2]|0;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__Z11LoadShadersPKcS0_($9,$11)|0);
 $13 = ((($3)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($3)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $24 = ((($3)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_glGetUniformLocation(($25|0),(21711|0))|0);
  $27 = ((($3)) + 12|0);
  HEAP32[$27>>2] = $26;
  $28 = (_glGetError()|0);
  $29 = (_glewGetErrorString(($28|0))|0);
  $err = $29;
  $30 = ((($3)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_glGetUniformLocation(($31|0),(21716|0))|0);
  $33 = ((($3)) + 16|0);
  HEAP32[$33>>2] = $32;
  $34 = ((($3)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (_glGetUniformLocation(($35|0),(21725|0))|0);
  $37 = ((($3)) + 20|0);
  HEAP32[$37>>2] = $36;
  $38 = ((($3)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_glGetUniformLocation(($39|0),(21341|0))|0);
  $41 = ((($3)) + 24|0);
  HEAP32[$41>>2] = $40;
  STACKTOP = sp;return;
 }
 $17 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(430,($17|0),(21062|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $1 = $20;
  $2 = $21;
  ___cxa_free_exception(($17|0));
  $22 = $1;
  $23 = $2;
  ___resumeException($22|0);
  // unreachable;
 } else {
  ___cxa_throw(($17|0),(8|0),(1|0));
  // unreachable;
 }
}
function __ZN8Renderer9StarField5LayerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $7 = $14;
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($14)) + 8|0);
 $5 = $16;
 HEAP32[$6>>2] = 0;
 $17 = $5;
 $4 = $6;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $2 = $17;
 HEAP32[$3>>2] = $19;
 $20 = $2;
 $1 = $20;
 $0 = $3;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 $23 = $10;
 $24 = ($23>>>0)>(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $10;
 __THREW__ = 0;
 invoke_vii(584,($13|0),($25|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = $10;
  __THREW__ = 0;
  invoke_vii(585,($13|0),($28|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if (!($30)) {
   STACKTOP = sp;return;
  }
 }
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $11 = $31;
 $12 = $32;
 __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($13);
 $33 = $11;
 $34 = $12;
 ___resumeException($33|0);
 // unreachable;
}
function __ZNSt3__124uniform_int_distributionIiEC2Eii($this,$__a,$__b) {
 $this = $this|0;
 $__a = $__a|0;
 $__b = $__b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__a;
 $2 = $__b;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZNSt3__124uniform_int_distributionIiE10param_typeC2Eii($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($this,$__g) {
 $this = $this|0;
 $__g = $__g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__g;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_RKNS1_10param_typeE($2,$3,$2)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 12)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 12)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEEC2EjjS7_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(489,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $11 = $44;
  $12 = $45;
  __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN3glm5tvec3IfLNS1_9precisionE0EEERNS_9allocatorIS4_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZN8Renderer9StarFieldaSEOS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 ;HEAP32[$3>>2]=HEAP32[$4>>2]|0;HEAP32[$3+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$3+20>>2]=HEAP32[$4+20>>2]|0;HEAP32[$3+24>>2]=HEAP32[$4+24>>2]|0;
 $5 = ((($3)) + 28|0);
 $6 = $2;
 $7 = ((($6)) + 28|0);
 (__ZN8Renderer9StarField5LayeraSEOS1_($5,$7)|0);
 $8 = ((($3)) + 44|0);
 $9 = $2;
 $10 = ((($9)) + 44|0);
 (__ZN8Renderer9StarField5LayeraSEOS1_($8,$10)|0);
 $11 = ((($3)) + 60|0);
 $12 = $2;
 $13 = ((($12)) + 60|0);
 (__ZN8Renderer9StarField5LayeraSEOS1_($11,$13)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIhNS_9allocatorIhEEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $3 = $25;
 $26 = $3;
 $27 = (__Znwj($26)|0);
 $28 = ((($14)) + 4|0);
 HEAP32[$28>>2] = $27;
 HEAP32[$14>>2] = $27;
 $29 = HEAP32[$14>>2]|0;
 $30 = $13;
 $31 = (($29) + ($30)|0);
 $2 = $14;
 $32 = $2;
 $33 = ((($32)) + 8|0);
 $1 = $33;
 $34 = $1;
 $0 = $34;
 $35 = $0;
 HEAP32[$35>>2] = $31;
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  HEAP8[$27>>0] = 0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 1|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -1|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $11 = $55;
 $12 = $56;
 $13 = $66;
 $67 = $11;
 $68 = $12;
 $69 = $13;
 $8 = $67;
 $9 = $68;
 $10 = $69;
 $70 = $9;
 $7 = $70;
 $71 = $7;
 __ZdlPv($71);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = -1;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $11 = $20;
 $42 = $11;
 $10 = $42;
 $43 = $10;
 $9 = $43;
 $44 = $9;
 $45 = ((($44)) + 8|0);
 $8 = $45;
 $46 = $8;
 $7 = $46;
 $47 = $7;
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$43>>2]|0;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($41) + ($52)|0);
 $13 = $20;
 $54 = $13;
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $12;
 $57 = $19;
 $58 = (($56) + ($57)|0);
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$38,$53,$58);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__124uniform_int_distributionIiE10param_typeC2Eii($this,$__a,$__b) {
 $this = $this|0;
 $__a = $__a|0;
 $__b = $__b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__a;
 $2 = $__b;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $2;
 HEAP32[$5>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNSt3__119normal_distributionIdEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEdRT_RKNS1_10param_typeE($this,$__g,$__p) {
 $this = $this|0;
 $__g = $__g|0;
 $__p = $__p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0;
 var $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0;
 var $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $_Fp = 0.0, $_Uni = 0, $_Up = 0.0, $__s = 0.0, $__u = 0.0, $__v = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_Uni = sp + 32|0;
 $24 = $this;
 $25 = $__g;
 $26 = $__p;
 $27 = $24;
 $28 = ((($27)) + 24|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&1;
 if ($30) {
  $31 = ((($27)) + 24|0);
  HEAP8[$31>>0] = 0;
  $32 = ((($27)) + 16|0);
  $33 = +HEAPF64[$32>>3];
  $_Up = $33;
  $103 = $_Up;
  $104 = $26;
  $16 = $104;
  $105 = $16;
  $106 = ((($105)) + 8|0);
  $107 = +HEAPF64[$106>>3];
  $108 = $103 * $107;
  $109 = $26;
  $17 = $109;
  $110 = $17;
  $111 = +HEAPF64[$110>>3];
  $112 = $108 + $111;
  STACKTOP = sp;return (+$112);
 }
 $21 = $_Uni;
 $22 = -1.0;
 $23 = 1.0;
 $34 = $21;
 $35 = $22;
 $36 = $23;
 $18 = $34;
 $19 = $35;
 $20 = $36;
 $37 = $18;
 $38 = $19;
 HEAPF64[$37>>3] = $38;
 $39 = ((($37)) + 8|0);
 $40 = $20;
 HEAPF64[$39>>3] = $40;
 while(1) {
  $41 = $25;
  $6 = $_Uni;
  $7 = $41;
  $42 = $6;
  $43 = $7;
  $3 = $42;
  $4 = $43;
  $5 = $42;
  $44 = $5;
  $2 = $44;
  $45 = $2;
  $46 = ((($45)) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = $5;
  $0 = $48;
  $49 = $0;
  $50 = +HEAPF64[$49>>3];
  $51 = $47 - $50;
  $52 = $4;
  $53 = (+__ZNSt3__118generate_canonicalIdLj53ENS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEET_RT1_($52));
  $54 = $51 * $53;
  $55 = $5;
  $1 = $55;
  $56 = $1;
  $57 = +HEAPF64[$56>>3];
  $58 = $54 + $57;
  $__u = $58;
  $59 = $25;
  $14 = $_Uni;
  $15 = $59;
  $60 = $14;
  $61 = $15;
  $11 = $60;
  $12 = $61;
  $13 = $60;
  $62 = $13;
  $10 = $62;
  $63 = $10;
  $64 = ((($63)) + 8|0);
  $65 = +HEAPF64[$64>>3];
  $66 = $13;
  $8 = $66;
  $67 = $8;
  $68 = +HEAPF64[$67>>3];
  $69 = $65 - $68;
  $70 = $12;
  $71 = (+__ZNSt3__118generate_canonicalIdLj53ENS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEET_RT1_($70));
  $72 = $69 * $71;
  $73 = $13;
  $9 = $73;
  $74 = $9;
  $75 = +HEAPF64[$74>>3];
  $76 = $72 + $75;
  $__v = $76;
  $77 = $__u;
  $78 = $__u;
  $79 = $77 * $78;
  $80 = $__v;
  $81 = $__v;
  $82 = $80 * $81;
  $83 = $79 + $82;
  $__s = $83;
  $84 = $__s;
  $85 = $84 > 1.0;
  $86 = $__s;
  $87 = $86 == 0.0;
  $88 = $85 ? 1 : $87;
  if (!($88)) {
   break;
  }
 }
 $89 = $__s;
 $90 = (+Math_log((+$89)));
 $91 = -2.0 * $90;
 $92 = $__s;
 $93 = $91 / $92;
 $94 = (+Math_sqrt((+$93)));
 $_Fp = $94;
 $95 = $__v;
 $96 = $_Fp;
 $97 = $95 * $96;
 $98 = ((($27)) + 16|0);
 HEAPF64[$98>>3] = $97;
 $99 = ((($27)) + 24|0);
 HEAP8[$99>>0] = 1;
 $100 = $__u;
 $101 = $_Fp;
 $102 = $100 * $101;
 $_Up = $102;
 $103 = $_Up;
 $104 = $26;
 $16 = $104;
 $105 = $16;
 $106 = ((($105)) + 8|0);
 $107 = +HEAPF64[$106>>3];
 $108 = $103 * $107;
 $109 = $26;
 $17 = $109;
 $110 = $17;
 $111 = +HEAPF64[$110>>3];
 $112 = $108 + $111;
 STACKTOP = sp;return (+$112);
}
function __ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_RKNS1_10param_typeE($this,$__g,$__p) {
 $this = $this|0;
 $__g = $__g|0;
 $__p = $__p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_Dt = 0, $_Rp = 0, $__e = 0, $__u = 0, $__w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 44|0;
 $__e = sp + 4|0;
 $2 = $this;
 $3 = $__g;
 $4 = $__p;
 $6 = $4;
 $7 = (__ZNKSt3__124uniform_int_distributionIiE10param_type1bEv($6)|0);
 $8 = $4;
 $9 = (__ZNKSt3__124uniform_int_distributionIiE10param_type1aEv($8)|0);
 $10 = (($7) - ($9))|0;
 $11 = (($10) + 1)|0;
 $_Rp = $11;
 $12 = $_Rp;
 $13 = ($12|0)==(1);
 if ($13) {
  $14 = $4;
  $15 = (__ZNKSt3__124uniform_int_distributionIiE10param_type1aEv($14)|0);
  $1 = $15;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 $_Dt = 32;
 $16 = $_Rp;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $3;
  __ZNSt3__125__independent_bits_engineINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEjEC2ERS2_j($5,$18,32);
  $19 = (__ZNSt3__125__independent_bits_engineINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEjEclEv($5)|0);
  $1 = $19;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 $20 = $_Rp;
 $0 = $20;
 $21 = $0;
 $22 = (Math_clz32(($21|0))|0);
 $23 = (32 - ($22))|0;
 $24 = (($23) - 1)|0;
 $__w = $24;
 $25 = $_Rp;
 $26 = $__w;
 $27 = (32 - ($26))|0;
 $28 = -1 >>> $27;
 $29 = $25 & $28;
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $__w;
  $32 = (($31) + 1)|0;
  $__w = $32;
 }
 $33 = $3;
 $34 = $__w;
 __ZNSt3__125__independent_bits_engineINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEjEC2ERS2_j($__e,$33,$34);
 while(1) {
  $35 = (__ZNSt3__125__independent_bits_engineINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEjEclEv($__e)|0);
  $__u = $35;
  $36 = $__u;
  $37 = $_Rp;
  $38 = ($36>>>0)>=($37>>>0);
  if (!($38)) {
   break;
  }
 }
 $39 = $__u;
 $40 = $4;
 $41 = (__ZNKSt3__124uniform_int_distributionIiE10param_type1aEv($40)|0);
 $42 = (($39) + ($41))|0;
 $1 = $42;
 $43 = $1;
 STACKTOP = sp;return ($43|0);
}
function __ZNKSt3__124uniform_int_distributionIiE10param_type1bEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNKSt3__124uniform_int_distributionIiE10param_type1aEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__125__independent_bits_engineINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEjEC2ERS2_j($this,$__e,$__w) {
 $this = $this|0;
 $__e = $__e|0;
 $__w = $__w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__e;
 $2 = $__w;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $2;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8>>>0) / 32)&-1;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11>>>0) % 32)&-1;
 $13 = ($12|0)!=(0);
 $14 = $13&1;
 $15 = (($9) + ($14))|0;
 $16 = ((($3)) + 12|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($3)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18>>>0) / ($20>>>0))&-1;
 $22 = ((($3)) + 8|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($3)) + 20|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($3)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (0 - ($25))|0;
 $27 = ((($3)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($3)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28>>>0) / ($30>>>0))&-1;
 $32 = ($26>>>0)>($31>>>0);
 do {
  if ($32) {
   $33 = ((($3)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 1)|0;
   HEAP32[$33>>2] = $35;
   $36 = ((($3)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($3)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($37>>>0) / ($39>>>0))&-1;
   $41 = ((($3)) + 8|0);
   HEAP32[$41>>2] = $40;
   $42 = ((($3)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43>>>0)<(32);
   if ($44) {
    $45 = ((($3)) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = 0 >>> $46;
    $48 = ((($3)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $47 << $49;
    $51 = ((($3)) + 20|0);
    HEAP32[$51>>2] = $50;
    break;
   } else {
    $52 = ((($3)) + 20|0);
    HEAP32[$52>>2] = 0;
    break;
   }
  }
 } while(0);
 $53 = ((($3)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($3)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($3)) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56>>>0) % ($58>>>0))&-1;
 $60 = (($54) - ($59))|0;
 $61 = ((($3)) + 16|0);
 HEAP32[$61>>2] = $60;
 $62 = ((($3)) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63>>>0)<(31);
 if ($64) {
  $65 = ((($3)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 1)|0;
  $68 = 0 >>> $67;
  $69 = ((($3)) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + 1)|0;
  $72 = $68 << $71;
  $73 = ((($3)) + 24|0);
  HEAP32[$73>>2] = $72;
 } else {
  $74 = ((($3)) + 24|0);
  HEAP32[$74>>2] = 0;
 }
 $75 = ((($3)) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76>>>0)>(0);
 if ($77) {
  $78 = ((($3)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (32 - ($79))|0;
  $81 = -1 >>> $80;
  $83 = $81;
 } else {
  $83 = 0;
 }
 $82 = ((($3)) + 28|0);
 HEAP32[$82>>2] = $83;
 $84 = ((($3)) + 8|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85>>>0)<(31);
 if (!($86)) {
  $93 = -1;
  $92 = ((($3)) + 32|0);
  HEAP32[$92>>2] = $93;
  STACKTOP = sp;return;
 }
 $87 = ((($3)) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 1)|0;
 $90 = (32 - ($89))|0;
 $91 = -1 >>> $90;
 $93 = $91;
 $92 = ((($3)) + 32|0);
 HEAP32[$92>>2] = $93;
 STACKTOP = sp;return;
}
function __ZNSt3__125__independent_bits_engineINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEjEclEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 5|0;
 $1 = sp + 4|0;
 $0 = $this;
 $2 = $0;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;
 $3 = (__ZNSt3__125__independent_bits_engineINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEjE6__evalENS_17integral_constantIbLb0EEE($2,$$byval_copy)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__125__independent_bits_engineINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEjE6__evalENS_17integral_constantIbLb0EEE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv($3)|0);
 $5 = ((($2)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4 & $6;
 STACKTOP = sp;return ($7|0);
}
function __ZN8Renderer9StarField5LayeraSEOS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = +HEAPF32[$4>>2];
 HEAPF32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = $2;
 $8 = ((($7)) + 4|0);
 (__ZN3glm5tvec3IfLNS_9precisionE0EEaSERKS2_($6,$8)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3glm7half_piIfEET_v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +1.5707963705062866;
}
function __ZN6ProtoX10PropulsionC2ERKN3glm5tvec3IfLNS1_9precisionE0EEEfj($this,$pos,$rot,$frame_count) {
 $this = $this|0;
 $pos = $pos|0;
 $rot = +$rot;
 $frame_count = $frame_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pos;
 $2 = $rot;
 $3 = $frame_count;
 $4 = $0;
 $5 = $1;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($4,$5);
 $6 = ((($4)) + 12|0);
 $7 = $2;
 HEAPF32[$6>>2] = $7;
 $8 = ((($4)) + 16|0);
 $9 = $3;
 HEAP32[$8>>2] = $9;
 $10 = ((($4)) + 20|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($4)) + 24|0);
 HEAPF64[$11>>3] = 100.0;
 $12 = ((($4)) + 32|0);
 HEAPF64[$12>>3] = 0.0;
 STACKTOP = sp;return;
}
function __ZN6ProtoX6TurretC2ERKN5Asset5LayerE($this,$layer) {
 $this = $this|0;
 $layer = $layer|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $layer;
 $2 = $0;
 HEAPF32[$2>>2] = 0.0;
 $3 = ((($2)) + 4|0);
 $4 = (+__ZN3glm7half_piIfEET_v());
 HEAPF32[$3>>2] = $4;
 $5 = ((($2)) + 8|0);
 $6 = (+__ZN3glm7radiansIfEET_S1_(45.0));
 $7 = -$6;
 $8 = ((($2)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 - $9;
 HEAPF32[$5>>2] = $10;
 $11 = ((($2)) + 12|0);
 $12 = (+__ZN3glm7radiansIfEET_S1_(225.0));
 $13 = ((($2)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $12 - $14;
 HEAPF32[$11>>2] = $15;
 $16 = ((($2)) + 16|0);
 $17 = $1;
 HEAP32[$16>>2] = $17;
 STACKTOP = sp;return;
}
function __ZN3glm7radiansIfEET_S1_($degrees) {
 $degrees = +$degrees;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $degrees;
 $1 = $0;
 $2 = $1 * 0.01745329238474369;
 STACKTOP = sp;return (+$2);
}
function __ZN3glm5orthoIfEENS_7tmat4x4IT_LNS_9precisionE0EEES2_S2_S2_S2_S2_S2_($agg$result,$left,$right,$bottom,$top,$zNear,$zFar) {
 $agg$result = $agg$result|0;
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $zNear = +$zNear;
 $zFar = +$zFar;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 40|0;
 $7 = sp + 12|0;
 $0 = $left;
 $1 = $right;
 $2 = $bottom;
 $3 = $top;
 $4 = $zNear;
 $5 = $zFar;
 $$expand_i1_val = 0;
 HEAP8[$6>>0] = $$expand_i1_val;
 HEAPF32[$7>>2] = 1.0;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($agg$result,$7);
 $11 = $1;
 $12 = $0;
 $13 = $11 - $12;
 $14 = 2.0 / $13;
 __THREW__ = 0;
 $15 = (invoke_iii(456,($agg$result|0),0)|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  __THREW__ = 0;
  $18 = (invoke_iii(469,($15|0),0)|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if (!($20)) {
   HEAPF32[$18>>2] = $14;
   $21 = $3;
   $22 = $2;
   $23 = $21 - $22;
   $24 = 2.0 / $23;
   __THREW__ = 0;
   $25 = (invoke_iii(456,($agg$result|0),1)|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    __THREW__ = 0;
    $28 = (invoke_iii(469,($25|0),1)|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if (!($30)) {
     HEAPF32[$28>>2] = $24;
     $31 = $5;
     $32 = $4;
     $33 = $31 - $32;
     $34 = -2.0 / $33;
     __THREW__ = 0;
     $35 = (invoke_iii(456,($agg$result|0),2)|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if (!($37)) {
      __THREW__ = 0;
      $38 = (invoke_iii(469,($35|0),2)|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if (!($40)) {
       HEAPF32[$38>>2] = $34;
       $41 = $1;
       $42 = $0;
       $43 = $41 + $42;
       $44 = -$43;
       $45 = $1;
       $46 = $0;
       $47 = $45 - $46;
       $48 = $44 / $47;
       __THREW__ = 0;
       $49 = (invoke_iii(456,($agg$result|0),3)|0);
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       if (!($51)) {
        __THREW__ = 0;
        $52 = (invoke_iii(469,($49|0),0)|0);
        $53 = __THREW__; __THREW__ = 0;
        $54 = $53&1;
        if (!($54)) {
         HEAPF32[$52>>2] = $48;
         $55 = $3;
         $56 = $2;
         $57 = $55 + $56;
         $58 = -$57;
         $59 = $3;
         $60 = $2;
         $61 = $59 - $60;
         $62 = $58 / $61;
         __THREW__ = 0;
         $63 = (invoke_iii(456,($agg$result|0),3)|0);
         $64 = __THREW__; __THREW__ = 0;
         $65 = $64&1;
         if (!($65)) {
          __THREW__ = 0;
          $66 = (invoke_iii(469,($63|0),1)|0);
          $67 = __THREW__; __THREW__ = 0;
          $68 = $67&1;
          if (!($68)) {
           HEAPF32[$66>>2] = $62;
           $69 = $5;
           $70 = $4;
           $71 = $69 + $70;
           $72 = -$71;
           $73 = $5;
           $74 = $4;
           $75 = $73 - $74;
           $76 = $72 / $75;
           __THREW__ = 0;
           $77 = (invoke_iii(456,($agg$result|0),3)|0);
           $78 = __THREW__; __THREW__ = 0;
           $79 = $78&1;
           if (!($79)) {
            __THREW__ = 0;
            $80 = (invoke_iii(469,($77|0),2)|0);
            $81 = __THREW__; __THREW__ = 0;
            $82 = $81&1;
            if (!($82)) {
             HEAPF32[$80>>2] = $76;
             $$expand_i1_val2 = 1;
             HEAP8[$6>>0] = $$expand_i1_val2;
             $10 = 1;
             $$pre_trunc = HEAP8[$6>>0]|0;
             $83 = $$pre_trunc&1;
             if ($83) {
              STACKTOP = sp;return;
             }
             __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($agg$result);
             STACKTOP = sp;return;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $84 = ___cxa_find_matching_catch()|0;
 $85 = tempRet0;
 $8 = $84;
 $9 = $85;
 __ZN3glm7tmat4x4IfLNS_9precisionE0EED2Ev($agg$result);
 $86 = $8;
 $87 = $9;
 ___resumeException($86|0);
 // unreachable;
}
function __ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ERKf($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $0 = $this;
 $1 = $s;
 $8 = $0;
 $9 = ((($8)) + 64|0);
 $10 = $8;
 while(1) {
  __THREW__ = 0;
  invoke_vi(462,($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   label = 13;
   break;
  }
  $13 = ((($10)) + 16|0);
  $14 = ($13|0)==($9|0);
  if ($14) {
   break;
  } else {
   $10 = $13;
  }
 }
 if ((label|0) == 13) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $2 = $42;
  $3 = $43;
  $44 = ($8|0)==($10|0);
  if ($44) {
   $62 = $2;
   $63 = $3;
   ___resumeException($62|0);
   // unreachable;
  } else {
   $46 = $10;
  }
  while(1) {
   $45 = ((($46)) + -16|0);
   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($45);
   $47 = ($45|0)==($8|0);
   if ($47) {
    break;
   } else {
    $46 = $45;
   }
  }
  $62 = $2;
  $63 = $3;
  ___resumeException($62|0);
  // unreachable;
 }
 $15 = $1;
 $16 = +HEAPF32[$15>>2];
 __THREW__ = 0;
 invoke_vidiii(586,($4|0),(+$16),0,0,0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 do {
  if ($18) {
   label = 15;
  } else {
   __THREW__ = 0;
   (invoke_iii(461,($8|0),($4|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $50 = ___cxa_find_matching_catch()|0;
    $51 = tempRet0;
    $2 = $50;
    $3 = $51;
    __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($4);
    break;
   }
   __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($4);
   $21 = ((($8)) + 16|0);
   $22 = $1;
   $23 = +HEAPF32[$22>>2];
   __THREW__ = 0;
   invoke_viidii(587,($5|0),0,(+$23),0,0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    label = 15;
   } else {
    __THREW__ = 0;
    (invoke_iii(461,($21|0),($5|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $52 = ___cxa_find_matching_catch()|0;
     $53 = tempRet0;
     $2 = $52;
     $3 = $53;
     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($5);
     break;
    }
    __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($5);
    $28 = ((($8)) + 32|0);
    $29 = $1;
    $30 = +HEAPF32[$29>>2];
    __THREW__ = 0;
    invoke_viiidi(588,($6|0),0,0,(+$30),0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     label = 15;
    } else {
     __THREW__ = 0;
     (invoke_iii(461,($28|0),($6|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      $54 = ___cxa_find_matching_catch()|0;
      $55 = tempRet0;
      $2 = $54;
      $3 = $55;
      __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($6);
      break;
     }
     __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($6);
     $35 = ((($8)) + 48|0);
     $36 = $1;
     $37 = +HEAPF32[$36>>2];
     __THREW__ = 0;
     invoke_viiiid(589,($7|0),0,0,0,(+$37));
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      label = 15;
     } else {
      __THREW__ = 0;
      (invoke_iii(461,($35|0),($7|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       $56 = ___cxa_find_matching_catch()|0;
       $57 = tempRet0;
       $2 = $56;
       $3 = $57;
       __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($7);
       break;
      } else {
       __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($7);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $2 = $48;
  $3 = $49;
 }
 $58 = ((($8)) + 64|0);
 $60 = $58;
 while(1) {
  $59 = ((($60)) + -16|0);
  __ZN3glm5tvec4IfLNS_9precisionE0EED2Ev($59);
  $61 = ($59|0)==($8|0);
  if ($61) {
   break;
  } else {
   $60 = $59;
  }
 }
 $62 = $2;
 $63 = $3;
 ___resumeException($62|0);
 // unreachable;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2IfiiiEET_T0_T1_T2_($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = +$a;
 $b = $b|0;
 $c = $c|0;
 $d = $d|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 HEAPF32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = $2;
 $9 = (+($8|0));
 HEAPF32[$7>>2] = $9;
 $10 = ((($5)) + 8|0);
 $11 = $3;
 $12 = (+($11|0));
 HEAPF32[$10>>2] = $12;
 $13 = ((($5)) + 12|0);
 $14 = $4;
 $15 = (+($14|0));
 HEAPF32[$13>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2IifiiEET_T0_T1_T2_($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = $a|0;
 $b = +$b;
 $c = $c|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 $7 = (+($6|0));
 HEAPF32[$5>>2] = $7;
 $8 = ((($5)) + 4|0);
 $9 = $2;
 HEAPF32[$8>>2] = $9;
 $10 = ((($5)) + 8|0);
 $11 = $3;
 $12 = (+($11|0));
 HEAPF32[$10>>2] = $12;
 $13 = ((($5)) + 12|0);
 $14 = $4;
 $15 = (+($14|0));
 HEAPF32[$13>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiifiEET_T0_T1_T2_($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 $c = +$c;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 $7 = (+($6|0));
 HEAPF32[$5>>2] = $7;
 $8 = ((($5)) + 4|0);
 $9 = $2;
 $10 = (+($9|0));
 HEAPF32[$8>>2] = $10;
 $11 = ((($5)) + 8|0);
 $12 = $3;
 HEAPF32[$11>>2] = $12;
 $13 = ((($5)) + 12|0);
 $14 = $4;
 $15 = (+($14|0));
 HEAPF32[$13>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiifEET_T0_T1_T2_($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 $d = +$d;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 $7 = (+($6|0));
 HEAPF32[$5>>2] = $7;
 $8 = ((($5)) + 4|0);
 $9 = $2;
 $10 = (+($9|0));
 HEAPF32[$8>>2] = $10;
 $11 = ((($5)) + 8|0);
 $12 = $3;
 $13 = (+($12|0));
 HEAPF32[$11>>2] = $13;
 $14 = ((($5)) + 12|0);
 $15 = $4;
 HEAPF32[$14>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN12InputHandler12key_callbackEP10GLFWwindowiiii($window,$key,$scancode,$action,$mods) {
 $window = $window|0;
 $key = $key|0;
 $scancode = $scancode|0;
 $action = $action|0;
 $mods = $mods|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $window;
 $1 = $key;
 $2 = $scancode;
 $3 = $action;
 $4 = $mods;
 $5 = $1;
 switch ($5|0) {
 case 263:  {
  $6 = $3;
  $7 = ($6|0)==(1);
  $8 = $3;
  $9 = ($8|0)==(2);
  $10 = $7 ? 1 : $9;
  $11 = $10&1;
  HEAP8[16500>>0] = $11;
  STACKTOP = sp;return;
  break;
 }
 case 262:  {
  $12 = $3;
  $13 = ($12|0)==(1);
  $14 = $3;
  $15 = ($14|0)==(2);
  $16 = $13 ? 1 : $15;
  $17 = $16&1;
  HEAP8[(16501)>>0] = $17;
  STACKTOP = sp;return;
  break;
 }
 case 87:  {
  $18 = $3;
  $19 = ($18|0)==(1);
  $20 = $3;
  $21 = ($20|0)==(2);
  $22 = $19 ? 1 : $21;
  $23 = $22&1;
  HEAP8[(16502)>>0] = $23;
  STACKTOP = sp;return;
  break;
 }
 case 65:  {
  $24 = $3;
  $25 = ($24|0)==(1);
  $26 = $3;
  $27 = ($26|0)==(2);
  $28 = $25 ? 1 : $27;
  $29 = $28&1;
  HEAP8[(16503)>>0] = $29;
  STACKTOP = sp;return;
  break;
 }
 case 68:  {
  $30 = $3;
  $31 = ($30|0)==(1);
  $32 = $3;
  $33 = ($32|0)==(2);
  $34 = $31 ? 1 : $33;
  $35 = $34&1;
  HEAP8[(16504)>>0] = $35;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZN12InputHandler19cursor_pos_callbackEP10GLFWwindowdd($window,$xpos,$ypos) {
 $window = $window|0;
 $xpos = +$xpos;
 $ypos = +$ypos;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $window;
 $1 = $xpos;
 $2 = $ypos;
 $3 = HEAP8[16508>>0]|0;
 $4 = $3&1;
 if (!($4)) {
  $5 = +HEAPF64[24>>3];
  HEAPF64[40>>3] = $5;
 }
 HEAP8[16508>>0] = 1;
 $6 = $1;
 HEAPF64[24>>3] = $6;
 $7 = $2;
 HEAPF64[32>>3] = $7;
 STACKTOP = sp;return;
}
function __ZN12InputHandler21mouse_button_callbackEP10GLFWwindowiii($window,$button,$action,$mods) {
 $window = $window|0;
 $button = $button|0;
 $action = $action|0;
 $mods = $mods|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp;
 $9 = $window;
 $10 = $button;
 $11 = $action;
 $12 = $mods;
 $16 = $10;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = HEAP8[16505>>0]|0;
  $19 = $18&1;
  if (!($19)) {
   HEAP32[$13>>2] = 0;
   $7 = 5172;
   $8 = $13;
   $20 = $7;
   $21 = $8;
   $6 = $21;
   $22 = $6;
   __ZNSt3__15dequeIN12InputHandler11ButtonClickENS_9allocatorIS2_EEE9push_backEOS2_($20,$22);
  }
  $23 = $11;
  $24 = ($23|0)==(1);
  $25 = $24&1;
  HEAP8[16505>>0] = $25;
 }
 $26 = $10;
 $27 = ($26|0)==(1);
 if ($27) {
  $28 = HEAP8[16506>>0]|0;
  $29 = $28&1;
  if (!($29)) {
   HEAP32[$14>>2] = 1;
   $4 = 5172;
   $5 = $14;
   $30 = $4;
   $31 = $5;
   $3 = $31;
   $32 = $3;
   __ZNSt3__15dequeIN12InputHandler11ButtonClickENS_9allocatorIS2_EEE9push_backEOS2_($30,$32);
  }
  $33 = $11;
  $34 = ($33|0)==(1);
  $35 = $34&1;
  HEAP8[16506>>0] = $35;
 }
 $36 = $10;
 $37 = ($36|0)==(2);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP8[16507>>0]|0;
 $39 = $38&1;
 if (!($39)) {
  HEAP32[$15>>2] = 2;
  $1 = 5172;
  $2 = $15;
  $40 = $1;
  $41 = $2;
  $0 = $41;
  $42 = $0;
  __ZNSt3__15dequeIN12InputHandler11ButtonClickENS_9allocatorIS2_EEE9push_backEOS2_($40,$42);
 }
 $43 = $11;
 $44 = ($43|0)==(1);
 $45 = $44&1;
 HEAP8[16507>>0] = $45;
 STACKTOP = sp;return;
}
function __ZN12InputHandler21cursor_enter_callbackEP10GLFWwindowi($window,$entered) {
 $window = $window|0;
 $entered = $entered|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $window;
 $1 = $entered;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 _glfwGetCursorPos(($4|0),(24|0),(32|0));
 $5 = +HEAPF64[24>>3];
 HEAPF64[40>>3] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIN12InputHandler11ButtonClickENS_9allocatorIS2_EEE9push_backEOS2_($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $23 = sp + 140|0;
 $32 = sp + 8|0;
 $30 = $this;
 $31 = $__v;
 $33 = $30;
 $29 = $33;
 $34 = $29;
 $35 = ((($34)) + 20|0);
 $28 = $35;
 $36 = $28;
 $27 = $36;
 $37 = $27;
 $__a = $37;
 $6 = $33;
 $38 = $6;
 $5 = $38;
 $39 = $5;
 $4 = $39;
 $40 = $4;
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($40)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $42;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 4)&-1;
 $49 = ($48|0)==(0);
 if ($49) {
  $70 = 0;
 } else {
  $3 = $39;
  $50 = $3;
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($50)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $52;
  $56 = $54;
  $57 = (($55) - ($56))|0;
  $58 = (($57|0) / 4)&-1;
  $59 = $58<<10;
  $60 = (($59) - 1)|0;
  $70 = $60;
 }
 $61 = ((($38)) + 16|0);
 $62 = HEAP32[$61>>2]|0;
 $2 = $38;
 $63 = $2;
 $64 = ((($63)) + 20|0);
 $1 = $64;
 $65 = $1;
 $0 = $65;
 $66 = $0;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($62) + ($67))|0;
 $69 = (($70) - ($68))|0;
 $71 = ($69|0)==(0);
 if ($71) {
  __ZNSt3__15dequeIN12InputHandler11ButtonClickENS_9allocatorIS2_EEE19__add_back_capacityEv($33);
 }
 $72 = $__a;
 __ZNSt3__112__deque_baseIN12InputHandler11ButtonClickENS_9allocatorIS2_EEE3endEv($32,$33);
 $7 = $32;
 $73 = $7;
 $74 = ((($73)) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $8 = $75;
 $76 = $8;
 $77 = $31;
 $9 = $77;
 $78 = $9;
 $20 = $72;
 $21 = $76;
 $22 = $78;
 $79 = $20;
 $80 = $21;
 $81 = $22;
 $19 = $81;
 $82 = $19;
 ;HEAP8[$18>>0]=HEAP8[$23>>0]|0;
 $15 = $79;
 $16 = $80;
 $17 = $82;
 $83 = $15;
 $84 = $16;
 $85 = $17;
 $14 = $85;
 $86 = $14;
 $11 = $83;
 $12 = $84;
 $13 = $86;
 $87 = $12;
 $88 = $13;
 $10 = $88;
 $89 = $10;
 $90 = HEAP32[$89>>2]|0;
 HEAP32[$87>>2] = $90;
 $26 = $33;
 $91 = $26;
 $92 = ((($91)) + 20|0);
 $25 = $92;
 $93 = $25;
 $24 = $93;
 $94 = $24;
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + 1)|0;
 HEAP32[$94>>2] = $96;
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIN12InputHandler11ButtonClickENS_9allocatorIS2_EEE19__add_back_capacityEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__buf = 0, $__c$i = 0, $__c$i12 = 0, $__d$i = 0;
 var $__d$i11 = 0, $__i = 0, $__n$i$i$i = 0, $__n$i$i$i10 = 0, $__pt = 0, $__pt1 = 0, $__t$i = 0, $__t$i$i = 0, $__t$i$i9 = 0, $__t$i1$i = 0, $__t$i1$i8 = 0, $__t$i13 = 0, $__t$i2 = 0, $__t$i2$i = 0, $__t$i2$i7 = 0, $__t$i3 = 0, $__t$i3$i = 0, $__t$i3$i6 = 0, $__t$i4 = 0, $__t$i5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy3 = sp + 1252|0;
 $$byval_copy2 = sp + 1248|0;
 $$byval_copy1 = sp + 1244|0;
 $$byval_copy = sp + 1240|0;
 $15 = sp + 48|0;
 $18 = sp + 1262|0;
 $35 = sp + 40|0;
 $38 = sp + 1261|0;
 $__t$i3$i6 = sp + 1076|0;
 $__t$i2$i7 = sp + 1052|0;
 $__t$i1$i8 = sp + 1028|0;
 $__t$i$i9 = sp + 980|0;
 $89 = sp + 32|0;
 $94 = sp + 1260|0;
 $100 = sp + 832|0;
 $101 = sp + 828|0;
 $__t$i13 = sp + 808|0;
 $102 = sp + 804|0;
 $105 = sp + 792|0;
 $109 = sp + 24|0;
 $112 = sp + 1259|0;
 $157 = sp + 16|0;
 $160 = sp + 1258|0;
 $__t$i3$i = sp + 564|0;
 $__t$i2$i = sp + 540|0;
 $__t$i1$i = sp + 516|0;
 $__t$i$i = sp + 468|0;
 $211 = sp + 8|0;
 $216 = sp + 1257|0;
 $222 = sp + 320|0;
 $223 = sp + 316|0;
 $__t$i5 = sp + 296|0;
 $224 = sp + 292|0;
 $227 = sp + 280|0;
 $__t$i4 = sp + 256|0;
 $__t$i3 = sp + 232|0;
 $__t$i2 = sp + 208|0;
 $__t$i = sp + 160|0;
 $256 = sp;
 $259 = sp + 1256|0;
 $__pt = sp + 108|0;
 $267 = sp + 104|0;
 $268 = sp + 100|0;
 $__pt1 = sp + 96|0;
 $__buf = sp + 76|0;
 $269 = sp + 72|0;
 $270 = sp + 68|0;
 $271 = sp + 64|0;
 $266 = $this;
 $274 = $266;
 $265 = $274;
 $275 = $265;
 $276 = ((($275)) + 20|0);
 $264 = $276;
 $277 = $264;
 $263 = $277;
 $278 = $263;
 $__a = $278;
 $262 = $274;
 $279 = $262;
 $280 = ((($279)) + 16|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = ($281>>>0)>=(1024);
 if ($282) {
  $283 = ((($274)) + 16|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = (($284) - 1024)|0;
  HEAP32[$283>>2] = $285;
  $261 = $274;
  $286 = $261;
  $287 = ((($286)) + 4|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = HEAP32[$288>>2]|0;
  HEAP32[$__pt>>2] = $289;
  $260 = $274;
  $290 = $260;
  $291 = ((($290)) + 4|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = ((($292)) + 4|0);
  $257 = $290;
  $258 = $293;
  $294 = $257;
  $295 = $258;
  ;HEAP8[$256>>0]=HEAP8[$259>>0]|0;
  $254 = $294;
  $255 = $295;
  $296 = $254;
  $297 = $255;
  $298 = ((($296)) + 4|0);
  HEAP32[$298>>2] = $297;
  $220 = $274;
  $221 = $__pt;
  $299 = $220;
  $300 = ((($299)) + 8|0);
  $301 = HEAP32[$300>>2]|0;
  $219 = $299;
  $302 = $219;
  $303 = ((($302)) + 12|0);
  $218 = $303;
  $304 = $218;
  $217 = $304;
  $305 = $217;
  $306 = HEAP32[$305>>2]|0;
  $307 = ($301|0)==($306|0);
  do {
   if ($307) {
    $308 = ((($299)) + 4|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = HEAP32[$299>>2]|0;
    $311 = ($309>>>0)>($310>>>0);
    if ($311) {
     $312 = ((($299)) + 4|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = HEAP32[$299>>2]|0;
     $315 = $313;
     $316 = $314;
     $317 = (($315) - ($316))|0;
     $318 = (($317|0) / 4)&-1;
     $__d$i = $318;
     $319 = $__d$i;
     $320 = (($319) + 1)|0;
     $321 = (($320|0) / 2)&-1;
     $__d$i = $321;
     $322 = ((($299)) + 4|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = ((($299)) + 8|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = ((($299)) + 4|0);
     $327 = HEAP32[$326>>2]|0;
     $328 = $__d$i;
     $329 = (0 - ($328))|0;
     $330 = (($327) + ($329<<2)|0);
     $196 = $323;
     $197 = $325;
     $198 = $330;
     $331 = $196;
     $195 = $331;
     $332 = $195;
     $333 = $197;
     $190 = $333;
     $334 = $190;
     $335 = $198;
     $191 = $335;
     $336 = $191;
     $192 = $332;
     $193 = $334;
     $194 = $336;
     $337 = $193;
     $338 = $192;
     $339 = $337;
     $340 = $338;
     $341 = (($339) - ($340))|0;
     $342 = (($341|0) / 4)&-1;
     $__n$i$i$i = $342;
     $343 = $194;
     $344 = $192;
     $345 = $__n$i$i$i;
     $346 = $345<<2;
     _memmove(($343|0),($344|0),($346|0))|0;
     $347 = $194;
     $348 = $__n$i$i$i;
     $349 = (($347) + ($348<<2)|0);
     $350 = ((($299)) + 8|0);
     HEAP32[$350>>2] = $349;
     $351 = $__d$i;
     $352 = ((($299)) + 4|0);
     $353 = HEAP32[$352>>2]|0;
     $354 = (0 - ($351))|0;
     $355 = (($353) + ($354<<2)|0);
     HEAP32[$352>>2] = $355;
     break;
    }
    $189 = $299;
    $356 = $189;
    $357 = ((($356)) + 12|0);
    $188 = $357;
    $358 = $188;
    $187 = $358;
    $359 = $187;
    $360 = HEAP32[$359>>2]|0;
    $361 = HEAP32[$299>>2]|0;
    $362 = $360;
    $363 = $361;
    $364 = (($362) - ($363))|0;
    $365 = (($364|0) / 4)&-1;
    $366 = $365<<1;
    HEAP32[$222>>2] = $366;
    HEAP32[$223>>2] = 1;
    $158 = $222;
    $159 = $223;
    $367 = $158;
    $368 = $159;
    ;HEAP8[$157>>0]=HEAP8[$160>>0]|0;
    $155 = $367;
    $156 = $368;
    $369 = $155;
    $370 = $156;
    $152 = $157;
    $153 = $369;
    $154 = $370;
    $371 = $153;
    $372 = HEAP32[$371>>2]|0;
    $373 = $154;
    $374 = HEAP32[$373>>2]|0;
    $375 = ($372>>>0)<($374>>>0);
    $376 = $156;
    $377 = $155;
    $378 = $375 ? $376 : $377;
    $379 = HEAP32[$378>>2]|0;
    $__c$i = $379;
    $380 = $__c$i;
    $381 = $__c$i;
    $382 = (($381>>>0) / 4)&-1;
    $147 = $299;
    $383 = $147;
    $384 = ((($383)) + 12|0);
    $146 = $384;
    $385 = $146;
    $145 = $385;
    $386 = $145;
    __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEEC2EjjS6_($__t$i5,$380,$382,$386);
    $387 = ((($299)) + 4|0);
    $388 = HEAP32[$387>>2]|0;
    $148 = $224;
    $149 = $388;
    $389 = $148;
    $390 = $149;
    HEAP32[$389>>2] = $390;
    $391 = ((($299)) + 8|0);
    $392 = HEAP32[$391>>2]|0;
    $150 = $227;
    $151 = $392;
    $393 = $150;
    $394 = $151;
    HEAP32[$393>>2] = $394;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$224>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$227>>2]|0;
    invoke_viii(590,($__t$i5|0),($$byval_copy|0),($$byval_copy1|0));
    $395 = __THREW__; __THREW__ = 0;
    $396 = $395&1;
    if ($396) {
     $449 = ___cxa_find_matching_catch()|0;
     $450 = tempRet0;
     $225 = $449;
     $226 = $450;
     __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__t$i5);
     $451 = $225;
     $452 = $226;
     ___resumeException($451|0);
     // unreachable;
    } else {
     $164 = $299;
     $165 = $__t$i5;
     $397 = $164;
     $163 = $397;
     $398 = $163;
     $399 = HEAP32[$398>>2]|0;
     HEAP32[$__t$i3$i>>2] = $399;
     $400 = $165;
     $161 = $400;
     $401 = $161;
     $402 = HEAP32[$401>>2]|0;
     $403 = $164;
     HEAP32[$403>>2] = $402;
     $162 = $__t$i3$i;
     $404 = $162;
     $405 = HEAP32[$404>>2]|0;
     $406 = $165;
     HEAP32[$406>>2] = $405;
     $407 = ((($299)) + 4|0);
     $408 = ((($__t$i5)) + 4|0);
     $169 = $407;
     $170 = $408;
     $409 = $169;
     $168 = $409;
     $410 = $168;
     $411 = HEAP32[$410>>2]|0;
     HEAP32[$__t$i2$i>>2] = $411;
     $412 = $170;
     $166 = $412;
     $413 = $166;
     $414 = HEAP32[$413>>2]|0;
     $415 = $169;
     HEAP32[$415>>2] = $414;
     $167 = $__t$i2$i;
     $416 = $167;
     $417 = HEAP32[$416>>2]|0;
     $418 = $170;
     HEAP32[$418>>2] = $417;
     $419 = ((($299)) + 8|0);
     $420 = ((($__t$i5)) + 8|0);
     $174 = $419;
     $175 = $420;
     $421 = $174;
     $173 = $421;
     $422 = $173;
     $423 = HEAP32[$422>>2]|0;
     HEAP32[$__t$i1$i>>2] = $423;
     $424 = $175;
     $171 = $424;
     $425 = $171;
     $426 = HEAP32[$425>>2]|0;
     $427 = $174;
     HEAP32[$427>>2] = $426;
     $172 = $__t$i1$i;
     $428 = $172;
     $429 = HEAP32[$428>>2]|0;
     $430 = $175;
     HEAP32[$430>>2] = $429;
     $178 = $299;
     $431 = $178;
     $432 = ((($431)) + 12|0);
     $177 = $432;
     $433 = $177;
     $176 = $433;
     $434 = $176;
     $181 = $__t$i5;
     $435 = $181;
     $436 = ((($435)) + 12|0);
     $180 = $436;
     $437 = $180;
     $179 = $437;
     $438 = $179;
     $185 = $434;
     $186 = $438;
     $439 = $185;
     $184 = $439;
     $440 = $184;
     $441 = HEAP32[$440>>2]|0;
     HEAP32[$__t$i$i>>2] = $441;
     $442 = $186;
     $182 = $442;
     $443 = $182;
     $444 = HEAP32[$443>>2]|0;
     $445 = $185;
     HEAP32[$445>>2] = $444;
     $183 = $__t$i$i;
     $446 = $183;
     $447 = HEAP32[$446>>2]|0;
     $448 = $186;
     HEAP32[$448>>2] = $447;
     __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__t$i5);
     break;
    }
   }
  } while(0);
  $201 = $299;
  $453 = $201;
  $454 = ((($453)) + 12|0);
  $200 = $454;
  $455 = $200;
  $199 = $455;
  $456 = $199;
  $457 = ((($299)) + 8|0);
  $458 = HEAP32[$457>>2]|0;
  $202 = $458;
  $459 = $202;
  $460 = $221;
  $213 = $456;
  $214 = $459;
  $215 = $460;
  $461 = $213;
  $462 = $214;
  $463 = $215;
  $212 = $463;
  $464 = $212;
  ;HEAP8[$211>>0]=HEAP8[$216>>0]|0;
  $208 = $461;
  $209 = $462;
  $210 = $464;
  $465 = $208;
  $466 = $209;
  $467 = $210;
  $207 = $467;
  $468 = $207;
  $204 = $465;
  $205 = $466;
  $206 = $468;
  $469 = $205;
  $470 = $206;
  $203 = $470;
  $471 = $203;
  $472 = HEAP32[$471>>2]|0;
  HEAP32[$469>>2] = $472;
  $473 = ((($299)) + 8|0);
  $474 = HEAP32[$473>>2]|0;
  $475 = ((($474)) + 4|0);
  HEAP32[$473>>2] = $475;
  STACKTOP = sp;return;
 }
 $144 = $274;
 $476 = $144;
 $477 = ((($476)) + 8|0);
 $478 = HEAP32[$477>>2]|0;
 $479 = ((($476)) + 4|0);
 $480 = HEAP32[$479>>2]|0;
 $481 = $478;
 $482 = $480;
 $483 = (($481) - ($482))|0;
 $484 = (($483|0) / 4)&-1;
 $143 = $274;
 $485 = $143;
 $142 = $485;
 $486 = $142;
 $487 = ((($486)) + 12|0);
 $141 = $487;
 $488 = $141;
 $140 = $488;
 $489 = $140;
 $490 = HEAP32[$489>>2]|0;
 $491 = HEAP32[$485>>2]|0;
 $492 = $490;
 $493 = $491;
 $494 = (($492) - ($493))|0;
 $495 = (($494|0) / 4)&-1;
 $496 = ($484>>>0)<($495>>>0);
 if ($496) {
  $139 = $274;
  $497 = $139;
  $138 = $497;
  $498 = $138;
  $499 = ((($498)) + 12|0);
  $137 = $499;
  $500 = $137;
  $136 = $500;
  $501 = $136;
  $502 = HEAP32[$501>>2]|0;
  $503 = ((($497)) + 8|0);
  $504 = HEAP32[$503>>2]|0;
  $505 = $502;
  $506 = $504;
  $507 = (($505) - ($506))|0;
  $508 = (($507|0) / 4)&-1;
  $509 = ($508|0)!=(0);
  $510 = $__a;
  if ($509) {
   $134 = $510;
   $135 = 1024;
   $511 = $134;
   $512 = $135;
   $131 = $511;
   $132 = $512;
   $133 = 0;
   $513 = $132;
   $514 = $513<<2;
   $130 = $514;
   $515 = $130;
   $516 = (__Znwj($515)|0);
   HEAP32[$267>>2] = $516;
   __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickENS_9allocatorIS3_EEE9push_backEOS3_($274,$267);
   STACKTOP = sp;return;
  }
  $128 = $510;
  $129 = 1024;
  $517 = $128;
  $518 = $129;
  $125 = $517;
  $126 = $518;
  $127 = 0;
  $519 = $126;
  $520 = $519<<2;
  $124 = $520;
  $521 = $124;
  $522 = (__Znwj($521)|0);
  HEAP32[$268>>2] = $522;
  __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickENS_9allocatorIS3_EEE10push_frontEOS3_($274,$268);
  $123 = $274;
  $523 = $123;
  $524 = ((($523)) + 4|0);
  $525 = HEAP32[$524>>2]|0;
  $526 = HEAP32[$525>>2]|0;
  HEAP32[$__pt1>>2] = $526;
  $113 = $274;
  $527 = $113;
  $528 = ((($527)) + 4|0);
  $529 = HEAP32[$528>>2]|0;
  $530 = ((($529)) + 4|0);
  $110 = $527;
  $111 = $530;
  $531 = $110;
  $532 = $111;
  ;HEAP8[$109>>0]=HEAP8[$112>>0]|0;
  $107 = $531;
  $108 = $532;
  $533 = $107;
  $534 = $108;
  $535 = ((($533)) + 4|0);
  HEAP32[$535>>2] = $534;
  $98 = $274;
  $99 = $__pt1;
  $536 = $98;
  $537 = ((($536)) + 8|0);
  $538 = HEAP32[$537>>2]|0;
  $97 = $536;
  $539 = $97;
  $540 = ((($539)) + 12|0);
  $96 = $540;
  $541 = $96;
  $95 = $541;
  $542 = $95;
  $543 = HEAP32[$542>>2]|0;
  $544 = ($538|0)==($543|0);
  do {
   if ($544) {
    $545 = ((($536)) + 4|0);
    $546 = HEAP32[$545>>2]|0;
    $547 = HEAP32[$536>>2]|0;
    $548 = ($546>>>0)>($547>>>0);
    if ($548) {
     $549 = ((($536)) + 4|0);
     $550 = HEAP32[$549>>2]|0;
     $551 = HEAP32[$536>>2]|0;
     $552 = $550;
     $553 = $551;
     $554 = (($552) - ($553))|0;
     $555 = (($554|0) / 4)&-1;
     $__d$i11 = $555;
     $556 = $__d$i11;
     $557 = (($556) + 1)|0;
     $558 = (($557|0) / 2)&-1;
     $__d$i11 = $558;
     $559 = ((($536)) + 4|0);
     $560 = HEAP32[$559>>2]|0;
     $561 = ((($536)) + 8|0);
     $562 = HEAP32[$561>>2]|0;
     $563 = ((($536)) + 4|0);
     $564 = HEAP32[$563>>2]|0;
     $565 = $__d$i11;
     $566 = (0 - ($565))|0;
     $567 = (($564) + ($566<<2)|0);
     $74 = $560;
     $75 = $562;
     $76 = $567;
     $568 = $74;
     $73 = $568;
     $569 = $73;
     $570 = $75;
     $68 = $570;
     $571 = $68;
     $572 = $76;
     $69 = $572;
     $573 = $69;
     $70 = $569;
     $71 = $571;
     $72 = $573;
     $574 = $71;
     $575 = $70;
     $576 = $574;
     $577 = $575;
     $578 = (($576) - ($577))|0;
     $579 = (($578|0) / 4)&-1;
     $__n$i$i$i10 = $579;
     $580 = $72;
     $581 = $70;
     $582 = $__n$i$i$i10;
     $583 = $582<<2;
     _memmove(($580|0),($581|0),($583|0))|0;
     $584 = $72;
     $585 = $__n$i$i$i10;
     $586 = (($584) + ($585<<2)|0);
     $587 = ((($536)) + 8|0);
     HEAP32[$587>>2] = $586;
     $588 = $__d$i11;
     $589 = ((($536)) + 4|0);
     $590 = HEAP32[$589>>2]|0;
     $591 = (0 - ($588))|0;
     $592 = (($590) + ($591<<2)|0);
     HEAP32[$589>>2] = $592;
     break;
    }
    $67 = $536;
    $593 = $67;
    $594 = ((($593)) + 12|0);
    $66 = $594;
    $595 = $66;
    $65 = $595;
    $596 = $65;
    $597 = HEAP32[$596>>2]|0;
    $598 = HEAP32[$536>>2]|0;
    $599 = $597;
    $600 = $598;
    $601 = (($599) - ($600))|0;
    $602 = (($601|0) / 4)&-1;
    $603 = $602<<1;
    HEAP32[$100>>2] = $603;
    HEAP32[$101>>2] = 1;
    $36 = $100;
    $37 = $101;
    $604 = $36;
    $605 = $37;
    ;HEAP8[$35>>0]=HEAP8[$38>>0]|0;
    $33 = $604;
    $34 = $605;
    $606 = $33;
    $607 = $34;
    $30 = $35;
    $31 = $606;
    $32 = $607;
    $608 = $31;
    $609 = HEAP32[$608>>2]|0;
    $610 = $32;
    $611 = HEAP32[$610>>2]|0;
    $612 = ($609>>>0)<($611>>>0);
    $613 = $34;
    $614 = $33;
    $615 = $612 ? $613 : $614;
    $616 = HEAP32[$615>>2]|0;
    $__c$i12 = $616;
    $617 = $__c$i12;
    $618 = $__c$i12;
    $619 = (($618>>>0) / 4)&-1;
    $25 = $536;
    $620 = $25;
    $621 = ((($620)) + 12|0);
    $24 = $621;
    $622 = $24;
    $23 = $622;
    $623 = $23;
    __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEEC2EjjS6_($__t$i13,$617,$619,$623);
    $624 = ((($536)) + 4|0);
    $625 = HEAP32[$624>>2]|0;
    $26 = $102;
    $27 = $625;
    $626 = $26;
    $627 = $27;
    HEAP32[$626>>2] = $627;
    $628 = ((($536)) + 8|0);
    $629 = HEAP32[$628>>2]|0;
    $28 = $105;
    $29 = $629;
    $630 = $28;
    $631 = $29;
    HEAP32[$630>>2] = $631;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$102>>2]|0;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$105>>2]|0;
    invoke_viii(590,($__t$i13|0),($$byval_copy2|0),($$byval_copy3|0));
    $632 = __THREW__; __THREW__ = 0;
    $633 = $632&1;
    if ($633) {
     $686 = ___cxa_find_matching_catch()|0;
     $687 = tempRet0;
     $103 = $686;
     $104 = $687;
     __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__t$i13);
     $688 = $103;
     $689 = $104;
     ___resumeException($688|0);
     // unreachable;
    } else {
     $42 = $536;
     $43 = $__t$i13;
     $634 = $42;
     $41 = $634;
     $635 = $41;
     $636 = HEAP32[$635>>2]|0;
     HEAP32[$__t$i3$i6>>2] = $636;
     $637 = $43;
     $39 = $637;
     $638 = $39;
     $639 = HEAP32[$638>>2]|0;
     $640 = $42;
     HEAP32[$640>>2] = $639;
     $40 = $__t$i3$i6;
     $641 = $40;
     $642 = HEAP32[$641>>2]|0;
     $643 = $43;
     HEAP32[$643>>2] = $642;
     $644 = ((($536)) + 4|0);
     $645 = ((($__t$i13)) + 4|0);
     $47 = $644;
     $48 = $645;
     $646 = $47;
     $46 = $646;
     $647 = $46;
     $648 = HEAP32[$647>>2]|0;
     HEAP32[$__t$i2$i7>>2] = $648;
     $649 = $48;
     $44 = $649;
     $650 = $44;
     $651 = HEAP32[$650>>2]|0;
     $652 = $47;
     HEAP32[$652>>2] = $651;
     $45 = $__t$i2$i7;
     $653 = $45;
     $654 = HEAP32[$653>>2]|0;
     $655 = $48;
     HEAP32[$655>>2] = $654;
     $656 = ((($536)) + 8|0);
     $657 = ((($__t$i13)) + 8|0);
     $52 = $656;
     $53 = $657;
     $658 = $52;
     $51 = $658;
     $659 = $51;
     $660 = HEAP32[$659>>2]|0;
     HEAP32[$__t$i1$i8>>2] = $660;
     $661 = $53;
     $49 = $661;
     $662 = $49;
     $663 = HEAP32[$662>>2]|0;
     $664 = $52;
     HEAP32[$664>>2] = $663;
     $50 = $__t$i1$i8;
     $665 = $50;
     $666 = HEAP32[$665>>2]|0;
     $667 = $53;
     HEAP32[$667>>2] = $666;
     $56 = $536;
     $668 = $56;
     $669 = ((($668)) + 12|0);
     $55 = $669;
     $670 = $55;
     $54 = $670;
     $671 = $54;
     $59 = $__t$i13;
     $672 = $59;
     $673 = ((($672)) + 12|0);
     $58 = $673;
     $674 = $58;
     $57 = $674;
     $675 = $57;
     $63 = $671;
     $64 = $675;
     $676 = $63;
     $62 = $676;
     $677 = $62;
     $678 = HEAP32[$677>>2]|0;
     HEAP32[$__t$i$i9>>2] = $678;
     $679 = $64;
     $60 = $679;
     $680 = $60;
     $681 = HEAP32[$680>>2]|0;
     $682 = $63;
     HEAP32[$682>>2] = $681;
     $61 = $__t$i$i9;
     $683 = $61;
     $684 = HEAP32[$683>>2]|0;
     $685 = $64;
     HEAP32[$685>>2] = $684;
     __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__t$i13);
     break;
    }
   }
  } while(0);
  $79 = $536;
  $690 = $79;
  $691 = ((($690)) + 12|0);
  $78 = $691;
  $692 = $78;
  $77 = $692;
  $693 = $77;
  $694 = ((($536)) + 8|0);
  $695 = HEAP32[$694>>2]|0;
  $80 = $695;
  $696 = $80;
  $697 = $99;
  $91 = $693;
  $92 = $696;
  $93 = $697;
  $698 = $91;
  $699 = $92;
  $700 = $93;
  $90 = $700;
  $701 = $90;
  ;HEAP8[$89>>0]=HEAP8[$94>>0]|0;
  $86 = $698;
  $87 = $699;
  $88 = $701;
  $702 = $86;
  $703 = $87;
  $704 = $88;
  $85 = $704;
  $705 = $85;
  $82 = $702;
  $83 = $703;
  $84 = $705;
  $706 = $83;
  $707 = $84;
  $81 = $707;
  $708 = $81;
  $709 = HEAP32[$708>>2]|0;
  HEAP32[$706>>2] = $709;
  $710 = ((($536)) + 8|0);
  $711 = HEAP32[$710>>2]|0;
  $712 = ((($711)) + 4|0);
  HEAP32[$710>>2] = $712;
  STACKTOP = sp;return;
 }
 $22 = $274;
 $713 = $22;
 $21 = $713;
 $714 = $21;
 $715 = ((($714)) + 12|0);
 $20 = $715;
 $716 = $20;
 $19 = $716;
 $717 = $19;
 $718 = HEAP32[$717>>2]|0;
 $719 = HEAP32[$713>>2]|0;
 $720 = $718;
 $721 = $719;
 $722 = (($720) - ($721))|0;
 $723 = (($722|0) / 4)&-1;
 $724 = $723<<1;
 HEAP32[$269>>2] = $724;
 HEAP32[$270>>2] = 1;
 $16 = $269;
 $17 = $270;
 $725 = $16;
 $726 = $17;
 ;HEAP8[$15>>0]=HEAP8[$18>>0]|0;
 $13 = $725;
 $14 = $726;
 $727 = $13;
 $728 = $14;
 $10 = $15;
 $11 = $727;
 $12 = $728;
 $729 = $11;
 $730 = HEAP32[$729>>2]|0;
 $731 = $12;
 $732 = HEAP32[$731>>2]|0;
 $733 = ($730>>>0)<($732>>>0);
 $734 = $14;
 $735 = $13;
 $736 = $733 ? $734 : $735;
 $737 = HEAP32[$736>>2]|0;
 $9 = $274;
 $738 = $9;
 $739 = ((($738)) + 8|0);
 $740 = HEAP32[$739>>2]|0;
 $741 = ((($738)) + 4|0);
 $742 = HEAP32[$741>>2]|0;
 $743 = $740;
 $744 = $742;
 $745 = (($743) - ($744))|0;
 $746 = (($745|0) / 4)&-1;
 $8 = $274;
 $747 = $8;
 $748 = ((($747)) + 12|0);
 $7 = $748;
 $749 = $7;
 $6 = $749;
 $750 = $6;
 __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEEC2EjjS6_($__buf,$737,$746,$750);
 $751 = $__a;
 $4 = $751;
 $5 = 1024;
 $752 = $4;
 $753 = $5;
 $1 = $752;
 $2 = $753;
 $3 = 0;
 $754 = $2;
 $755 = $754<<2;
 $0 = $755;
 $756 = $0;
 __THREW__ = 0;
 $757 = (invoke_ii(437,($756|0))|0);
 $758 = __THREW__; __THREW__ = 0;
 $759 = $758&1;
 if (!($759)) {
  HEAP32[$271>>2] = $757;
  __THREW__ = 0;
  invoke_vii(591,($__buf|0),($271|0));
  $760 = __THREW__; __THREW__ = 0;
  $761 = $760&1;
  if (!($761)) {
   $121 = $274;
   $781 = $121;
   $782 = ((($781)) + 8|0);
   $783 = HEAP32[$782>>2]|0;
   $__i = $783;
   while(1) {
    $784 = $__i;
    $122 = $274;
    $785 = $122;
    $786 = ((($785)) + 4|0);
    $787 = HEAP32[$786>>2]|0;
    $788 = ($784|0)!=($787|0);
    if (!($788)) {
     label = 26;
     break;
    }
    $789 = $__i;
    $790 = ((($789)) + -4|0);
    $__i = $790;
    __THREW__ = 0;
    invoke_vii(592,($__buf|0),($790|0));
    $791 = __THREW__; __THREW__ = 0;
    $792 = $791&1;
    if ($792) {
     label = 25;
     break;
    }
   }
   if ((label|0) == 25) {
    $793 = ___cxa_find_matching_catch()|0;
    $794 = tempRet0;
    $272 = $793;
    $273 = $794;
    __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__buf);
    $847 = $272;
    $848 = $273;
    ___resumeException($847|0);
    // unreachable;
   }
   else if ((label|0) == 26) {
    $231 = $274;
    $232 = $__buf;
    $795 = $231;
    $230 = $795;
    $796 = $230;
    $797 = HEAP32[$796>>2]|0;
    HEAP32[$__t$i4>>2] = $797;
    $798 = $232;
    $228 = $798;
    $799 = $228;
    $800 = HEAP32[$799>>2]|0;
    $801 = $231;
    HEAP32[$801>>2] = $800;
    $229 = $__t$i4;
    $802 = $229;
    $803 = HEAP32[$802>>2]|0;
    $804 = $232;
    HEAP32[$804>>2] = $803;
    $805 = ((($274)) + 4|0);
    $806 = ((($__buf)) + 4|0);
    $236 = $805;
    $237 = $806;
    $807 = $236;
    $235 = $807;
    $808 = $235;
    $809 = HEAP32[$808>>2]|0;
    HEAP32[$__t$i3>>2] = $809;
    $810 = $237;
    $233 = $810;
    $811 = $233;
    $812 = HEAP32[$811>>2]|0;
    $813 = $236;
    HEAP32[$813>>2] = $812;
    $234 = $__t$i3;
    $814 = $234;
    $815 = HEAP32[$814>>2]|0;
    $816 = $237;
    HEAP32[$816>>2] = $815;
    $817 = ((($274)) + 8|0);
    $818 = ((($__buf)) + 8|0);
    $241 = $817;
    $242 = $818;
    $819 = $241;
    $240 = $819;
    $820 = $240;
    $821 = HEAP32[$820>>2]|0;
    HEAP32[$__t$i2>>2] = $821;
    $822 = $242;
    $238 = $822;
    $823 = $238;
    $824 = HEAP32[$823>>2]|0;
    $825 = $241;
    HEAP32[$825>>2] = $824;
    $239 = $__t$i2;
    $826 = $239;
    $827 = HEAP32[$826>>2]|0;
    $828 = $242;
    HEAP32[$828>>2] = $827;
    $245 = $274;
    $829 = $245;
    $830 = ((($829)) + 12|0);
    $244 = $830;
    $831 = $244;
    $243 = $831;
    $832 = $243;
    $248 = $__buf;
    $833 = $248;
    $834 = ((($833)) + 12|0);
    $247 = $834;
    $835 = $247;
    $246 = $835;
    $836 = $246;
    $252 = $832;
    $253 = $836;
    $837 = $252;
    $251 = $837;
    $838 = $251;
    $839 = HEAP32[$838>>2]|0;
    HEAP32[$__t$i>>2] = $839;
    $840 = $253;
    $249 = $840;
    $841 = $249;
    $842 = HEAP32[$841>>2]|0;
    $843 = $252;
    HEAP32[$843>>2] = $842;
    $250 = $__t$i;
    $844 = $250;
    $845 = HEAP32[$844>>2]|0;
    $846 = $253;
    HEAP32[$846>>2] = $845;
    __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__buf);
    STACKTOP = sp;return;
   }
  }
 }
 $762 = ___cxa_find_matching_catch(0|0)|0;
 $763 = tempRet0;
 $272 = $762;
 $273 = $763;
 $764 = $272;
 (___cxa_begin_catch(($764|0))|0);
 $765 = $__a;
 $106 = $__buf;
 $766 = $106;
 $767 = ((($766)) + 8|0);
 $768 = HEAP32[$767>>2]|0;
 $769 = ((($768)) + -4|0);
 $770 = HEAP32[$769>>2]|0;
 $118 = $765;
 $119 = $770;
 $120 = 1024;
 $771 = $118;
 $772 = $119;
 $773 = $120;
 $115 = $771;
 $116 = $772;
 $117 = $773;
 $774 = $116;
 $114 = $774;
 $775 = $114;
 __ZdlPv($775);
 __THREW__ = 0;
 invoke_v(439);
 $776 = __THREW__; __THREW__ = 0;
 $777 = ___cxa_find_matching_catch()|0;
 $778 = tempRet0;
 $272 = $777;
 $273 = $778;
 __THREW__ = 0;
 invoke_v(440);
 $779 = __THREW__; __THREW__ = 0;
 $780 = $779&1;
 if ($780) {
  $849 = ___cxa_find_matching_catch(0|0)|0;
  $850 = tempRet0;
  ___clang_call_terminate($849);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__buf);
  $847 = $272;
  $848 = $273;
  ___resumeException($847|0);
  // unreachable;
 }
}
function __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickENS_9allocatorIS3_EEE9push_backEOS3_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 384|0;
 $$byval_copy = sp + 380|0;
 $12 = sp + 8|0;
 $15 = sp + 389|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i1 = sp + 252|0;
 $__t$i = sp + 204|0;
 $67 = sp;
 $72 = sp + 388|0;
 $78 = sp + 52|0;
 $79 = sp + 48|0;
 $__t = sp + 28|0;
 $80 = sp + 24|0;
 $83 = sp + 12|0;
 $76 = $this;
 $77 = $__x;
 $84 = $76;
 $85 = ((($84)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $75 = $84;
 $87 = $75;
 $88 = ((($87)) + 12|0);
 $74 = $88;
 $89 = $74;
 $73 = $89;
 $90 = $73;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($86|0)==($91|0);
 do {
  if ($92) {
   $93 = ((($84)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = HEAP32[$84>>2]|0;
   $96 = ($94>>>0)>($95>>>0);
   if ($96) {
    $97 = ((($84)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[$84>>2]|0;
    $100 = $98;
    $101 = $99;
    $102 = (($100) - ($101))|0;
    $103 = (($102|0) / 4)&-1;
    $__d = $103;
    $104 = $__d;
    $105 = (($104) + 1)|0;
    $106 = (($105|0) / 2)&-1;
    $__d = $106;
    $107 = ((($84)) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($84)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ((($84)) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $__d;
    $114 = (0 - ($113))|0;
    $115 = (($112) + ($114<<2)|0);
    $51 = $108;
    $52 = $110;
    $53 = $115;
    $116 = $51;
    $50 = $116;
    $117 = $50;
    $118 = $52;
    $45 = $118;
    $119 = $45;
    $120 = $53;
    $46 = $120;
    $121 = $46;
    $47 = $117;
    $48 = $119;
    $49 = $121;
    $122 = $48;
    $123 = $47;
    $124 = $122;
    $125 = $123;
    $126 = (($124) - ($125))|0;
    $127 = (($126|0) / 4)&-1;
    $__n$i$i = $127;
    $128 = $49;
    $129 = $47;
    $130 = $__n$i$i;
    $131 = $130<<2;
    _memmove(($128|0),($129|0),($131|0))|0;
    $132 = $49;
    $133 = $__n$i$i;
    $134 = (($132) + ($133<<2)|0);
    $135 = ((($84)) + 8|0);
    HEAP32[$135>>2] = $134;
    $136 = $__d;
    $137 = ((($84)) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (0 - ($136))|0;
    $140 = (($138) + ($139<<2)|0);
    HEAP32[$137>>2] = $140;
    break;
   }
   $44 = $84;
   $141 = $44;
   $142 = ((($141)) + 12|0);
   $43 = $142;
   $143 = $43;
   $42 = $143;
   $144 = $42;
   $145 = HEAP32[$144>>2]|0;
   $146 = HEAP32[$84>>2]|0;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 4)&-1;
   $151 = $150<<1;
   HEAP32[$78>>2] = $151;
   HEAP32[$79>>2] = 1;
   $13 = $78;
   $14 = $79;
   $152 = $13;
   $153 = $14;
   ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
   $10 = $152;
   $11 = $153;
   $154 = $10;
   $155 = $11;
   $7 = $12;
   $8 = $154;
   $9 = $155;
   $156 = $8;
   $157 = HEAP32[$156>>2]|0;
   $158 = $9;
   $159 = HEAP32[$158>>2]|0;
   $160 = ($157>>>0)<($159>>>0);
   $161 = $11;
   $162 = $10;
   $163 = $160 ? $161 : $162;
   $164 = HEAP32[$163>>2]|0;
   $__c = $164;
   $165 = $__c;
   $166 = $__c;
   $167 = (($166>>>0) / 4)&-1;
   $2 = $84;
   $168 = $2;
   $169 = ((($168)) + 12|0);
   $1 = $169;
   $170 = $1;
   $0 = $170;
   $171 = $0;
   __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEEC2EjjS6_($__t,$165,$167,$171);
   $172 = ((($84)) + 4|0);
   $173 = HEAP32[$172>>2]|0;
   $3 = $80;
   $4 = $173;
   $174 = $3;
   $175 = $4;
   HEAP32[$174>>2] = $175;
   $176 = ((($84)) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   $5 = $83;
   $6 = $177;
   $178 = $5;
   $179 = $6;
   HEAP32[$178>>2] = $179;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$80>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$83>>2]|0;
   invoke_viii(590,($__t|0),($$byval_copy|0),($$byval_copy1|0));
   $180 = __THREW__; __THREW__ = 0;
   $181 = $180&1;
   if ($181) {
    $234 = ___cxa_find_matching_catch()|0;
    $235 = tempRet0;
    $81 = $234;
    $82 = $235;
    __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__t);
    $236 = $81;
    $237 = $82;
    ___resumeException($236|0);
    // unreachable;
   } else {
    $19 = $84;
    $20 = $__t;
    $182 = $19;
    $18 = $182;
    $183 = $18;
    $184 = HEAP32[$183>>2]|0;
    HEAP32[$__t$i3>>2] = $184;
    $185 = $20;
    $16 = $185;
    $186 = $16;
    $187 = HEAP32[$186>>2]|0;
    $188 = $19;
    HEAP32[$188>>2] = $187;
    $17 = $__t$i3;
    $189 = $17;
    $190 = HEAP32[$189>>2]|0;
    $191 = $20;
    HEAP32[$191>>2] = $190;
    $192 = ((($84)) + 4|0);
    $193 = ((($__t)) + 4|0);
    $24 = $192;
    $25 = $193;
    $194 = $24;
    $23 = $194;
    $195 = $23;
    $196 = HEAP32[$195>>2]|0;
    HEAP32[$__t$i2>>2] = $196;
    $197 = $25;
    $21 = $197;
    $198 = $21;
    $199 = HEAP32[$198>>2]|0;
    $200 = $24;
    HEAP32[$200>>2] = $199;
    $22 = $__t$i2;
    $201 = $22;
    $202 = HEAP32[$201>>2]|0;
    $203 = $25;
    HEAP32[$203>>2] = $202;
    $204 = ((($84)) + 8|0);
    $205 = ((($__t)) + 8|0);
    $29 = $204;
    $30 = $205;
    $206 = $29;
    $28 = $206;
    $207 = $28;
    $208 = HEAP32[$207>>2]|0;
    HEAP32[$__t$i1>>2] = $208;
    $209 = $30;
    $26 = $209;
    $210 = $26;
    $211 = HEAP32[$210>>2]|0;
    $212 = $29;
    HEAP32[$212>>2] = $211;
    $27 = $__t$i1;
    $213 = $27;
    $214 = HEAP32[$213>>2]|0;
    $215 = $30;
    HEAP32[$215>>2] = $214;
    $33 = $84;
    $216 = $33;
    $217 = ((($216)) + 12|0);
    $32 = $217;
    $218 = $32;
    $31 = $218;
    $219 = $31;
    $36 = $__t;
    $220 = $36;
    $221 = ((($220)) + 12|0);
    $35 = $221;
    $222 = $35;
    $34 = $222;
    $223 = $34;
    $40 = $219;
    $41 = $223;
    $224 = $40;
    $39 = $224;
    $225 = $39;
    $226 = HEAP32[$225>>2]|0;
    HEAP32[$__t$i>>2] = $226;
    $227 = $41;
    $37 = $227;
    $228 = $37;
    $229 = HEAP32[$228>>2]|0;
    $230 = $40;
    HEAP32[$230>>2] = $229;
    $38 = $__t$i;
    $231 = $38;
    $232 = HEAP32[$231>>2]|0;
    $233 = $41;
    HEAP32[$233>>2] = $232;
    __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__t);
    break;
   }
  }
 } while(0);
 $56 = $84;
 $238 = $56;
 $239 = ((($238)) + 12|0);
 $55 = $239;
 $240 = $55;
 $54 = $240;
 $241 = $54;
 $242 = ((($84)) + 8|0);
 $243 = HEAP32[$242>>2]|0;
 $57 = $243;
 $244 = $57;
 $245 = $77;
 $58 = $245;
 $246 = $58;
 $69 = $241;
 $70 = $244;
 $71 = $246;
 $247 = $69;
 $248 = $70;
 $249 = $71;
 $68 = $249;
 $250 = $68;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $64 = $247;
 $65 = $248;
 $66 = $250;
 $251 = $64;
 $252 = $65;
 $253 = $66;
 $63 = $253;
 $254 = $63;
 $60 = $251;
 $61 = $252;
 $62 = $254;
 $255 = $61;
 $256 = $62;
 $59 = $256;
 $257 = $59;
 $258 = HEAP32[$257>>2]|0;
 HEAP32[$255>>2] = $258;
 $259 = ((($84)) + 8|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = ((($260)) + 4|0);
 HEAP32[$259>>2] = $261;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickENS_9allocatorIS3_EEE10push_frontEOS3_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0;
 var $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 396|0;
 $$byval_copy = sp + 392|0;
 $8 = sp + 8|0;
 $11 = sp + 401|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i1 = sp + 252|0;
 $__t$i = sp + 204|0;
 $70 = sp;
 $75 = sp + 400|0;
 $81 = sp + 52|0;
 $82 = sp + 48|0;
 $__t = sp + 28|0;
 $83 = sp + 24|0;
 $86 = sp + 12|0;
 $79 = $this;
 $80 = $__x;
 $87 = $79;
 $88 = ((($87)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = HEAP32[$87>>2]|0;
 $91 = ($89|0)==($90|0);
 do {
  if ($91) {
   $92 = ((($87)) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $78 = $87;
   $94 = $78;
   $95 = ((($94)) + 12|0);
   $77 = $95;
   $96 = $77;
   $76 = $96;
   $97 = $76;
   $98 = HEAP32[$97>>2]|0;
   $99 = ($93>>>0)<($98>>>0);
   if ($99) {
    $56 = $87;
    $100 = $56;
    $101 = ((($100)) + 12|0);
    $55 = $101;
    $102 = $55;
    $54 = $102;
    $103 = $54;
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($87)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $104;
    $108 = $106;
    $109 = (($107) - ($108))|0;
    $110 = (($109|0) / 4)&-1;
    $__d = $110;
    $111 = $__d;
    $112 = (($111) + 1)|0;
    $113 = (($112|0) / 2)&-1;
    $__d = $113;
    $114 = ((($87)) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($87)) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($87)) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $__d;
    $121 = (($119) + ($120<<2)|0);
    $51 = $115;
    $52 = $117;
    $53 = $121;
    $122 = $51;
    $50 = $122;
    $123 = $50;
    $124 = $52;
    $45 = $124;
    $125 = $45;
    $126 = $53;
    $46 = $126;
    $127 = $46;
    $47 = $123;
    $48 = $125;
    $49 = $127;
    $128 = $48;
    $129 = $47;
    $130 = $128;
    $131 = $129;
    $132 = (($130) - ($131))|0;
    $133 = (($132|0) / 4)&-1;
    $__n$i$i = $133;
    $134 = $__n$i$i;
    $135 = $49;
    $136 = (0 - ($134))|0;
    $137 = (($135) + ($136<<2)|0);
    $49 = $137;
    $138 = $49;
    $139 = $47;
    $140 = $__n$i$i;
    $141 = $140<<2;
    _memmove(($138|0),($139|0),($141|0))|0;
    $142 = $49;
    $143 = ((($87)) + 4|0);
    HEAP32[$143>>2] = $142;
    $144 = $__d;
    $145 = ((($87)) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (($146) + ($144<<2)|0);
    HEAP32[$145>>2] = $147;
    break;
   }
   $18 = $87;
   $148 = $18;
   $149 = ((($148)) + 12|0);
   $17 = $149;
   $150 = $17;
   $16 = $150;
   $151 = $16;
   $152 = HEAP32[$151>>2]|0;
   $153 = HEAP32[$87>>2]|0;
   $154 = $152;
   $155 = $153;
   $156 = (($154) - ($155))|0;
   $157 = (($156|0) / 4)&-1;
   $158 = $157<<1;
   HEAP32[$81>>2] = $158;
   HEAP32[$82>>2] = 1;
   $9 = $81;
   $10 = $82;
   $159 = $9;
   $160 = $10;
   ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
   $6 = $159;
   $7 = $160;
   $161 = $6;
   $162 = $7;
   $3 = $8;
   $4 = $161;
   $5 = $162;
   $163 = $4;
   $164 = HEAP32[$163>>2]|0;
   $165 = $5;
   $166 = HEAP32[$165>>2]|0;
   $167 = ($164>>>0)<($166>>>0);
   $168 = $7;
   $169 = $6;
   $170 = $167 ? $168 : $169;
   $171 = HEAP32[$170>>2]|0;
   $__c = $171;
   $172 = $__c;
   $173 = $__c;
   $174 = (($173) + 3)|0;
   $175 = (($174>>>0) / 4)&-1;
   $2 = $87;
   $176 = $2;
   $177 = ((($176)) + 12|0);
   $1 = $177;
   $178 = $1;
   $0 = $178;
   $179 = $0;
   __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEEC2EjjS6_($__t,$172,$175,$179);
   $180 = ((($87)) + 4|0);
   $181 = HEAP32[$180>>2]|0;
   $12 = $83;
   $13 = $181;
   $182 = $12;
   $183 = $13;
   HEAP32[$182>>2] = $183;
   $184 = ((($87)) + 8|0);
   $185 = HEAP32[$184>>2]|0;
   $14 = $86;
   $15 = $185;
   $186 = $14;
   $187 = $15;
   HEAP32[$186>>2] = $187;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$83>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$86>>2]|0;
   invoke_viii(590,($__t|0),($$byval_copy|0),($$byval_copy1|0));
   $188 = __THREW__; __THREW__ = 0;
   $189 = $188&1;
   if ($189) {
    $242 = ___cxa_find_matching_catch()|0;
    $243 = tempRet0;
    $84 = $242;
    $85 = $243;
    __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__t);
    $244 = $84;
    $245 = $85;
    ___resumeException($244|0);
    // unreachable;
   } else {
    $22 = $87;
    $23 = $__t;
    $190 = $22;
    $21 = $190;
    $191 = $21;
    $192 = HEAP32[$191>>2]|0;
    HEAP32[$__t$i3>>2] = $192;
    $193 = $23;
    $19 = $193;
    $194 = $19;
    $195 = HEAP32[$194>>2]|0;
    $196 = $22;
    HEAP32[$196>>2] = $195;
    $20 = $__t$i3;
    $197 = $20;
    $198 = HEAP32[$197>>2]|0;
    $199 = $23;
    HEAP32[$199>>2] = $198;
    $200 = ((($87)) + 4|0);
    $201 = ((($__t)) + 4|0);
    $27 = $200;
    $28 = $201;
    $202 = $27;
    $26 = $202;
    $203 = $26;
    $204 = HEAP32[$203>>2]|0;
    HEAP32[$__t$i2>>2] = $204;
    $205 = $28;
    $24 = $205;
    $206 = $24;
    $207 = HEAP32[$206>>2]|0;
    $208 = $27;
    HEAP32[$208>>2] = $207;
    $25 = $__t$i2;
    $209 = $25;
    $210 = HEAP32[$209>>2]|0;
    $211 = $28;
    HEAP32[$211>>2] = $210;
    $212 = ((($87)) + 8|0);
    $213 = ((($__t)) + 8|0);
    $32 = $212;
    $33 = $213;
    $214 = $32;
    $31 = $214;
    $215 = $31;
    $216 = HEAP32[$215>>2]|0;
    HEAP32[$__t$i1>>2] = $216;
    $217 = $33;
    $29 = $217;
    $218 = $29;
    $219 = HEAP32[$218>>2]|0;
    $220 = $32;
    HEAP32[$220>>2] = $219;
    $30 = $__t$i1;
    $221 = $30;
    $222 = HEAP32[$221>>2]|0;
    $223 = $33;
    HEAP32[$223>>2] = $222;
    $36 = $87;
    $224 = $36;
    $225 = ((($224)) + 12|0);
    $35 = $225;
    $226 = $35;
    $34 = $226;
    $227 = $34;
    $39 = $__t;
    $228 = $39;
    $229 = ((($228)) + 12|0);
    $38 = $229;
    $230 = $38;
    $37 = $230;
    $231 = $37;
    $43 = $227;
    $44 = $231;
    $232 = $43;
    $42 = $232;
    $233 = $42;
    $234 = HEAP32[$233>>2]|0;
    HEAP32[$__t$i>>2] = $234;
    $235 = $44;
    $40 = $235;
    $236 = $40;
    $237 = HEAP32[$236>>2]|0;
    $238 = $43;
    HEAP32[$238>>2] = $237;
    $41 = $__t$i;
    $239 = $41;
    $240 = HEAP32[$239>>2]|0;
    $241 = $44;
    HEAP32[$241>>2] = $240;
    __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__t);
    break;
   }
  }
 } while(0);
 $59 = $87;
 $246 = $59;
 $247 = ((($246)) + 12|0);
 $58 = $247;
 $248 = $58;
 $57 = $248;
 $249 = $57;
 $250 = ((($87)) + 4|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = ((($251)) + -4|0);
 $60 = $252;
 $253 = $60;
 $254 = $80;
 $61 = $254;
 $255 = $61;
 $72 = $249;
 $73 = $253;
 $74 = $255;
 $256 = $72;
 $257 = $73;
 $258 = $74;
 $71 = $258;
 $259 = $71;
 ;HEAP8[$70>>0]=HEAP8[$75>>0]|0;
 $67 = $256;
 $68 = $257;
 $69 = $259;
 $260 = $67;
 $261 = $68;
 $262 = $69;
 $66 = $262;
 $263 = $66;
 $63 = $260;
 $64 = $261;
 $65 = $263;
 $264 = $64;
 $265 = $65;
 $62 = $265;
 $266 = $62;
 $267 = HEAP32[$266>>2]|0;
 HEAP32[$264>>2] = $267;
 $268 = ((($87)) + 4|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = ((($269)) + -4|0);
 HEAP32[$268>>2] = $270;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEE9push_backEOS3_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 384|0;
 $$byval_copy = sp + 380|0;
 $12 = sp + 8|0;
 $15 = sp + 389|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i1 = sp + 252|0;
 $__t$i = sp + 204|0;
 $67 = sp;
 $72 = sp + 388|0;
 $78 = sp + 52|0;
 $79 = sp + 48|0;
 $__t = sp + 28|0;
 $80 = sp + 24|0;
 $83 = sp + 12|0;
 $76 = $this;
 $77 = $__x;
 $84 = $76;
 $85 = ((($84)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $75 = $84;
 $87 = $75;
 $88 = ((($87)) + 12|0);
 $74 = $88;
 $89 = $74;
 $73 = $89;
 $90 = $73;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($86|0)==($91|0);
 do {
  if ($92) {
   $93 = ((($84)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = HEAP32[$84>>2]|0;
   $96 = ($94>>>0)>($95>>>0);
   if ($96) {
    $97 = ((($84)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[$84>>2]|0;
    $100 = $98;
    $101 = $99;
    $102 = (($100) - ($101))|0;
    $103 = (($102|0) / 4)&-1;
    $__d = $103;
    $104 = $__d;
    $105 = (($104) + 1)|0;
    $106 = (($105|0) / 2)&-1;
    $__d = $106;
    $107 = ((($84)) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($84)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ((($84)) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $__d;
    $114 = (0 - ($113))|0;
    $115 = (($112) + ($114<<2)|0);
    $51 = $108;
    $52 = $110;
    $53 = $115;
    $116 = $51;
    $50 = $116;
    $117 = $50;
    $118 = $52;
    $45 = $118;
    $119 = $45;
    $120 = $53;
    $46 = $120;
    $121 = $46;
    $47 = $117;
    $48 = $119;
    $49 = $121;
    $122 = $48;
    $123 = $47;
    $124 = $122;
    $125 = $123;
    $126 = (($124) - ($125))|0;
    $127 = (($126|0) / 4)&-1;
    $__n$i$i = $127;
    $128 = $49;
    $129 = $47;
    $130 = $__n$i$i;
    $131 = $130<<2;
    _memmove(($128|0),($129|0),($131|0))|0;
    $132 = $49;
    $133 = $__n$i$i;
    $134 = (($132) + ($133<<2)|0);
    $135 = ((($84)) + 8|0);
    HEAP32[$135>>2] = $134;
    $136 = $__d;
    $137 = ((($84)) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (0 - ($136))|0;
    $140 = (($138) + ($139<<2)|0);
    HEAP32[$137>>2] = $140;
    break;
   }
   $44 = $84;
   $141 = $44;
   $142 = ((($141)) + 12|0);
   $43 = $142;
   $143 = $43;
   $42 = $143;
   $144 = $42;
   $145 = HEAP32[$144>>2]|0;
   $146 = HEAP32[$84>>2]|0;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 4)&-1;
   $151 = $150<<1;
   HEAP32[$78>>2] = $151;
   HEAP32[$79>>2] = 1;
   $13 = $78;
   $14 = $79;
   $152 = $13;
   $153 = $14;
   ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
   $10 = $152;
   $11 = $153;
   $154 = $10;
   $155 = $11;
   $7 = $12;
   $8 = $154;
   $9 = $155;
   $156 = $8;
   $157 = HEAP32[$156>>2]|0;
   $158 = $9;
   $159 = HEAP32[$158>>2]|0;
   $160 = ($157>>>0)<($159>>>0);
   $161 = $11;
   $162 = $10;
   $163 = $160 ? $161 : $162;
   $164 = HEAP32[$163>>2]|0;
   $__c = $164;
   $165 = $__c;
   $166 = $__c;
   $167 = (($166>>>0) / 4)&-1;
   $2 = $84;
   $168 = $2;
   $169 = ((($168)) + 12|0);
   $1 = $169;
   $170 = $1;
   $0 = $170;
   $171 = $0;
   $172 = ((($171)) + 4|0);
   $173 = HEAP32[$172>>2]|0;
   __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEEC2EjjS6_($__t,$165,$167,$173);
   $174 = ((($84)) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   $3 = $80;
   $4 = $175;
   $176 = $3;
   $177 = $4;
   HEAP32[$176>>2] = $177;
   $178 = ((($84)) + 8|0);
   $179 = HEAP32[$178>>2]|0;
   $5 = $83;
   $6 = $179;
   $180 = $5;
   $181 = $6;
   HEAP32[$180>>2] = $181;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$80>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$83>>2]|0;
   invoke_viii(590,($__t|0),($$byval_copy|0),($$byval_copy1|0));
   $182 = __THREW__; __THREW__ = 0;
   $183 = $182&1;
   if ($183) {
    $236 = ___cxa_find_matching_catch()|0;
    $237 = tempRet0;
    $81 = $236;
    $82 = $237;
    __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__t);
    $238 = $81;
    $239 = $82;
    ___resumeException($238|0);
    // unreachable;
   } else {
    $19 = $84;
    $20 = $__t;
    $184 = $19;
    $18 = $184;
    $185 = $18;
    $186 = HEAP32[$185>>2]|0;
    HEAP32[$__t$i3>>2] = $186;
    $187 = $20;
    $16 = $187;
    $188 = $16;
    $189 = HEAP32[$188>>2]|0;
    $190 = $19;
    HEAP32[$190>>2] = $189;
    $17 = $__t$i3;
    $191 = $17;
    $192 = HEAP32[$191>>2]|0;
    $193 = $20;
    HEAP32[$193>>2] = $192;
    $194 = ((($84)) + 4|0);
    $195 = ((($__t)) + 4|0);
    $24 = $194;
    $25 = $195;
    $196 = $24;
    $23 = $196;
    $197 = $23;
    $198 = HEAP32[$197>>2]|0;
    HEAP32[$__t$i2>>2] = $198;
    $199 = $25;
    $21 = $199;
    $200 = $21;
    $201 = HEAP32[$200>>2]|0;
    $202 = $24;
    HEAP32[$202>>2] = $201;
    $22 = $__t$i2;
    $203 = $22;
    $204 = HEAP32[$203>>2]|0;
    $205 = $25;
    HEAP32[$205>>2] = $204;
    $206 = ((($84)) + 8|0);
    $207 = ((($__t)) + 8|0);
    $29 = $206;
    $30 = $207;
    $208 = $29;
    $28 = $208;
    $209 = $28;
    $210 = HEAP32[$209>>2]|0;
    HEAP32[$__t$i1>>2] = $210;
    $211 = $30;
    $26 = $211;
    $212 = $26;
    $213 = HEAP32[$212>>2]|0;
    $214 = $29;
    HEAP32[$214>>2] = $213;
    $27 = $__t$i1;
    $215 = $27;
    $216 = HEAP32[$215>>2]|0;
    $217 = $30;
    HEAP32[$217>>2] = $216;
    $33 = $84;
    $218 = $33;
    $219 = ((($218)) + 12|0);
    $32 = $219;
    $220 = $32;
    $31 = $220;
    $221 = $31;
    $36 = $__t;
    $222 = $36;
    $223 = ((($222)) + 12|0);
    $35 = $223;
    $224 = $35;
    $34 = $224;
    $225 = $34;
    $40 = $221;
    $41 = $225;
    $226 = $40;
    $39 = $226;
    $227 = $39;
    $228 = HEAP32[$227>>2]|0;
    HEAP32[$__t$i>>2] = $228;
    $229 = $41;
    $37 = $229;
    $230 = $37;
    $231 = HEAP32[$230>>2]|0;
    $232 = $40;
    HEAP32[$232>>2] = $231;
    $38 = $__t$i;
    $233 = $38;
    $234 = HEAP32[$233>>2]|0;
    $235 = $41;
    HEAP32[$235>>2] = $234;
    __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__t);
    break;
   }
  }
 } while(0);
 $56 = $84;
 $240 = $56;
 $241 = ((($240)) + 12|0);
 $55 = $241;
 $242 = $55;
 $54 = $242;
 $243 = $54;
 $244 = ((($243)) + 4|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = ((($84)) + 8|0);
 $247 = HEAP32[$246>>2]|0;
 $57 = $247;
 $248 = $57;
 $249 = $77;
 $58 = $249;
 $250 = $58;
 $69 = $245;
 $70 = $248;
 $71 = $250;
 $251 = $69;
 $252 = $70;
 $253 = $71;
 $68 = $253;
 $254 = $68;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $64 = $251;
 $65 = $252;
 $66 = $254;
 $255 = $64;
 $256 = $65;
 $257 = $66;
 $63 = $257;
 $258 = $63;
 $60 = $255;
 $61 = $256;
 $62 = $258;
 $259 = $61;
 $260 = $62;
 $59 = $260;
 $261 = $59;
 $262 = HEAP32[$261>>2]|0;
 HEAP32[$259>>2] = $262;
 $263 = ((($84)) + 8|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = ((($264)) + 4|0);
 HEAP32[$263>>2] = $265;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEE10push_frontERKS3_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0;
 var $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 392|0;
 $$byval_copy = sp + 388|0;
 $8 = sp + 8|0;
 $11 = sp + 397|0;
 $__t$i3 = sp + 296|0;
 $__t$i2 = sp + 272|0;
 $__t$i1 = sp + 248|0;
 $__t$i = sp + 200|0;
 $69 = sp;
 $74 = sp + 396|0;
 $80 = sp + 52|0;
 $81 = sp + 48|0;
 $__t = sp + 28|0;
 $82 = sp + 24|0;
 $85 = sp + 12|0;
 $78 = $this;
 $79 = $__x;
 $86 = $78;
 $87 = ((($86)) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = HEAP32[$86>>2]|0;
 $90 = ($88|0)==($89|0);
 do {
  if ($90) {
   $91 = ((($86)) + 8|0);
   $92 = HEAP32[$91>>2]|0;
   $77 = $86;
   $93 = $77;
   $94 = ((($93)) + 12|0);
   $76 = $94;
   $95 = $76;
   $75 = $95;
   $96 = $75;
   $97 = HEAP32[$96>>2]|0;
   $98 = ($92>>>0)<($97>>>0);
   if ($98) {
    $56 = $86;
    $99 = $56;
    $100 = ((($99)) + 12|0);
    $55 = $100;
    $101 = $55;
    $54 = $101;
    $102 = $54;
    $103 = HEAP32[$102>>2]|0;
    $104 = ((($86)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $103;
    $107 = $105;
    $108 = (($106) - ($107))|0;
    $109 = (($108|0) / 4)&-1;
    $__d = $109;
    $110 = $__d;
    $111 = (($110) + 1)|0;
    $112 = (($111|0) / 2)&-1;
    $__d = $112;
    $113 = ((($86)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($86)) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($86)) + 8|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $__d;
    $120 = (($118) + ($119<<2)|0);
    $51 = $114;
    $52 = $116;
    $53 = $120;
    $121 = $51;
    $50 = $121;
    $122 = $50;
    $123 = $52;
    $45 = $123;
    $124 = $45;
    $125 = $53;
    $46 = $125;
    $126 = $46;
    $47 = $122;
    $48 = $124;
    $49 = $126;
    $127 = $48;
    $128 = $47;
    $129 = $127;
    $130 = $128;
    $131 = (($129) - ($130))|0;
    $132 = (($131|0) / 4)&-1;
    $__n$i$i = $132;
    $133 = $__n$i$i;
    $134 = $49;
    $135 = (0 - ($133))|0;
    $136 = (($134) + ($135<<2)|0);
    $49 = $136;
    $137 = $49;
    $138 = $47;
    $139 = $__n$i$i;
    $140 = $139<<2;
    _memmove(($137|0),($138|0),($140|0))|0;
    $141 = $49;
    $142 = ((($86)) + 4|0);
    HEAP32[$142>>2] = $141;
    $143 = $__d;
    $144 = ((($86)) + 8|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + ($143<<2)|0);
    HEAP32[$144>>2] = $146;
    break;
   }
   $18 = $86;
   $147 = $18;
   $148 = ((($147)) + 12|0);
   $17 = $148;
   $149 = $17;
   $16 = $149;
   $150 = $16;
   $151 = HEAP32[$150>>2]|0;
   $152 = HEAP32[$86>>2]|0;
   $153 = $151;
   $154 = $152;
   $155 = (($153) - ($154))|0;
   $156 = (($155|0) / 4)&-1;
   $157 = $156<<1;
   HEAP32[$80>>2] = $157;
   HEAP32[$81>>2] = 1;
   $9 = $80;
   $10 = $81;
   $158 = $9;
   $159 = $10;
   ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
   $6 = $158;
   $7 = $159;
   $160 = $6;
   $161 = $7;
   $3 = $8;
   $4 = $160;
   $5 = $161;
   $162 = $4;
   $163 = HEAP32[$162>>2]|0;
   $164 = $5;
   $165 = HEAP32[$164>>2]|0;
   $166 = ($163>>>0)<($165>>>0);
   $167 = $7;
   $168 = $6;
   $169 = $166 ? $167 : $168;
   $170 = HEAP32[$169>>2]|0;
   $__c = $170;
   $171 = $__c;
   $172 = $__c;
   $173 = (($172) + 3)|0;
   $174 = (($173>>>0) / 4)&-1;
   $2 = $86;
   $175 = $2;
   $176 = ((($175)) + 12|0);
   $1 = $176;
   $177 = $1;
   $0 = $177;
   $178 = $0;
   $179 = ((($178)) + 4|0);
   $180 = HEAP32[$179>>2]|0;
   __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEEC2EjjS6_($__t,$171,$174,$180);
   $181 = ((($86)) + 4|0);
   $182 = HEAP32[$181>>2]|0;
   $12 = $82;
   $13 = $182;
   $183 = $12;
   $184 = $13;
   HEAP32[$183>>2] = $184;
   $185 = ((($86)) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $14 = $85;
   $15 = $186;
   $187 = $14;
   $188 = $15;
   HEAP32[$187>>2] = $188;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$82>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$85>>2]|0;
   invoke_viii(590,($__t|0),($$byval_copy|0),($$byval_copy1|0));
   $189 = __THREW__; __THREW__ = 0;
   $190 = $189&1;
   if ($190) {
    $243 = ___cxa_find_matching_catch()|0;
    $244 = tempRet0;
    $83 = $243;
    $84 = $244;
    __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__t);
    $245 = $83;
    $246 = $84;
    ___resumeException($245|0);
    // unreachable;
   } else {
    $22 = $86;
    $23 = $__t;
    $191 = $22;
    $21 = $191;
    $192 = $21;
    $193 = HEAP32[$192>>2]|0;
    HEAP32[$__t$i3>>2] = $193;
    $194 = $23;
    $19 = $194;
    $195 = $19;
    $196 = HEAP32[$195>>2]|0;
    $197 = $22;
    HEAP32[$197>>2] = $196;
    $20 = $__t$i3;
    $198 = $20;
    $199 = HEAP32[$198>>2]|0;
    $200 = $23;
    HEAP32[$200>>2] = $199;
    $201 = ((($86)) + 4|0);
    $202 = ((($__t)) + 4|0);
    $27 = $201;
    $28 = $202;
    $203 = $27;
    $26 = $203;
    $204 = $26;
    $205 = HEAP32[$204>>2]|0;
    HEAP32[$__t$i2>>2] = $205;
    $206 = $28;
    $24 = $206;
    $207 = $24;
    $208 = HEAP32[$207>>2]|0;
    $209 = $27;
    HEAP32[$209>>2] = $208;
    $25 = $__t$i2;
    $210 = $25;
    $211 = HEAP32[$210>>2]|0;
    $212 = $28;
    HEAP32[$212>>2] = $211;
    $213 = ((($86)) + 8|0);
    $214 = ((($__t)) + 8|0);
    $32 = $213;
    $33 = $214;
    $215 = $32;
    $31 = $215;
    $216 = $31;
    $217 = HEAP32[$216>>2]|0;
    HEAP32[$__t$i1>>2] = $217;
    $218 = $33;
    $29 = $218;
    $219 = $29;
    $220 = HEAP32[$219>>2]|0;
    $221 = $32;
    HEAP32[$221>>2] = $220;
    $30 = $__t$i1;
    $222 = $30;
    $223 = HEAP32[$222>>2]|0;
    $224 = $33;
    HEAP32[$224>>2] = $223;
    $36 = $86;
    $225 = $36;
    $226 = ((($225)) + 12|0);
    $35 = $226;
    $227 = $35;
    $34 = $227;
    $228 = $34;
    $39 = $__t;
    $229 = $39;
    $230 = ((($229)) + 12|0);
    $38 = $230;
    $231 = $38;
    $37 = $231;
    $232 = $37;
    $43 = $228;
    $44 = $232;
    $233 = $43;
    $42 = $233;
    $234 = $42;
    $235 = HEAP32[$234>>2]|0;
    HEAP32[$__t$i>>2] = $235;
    $236 = $44;
    $40 = $236;
    $237 = $40;
    $238 = HEAP32[$237>>2]|0;
    $239 = $43;
    HEAP32[$239>>2] = $238;
    $41 = $__t$i;
    $240 = $41;
    $241 = HEAP32[$240>>2]|0;
    $242 = $44;
    HEAP32[$242>>2] = $241;
    __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($__t);
    break;
   }
  }
 } while(0);
 $59 = $86;
 $247 = $59;
 $248 = ((($247)) + 12|0);
 $58 = $248;
 $249 = $58;
 $57 = $249;
 $250 = $57;
 $251 = ((($250)) + 4|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = ((($86)) + 4|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ((($254)) + -4|0);
 $60 = $255;
 $256 = $60;
 $257 = $79;
 $71 = $252;
 $72 = $256;
 $73 = $257;
 $258 = $71;
 $259 = $72;
 $260 = $73;
 $70 = $260;
 $261 = $70;
 ;HEAP8[$69>>0]=HEAP8[$74>>0]|0;
 $66 = $258;
 $67 = $259;
 $68 = $261;
 $262 = $66;
 $263 = $67;
 $264 = $68;
 $65 = $264;
 $265 = $65;
 $62 = $262;
 $63 = $263;
 $64 = $265;
 $266 = $63;
 $267 = $64;
 $61 = $267;
 $268 = $61;
 $269 = HEAP32[$268>>2]|0;
 HEAP32[$266>>2] = $269;
 $270 = ((($86)) + 4|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = ((($271)) + -4|0);
 HEAP32[$270>>2] = $272;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp;
 $19 = sp + 100|0;
 $24 = $this;
 $25 = $24;
 $23 = $25;
 $26 = $23;
 $27 = ((($26)) + 12|0);
 $22 = $27;
 $28 = $22;
 $21 = $28;
 $29 = $21;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $__a = $31;
 while(1) {
  $2 = $__first;
  $3 = $__last;
  $32 = $2;
  $1 = $32;
  $33 = $1;
  $34 = HEAP32[$33>>2]|0;
  $35 = $3;
  $0 = $35;
  $36 = $0;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)!=($37|0);
  if (!($38)) {
   break;
  }
  $39 = $__a;
  $40 = ((($25)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $4 = $41;
  $42 = $4;
  $5 = $__first;
  $43 = $5;
  $44 = HEAP32[$43>>2]|0;
  $16 = $39;
  $17 = $42;
  $18 = $44;
  $45 = $16;
  $46 = $17;
  $47 = $18;
  $15 = $47;
  $48 = $15;
  ;HEAP8[$14>>0]=HEAP8[$19>>0]|0;
  $11 = $45;
  $12 = $46;
  $13 = $48;
  $49 = $11;
  $50 = $12;
  $51 = $13;
  $10 = $51;
  $52 = $10;
  $7 = $49;
  $8 = $50;
  $9 = $52;
  $53 = $8;
  $54 = $9;
  $6 = $54;
  $55 = $6;
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$53>>2] = $56;
  $57 = ((($25)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 4|0);
  HEAP32[$57>>2] = $59;
  $20 = $__first;
  $60 = $20;
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 4|0);
  HEAP32[$60>>2] = $62;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJiRN5Asset5ModelEjEEEvDpOT_($this,$__args,$__args1,$__args2) {
 $this = $this|0;
 $__args = $__args|0;
 $__args1 = $__args1|0;
 $__args2 = $__args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $20 = sp + 8|0;
 $27 = sp + 265|0;
 $36 = sp;
 $39 = sp + 264|0;
 $47 = sp + 88|0;
 $48 = sp + 76|0;
 $__v = sp + 20|0;
 $53 = $this;
 $54 = $__args;
 $55 = $__args1;
 $56 = $__args2;
 $59 = $53;
 $52 = $59;
 $60 = $52;
 $61 = ((($60)) + 8|0);
 $51 = $61;
 $62 = $51;
 $50 = $62;
 $63 = $50;
 $__a = $63;
 $49 = $59;
 $64 = $49;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$64>>2]|0;
 $68 = $66;
 $69 = $67;
 $70 = (($68) - ($69))|0;
 $71 = (($70|0) / 264)&-1;
 $72 = (($71) + 1)|0;
 $46 = $59;
 HEAP32[$47>>2] = $72;
 $73 = $46;
 $74 = (__ZNKSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE8max_sizeEv($73)|0);
 $__ms$i = $74;
 $75 = HEAP32[$47>>2]|0;
 $76 = $__ms$i;
 $77 = ($75>>>0)>($76>>>0);
 if ($77) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($73);
 }
 $44 = $73;
 $78 = $44;
 $43 = $78;
 $79 = $43;
 $42 = $79;
 $80 = $42;
 $81 = ((($80)) + 8|0);
 $41 = $81;
 $82 = $41;
 $40 = $82;
 $83 = $40;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 264)&-1;
 $__cap$i = $89;
 $90 = $__cap$i;
 $91 = $__ms$i;
 $92 = (($91>>>0) / 2)&-1;
 $93 = ($90>>>0)>=($92>>>0);
 if ($93) {
  $94 = $__ms$i;
  $45 = $94;
 } else {
  $95 = $__cap$i;
  $96 = $95<<1;
  HEAP32[$48>>2] = $96;
  $37 = $48;
  $38 = $47;
  $97 = $37;
  $98 = $38;
  ;HEAP8[$36>>0]=HEAP8[$39>>0]|0;
  $34 = $97;
  $35 = $98;
  $99 = $34;
  $100 = $35;
  $31 = $36;
  $32 = $99;
  $33 = $100;
  $101 = $32;
  $102 = HEAP32[$101>>2]|0;
  $103 = $33;
  $104 = HEAP32[$103>>2]|0;
  $105 = ($102>>>0)<($104>>>0);
  $106 = $35;
  $107 = $34;
  $108 = $105 ? $106 : $107;
  $109 = HEAP32[$108>>2]|0;
  $45 = $109;
 }
 $110 = $45;
 $30 = $59;
 $111 = $30;
 $112 = ((($111)) + 4|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = HEAP32[$111>>2]|0;
 $115 = $113;
 $116 = $114;
 $117 = (($115) - ($116))|0;
 $118 = (($117|0) / 264)&-1;
 $119 = $__a;
 __ZNSt3__114__split_bufferI6ProtoXRNS_9allocatorIS1_EEEC2EjjS4_($__v,$110,$118,$119);
 $120 = $__a;
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $29 = $122;
 $123 = $29;
 $124 = $54;
 $28 = $124;
 $125 = $28;
 $126 = $55;
 $1 = $126;
 $127 = $1;
 $128 = $56;
 $0 = $128;
 $129 = $0;
 $22 = $120;
 $23 = $123;
 $24 = $125;
 $25 = $127;
 $26 = $129;
 $130 = $22;
 $131 = $23;
 $132 = $24;
 $21 = $132;
 $133 = $21;
 $134 = $25;
 $3 = $134;
 $135 = $3;
 $136 = $26;
 $2 = $136;
 $137 = $2;
 ;HEAP8[$20>>0]=HEAP8[$27>>0]|0;
 $15 = $130;
 $16 = $131;
 $17 = $133;
 $18 = $135;
 $19 = $137;
 $138 = $15;
 $139 = $16;
 $140 = $17;
 $14 = $140;
 $141 = $14;
 $142 = $18;
 $5 = $142;
 $143 = $5;
 $144 = $19;
 $4 = $144;
 $145 = $4;
 $9 = $138;
 $10 = $139;
 $11 = $141;
 $12 = $143;
 $13 = $145;
 $146 = $10;
 $147 = $11;
 $8 = $147;
 $148 = $8;
 $149 = HEAP32[$148>>2]|0;
 $150 = $12;
 $7 = $150;
 $151 = $7;
 $152 = $13;
 $6 = $152;
 $153 = $6;
 $154 = HEAP32[$153>>2]|0;
 __THREW__ = 0;
 invoke_viiii(493,($146|0),($149|0),($151|0),($154|0));
 $155 = __THREW__; __THREW__ = 0;
 $156 = $155&1;
 if ($156) {
  $162 = ___cxa_find_matching_catch()|0;
  $163 = tempRet0;
  $57 = $162;
  $58 = $163;
  __ZNSt3__114__split_bufferI6ProtoXRNS_9allocatorIS1_EEED2Ev($__v);
  $164 = $57;
  $165 = $58;
  ___resumeException($164|0);
  // unreachable;
 }
 $157 = ((($__v)) + 8|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = ((($158)) + 264|0);
 HEAP32[$157>>2] = $159;
 __THREW__ = 0;
 invoke_vii(593,($59|0),($__v|0));
 $160 = __THREW__; __THREW__ = 0;
 $161 = $160&1;
 if ($161) {
  $162 = ___cxa_find_matching_catch()|0;
  $163 = tempRet0;
  $57 = $162;
  $58 = $163;
  __ZNSt3__114__split_bufferI6ProtoXRNS_9allocatorIS1_EEED2Ev($__v);
  $164 = $57;
  $165 = $58;
  ___resumeException($164|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferI6ProtoXRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__split_bufferI6ProtoXRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*264)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*264)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*264)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -264|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -264|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN6ProtoXC2ERKS_($79,$81);
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -264|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i>>2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91>>2]|0;
 $93 = $20;
 HEAP32[$93>>2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94>>2]|0;
 $96 = $21;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i2>>2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 HEAP32[$106>>2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $4;
 HEAP32[$109>>2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = ((($110)) + 8|0);
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = ((($115)) + 12|0);
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i1>>2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123>>2]|0;
 $125 = $14;
 HEAP32[$125>>2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126>>2]|0;
 $128 = $15;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 264)&-1;
 __ZNKSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI6ProtoXRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -264|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 264)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 16268815;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 264)&-1;
 $39 = (($26) + (($38*264)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 264)&-1;
 $51 = (($42) + (($50*264)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 264)&-1;
 $67 = (($54) + (($66*264)|0)|0);
 __ZNKSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 264)&-1;
 $39 = (($26) + (($38*264)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 264)&-1;
 $55 = (($42) + (($54*264)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*264)|0)|0);
 __ZNKSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN6ProtoXC2ERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 dest=$3; src=$4; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $5 = ((($3)) + 44|0);
 $6 = $2;
 $7 = ((($6)) + 44|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($5,$7);
 $8 = ((($3)) + 56|0);
 $9 = $2;
 $10 = ((($9)) + 56|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($8,$10);
 $11 = ((($3)) + 68|0);
 $12 = $2;
 $13 = ((($12)) + 68|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($11,$13);
 $14 = ((($3)) + 80|0);
 $15 = $2;
 $16 = ((($15)) + 80|0);
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($14,$16);
 $17 = ((($3)) + 92|0);
 $18 = $2;
 $19 = ((($18)) + 92|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$17>>2] = $20;
 $21 = ((($3)) + 96|0);
 $22 = $2;
 $23 = ((($22)) + 96|0);
 __ZN6ProtoX10PropulsionC2ERKS0_($21,$23);
 $24 = ((($3)) + 92|0);
 $25 = $2;
 $26 = ((($25)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$24>>2] = $27;
 $28 = ((($3)) + 144|0);
 $29 = $2;
 $30 = ((($29)) + 144|0);
 __ZN6ProtoX10PropulsionC2ERKS0_($28,$30);
 $31 = ((($3)) + 92|0);
 $32 = $2;
 $33 = ((($32)) + 92|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$31>>2] = $34;
 $35 = ((($3)) + 192|0);
 $36 = $2;
 $37 = ((($36)) + 192|0);
 __ZN6ProtoX10PropulsionC2ERKS0_($35,$37);
 $38 = ((($3)) + 240|0);
 $39 = $2;
 $40 = ((($39)) + 240|0);
 ;HEAP32[$38>>2]=HEAP32[$40>>2]|0;HEAP32[$38+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$38+12>>2]=HEAP32[$40+12>>2]|0;HEAP32[$38+16>>2]=HEAP32[$40+16>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6ProtoX10PropulsionC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($3,$4);
 $5 = ((($3)) + 12|0);
 $6 = $2;
 $7 = ((($6)) + 12|0);
 ;HEAP32[$5>>2]=HEAP32[$7>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$5+24>>2]=HEAP32[$7+24>>2]|0;HEAP32[$5+28>>2]=HEAP32[$7+28>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__124uniform_int_distributionIjEC2Ejj($this,$__a,$__b) {
 $this = $this|0;
 $__a = $__a|0;
 $__b = $__b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__a;
 $2 = $__b;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZNSt3__124uniform_int_distributionIjE10param_typeC2Ejj($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__124uniform_int_distributionIjEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEjRT_($this,$__g) {
 $this = $this|0;
 $__g = $__g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__g;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNSt3__124uniform_int_distributionIjEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEjRT_RKNS1_10param_typeE($2,$3,$2)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__124uniform_int_distributionIjE10param_typeC2Ejj($this,$__a,$__b) {
 $this = $this|0;
 $__a = $__a|0;
 $__b = $__b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__a;
 $2 = $__b;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $2;
 HEAP32[$5>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNSt3__124uniform_int_distributionIjEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEjRT_RKNS1_10param_typeE($this,$__g,$__p) {
 $this = $this|0;
 $__g = $__g|0;
 $__p = $__p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_Dt = 0, $_Rp = 0, $__e = 0, $__u = 0, $__w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 44|0;
 $__e = sp + 4|0;
 $2 = $this;
 $3 = $__g;
 $4 = $__p;
 $6 = $4;
 $7 = (__ZNKSt3__124uniform_int_distributionIjE10param_type1bEv($6)|0);
 $8 = $4;
 $9 = (__ZNKSt3__124uniform_int_distributionIjE10param_type1aEv($8)|0);
 $10 = (($7) - ($9))|0;
 $11 = (($10) + 1)|0;
 $_Rp = $11;
 $12 = $_Rp;
 $13 = ($12|0)==(1);
 if ($13) {
  $14 = $4;
  $15 = (__ZNKSt3__124uniform_int_distributionIjE10param_type1aEv($14)|0);
  $1 = $15;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 $_Dt = 32;
 $16 = $_Rp;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $3;
  __ZNSt3__125__independent_bits_engineINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEjEC2ERS2_j($5,$18,32);
  $19 = (__ZNSt3__125__independent_bits_engineINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEjEclEv($5)|0);
  $1 = $19;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 $20 = $_Rp;
 $0 = $20;
 $21 = $0;
 $22 = (Math_clz32(($21|0))|0);
 $23 = (32 - ($22))|0;
 $24 = (($23) - 1)|0;
 $__w = $24;
 $25 = $_Rp;
 $26 = $__w;
 $27 = (32 - ($26))|0;
 $28 = -1 >>> $27;
 $29 = $25 & $28;
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $__w;
  $32 = (($31) + 1)|0;
  $__w = $32;
 }
 $33 = $3;
 $34 = $__w;
 __ZNSt3__125__independent_bits_engineINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEjEC2ERS2_j($__e,$33,$34);
 while(1) {
  $35 = (__ZNSt3__125__independent_bits_engineINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEjEclEv($__e)|0);
  $__u = $35;
  $36 = $__u;
  $37 = $_Rp;
  $38 = ($36>>>0)>=($37>>>0);
  if (!($38)) {
   break;
  }
 }
 $39 = $__u;
 $40 = $4;
 $41 = (__ZNKSt3__124uniform_int_distributionIjE10param_type1aEv($40)|0);
 $42 = (($39) + ($41))|0;
 $1 = $42;
 $43 = $1;
 STACKTOP = sp;return ($43|0);
}
function __ZNKSt3__124uniform_int_distributionIjE10param_type1bEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNKSt3__124uniform_int_distributionIjE10param_type1aEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN3glm5tvec4IfLNS_9precisionE0EEC2Ef($this,$s) {
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 HEAPF32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAPF32[$4>>2] = $5;
 $6 = ((($2)) + 8|0);
 $7 = $1;
 HEAPF32[$6>>2] = $7;
 $8 = ((($2)) + 12|0);
 $9 = $1;
 HEAPF32[$8>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $v2;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $0;
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $16 * $19;
 $21 = $0;
 $22 = ((($21)) + 12|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $1;
 $25 = ((($24)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $23 * $26;
 __ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff($agg$result,$6,$13,$20,$27);
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE7__cloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__hold = 0, $__t$i = 0, $__tmp$i$i1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 564|0;
 $5 = sp + 136|0;
 $8 = sp + 552|0;
 $9 = sp + 544|0;
 $10 = sp + 128|0;
 $15 = sp + 520|0;
 $29 = sp + 120|0;
 $30 = sp + 112|0;
 $31 = sp + 104|0;
 $32 = sp + 96|0;
 $35 = sp + 597|0;
 $36 = sp + 596|0;
 $37 = sp + 595|0;
 $38 = sp + 594|0;
 $40 = sp + 448|0;
 $49 = sp + 88|0;
 $50 = sp + 80|0;
 $51 = sp + 72|0;
 $52 = sp + 64|0;
 $56 = sp + 593|0;
 $57 = sp + 592|0;
 $58 = sp + 591|0;
 $59 = sp + 590|0;
 $61 = sp + 396|0;
 $71 = sp + 56|0;
 $72 = sp + 48|0;
 $73 = sp + 40|0;
 $74 = sp + 32|0;
 $75 = sp + 24|0;
 $78 = sp + 589|0;
 $79 = sp + 348|0;
 $80 = sp + 344|0;
 $81 = sp + 588|0;
 $82 = sp + 587|0;
 $83 = sp + 16|0;
 $84 = sp + 8|0;
 $85 = sp;
 $90 = sp + 586|0;
 $91 = sp + 324|0;
 $92 = sp + 320|0;
 $__a = sp + 585|0;
 $__hold = sp + 160|0;
 $128 = sp + 152|0;
 $129 = sp + 584|0;
 $127 = $this;
 $131 = $127;
 $132 = ((($131)) + 4|0);
 $126 = $132;
 $133 = $126;
 $125 = $133;
 $134 = $125;
 $123 = $__a;
 $124 = $134;
 $102 = $__a;
 $103 = 1;
 $104 = 0;
 $135 = $103;
 $136 = $135<<4;
 $101 = $136;
 $137 = $101;
 $138 = (__Znwj($137)|0);
 $98 = $128;
 $99 = $__a;
 $100 = 1;
 $139 = $98;
 $140 = $99;
 HEAP32[$139>>2] = $140;
 $141 = ((($139)) + 4|0);
 $142 = $100;
 HEAP32[$141>>2] = $142;
 $12 = $__hold;
 $13 = $138;
 $14 = $128;
 $143 = $12;
 $144 = $13;
 $145 = $14;
 $11 = $145;
 $146 = $11;
 ;HEAP32[$15>>2]=HEAP32[$146>>2]|0;HEAP32[$15+4>>2]=HEAP32[$146+4>>2]|0;
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;HEAP8[$10+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$15+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[$15+4>>0]|0;HEAP8[$10+5>>0]=HEAP8[$15+5>>0]|0;HEAP8[$10+6>>0]=HEAP8[$15+6>>0]|0;HEAP8[$10+7>>0]=HEAP8[$15+7>>0]|0;
 $7 = $143;
 HEAP32[$8>>2] = $144;
 $147 = $7;
 $6 = $8;
 $148 = $6;
 $149 = HEAP32[$148>>2]|0;
 $0 = $10;
 $150 = $0;
 ;HEAP32[$9>>2]=HEAP32[$150>>2]|0;HEAP32[$9+4>>2]=HEAP32[$150+4>>2]|0;
 ;HEAP8[$5>>0]=HEAP8[$9>>0]|0;HEAP8[$5+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$9+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[$9+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[$9+5>>0]|0;HEAP8[$5+6>>0]=HEAP8[$9+6>>0]|0;HEAP8[$5+7>>0]=HEAP8[$9+7>>0]|0;
 $3 = $147;
 HEAP32[$4>>2] = $149;
 $151 = $3;
 $2 = $4;
 $152 = $2;
 $153 = HEAP32[$152>>2]|0;
 HEAP32[$151>>2] = $153;
 $154 = ((($151)) + 4|0);
 $1 = $5;
 $155 = $1;
 ;HEAP32[$154>>2]=HEAP32[$155>>2]|0;HEAP32[$154+4>>2]=HEAP32[$155+4>>2]|0;
 $18 = $__hold;
 $156 = $18;
 $17 = $156;
 $157 = $17;
 $16 = $157;
 $158 = $16;
 $159 = HEAP32[$158>>2]|0;
 $160 = ((($131)) + 4|0);
 $20 = $160;
 $161 = $20;
 $19 = $161;
 $162 = $19;
 $21 = $129;
 $22 = $__a;
 $87 = $159;
 $88 = $162;
 $89 = $129;
 $163 = $87;
 $86 = $163;
 $164 = $86;
 $165 = 5836;
 HEAP32[$164>>2] = $165;
 $166 = 5792;
 HEAP32[$163>>2] = $166;
 $167 = ((($163)) + 4|0);
 $168 = $88;
 $41 = $168;
 $169 = $41;
 $39 = $169;
 $170 = $39;
 $33 = $40;
 $34 = $170;
 $171 = $33;
 $172 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $171;
 $28 = $172;
 $173 = $27;
 $174 = $28;
 $26 = $174;
 $175 = $26;
 $24 = $173;
 $25 = $175;
 $176 = $24;
 $177 = $25;
 $23 = $177;
 $178 = $23;
 HEAP32[$176>>2] = $178;
 $179 = HEAP32[$40>>2]|0;
 HEAP32[$91>>2] = $179;
 $180 = $89;
 $42 = $180;
 $181 = $42;
 $62 = $181;
 $182 = $62;
 $60 = $182;
 $183 = $60;
 $54 = $61;
 $55 = $183;
 $184 = $54;
 $185 = $55;
 $53 = $185;
 $186 = $53;
 ;HEAP8[$49>>0]=HEAP8[$59>>0]|0;
 ;HEAP8[$50>>0]=HEAP8[$58>>0]|0;
 ;HEAP8[$51>>0]=HEAP8[$57>>0]|0;
 ;HEAP8[$52>>0]=HEAP8[$56>>0]|0;
 $47 = $184;
 $48 = $186;
 $187 = $47;
 $188 = $48;
 $46 = $188;
 $189 = $46;
 $44 = $187;
 $45 = $189;
 $190 = $44;
 $191 = $45;
 $43 = $191;
 $192 = $43;
 HEAP32[$190>>2] = $192;
 $193 = HEAP32[$61>>2]|0;
 HEAP32[$92>>2] = $193;
 ;HEAP8[$83>>0]=HEAP8[$92>>0]|0;HEAP8[$83+1>>0]=HEAP8[$92+1>>0]|0;HEAP8[$83+2>>0]=HEAP8[$92+2>>0]|0;HEAP8[$83+3>>0]=HEAP8[$92+3>>0]|0;
 ;HEAP8[$84>>0]=HEAP8[$91>>0]|0;HEAP8[$84+1>>0]=HEAP8[$91+1>>0]|0;HEAP8[$84+2>>0]=HEAP8[$91+2>>0]|0;HEAP8[$84+3>>0]=HEAP8[$91+3>>0]|0;
 ;HEAP8[$85>>0]=HEAP8[$90>>0]|0;
 $77 = $167;
 $194 = $77;
 $76 = $84;
 $195 = $76;
 ;HEAP32[$79>>2]=HEAP32[$195>>2]|0;
 $63 = $83;
 $196 = $63;
 ;HEAP32[$80>>2]=HEAP32[$196>>2]|0;
 ;HEAP8[$71>>0]=HEAP8[$82>>0]|0;
 ;HEAP8[$72>>0]=HEAP8[$81>>0]|0;
 ;HEAP8[$73>>0]=HEAP8[$80>>0]|0;HEAP8[$73+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$73+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$73+3>>0]=HEAP8[$80+3>>0]|0;
 ;HEAP8[$74>>0]=HEAP8[$79>>0]|0;HEAP8[$74+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$74+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$74+3>>0]=HEAP8[$79+3>>0]|0;
 ;HEAP8[$75>>0]=HEAP8[$78>>0]|0;
 $70 = $194;
 $197 = $70;
 $69 = $73;
 $198 = $69;
 $68 = $198;
 $199 = $68;
 $200 = HEAP32[$199>>2]|0;
 $64 = $200;
 $66 = $74;
 $201 = $66;
 $65 = $201;
 $202 = $65;
 $203 = HEAP32[$202>>2]|0;
 $67 = $203;
 $204 = $67;
 ;HEAP32[$197>>2]=HEAP32[$204>>2]|0;HEAP32[$197+4>>2]=HEAP32[$204+4>>2]|0;HEAP32[$197+8>>2]=HEAP32[$204+8>>2]|0;
 $97 = $__hold;
 $205 = $97;
 $96 = $205;
 $206 = $96;
 $95 = $206;
 $207 = $95;
 $208 = HEAP32[$207>>2]|0;
 $__t$i = $208;
 $94 = $205;
 $209 = $94;
 $93 = $209;
 $210 = $93;
 HEAP32[$210>>2] = 0;
 $211 = $__t$i;
 $130 = 1;
 $122 = $__hold;
 $212 = $122;
 $120 = $212;
 $121 = 0;
 $213 = $120;
 $119 = $213;
 $214 = $119;
 $118 = $214;
 $215 = $118;
 $216 = HEAP32[$215>>2]|0;
 $__tmp$i$i1 = $216;
 $217 = $121;
 $108 = $213;
 $218 = $108;
 $107 = $218;
 $219 = $107;
 HEAP32[$219>>2] = $217;
 $220 = $__tmp$i$i1;
 $221 = ($220|0)!=(0|0);
 if (!($221)) {
  STACKTOP = sp;return ($211|0);
 }
 $106 = $213;
 $222 = $106;
 $105 = $222;
 $223 = $105;
 $224 = ((($223)) + 4|0);
 $225 = $__tmp$i$i1;
 $116 = $224;
 $117 = $225;
 $226 = $116;
 $227 = HEAP32[$226>>2]|0;
 $228 = $117;
 $229 = ((($226)) + 4|0);
 $230 = HEAP32[$229>>2]|0;
 $113 = $227;
 $114 = $228;
 $115 = $230;
 $231 = $113;
 $232 = $114;
 $233 = $115;
 $110 = $231;
 $111 = $232;
 $112 = $233;
 $234 = $111;
 $109 = $234;
 $235 = $109;
 __ZdlPv($235);
 STACKTOP = sp;return ($211|0);
}
function __ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE7__cloneEPNS0_6__baseISA_EE($this,$__p) {
 $this = $this|0;
 $__p = $__p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $11 = sp + 96|0;
 $14 = sp + 319|0;
 $15 = sp + 318|0;
 $16 = sp + 317|0;
 $17 = sp + 316|0;
 $19 = sp + 260|0;
 $27 = sp + 88|0;
 $28 = sp + 80|0;
 $29 = sp + 72|0;
 $30 = sp + 64|0;
 $33 = sp + 315|0;
 $34 = sp + 314|0;
 $35 = sp + 313|0;
 $36 = sp + 312|0;
 $38 = sp + 216|0;
 $48 = sp + 56|0;
 $49 = sp + 48|0;
 $50 = sp + 40|0;
 $51 = sp + 32|0;
 $52 = sp + 24|0;
 $55 = sp + 311|0;
 $56 = sp + 168|0;
 $57 = sp + 164|0;
 $58 = sp + 310|0;
 $59 = sp + 309|0;
 $60 = sp + 16|0;
 $61 = sp + 8|0;
 $62 = sp;
 $67 = sp + 308|0;
 $68 = sp + 144|0;
 $69 = sp + 140|0;
 $72 = $this;
 $73 = $__p;
 $74 = $72;
 $75 = $73;
 $76 = ((($74)) + 4|0);
 $71 = $76;
 $77 = $71;
 $70 = $77;
 $78 = $70;
 $79 = ((($74)) + 4|0);
 $1 = $79;
 $80 = $1;
 $0 = $80;
 $81 = $0;
 $64 = $75;
 $65 = $78;
 $66 = $81;
 $82 = $64;
 $63 = $82;
 $83 = $63;
 $84 = 5836;
 HEAP32[$83>>2] = $84;
 $85 = 5792;
 HEAP32[$82>>2] = $85;
 $86 = ((($82)) + 4|0);
 $87 = $65;
 $20 = $87;
 $88 = $20;
 $18 = $88;
 $89 = $18;
 $12 = $19;
 $13 = $89;
 $90 = $12;
 $91 = $13;
 ;HEAP8[$8>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
 $6 = $90;
 $7 = $91;
 $92 = $6;
 $93 = $7;
 $5 = $93;
 $94 = $5;
 $3 = $92;
 $4 = $94;
 $95 = $3;
 $96 = $4;
 $2 = $96;
 $97 = $2;
 HEAP32[$95>>2] = $97;
 $98 = HEAP32[$19>>2]|0;
 HEAP32[$68>>2] = $98;
 $99 = $66;
 $39 = $99;
 $100 = $39;
 $37 = $100;
 $101 = $37;
 $31 = $38;
 $32 = $101;
 $102 = $31;
 $103 = $32;
 ;HEAP8[$27>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$34>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$33>>0]|0;
 $25 = $102;
 $26 = $103;
 $104 = $25;
 $105 = $26;
 $24 = $105;
 $106 = $24;
 $22 = $104;
 $23 = $106;
 $107 = $22;
 $108 = $23;
 $21 = $108;
 $109 = $21;
 HEAP32[$107>>2] = $109;
 $110 = HEAP32[$38>>2]|0;
 HEAP32[$69>>2] = $110;
 ;HEAP8[$60>>0]=HEAP8[$69>>0]|0;HEAP8[$60+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$60+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$60+3>>0]=HEAP8[$69+3>>0]|0;
 ;HEAP8[$61>>0]=HEAP8[$68>>0]|0;HEAP8[$61+1>>0]=HEAP8[$68+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[$68+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[$68+3>>0]|0;
 ;HEAP8[$62>>0]=HEAP8[$67>>0]|0;
 $54 = $86;
 $111 = $54;
 $53 = $61;
 $112 = $53;
 ;HEAP32[$56>>2]=HEAP32[$112>>2]|0;
 $40 = $60;
 $113 = $40;
 ;HEAP32[$57>>2]=HEAP32[$113>>2]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$58>>0]|0;
 ;HEAP8[$50>>0]=HEAP8[$57>>0]|0;HEAP8[$50+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$50+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$50+3>>0]=HEAP8[$57+3>>0]|0;
 ;HEAP8[$51>>0]=HEAP8[$56>>0]|0;HEAP8[$51+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$51+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$51+3>>0]=HEAP8[$56+3>>0]|0;
 ;HEAP8[$52>>0]=HEAP8[$55>>0]|0;
 $47 = $111;
 $114 = $47;
 $46 = $50;
 $115 = $46;
 $45 = $115;
 $116 = $45;
 $117 = HEAP32[$116>>2]|0;
 $41 = $117;
 $43 = $51;
 $118 = $43;
 $42 = $118;
 $119 = $42;
 $120 = HEAP32[$119>>2]|0;
 $44 = $120;
 $121 = $44;
 ;HEAP32[$114>>2]=HEAP32[$121>>2]|0;HEAP32[$114+4>>2]=HEAP32[$121+4>>2]|0;HEAP32[$114+8>>2]=HEAP32[$121+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE7destroyEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE18destroy_deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__a = sp + 36|0;
 $8 = $this;
 $9 = $8;
 $10 = ((($9)) + 4|0);
 $7 = $10;
 $11 = $7;
 $6 = $11;
 $12 = $6;
 $0 = $__a;
 $1 = $12;
 $3 = $__a;
 $4 = $9;
 $5 = 1;
 $13 = $4;
 $2 = $13;
 $14 = $2;
 __ZdlPv($14);
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEEclEv($this) {
 $this = $this|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp;
 $13 = sp + 73|0;
 $14 = sp + 72|0;
 $19 = $this;
 $20 = $19;
 $21 = ((($20)) + 4|0);
 $18 = $21;
 $22 = $18;
 $17 = $22;
 $23 = $17;
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $12 = $25;
 $26 = $12;
 $27 = ((($26)) + 8|0);
 $11 = $14;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $7 = $26;
 $8 = $27;
 $9 = $14;
 $28 = $7;
 $29 = $8;
 $6 = $29;
 $30 = $6;
 $5 = $30;
 $31 = $5;
 $32 = $9;
 $0 = $31;
 $1 = $32;
 $33 = $0;
 $3 = $28;
 $4 = $33;
 $34 = $3;
 $$field = HEAP32[$34>>2]|0;
 $$index1 = ((($34)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $35 = $4;
 $2 = $35;
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 $38 = $$field2 >> 1;
 $39 = (($37) + ($38)|0);
 $40 = $$field2 & 1;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = HEAP32[$39>>2]|0;
  $43 = (($42) + ($$field)|0);
  $44 = HEAP32[$43>>2]|0;
  $46 = $44;
  FUNCTION_TABLE_vi[$46 & 1023]($39);
  STACKTOP = sp;return;
 } else {
  $45 = $$field;
  $46 = $45;
  FUNCTION_TABLE_vi[$46 & 1023]($39);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE6targetERKSt9type_info($this,$__ti) {
 $this = $this|0;
 $__ti = $__ti|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $__ti;
 $7 = $5;
 $8 = $6;
 $2 = $8;
 $3 = 288;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)==($14|0);
 if ($15) {
  $16 = ((($7)) + 4|0);
  $1 = $16;
  $17 = $1;
  $0 = $17;
  $18 = $0;
  $4 = $18;
  $19 = $4;
  STACKTOP = sp;return ($19|0);
 } else {
  $4 = 0;
  $19 = $4;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE11target_typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (288|0);
}
function __ZNSt3__110__function6__baseIFvvEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__baseIFvvEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EE7__cloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__hold = 0, $__t$i = 0, $__tmp$i$i1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 564|0;
 $5 = sp + 136|0;
 $8 = sp + 552|0;
 $9 = sp + 544|0;
 $10 = sp + 128|0;
 $15 = sp + 520|0;
 $29 = sp + 120|0;
 $30 = sp + 112|0;
 $31 = sp + 104|0;
 $32 = sp + 96|0;
 $35 = sp + 597|0;
 $36 = sp + 596|0;
 $37 = sp + 595|0;
 $38 = sp + 594|0;
 $40 = sp + 448|0;
 $49 = sp + 88|0;
 $50 = sp + 80|0;
 $51 = sp + 72|0;
 $52 = sp + 64|0;
 $56 = sp + 593|0;
 $57 = sp + 592|0;
 $58 = sp + 591|0;
 $59 = sp + 590|0;
 $61 = sp + 396|0;
 $71 = sp + 56|0;
 $72 = sp + 48|0;
 $73 = sp + 40|0;
 $74 = sp + 32|0;
 $75 = sp + 24|0;
 $78 = sp + 589|0;
 $79 = sp + 348|0;
 $80 = sp + 344|0;
 $81 = sp + 588|0;
 $82 = sp + 587|0;
 $83 = sp + 16|0;
 $84 = sp + 8|0;
 $85 = sp;
 $90 = sp + 586|0;
 $91 = sp + 324|0;
 $92 = sp + 320|0;
 $__a = sp + 585|0;
 $__hold = sp + 160|0;
 $128 = sp + 152|0;
 $129 = sp + 584|0;
 $127 = $this;
 $131 = $127;
 $132 = ((($131)) + 4|0);
 $126 = $132;
 $133 = $126;
 $125 = $133;
 $134 = $125;
 $123 = $__a;
 $124 = $134;
 $102 = $__a;
 $103 = 1;
 $104 = 0;
 $135 = $103;
 $136 = $135<<4;
 $101 = $136;
 $137 = $101;
 $138 = (__Znwj($137)|0);
 $98 = $128;
 $99 = $__a;
 $100 = 1;
 $139 = $98;
 $140 = $99;
 HEAP32[$139>>2] = $140;
 $141 = ((($139)) + 4|0);
 $142 = $100;
 HEAP32[$141>>2] = $142;
 $12 = $__hold;
 $13 = $138;
 $14 = $128;
 $143 = $12;
 $144 = $13;
 $145 = $14;
 $11 = $145;
 $146 = $11;
 ;HEAP32[$15>>2]=HEAP32[$146>>2]|0;HEAP32[$15+4>>2]=HEAP32[$146+4>>2]|0;
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;HEAP8[$10+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$15+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[$15+4>>0]|0;HEAP8[$10+5>>0]=HEAP8[$15+5>>0]|0;HEAP8[$10+6>>0]=HEAP8[$15+6>>0]|0;HEAP8[$10+7>>0]=HEAP8[$15+7>>0]|0;
 $7 = $143;
 HEAP32[$8>>2] = $144;
 $147 = $7;
 $6 = $8;
 $148 = $6;
 $149 = HEAP32[$148>>2]|0;
 $0 = $10;
 $150 = $0;
 ;HEAP32[$9>>2]=HEAP32[$150>>2]|0;HEAP32[$9+4>>2]=HEAP32[$150+4>>2]|0;
 ;HEAP8[$5>>0]=HEAP8[$9>>0]|0;HEAP8[$5+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$9+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[$9+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[$9+5>>0]|0;HEAP8[$5+6>>0]=HEAP8[$9+6>>0]|0;HEAP8[$5+7>>0]=HEAP8[$9+7>>0]|0;
 $3 = $147;
 HEAP32[$4>>2] = $149;
 $151 = $3;
 $2 = $4;
 $152 = $2;
 $153 = HEAP32[$152>>2]|0;
 HEAP32[$151>>2] = $153;
 $154 = ((($151)) + 4|0);
 $1 = $5;
 $155 = $1;
 ;HEAP32[$154>>2]=HEAP32[$155>>2]|0;HEAP32[$154+4>>2]=HEAP32[$155+4>>2]|0;
 $18 = $__hold;
 $156 = $18;
 $17 = $156;
 $157 = $17;
 $16 = $157;
 $158 = $16;
 $159 = HEAP32[$158>>2]|0;
 $160 = ((($131)) + 4|0);
 $20 = $160;
 $161 = $20;
 $19 = $161;
 $162 = $19;
 $21 = $129;
 $22 = $__a;
 $87 = $159;
 $88 = $162;
 $89 = $129;
 $163 = $87;
 $86 = $163;
 $164 = $86;
 $165 = 5924;
 HEAP32[$164>>2] = $165;
 $166 = 5880;
 HEAP32[$163>>2] = $166;
 $167 = ((($163)) + 4|0);
 $168 = $88;
 $41 = $168;
 $169 = $41;
 $39 = $169;
 $170 = $39;
 $33 = $40;
 $34 = $170;
 $171 = $33;
 $172 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $171;
 $28 = $172;
 $173 = $27;
 $174 = $28;
 $26 = $174;
 $175 = $26;
 $24 = $173;
 $25 = $175;
 $176 = $24;
 $177 = $25;
 $23 = $177;
 $178 = $23;
 HEAP32[$176>>2] = $178;
 $179 = HEAP32[$40>>2]|0;
 HEAP32[$91>>2] = $179;
 $180 = $89;
 $42 = $180;
 $181 = $42;
 $62 = $181;
 $182 = $62;
 $60 = $182;
 $183 = $60;
 $54 = $61;
 $55 = $183;
 $184 = $54;
 $185 = $55;
 $53 = $185;
 $186 = $53;
 ;HEAP8[$49>>0]=HEAP8[$59>>0]|0;
 ;HEAP8[$50>>0]=HEAP8[$58>>0]|0;
 ;HEAP8[$51>>0]=HEAP8[$57>>0]|0;
 ;HEAP8[$52>>0]=HEAP8[$56>>0]|0;
 $47 = $184;
 $48 = $186;
 $187 = $47;
 $188 = $48;
 $46 = $188;
 $189 = $46;
 $44 = $187;
 $45 = $189;
 $190 = $44;
 $191 = $45;
 $43 = $191;
 $192 = $43;
 HEAP32[$190>>2] = $192;
 $193 = HEAP32[$61>>2]|0;
 HEAP32[$92>>2] = $193;
 ;HEAP8[$83>>0]=HEAP8[$92>>0]|0;HEAP8[$83+1>>0]=HEAP8[$92+1>>0]|0;HEAP8[$83+2>>0]=HEAP8[$92+2>>0]|0;HEAP8[$83+3>>0]=HEAP8[$92+3>>0]|0;
 ;HEAP8[$84>>0]=HEAP8[$91>>0]|0;HEAP8[$84+1>>0]=HEAP8[$91+1>>0]|0;HEAP8[$84+2>>0]=HEAP8[$91+2>>0]|0;HEAP8[$84+3>>0]=HEAP8[$91+3>>0]|0;
 ;HEAP8[$85>>0]=HEAP8[$90>>0]|0;
 $77 = $167;
 $194 = $77;
 $76 = $84;
 $195 = $76;
 ;HEAP32[$79>>2]=HEAP32[$195>>2]|0;
 $63 = $83;
 $196 = $63;
 ;HEAP32[$80>>2]=HEAP32[$196>>2]|0;
 ;HEAP8[$71>>0]=HEAP8[$82>>0]|0;
 ;HEAP8[$72>>0]=HEAP8[$81>>0]|0;
 ;HEAP8[$73>>0]=HEAP8[$80>>0]|0;HEAP8[$73+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$73+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$73+3>>0]=HEAP8[$80+3>>0]|0;
 ;HEAP8[$74>>0]=HEAP8[$79>>0]|0;HEAP8[$74+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$74+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$74+3>>0]=HEAP8[$79+3>>0]|0;
 ;HEAP8[$75>>0]=HEAP8[$78>>0]|0;
 $70 = $194;
 $197 = $70;
 $69 = $73;
 $198 = $69;
 $68 = $198;
 $199 = $68;
 $200 = HEAP32[$199>>2]|0;
 $64 = $200;
 $66 = $74;
 $201 = $66;
 $65 = $201;
 $202 = $65;
 $203 = HEAP32[$202>>2]|0;
 $67 = $203;
 $204 = $67;
 ;HEAP32[$197>>2]=HEAP32[$204>>2]|0;HEAP32[$197+4>>2]=HEAP32[$204+4>>2]|0;HEAP32[$197+8>>2]=HEAP32[$204+8>>2]|0;
 $97 = $__hold;
 $205 = $97;
 $96 = $205;
 $206 = $96;
 $95 = $206;
 $207 = $95;
 $208 = HEAP32[$207>>2]|0;
 $__t$i = $208;
 $94 = $205;
 $209 = $94;
 $93 = $209;
 $210 = $93;
 HEAP32[$210>>2] = 0;
 $211 = $__t$i;
 $130 = 1;
 $122 = $__hold;
 $212 = $122;
 $120 = $212;
 $121 = 0;
 $213 = $120;
 $119 = $213;
 $214 = $119;
 $118 = $214;
 $215 = $118;
 $216 = HEAP32[$215>>2]|0;
 $__tmp$i$i1 = $216;
 $217 = $121;
 $108 = $213;
 $218 = $108;
 $107 = $218;
 $219 = $107;
 HEAP32[$219>>2] = $217;
 $220 = $__tmp$i$i1;
 $221 = ($220|0)!=(0|0);
 if (!($221)) {
  STACKTOP = sp;return ($211|0);
 }
 $106 = $213;
 $222 = $106;
 $105 = $222;
 $223 = $105;
 $224 = ((($223)) + 4|0);
 $225 = $__tmp$i$i1;
 $116 = $224;
 $117 = $225;
 $226 = $116;
 $227 = HEAP32[$226>>2]|0;
 $228 = $117;
 $229 = ((($226)) + 4|0);
 $230 = HEAP32[$229>>2]|0;
 $113 = $227;
 $114 = $228;
 $115 = $230;
 $231 = $113;
 $232 = $114;
 $233 = $115;
 $110 = $231;
 $111 = $232;
 $112 = $233;
 $234 = $111;
 $109 = $234;
 $235 = $109;
 __ZdlPv($235);
 STACKTOP = sp;return ($211|0);
}
function __ZNKSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EE7__cloneEPNS0_6__baseISI_EE($this,$__p) {
 $this = $this|0;
 $__p = $__p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $11 = sp + 96|0;
 $14 = sp + 319|0;
 $15 = sp + 318|0;
 $16 = sp + 317|0;
 $17 = sp + 316|0;
 $19 = sp + 260|0;
 $27 = sp + 88|0;
 $28 = sp + 80|0;
 $29 = sp + 72|0;
 $30 = sp + 64|0;
 $33 = sp + 315|0;
 $34 = sp + 314|0;
 $35 = sp + 313|0;
 $36 = sp + 312|0;
 $38 = sp + 216|0;
 $48 = sp + 56|0;
 $49 = sp + 48|0;
 $50 = sp + 40|0;
 $51 = sp + 32|0;
 $52 = sp + 24|0;
 $55 = sp + 311|0;
 $56 = sp + 168|0;
 $57 = sp + 164|0;
 $58 = sp + 310|0;
 $59 = sp + 309|0;
 $60 = sp + 16|0;
 $61 = sp + 8|0;
 $62 = sp;
 $67 = sp + 308|0;
 $68 = sp + 144|0;
 $69 = sp + 140|0;
 $72 = $this;
 $73 = $__p;
 $74 = $72;
 $75 = $73;
 $76 = ((($74)) + 4|0);
 $71 = $76;
 $77 = $71;
 $70 = $77;
 $78 = $70;
 $79 = ((($74)) + 4|0);
 $1 = $79;
 $80 = $1;
 $0 = $80;
 $81 = $0;
 $64 = $75;
 $65 = $78;
 $66 = $81;
 $82 = $64;
 $63 = $82;
 $83 = $63;
 $84 = 5924;
 HEAP32[$83>>2] = $84;
 $85 = 5880;
 HEAP32[$82>>2] = $85;
 $86 = ((($82)) + 4|0);
 $87 = $65;
 $20 = $87;
 $88 = $20;
 $18 = $88;
 $89 = $18;
 $12 = $19;
 $13 = $89;
 $90 = $12;
 $91 = $13;
 ;HEAP8[$8>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
 $6 = $90;
 $7 = $91;
 $92 = $6;
 $93 = $7;
 $5 = $93;
 $94 = $5;
 $3 = $92;
 $4 = $94;
 $95 = $3;
 $96 = $4;
 $2 = $96;
 $97 = $2;
 HEAP32[$95>>2] = $97;
 $98 = HEAP32[$19>>2]|0;
 HEAP32[$68>>2] = $98;
 $99 = $66;
 $39 = $99;
 $100 = $39;
 $37 = $100;
 $101 = $37;
 $31 = $38;
 $32 = $101;
 $102 = $31;
 $103 = $32;
 ;HEAP8[$27>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$34>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$33>>0]|0;
 $25 = $102;
 $26 = $103;
 $104 = $25;
 $105 = $26;
 $24 = $105;
 $106 = $24;
 $22 = $104;
 $23 = $106;
 $107 = $22;
 $108 = $23;
 $21 = $108;
 $109 = $21;
 HEAP32[$107>>2] = $109;
 $110 = HEAP32[$38>>2]|0;
 HEAP32[$69>>2] = $110;
 ;HEAP8[$60>>0]=HEAP8[$69>>0]|0;HEAP8[$60+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$60+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$60+3>>0]=HEAP8[$69+3>>0]|0;
 ;HEAP8[$61>>0]=HEAP8[$68>>0]|0;HEAP8[$61+1>>0]=HEAP8[$68+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[$68+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[$68+3>>0]|0;
 ;HEAP8[$62>>0]=HEAP8[$67>>0]|0;
 $54 = $86;
 $111 = $54;
 $53 = $61;
 $112 = $53;
 ;HEAP32[$56>>2]=HEAP32[$112>>2]|0;
 $40 = $60;
 $113 = $40;
 ;HEAP32[$57>>2]=HEAP32[$113>>2]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$58>>0]|0;
 ;HEAP8[$50>>0]=HEAP8[$57>>0]|0;HEAP8[$50+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$50+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$50+3>>0]=HEAP8[$57+3>>0]|0;
 ;HEAP8[$51>>0]=HEAP8[$56>>0]|0;HEAP8[$51+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$51+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$51+3>>0]=HEAP8[$56+3>>0]|0;
 ;HEAP8[$52>>0]=HEAP8[$55>>0]|0;
 $47 = $111;
 $114 = $47;
 $46 = $50;
 $115 = $46;
 $45 = $115;
 $116 = $45;
 $117 = HEAP32[$116>>2]|0;
 $41 = $117;
 $43 = $51;
 $118 = $43;
 $42 = $118;
 $119 = $42;
 $120 = HEAP32[$119>>2]|0;
 $44 = $120;
 $121 = $44;
 ;HEAP32[$114>>2]=HEAP32[$121>>2]|0;HEAP32[$114+4>>2]=HEAP32[$121+4>>2]|0;HEAP32[$114+8>>2]=HEAP32[$121+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EE7destroyEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EE18destroy_deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__a = sp + 36|0;
 $8 = $this;
 $9 = $8;
 $10 = ((($9)) + 4|0);
 $7 = $10;
 $11 = $7;
 $6 = $11;
 $12 = $6;
 $0 = $__a;
 $1 = $12;
 $3 = $__a;
 $4 = $9;
 $5 = 1;
 $13 = $4;
 $2 = $13;
 $14 = $2;
 __ZdlPv($14);
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EEclEOiOS5_($this,$__arg,$__arg1) {
 $this = $this|0;
 $__arg = $__arg|0;
 $__arg1 = $__arg1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Indx$i$i$i$i = 0, $_Indx$i1$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 32|0;
 $17 = sp + 24|0;
 $18 = sp + 16|0;
 $19 = sp + 8|0;
 $24 = sp + 304|0;
 $25 = sp + 303|0;
 $26 = sp + 302|0;
 $27 = sp + 301|0;
 $57 = sp;
 $62 = sp + 300|0;
 $63 = sp + 72|0;
 $70 = $this;
 $71 = $__arg;
 $72 = $__arg1;
 $73 = $70;
 $74 = ((($73)) + 4|0);
 $69 = $74;
 $75 = $69;
 $68 = $75;
 $76 = $68;
 $77 = $71;
 $1 = $77;
 $78 = $1;
 $79 = $72;
 $0 = $79;
 $80 = $0;
 $65 = $76;
 $66 = $78;
 $67 = $80;
 $81 = $65;
 $64 = $81;
 $82 = $64;
 $83 = $66;
 $3 = $83;
 $84 = $3;
 $85 = $67;
 $2 = $85;
 $86 = $2;
 $59 = $82;
 $60 = $84;
 $61 = $86;
 $87 = $59;
 $88 = ((($87)) + 8|0);
 $89 = $60;
 $58 = $89;
 $90 = $58;
 $91 = $61;
 $28 = $91;
 $92 = $28;
 $21 = $63;
 $22 = $90;
 $23 = $92;
 $93 = $21;
 $94 = $22;
 $20 = $94;
 $95 = $20;
 $96 = $23;
 $4 = $96;
 $97 = $4;
 ;HEAP8[$16>>0]=HEAP8[$27>>0]|0;
 ;HEAP8[$17>>0]=HEAP8[$26>>0]|0;
 ;HEAP8[$18>>0]=HEAP8[$25>>0]|0;
 ;HEAP8[$19>>0]=HEAP8[$24>>0]|0;
 $13 = $93;
 $14 = $95;
 $15 = $97;
 $98 = $13;
 $99 = $14;
 $12 = $99;
 $100 = $12;
 $6 = $98;
 $7 = $100;
 $101 = $6;
 $102 = $7;
 $5 = $102;
 $103 = $5;
 HEAP32[$101>>2] = $103;
 $104 = ((($98)) + 4|0);
 $105 = $15;
 $8 = $105;
 $106 = $8;
 $10 = $104;
 $11 = $106;
 $107 = $10;
 $108 = $11;
 $9 = $108;
 $109 = $9;
 HEAP32[$107>>2] = $109;
 ;HEAP8[$57>>0]=HEAP8[$62>>0]|0;
 $54 = $87;
 $55 = $88;
 $56 = $63;
 $110 = $54;
 $111 = $55;
 $53 = $111;
 $112 = $53;
 $52 = $112;
 $113 = $52;
 $114 = $56;
 $43 = $113;
 $44 = $114;
 $115 = $43;
 $116 = $55;
 $30 = $116;
 $117 = $30;
 $29 = $117;
 $118 = $29;
 $119 = $56;
 $34 = $118;
 $35 = $119;
 $_Indx$i1$i$i$i = 0;
 $120 = $35;
 $33 = $120;
 $121 = $33;
 $32 = $121;
 $122 = $32;
 $123 = HEAP32[$122>>2]|0;
 $31 = $123;
 $124 = $31;
 $125 = $55;
 $37 = $125;
 $126 = $37;
 $36 = $126;
 $127 = $36;
 $128 = $56;
 $41 = $127;
 $42 = $128;
 $_Indx$i$i$i$i = 1;
 $129 = $42;
 $40 = $129;
 $130 = $40;
 $131 = ((($130)) + 4|0);
 $39 = $131;
 $132 = $39;
 $133 = HEAP32[$132>>2]|0;
 $38 = $133;
 $134 = $38;
 $48 = $110;
 $49 = $115;
 $50 = $124;
 $51 = $134;
 $135 = $48;
 $$field = HEAP32[$135>>2]|0;
 $$index1 = ((($135)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $136 = $49;
 $47 = $136;
 $137 = $47;
 $138 = HEAP32[$137>>2]|0;
 $139 = $$field2 >> 1;
 $140 = (($138) + ($139)|0);
 $141 = $$field2 & 1;
 $142 = ($141|0)!=(0);
 if ($142) {
  $143 = HEAP32[$140>>2]|0;
  $144 = (($143) + ($$field)|0);
  $145 = HEAP32[$144>>2]|0;
  $153 = $145;
  $147 = $50;
  $46 = $147;
  $148 = $46;
  $149 = HEAP32[$148>>2]|0;
  $150 = $51;
  $45 = $150;
  $151 = $45;
  $152 = HEAP32[$151>>2]|0;
  FUNCTION_TABLE_viii[$153 & 1023]($140,$149,$152);
  STACKTOP = sp;return;
 } else {
  $146 = $$field;
  $153 = $146;
  $147 = $50;
  $46 = $147;
  $148 = $46;
  $149 = HEAP32[$148>>2]|0;
  $150 = $51;
  $45 = $150;
  $151 = $45;
  $152 = HEAP32[$151>>2]|0;
  FUNCTION_TABLE_viii[$153 & 1023]($140,$149,$152);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EE6targetERKSt9type_info($this,$__ti) {
 $this = $this|0;
 $__ti = $__ti|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $__ti;
 $7 = $5;
 $8 = $6;
 $2 = $8;
 $3 = 336;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)==($14|0);
 if ($15) {
  $16 = ((($7)) + 4|0);
  $1 = $16;
  $17 = $1;
  $0 = $17;
  $18 = $0;
  $4 = $18;
  $19 = $4;
  STACKTOP = sp;return ($19|0);
 } else {
  $4 = 0;
  $19 = $4;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZNKSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EE11target_typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (336|0);
}
function __ZNSt3__110__function6__baseIFviPKcEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__baseIFviPKcEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEE7__cloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__hold = 0, $__t$i = 0, $__tmp$i$i1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 564|0;
 $5 = sp + 136|0;
 $8 = sp + 552|0;
 $9 = sp + 544|0;
 $10 = sp + 128|0;
 $15 = sp + 520|0;
 $29 = sp + 120|0;
 $30 = sp + 112|0;
 $31 = sp + 104|0;
 $32 = sp + 96|0;
 $35 = sp + 597|0;
 $36 = sp + 596|0;
 $37 = sp + 595|0;
 $38 = sp + 594|0;
 $40 = sp + 448|0;
 $49 = sp + 88|0;
 $50 = sp + 80|0;
 $51 = sp + 72|0;
 $52 = sp + 64|0;
 $56 = sp + 593|0;
 $57 = sp + 592|0;
 $58 = sp + 591|0;
 $59 = sp + 590|0;
 $61 = sp + 396|0;
 $71 = sp + 56|0;
 $72 = sp + 48|0;
 $73 = sp + 40|0;
 $74 = sp + 32|0;
 $75 = sp + 24|0;
 $78 = sp + 589|0;
 $79 = sp + 348|0;
 $80 = sp + 344|0;
 $81 = sp + 588|0;
 $82 = sp + 587|0;
 $83 = sp + 16|0;
 $84 = sp + 8|0;
 $85 = sp;
 $90 = sp + 586|0;
 $91 = sp + 324|0;
 $92 = sp + 320|0;
 $__a = sp + 585|0;
 $__hold = sp + 160|0;
 $128 = sp + 152|0;
 $129 = sp + 584|0;
 $127 = $this;
 $131 = $127;
 $132 = ((($131)) + 4|0);
 $126 = $132;
 $133 = $126;
 $125 = $133;
 $134 = $125;
 $123 = $__a;
 $124 = $134;
 $102 = $__a;
 $103 = 1;
 $104 = 0;
 $135 = $103;
 $136 = $135<<4;
 $101 = $136;
 $137 = $101;
 $138 = (__Znwj($137)|0);
 $98 = $128;
 $99 = $__a;
 $100 = 1;
 $139 = $98;
 $140 = $99;
 HEAP32[$139>>2] = $140;
 $141 = ((($139)) + 4|0);
 $142 = $100;
 HEAP32[$141>>2] = $142;
 $12 = $__hold;
 $13 = $138;
 $14 = $128;
 $143 = $12;
 $144 = $13;
 $145 = $14;
 $11 = $145;
 $146 = $11;
 ;HEAP32[$15>>2]=HEAP32[$146>>2]|0;HEAP32[$15+4>>2]=HEAP32[$146+4>>2]|0;
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;HEAP8[$10+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$15+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[$15+4>>0]|0;HEAP8[$10+5>>0]=HEAP8[$15+5>>0]|0;HEAP8[$10+6>>0]=HEAP8[$15+6>>0]|0;HEAP8[$10+7>>0]=HEAP8[$15+7>>0]|0;
 $7 = $143;
 HEAP32[$8>>2] = $144;
 $147 = $7;
 $6 = $8;
 $148 = $6;
 $149 = HEAP32[$148>>2]|0;
 $0 = $10;
 $150 = $0;
 ;HEAP32[$9>>2]=HEAP32[$150>>2]|0;HEAP32[$9+4>>2]=HEAP32[$150+4>>2]|0;
 ;HEAP8[$5>>0]=HEAP8[$9>>0]|0;HEAP8[$5+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$9+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[$9+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[$9+5>>0]|0;HEAP8[$5+6>>0]=HEAP8[$9+6>>0]|0;HEAP8[$5+7>>0]=HEAP8[$9+7>>0]|0;
 $3 = $147;
 HEAP32[$4>>2] = $149;
 $151 = $3;
 $2 = $4;
 $152 = $2;
 $153 = HEAP32[$152>>2]|0;
 HEAP32[$151>>2] = $153;
 $154 = ((($151)) + 4|0);
 $1 = $5;
 $155 = $1;
 ;HEAP32[$154>>2]=HEAP32[$155>>2]|0;HEAP32[$154+4>>2]=HEAP32[$155+4>>2]|0;
 $18 = $__hold;
 $156 = $18;
 $17 = $156;
 $157 = $17;
 $16 = $157;
 $158 = $16;
 $159 = HEAP32[$158>>2]|0;
 $160 = ((($131)) + 4|0);
 $20 = $160;
 $161 = $20;
 $19 = $161;
 $162 = $19;
 $21 = $129;
 $22 = $__a;
 $87 = $159;
 $88 = $162;
 $89 = $129;
 $163 = $87;
 $86 = $163;
 $164 = $86;
 $165 = 6012;
 HEAP32[$164>>2] = $165;
 $166 = 5968;
 HEAP32[$163>>2] = $166;
 $167 = ((($163)) + 4|0);
 $168 = $88;
 $41 = $168;
 $169 = $41;
 $39 = $169;
 $170 = $39;
 $33 = $40;
 $34 = $170;
 $171 = $33;
 $172 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $171;
 $28 = $172;
 $173 = $27;
 $174 = $28;
 $26 = $174;
 $175 = $26;
 $24 = $173;
 $25 = $175;
 $176 = $24;
 $177 = $25;
 $23 = $177;
 $178 = $23;
 HEAP32[$176>>2] = $178;
 $179 = HEAP32[$40>>2]|0;
 HEAP32[$91>>2] = $179;
 $180 = $89;
 $42 = $180;
 $181 = $42;
 $62 = $181;
 $182 = $62;
 $60 = $182;
 $183 = $60;
 $54 = $61;
 $55 = $183;
 $184 = $54;
 $185 = $55;
 $53 = $185;
 $186 = $53;
 ;HEAP8[$49>>0]=HEAP8[$59>>0]|0;
 ;HEAP8[$50>>0]=HEAP8[$58>>0]|0;
 ;HEAP8[$51>>0]=HEAP8[$57>>0]|0;
 ;HEAP8[$52>>0]=HEAP8[$56>>0]|0;
 $47 = $184;
 $48 = $186;
 $187 = $47;
 $188 = $48;
 $46 = $188;
 $189 = $46;
 $44 = $187;
 $45 = $189;
 $190 = $44;
 $191 = $45;
 $43 = $191;
 $192 = $43;
 HEAP32[$190>>2] = $192;
 $193 = HEAP32[$61>>2]|0;
 HEAP32[$92>>2] = $193;
 ;HEAP8[$83>>0]=HEAP8[$92>>0]|0;HEAP8[$83+1>>0]=HEAP8[$92+1>>0]|0;HEAP8[$83+2>>0]=HEAP8[$92+2>>0]|0;HEAP8[$83+3>>0]=HEAP8[$92+3>>0]|0;
 ;HEAP8[$84>>0]=HEAP8[$91>>0]|0;HEAP8[$84+1>>0]=HEAP8[$91+1>>0]|0;HEAP8[$84+2>>0]=HEAP8[$91+2>>0]|0;HEAP8[$84+3>>0]=HEAP8[$91+3>>0]|0;
 ;HEAP8[$85>>0]=HEAP8[$90>>0]|0;
 $77 = $167;
 $194 = $77;
 $76 = $84;
 $195 = $76;
 ;HEAP32[$79>>2]=HEAP32[$195>>2]|0;
 $63 = $83;
 $196 = $63;
 ;HEAP32[$80>>2]=HEAP32[$196>>2]|0;
 ;HEAP8[$71>>0]=HEAP8[$82>>0]|0;
 ;HEAP8[$72>>0]=HEAP8[$81>>0]|0;
 ;HEAP8[$73>>0]=HEAP8[$80>>0]|0;HEAP8[$73+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$73+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$73+3>>0]=HEAP8[$80+3>>0]|0;
 ;HEAP8[$74>>0]=HEAP8[$79>>0]|0;HEAP8[$74+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$74+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$74+3>>0]=HEAP8[$79+3>>0]|0;
 ;HEAP8[$75>>0]=HEAP8[$78>>0]|0;
 $70 = $194;
 $197 = $70;
 $69 = $73;
 $198 = $69;
 $68 = $198;
 $199 = $68;
 $200 = HEAP32[$199>>2]|0;
 $64 = $200;
 $66 = $74;
 $201 = $66;
 $65 = $201;
 $202 = $65;
 $203 = HEAP32[$202>>2]|0;
 $67 = $203;
 $204 = $67;
 ;HEAP32[$197>>2]=HEAP32[$204>>2]|0;HEAP32[$197+4>>2]=HEAP32[$204+4>>2]|0;HEAP32[$197+8>>2]=HEAP32[$204+8>>2]|0;
 $97 = $__hold;
 $205 = $97;
 $96 = $205;
 $206 = $96;
 $95 = $206;
 $207 = $95;
 $208 = HEAP32[$207>>2]|0;
 $__t$i = $208;
 $94 = $205;
 $209 = $94;
 $93 = $209;
 $210 = $93;
 HEAP32[$210>>2] = 0;
 $211 = $__t$i;
 $130 = 1;
 $122 = $__hold;
 $212 = $122;
 $120 = $212;
 $121 = 0;
 $213 = $120;
 $119 = $213;
 $214 = $119;
 $118 = $214;
 $215 = $118;
 $216 = HEAP32[$215>>2]|0;
 $__tmp$i$i1 = $216;
 $217 = $121;
 $108 = $213;
 $218 = $108;
 $107 = $218;
 $219 = $107;
 HEAP32[$219>>2] = $217;
 $220 = $__tmp$i$i1;
 $221 = ($220|0)!=(0|0);
 if (!($221)) {
  STACKTOP = sp;return ($211|0);
 }
 $106 = $213;
 $222 = $106;
 $105 = $222;
 $223 = $105;
 $224 = ((($223)) + 4|0);
 $225 = $__tmp$i$i1;
 $116 = $224;
 $117 = $225;
 $226 = $116;
 $227 = HEAP32[$226>>2]|0;
 $228 = $117;
 $229 = ((($226)) + 4|0);
 $230 = HEAP32[$229>>2]|0;
 $113 = $227;
 $114 = $228;
 $115 = $230;
 $231 = $113;
 $232 = $114;
 $233 = $115;
 $110 = $231;
 $111 = $232;
 $112 = $233;
 $234 = $111;
 $109 = $234;
 $235 = $109;
 __ZdlPv($235);
 STACKTOP = sp;return ($211|0);
}
function __ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEE7__cloneEPNS0_6__baseISI_EE($this,$__p) {
 $this = $this|0;
 $__p = $__p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $11 = sp + 96|0;
 $14 = sp + 319|0;
 $15 = sp + 318|0;
 $16 = sp + 317|0;
 $17 = sp + 316|0;
 $19 = sp + 260|0;
 $27 = sp + 88|0;
 $28 = sp + 80|0;
 $29 = sp + 72|0;
 $30 = sp + 64|0;
 $33 = sp + 315|0;
 $34 = sp + 314|0;
 $35 = sp + 313|0;
 $36 = sp + 312|0;
 $38 = sp + 216|0;
 $48 = sp + 56|0;
 $49 = sp + 48|0;
 $50 = sp + 40|0;
 $51 = sp + 32|0;
 $52 = sp + 24|0;
 $55 = sp + 311|0;
 $56 = sp + 168|0;
 $57 = sp + 164|0;
 $58 = sp + 310|0;
 $59 = sp + 309|0;
 $60 = sp + 16|0;
 $61 = sp + 8|0;
 $62 = sp;
 $67 = sp + 308|0;
 $68 = sp + 144|0;
 $69 = sp + 140|0;
 $72 = $this;
 $73 = $__p;
 $74 = $72;
 $75 = $73;
 $76 = ((($74)) + 4|0);
 $71 = $76;
 $77 = $71;
 $70 = $77;
 $78 = $70;
 $79 = ((($74)) + 4|0);
 $1 = $79;
 $80 = $1;
 $0 = $80;
 $81 = $0;
 $64 = $75;
 $65 = $78;
 $66 = $81;
 $82 = $64;
 $63 = $82;
 $83 = $63;
 $84 = 6012;
 HEAP32[$83>>2] = $84;
 $85 = 5968;
 HEAP32[$82>>2] = $85;
 $86 = ((($82)) + 4|0);
 $87 = $65;
 $20 = $87;
 $88 = $20;
 $18 = $88;
 $89 = $18;
 $12 = $19;
 $13 = $89;
 $90 = $12;
 $91 = $13;
 ;HEAP8[$8>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
 $6 = $90;
 $7 = $91;
 $92 = $6;
 $93 = $7;
 $5 = $93;
 $94 = $5;
 $3 = $92;
 $4 = $94;
 $95 = $3;
 $96 = $4;
 $2 = $96;
 $97 = $2;
 HEAP32[$95>>2] = $97;
 $98 = HEAP32[$19>>2]|0;
 HEAP32[$68>>2] = $98;
 $99 = $66;
 $39 = $99;
 $100 = $39;
 $37 = $100;
 $101 = $37;
 $31 = $38;
 $32 = $101;
 $102 = $31;
 $103 = $32;
 ;HEAP8[$27>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$34>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$33>>0]|0;
 $25 = $102;
 $26 = $103;
 $104 = $25;
 $105 = $26;
 $24 = $105;
 $106 = $24;
 $22 = $104;
 $23 = $106;
 $107 = $22;
 $108 = $23;
 $21 = $108;
 $109 = $21;
 HEAP32[$107>>2] = $109;
 $110 = HEAP32[$38>>2]|0;
 HEAP32[$69>>2] = $110;
 ;HEAP8[$60>>0]=HEAP8[$69>>0]|0;HEAP8[$60+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$60+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$60+3>>0]=HEAP8[$69+3>>0]|0;
 ;HEAP8[$61>>0]=HEAP8[$68>>0]|0;HEAP8[$61+1>>0]=HEAP8[$68+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[$68+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[$68+3>>0]|0;
 ;HEAP8[$62>>0]=HEAP8[$67>>0]|0;
 $54 = $86;
 $111 = $54;
 $53 = $61;
 $112 = $53;
 ;HEAP32[$56>>2]=HEAP32[$112>>2]|0;
 $40 = $60;
 $113 = $40;
 ;HEAP32[$57>>2]=HEAP32[$113>>2]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$58>>0]|0;
 ;HEAP8[$50>>0]=HEAP8[$57>>0]|0;HEAP8[$50+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$50+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$50+3>>0]=HEAP8[$57+3>>0]|0;
 ;HEAP8[$51>>0]=HEAP8[$56>>0]|0;HEAP8[$51+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$51+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$51+3>>0]=HEAP8[$56+3>>0]|0;
 ;HEAP8[$52>>0]=HEAP8[$55>>0]|0;
 $47 = $111;
 $114 = $47;
 $46 = $50;
 $115 = $46;
 $45 = $115;
 $116 = $45;
 $117 = HEAP32[$116>>2]|0;
 $41 = $117;
 $43 = $51;
 $118 = $43;
 $42 = $118;
 $119 = $42;
 $120 = HEAP32[$119>>2]|0;
 $44 = $120;
 $121 = $44;
 ;HEAP32[$114>>2]=HEAP32[$121>>2]|0;HEAP32[$114+4>>2]=HEAP32[$121+4>>2]|0;HEAP32[$114+8>>2]=HEAP32[$121+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEE7destroyEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEE18destroy_deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__a = sp + 36|0;
 $8 = $this;
 $9 = $8;
 $10 = ((($9)) + 4|0);
 $7 = $10;
 $11 = $7;
 $6 = $11;
 $12 = $6;
 $0 = $__a;
 $1 = $12;
 $3 = $__a;
 $4 = $9;
 $5 = 1;
 $13 = $4;
 $2 = $13;
 $14 = $2;
 __ZdlPv($14);
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEEclEOS5_Oi($this,$__arg,$__arg1) {
 $this = $this|0;
 $__arg = $__arg|0;
 $__arg1 = $__arg1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Indx$i$i$i$i = 0, $_Indx$i1$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 32|0;
 $17 = sp + 24|0;
 $18 = sp + 16|0;
 $19 = sp + 8|0;
 $24 = sp + 304|0;
 $25 = sp + 303|0;
 $26 = sp + 302|0;
 $27 = sp + 301|0;
 $57 = sp;
 $62 = sp + 300|0;
 $63 = sp + 72|0;
 $70 = $this;
 $71 = $__arg;
 $72 = $__arg1;
 $73 = $70;
 $74 = ((($73)) + 4|0);
 $69 = $74;
 $75 = $69;
 $68 = $75;
 $76 = $68;
 $77 = $71;
 $1 = $77;
 $78 = $1;
 $79 = $72;
 $0 = $79;
 $80 = $0;
 $65 = $76;
 $66 = $78;
 $67 = $80;
 $81 = $65;
 $64 = $81;
 $82 = $64;
 $83 = $66;
 $3 = $83;
 $84 = $3;
 $85 = $67;
 $2 = $85;
 $86 = $2;
 $59 = $82;
 $60 = $84;
 $61 = $86;
 $87 = $59;
 $88 = ((($87)) + 8|0);
 $89 = $60;
 $58 = $89;
 $90 = $58;
 $91 = $61;
 $28 = $91;
 $92 = $28;
 $21 = $63;
 $22 = $90;
 $23 = $92;
 $93 = $21;
 $94 = $22;
 $20 = $94;
 $95 = $20;
 $96 = $23;
 $4 = $96;
 $97 = $4;
 ;HEAP8[$16>>0]=HEAP8[$27>>0]|0;
 ;HEAP8[$17>>0]=HEAP8[$26>>0]|0;
 ;HEAP8[$18>>0]=HEAP8[$25>>0]|0;
 ;HEAP8[$19>>0]=HEAP8[$24>>0]|0;
 $13 = $93;
 $14 = $95;
 $15 = $97;
 $98 = $13;
 $99 = $14;
 $12 = $99;
 $100 = $12;
 $6 = $98;
 $7 = $100;
 $101 = $6;
 $102 = $7;
 $5 = $102;
 $103 = $5;
 HEAP32[$101>>2] = $103;
 $104 = ((($98)) + 4|0);
 $105 = $15;
 $8 = $105;
 $106 = $8;
 $10 = $104;
 $11 = $106;
 $107 = $10;
 $108 = $11;
 $9 = $108;
 $109 = $9;
 HEAP32[$107>>2] = $109;
 ;HEAP8[$57>>0]=HEAP8[$62>>0]|0;
 $54 = $87;
 $55 = $88;
 $56 = $63;
 $110 = $54;
 $111 = $55;
 $53 = $111;
 $112 = $53;
 $52 = $112;
 $113 = $52;
 $114 = $56;
 $43 = $113;
 $44 = $114;
 $115 = $43;
 $116 = $55;
 $30 = $116;
 $117 = $30;
 $29 = $117;
 $118 = $29;
 $119 = $56;
 $34 = $118;
 $35 = $119;
 $_Indx$i1$i$i$i = 0;
 $120 = $35;
 $33 = $120;
 $121 = $33;
 $32 = $121;
 $122 = $32;
 $123 = HEAP32[$122>>2]|0;
 $31 = $123;
 $124 = $31;
 $125 = $55;
 $37 = $125;
 $126 = $37;
 $36 = $126;
 $127 = $36;
 $128 = $56;
 $41 = $127;
 $42 = $128;
 $_Indx$i$i$i$i = 1;
 $129 = $42;
 $40 = $129;
 $130 = $40;
 $131 = ((($130)) + 4|0);
 $39 = $131;
 $132 = $39;
 $133 = HEAP32[$132>>2]|0;
 $38 = $133;
 $134 = $38;
 $48 = $110;
 $49 = $115;
 $50 = $124;
 $51 = $134;
 $135 = $48;
 $$field = HEAP32[$135>>2]|0;
 $$index1 = ((($135)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $136 = $49;
 $47 = $136;
 $137 = $47;
 $138 = HEAP32[$137>>2]|0;
 $139 = $$field2 >> 1;
 $140 = (($138) + ($139)|0);
 $141 = $$field2 & 1;
 $142 = ($141|0)!=(0);
 if ($142) {
  $143 = HEAP32[$140>>2]|0;
  $144 = (($143) + ($$field)|0);
  $145 = HEAP32[$144>>2]|0;
  $153 = $145;
  $147 = $50;
  $46 = $147;
  $148 = $46;
  $149 = HEAP32[$148>>2]|0;
  $150 = $51;
  $45 = $150;
  $151 = $45;
  $152 = HEAP32[$151>>2]|0;
  FUNCTION_TABLE_viii[$153 & 1023]($140,$149,$152);
  STACKTOP = sp;return;
 } else {
  $146 = $$field;
  $153 = $146;
  $147 = $50;
  $46 = $147;
  $148 = $46;
  $149 = HEAP32[$148>>2]|0;
  $150 = $51;
  $45 = $150;
  $151 = $45;
  $152 = HEAP32[$151>>2]|0;
  FUNCTION_TABLE_viii[$153 & 1023]($140,$149,$152);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEE6targetERKSt9type_info($this,$__ti) {
 $this = $this|0;
 $__ti = $__ti|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $__ti;
 $7 = $5;
 $8 = $6;
 $2 = $8;
 $3 = 384;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)==($14|0);
 if ($15) {
  $16 = ((($7)) + 4|0);
  $1 = $16;
  $17 = $1;
  $0 = $17;
  $18 = $0;
  $4 = $18;
  $19 = $4;
  STACKTOP = sp;return ($19|0);
 } else {
  $4 = 0;
  $19 = $4;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEE11target_typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (384|0);
}
function __ZNSt3__110__function6__baseIFvPKciEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__110__function6__baseIFvPKciEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZN6ClientC2EPKctRK7Sessionbb($this,$inet_addr,$port,$session,$async,$host_by_name) {
 $this = $this|0;
 $inet_addr = $inet_addr|0;
 $port = $port|0;
 $session = $session|0;
 $async = $async|0;
 $host_by_name = $host_by_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $host = 0;
 var $res = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $inet_addr;
 $2 = $port;
 $3 = $session;
 $8 = $async&1;
 $4 = $8;
 $9 = $host_by_name&1;
 $5 = $9;
 $10 = $0;
 $11 = $3;
 __ZN6SocketC2ERK7Session($10,$11);
 $res = 0;
 __THREW__ = 0;
 $12 = (invoke_iiii(594,2,1,6)|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 do {
  if (!($14)) {
   $15 = ((($10)) + 96|0);
   HEAP32[$15>>2] = $12;
   $16 = ((($10)) + 96|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(-1);
   if ($18) {
    __THREW__ = 0;
    invoke_vi(595,(22547|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     break;
    }
    __THREW__ = 0;
    invoke_vi(596,1);
    $21 = __THREW__; __THREW__ = 0;
    break;
   }
   $26 = $4;
   $27 = $26&1;
   if ($27) {
    $28 = ((($10)) + 96|0);
    $29 = HEAP32[$28>>2]|0;
    __THREW__ = 0;
    HEAP32[$vararg_buffer>>2] = 2048;
    (invoke_iiii(597,($29|0),4,($vararg_buffer|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     break;
    }
   }
   $32 = $5;
   $33 = $32&1;
   if ($33) {
    $34 = $1;
    __THREW__ = 0;
    $35 = (invoke_ii(598,($34|0))|0);
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if ($37) {
     break;
    }
    $host = $35;
    $38 = $host;
    $39 = ($38|0)==(0|0);
    if ($39) {
     __THREW__ = 0;
     invoke_vi(595,(22568|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      break;
     }
     __THREW__ = 0;
     invoke_vi(596,1);
     $42 = __THREW__; __THREW__ = 0;
     break;
    }
    $43 = ((($10)) + 100|0);
    ;HEAP32[$43>>2]=0|0;HEAP32[$43+4>>2]=0|0;HEAP32[$43+8>>2]=0|0;HEAP32[$43+12>>2]=0|0;
    $44 = ((($10)) + 100|0);
    HEAP16[$44>>1] = 2;
    $45 = $2;
    __THREW__ = 0;
    $46 = (invoke_ii(599,($45|0))|0);
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if ($48) {
     break;
    }
    $49 = ((($10)) + 100|0);
    $50 = ((($49)) + 2|0);
    HEAP16[$50>>1] = $46;
    $51 = ((($10)) + 100|0);
    $52 = ((($51)) + 4|0);
    $53 = $host;
    $54 = ((($53)) + 16|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[$55>>2]|0;
    $57 = $host;
    $58 = ((($57)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    _memcpy(($52|0),($56|0),($59|0))|0;
    $60 = ((($10)) + 96|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($10)) + 100|0);
    __THREW__ = 0;
    $63 = (invoke_iiii(600,($61|0),($62|0),16)|0);
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if ($65) {
     break;
    }
    $res = $63;
    $66 = $res;
    $67 = ($66|0)==(-1);
    if (!($67)) {
     STACKTOP = sp;return;
    }
    $68 = (___errno_location()|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)!=(115);
    if (!($70)) {
     STACKTOP = sp;return;
    }
    $71 = (___errno_location()|0);
    $72 = HEAP32[$71>>2]|0;
    __THREW__ = 0;
    HEAP32[$vararg_buffer1>>2] = 22581;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $72;
    invoke_vii(432,4,($vararg_buffer1|0));
    $73 = __THREW__; __THREW__ = 0;
    $74 = $73&1;
    if ($74) {
     break;
    }
    __THREW__ = 0;
    invoke_vi(595,(22600|0));
    $75 = __THREW__; __THREW__ = 0;
    $76 = $75&1;
    if ($76) {
     break;
    }
    __THREW__ = 0;
    invoke_vii(601,($10|0),1);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     break;
    }
    STACKTOP = sp;return;
   }
   $79 = ((($10)) + 100|0);
   ;HEAP32[$79>>2]=0|0;HEAP32[$79+4>>2]=0|0;HEAP32[$79+8>>2]=0|0;HEAP32[$79+12>>2]=0|0;
   $80 = $1;
   $81 = ((($10)) + 100|0);
   $82 = ((($81)) + 4|0);
   __THREW__ = 0;
   $83 = (invoke_iiii(602,2,($80|0),($82|0))|0);
   $84 = __THREW__; __THREW__ = 0;
   $85 = $84&1;
   if (!($85)) {
    $86 = ($83|0)!=(1);
    if ($86) {
     $87 = (___errno_location()|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = 22615;
     $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $88;
     invoke_vii(432,4,($vararg_buffer5|0));
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      break;
     }
     __THREW__ = 0;
     invoke_vi(595,(22636|0));
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      break;
     }
     __THREW__ = 0;
     invoke_vi(596,1);
     $93 = __THREW__; __THREW__ = 0;
     break;
    }
    $94 = ((($10)) + 100|0);
    HEAP16[$94>>1] = 2;
    $95 = $2;
    __THREW__ = 0;
    $96 = (invoke_ii(599,($95|0))|0);
    $97 = __THREW__; __THREW__ = 0;
    $98 = $97&1;
    if (!($98)) {
     $99 = ((($10)) + 100|0);
     $100 = ((($99)) + 2|0);
     HEAP16[$100>>1] = $96;
     $101 = ((($10)) + 96|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ((($10)) + 100|0);
     __THREW__ = 0;
     $104 = (invoke_iiii(600,($102|0),($103|0),16)|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if (!($106)) {
      $res = $104;
      $107 = $res;
      __THREW__ = 0;
      HEAP32[$vararg_buffer9>>2] = 22653;
      $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
      HEAP32[$vararg_ptr12>>2] = $107;
      invoke_vii(432,1,($vararg_buffer9|0));
      $108 = __THREW__; __THREW__ = 0;
      $109 = $108&1;
      if (!($109)) {
       $110 = $res;
       $111 = ($110|0)==(-1);
       if (!($111)) {
        STACKTOP = sp;return;
       }
       $112 = (___errno_location()|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = ($113|0)!=(115);
       if (!($114)) {
        STACKTOP = sp;return;
       }
       __THREW__ = 0;
       invoke_vi(595,(22600|0));
       $115 = __THREW__; __THREW__ = 0;
       $116 = $115&1;
       if (!($116)) {
        __THREW__ = 0;
        invoke_vii(601,($10|0),1);
        $117 = __THREW__; __THREW__ = 0;
        $118 = $117&1;
        if (!($118)) {
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 $6 = $22;
 $7 = $23;
 __ZN6SocketD2Ev($10);
 $24 = $6;
 $25 = $7;
 ___resumeException($24|0);
 // unreachable;
}
function __ZN6SocketC2ERK7Session($this,$session) {
 $this = $this|0;
 $session = $session|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $session;
 $4 = $0;
 $5 = $1;
 __ZN7SessionC2ERKS_($4,$5);
 $6 = ((($4)) + 96|0);
 HEAP32[$6>>2] = 0;
 __THREW__ = 0;
 invoke_vii(603,($4|0),(604|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  __THREW__ = 0;
  invoke_vii(605,($4|0),(606|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   __THREW__ = 0;
   invoke_vii(607,($4|0),(608|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    __THREW__ = 0;
    invoke_vii(609,($4|0),(610|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 $2 = $15;
 $3 = $16;
 __ZN7SessionD2Ev($4);
 $17 = $2;
 $18 = $3;
 ___resumeException($17|0);
 // unreachable;
}
function __ZN6Socket6finishEi($this,$result) {
 $this = $this|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $result;
 $2 = $0;
 __ZN6Socket7cleanupEv($2);
 $3 = $1;
 _emscripten_force_exit(($3|0));
 STACKTOP = sp;return;
}
function __ZN7SessionC2ERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $5 = $1;
 $6 = $2;
 __ZNSt3__18functionIFvvEEC2ERKS2_($5,$6);
 $7 = ((($5)) + 24|0);
 $8 = $2;
 $9 = ((($8)) + 24|0);
 __THREW__ = 0;
 invoke_vii(611,($7|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $3 = $22;
  $4 = $23;
  __ZNSt3__18functionIFvvEED2Ev($5);
  $28 = $3;
  $29 = $4;
  ___resumeException($28|0);
  // unreachable;
 }
 $12 = ((($5)) + 48|0);
 $13 = $2;
 $14 = ((($13)) + 48|0);
 __THREW__ = 0;
 invoke_vii(612,($12|0),($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 do {
  if ($16) {
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $3 = $24;
   $4 = $25;
  } else {
   $17 = ((($5)) + 72|0);
   $18 = $2;
   $19 = ((($18)) + 72|0);
   __THREW__ = 0;
   invoke_vii(613,($17|0),($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $26 = ___cxa_find_matching_catch()|0;
    $27 = tempRet0;
    $3 = $26;
    $4 = $27;
    __ZNSt3__18functionIFviPKcEED2Ev($12);
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__18functionIFvvEED2Ev($7);
 __ZNSt3__18functionIFvvEED2Ev($5);
 $28 = $3;
 $29 = $4;
 ___resumeException($28|0);
 // unreachable;
}
function __ZN6Socket14error_callbackEiiPKcPv($fd,$err,$msg,$_this) {
 $fd = $fd|0;
 $err = $err|0;
 $msg = $msg|0;
 $_this = $_this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $len = 0, $ret = 0, $socket = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $error = sp + 52|0;
 $len = sp + 28|0;
 $1 = $fd;
 $2 = $err;
 $3 = $msg;
 $4 = $_this;
 HEAP32[$vararg_buffer>>2] = 22665;
 _emscripten_log(1,($vararg_buffer|0));
 HEAP32[$len>>2] = 1;
 $5 = $1;
 $6 = (_getsockopt($5,1,4,$error,$len)|0);
 $ret = $6;
 (_printf(22671,$vararg_buffer1)|0);
 $7 = $3;
 HEAP32[$vararg_buffer3>>2] = $7;
 (_printf(22687,$vararg_buffer3)|0);
 $8 = $4;
 $socket = $8;
 $9 = $2;
 $10 = HEAP8[$error>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = ($9|0)==($11|0);
 $13 = $socket;
 if ($12) {
  __ZN6Socket6finishEi($13,0);
 } else {
  __ZN6Socket6finishEi($13,1);
 }
 $14 = $socket;
 $15 = ((($14)) + 48|0);
 $0 = $15;
 $16 = $0;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $socket;
 $21 = ((($20)) + 48|0);
 $22 = $2;
 $23 = $3;
 __ZNKSt3__18functionIFviPKcEEclEiS2_($21,$22,$23);
 STACKTOP = sp;return;
}
function __ZN6Socket13open_callbackEiPv($fd,$_this) {
 $fd = $fd|0;
 $_this = $_this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $socket = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $fd;
 $2 = $_this;
 (_printf(22734,$vararg_buffer)|0);
 $3 = $2;
 $socket = $3;
 $4 = $socket;
 $0 = $4;
 $5 = $0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $socket;
 __ZNKSt3__18functionIFvvEEclEv($9);
 STACKTOP = sp;return;
}
function __ZN6Socket14close_callbackEiPv($fd,$_this) {
 $fd = $fd|0;
 $_this = $_this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $socket = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $fd;
 $2 = $_this;
 (_printf(22749,$vararg_buffer)|0);
 $3 = $2;
 $socket = $3;
 $4 = $socket;
 $5 = ((($4)) + 24|0);
 $0 = $5;
 $6 = $0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $socket;
 $11 = ((($10)) + 24|0);
 __ZNKSt3__18functionIFvvEEclEv($11);
 STACKTOP = sp;return;
}
function __ZN6Socket16message_callbackEiPv($fd,$_this) {
 $fd = $fd|0;
 $_this = $_this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $msg = 0, $res = 0, $socket = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $msg = sp + 32|0;
 $1 = $fd;
 $2 = $_this;
 _memset(($msg|0),0,10240)|0;
 $3 = $1;
 $4 = (_recv($3,$msg,10240,0)|0);
 $res = $4;
 $5 = $res;
 $6 = ($5|0)==(-1);
 if ($6) {
  $7 = (___errno_location()|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(11);
  if (!($9)) {
   ___assert_fail((22765|0),(22781|0),98,(22806|0));
   // unreachable;
  }
 }
 $10 = $res;
 HEAP32[$vararg_buffer>>2] = $10;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $msg;
 (_printf(22823,$vararg_buffer)|0);
 $11 = $2;
 $socket = $11;
 $12 = $socket;
 $13 = ((($12)) + 72|0);
 $0 = $13;
 $14 = $0;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $socket;
 $19 = ((($18)) + 72|0);
 $20 = $res;
 __ZNKSt3__18functionIFvPKciEEclES2_i($19,$msg,$20);
 STACKTOP = sp;return;
}
function __ZNSt3__18functionIFvvEEC2ERKS2_($this,$__f) {
 $this = $this|0;
 $__f = $__f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__f;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = ((($2)) + 16|0);
  HEAP32[$7>>2] = 0;
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ($10|0)==($11|0);
 if ($12) {
  $13 = ((($2)) + 16|0);
  HEAP32[$13>>2] = $2;
  $14 = $1;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($2)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($16,$21);
  STACKTOP = sp;return;
 } else {
  $22 = $1;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_ii[$27 & 1023]($24)|0);
  $29 = ((($2)) + 16|0);
  HEAP32[$29>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18functionIFviPKcEEC2ERKS4_($this,$__f) {
 $this = $this|0;
 $__f = $__f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__f;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = ((($2)) + 16|0);
  HEAP32[$7>>2] = 0;
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ($10|0)==($11|0);
 if ($12) {
  $13 = ((($2)) + 16|0);
  HEAP32[$13>>2] = $2;
  $14 = $1;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($2)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($16,$21);
  STACKTOP = sp;return;
 } else {
  $22 = $1;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_ii[$27 & 1023]($24)|0);
  $29 = ((($2)) + 16|0);
  HEAP32[$29>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18functionIFvPKciEEC2ERKS4_($this,$__f) {
 $this = $this|0;
 $__f = $__f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__f;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = ((($2)) + 16|0);
  HEAP32[$7>>2] = 0;
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ($10|0)==($11|0);
 if ($12) {
  $13 = ((($2)) + 16|0);
  HEAP32[$13>>2] = $2;
  $14 = $1;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($2)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($16,$21);
  STACKTOP = sp;return;
 } else {
  $22 = $1;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_ii[$27 & 1023]($24)|0);
  $29 = ((($2)) + 16|0);
  HEAP32[$29>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18functionIFviPKcEEclEiS2_($this,$__arg,$__arg1) {
 $this = $this|0;
 $__arg = $__arg|0;
 $__arg1 = $__arg1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 4|0;
 $4 = sp;
 $2 = $this;
 HEAP32[$3>>2] = $__arg;
 HEAP32[$4>>2] = $__arg1;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (___cxa_allocate_exception(4)|0);
  ;HEAP32[$9>>2]=0|0;
  __ZNSt3__117bad_function_callC2Ev($9);
  ___cxa_throw(($9|0),(400|0),(75|0));
  // unreachable;
 } else {
  $10 = ((($5)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $1 = $3;
  $15 = $1;
  $0 = $4;
  $16 = $0;
  FUNCTION_TABLE_viii[$14 & 1023]($11,$15,$16);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__117bad_function_callC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = 6104;
 HEAP32[$3>>2] = $4;
 $5 = 6056;
 HEAP32[$2>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__117bad_function_callD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__117bad_function_callD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__117bad_function_callD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__18functionIFvvEEclEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  ;HEAP32[$5>>2]=0|0;
  __ZNSt3__117bad_function_callC2Ev($5);
  ___cxa_throw(($5|0),(400|0),(75|0));
  // unreachable;
 } else {
  $6 = ((($1)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$10 & 1023]($7);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18functionIFvPKciEEclES2_i($this,$__arg,$__arg1) {
 $this = $this|0;
 $__arg = $__arg|0;
 $__arg1 = $__arg1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 4|0;
 $4 = sp;
 $2 = $this;
 HEAP32[$3>>2] = $__arg;
 HEAP32[$4>>2] = $__arg1;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (___cxa_allocate_exception(4)|0);
  ;HEAP32[$9>>2]=0|0;
  __ZNSt3__117bad_function_callC2Ev($9);
  ___cxa_throw(($9|0),(400|0),(75|0));
  // unreachable;
 } else {
  $10 = ((($5)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $1 = $3;
  $15 = $1;
  $0 = $4;
  $16 = $0;
  FUNCTION_TABLE_viii[$14 & 1023]($11,$15,$16);
  STACKTOP = sp;return;
 }
}
function __GLOBAL__sub_I_main_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 ___cxx_global_var_init1();
 ___cxx_global_var_init2();
 ___cxx_global_var_init10();
 ___cxx_global_var_init11();
 ___cxx_global_var_init19();
 return;
}
function __Z8LoadMeshPcjRN10MeshLoader4MeshE($data,$len,$mesh) {
 $data = $data|0;
 $len = $len|0;
 $mesh = $mesh|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chunk = 0, $pos = 0, $ptr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $chunk = sp;
 $0 = $data;
 $1 = $len;
 $2 = $mesh;
 $pos = 0;
 $3 = $0;
 $ptr = $3;
 $4 = $ptr;
 dest=$chunk; src=$4; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $5 = $ptr;
 $6 = ((($5)) + 12|0);
 $ptr = $6;
 while(1) {
  $7 = $ptr;
  $8 = $0;
  $9 = $7;
  $10 = $8;
  $11 = (($9) - ($10))|0;
  $12 = $1;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[$chunk>>2]|0;
  $15 = HEAP8[(22850)>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = $16 << 24;
  $18 = HEAP8[(22849)>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = $19 << 16;
  $21 = $17 | $20;
  $22 = HEAP8[(22848)>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = $23 << 8;
  $25 = $21 | $24;
  $26 = HEAP8[22847>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = $25 | $27;
  $29 = ($14|0)==($28|0);
  do {
   if ($29) {
    $30 = $ptr;
    $31 = ((($chunk)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $2;
    __ZN12_GLOBAL__N_112LoadPolygonsEPcjRN10MeshLoader4MeshE($30,$32,$33);
   } else {
    $34 = HEAP32[$chunk>>2]|0;
    $35 = HEAP8[(22855)>>0]|0;
    $36 = $35 << 24 >> 24;
    $37 = $36 << 24;
    $38 = HEAP8[(22854)>>0]|0;
    $39 = $38 << 24 >> 24;
    $40 = $39 << 16;
    $41 = $37 | $40;
    $42 = HEAP8[(22853)>>0]|0;
    $43 = $42 << 24 >> 24;
    $44 = $43 << 8;
    $45 = $41 | $44;
    $46 = HEAP8[22852>>0]|0;
    $47 = $46 << 24 >> 24;
    $48 = $45 | $47;
    $49 = ($34|0)==($48|0);
    if ($49) {
     $50 = $ptr;
     $51 = ((($chunk)) + 8|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $2;
     __ZN12_GLOBAL__N_112LoadVerticesEPcjRN10MeshLoader4MeshE($50,$52,$53);
     break;
    }
    $54 = HEAP32[$chunk>>2]|0;
    $55 = HEAP8[(22860)>>0]|0;
    $56 = $55 << 24 >> 24;
    $57 = $56 << 24;
    $58 = HEAP8[(22859)>>0]|0;
    $59 = $58 << 24 >> 24;
    $60 = $59 << 16;
    $61 = $57 | $60;
    $62 = HEAP8[(22858)>>0]|0;
    $63 = $62 << 24 >> 24;
    $64 = $63 << 8;
    $65 = $61 | $64;
    $66 = HEAP8[22857>>0]|0;
    $67 = $66 << 24 >> 24;
    $68 = $65 | $67;
    $69 = ($54|0)==($68|0);
    if ($69) {
     $70 = $ptr;
     $71 = ((($chunk)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ((($chunk)) + 8|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $2;
     __ZN12_GLOBAL__N_112LoadSurfacesEPcjjRN10MeshLoader4MeshE($70,$72,$74,$75);
     break;
    }
    $76 = HEAP32[$chunk>>2]|0;
    $77 = HEAP8[(22865)>>0]|0;
    $78 = $77 << 24 >> 24;
    $79 = $78 << 24;
    $80 = HEAP8[(22864)>>0]|0;
    $81 = $80 << 24 >> 24;
    $82 = $81 << 16;
    $83 = $79 | $82;
    $84 = HEAP8[(22863)>>0]|0;
    $85 = $84 << 24 >> 24;
    $86 = $85 << 8;
    $87 = $83 | $86;
    $88 = HEAP8[22862>>0]|0;
    $89 = $88 << 24 >> 24;
    $90 = $87 | $89;
    $91 = ($76|0)==($90|0);
    if ($91) {
     $92 = $ptr;
     $93 = ((($chunk)) + 4|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($chunk)) + 8|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = $2;
     __ZN12_GLOBAL__N_17LoadUVsEPcjjRN10MeshLoader4MeshE($92,$94,$96,$97);
     break;
    }
    $98 = HEAP32[$chunk>>2]|0;
    $99 = HEAP8[(22870)>>0]|0;
    $100 = $99 << 24 >> 24;
    $101 = $100 << 24;
    $102 = HEAP8[(22869)>>0]|0;
    $103 = $102 << 24 >> 24;
    $104 = $103 << 16;
    $105 = $101 | $104;
    $106 = HEAP8[(22868)>>0]|0;
    $107 = $106 << 24 >> 24;
    $108 = $107 << 8;
    $109 = $105 | $108;
    $110 = HEAP8[22867>>0]|0;
    $111 = $110 << 24 >> 24;
    $112 = $109 | $111;
    $113 = ($98|0)==($112|0);
    if ($113) {
     $114 = $ptr;
     $115 = ((($chunk)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ((($chunk)) + 8|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = $2;
     __ZN12_GLOBAL__N_18LoadDUVsEPcjjRN10MeshLoader4MeshE($114,$116,$118,$119);
     break;
    }
    $120 = HEAP32[$chunk>>2]|0;
    $121 = HEAP8[(22875)>>0]|0;
    $122 = $121 << 24 >> 24;
    $123 = $122 << 24;
    $124 = HEAP8[(22874)>>0]|0;
    $125 = $124 << 24 >> 24;
    $126 = $125 << 16;
    $127 = $123 | $126;
    $128 = HEAP8[(22873)>>0]|0;
    $129 = $128 << 24 >> 24;
    $130 = $129 << 8;
    $131 = $127 | $130;
    $132 = HEAP8[22872>>0]|0;
    $133 = $132 << 24 >> 24;
    $134 = $131 | $133;
    $135 = ($120|0)==($134|0);
    if ($135) {
     $136 = $ptr;
     $137 = ((($chunk)) + 8|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = $2;
     __ZN12_GLOBAL__N_19LoadLinesEPcjRN10MeshLoader4MeshE($136,$138,$139);
     break;
    }
    $140 = HEAP32[$chunk>>2]|0;
    $141 = HEAP8[(22880)>>0]|0;
    $142 = $141 << 24 >> 24;
    $143 = $142 << 24;
    $144 = HEAP8[(22879)>>0]|0;
    $145 = $144 << 24 >> 24;
    $146 = $145 << 16;
    $147 = $143 | $146;
    $148 = HEAP8[(22878)>>0]|0;
    $149 = $148 << 24 >> 24;
    $150 = $149 << 8;
    $151 = $147 | $150;
    $152 = HEAP8[22877>>0]|0;
    $153 = $152 << 24 >> 24;
    $154 = $151 | $153;
    $155 = ($140|0)==($154|0);
    if ($155) {
     $156 = $ptr;
     $157 = ((($chunk)) + 4|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ((($chunk)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = $2;
     __ZN12_GLOBAL__N_111LoadLayers2EPcjjRN10MeshLoader4MeshE($156,$158,$160,$161);
    }
   }
  } while(0);
  $162 = ((($chunk)) + 4|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $ptr;
  $165 = (($164) + ($163)|0);
  $ptr = $165;
  $166 = $ptr;
  dest=$chunk; src=$166; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $167 = $ptr;
  $168 = ((($167)) + 12|0);
  $ptr = $168;
 }
 $169 = $2;
 __ZN10MeshLoader4Mesh5SetupEv($169);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_112LoadPolygonsEPcjRN10MeshLoader4MeshE($ptr,$elements,$mesh) {
 $ptr = $ptr|0;
 $elements = $elements|0;
 $mesh = $mesh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $elements;
 $2 = $mesh;
 $3 = $0;
 $p = $3;
 $4 = $2;
 $5 = $p;
 $6 = $p;
 $7 = $1;
 $8 = (($6) + (($7*12)|0)|0);
 __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($4,$5,$8);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_112LoadVerticesEPcjRN10MeshLoader4MeshE($ptr,$elements,$mesh) {
 $ptr = $ptr|0;
 $elements = $elements|0;
 $mesh = $mesh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $elements;
 $2 = $mesh;
 $3 = $0;
 $p = $3;
 $4 = $2;
 $5 = ((($4)) + 24|0);
 $6 = $p;
 $7 = $p;
 $8 = $1;
 $9 = (($7) + (($8*12)|0)|0);
 __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($5,$6,$9);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_112LoadSurfacesEPcjjRN10MeshLoader4MeshE($ptr,$size,$elements,$mesh) {
 $ptr = $ptr|0;
 $size = $size|0;
 $elements = $elements|0;
 $mesh = $mesh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $ptr;
 $1 = $size;
 $2 = $elements;
 $3 = $mesh;
 $6 = $1;
 $7 = (__Znaj($6)|0);
 $dest = $7;
 $8 = $dest;
 $9 = $0;
 $10 = $1;
 _memcpy(($8|0),($9|0),($10|0))|0;
 $11 = $3;
 $12 = ((($11)) + 68|0);
 $13 = $dest;
 $14 = $2;
 __ZN3gsl7as_spanI10st_SurfaceEENS_7details15SpanArrayTraitsIT_JLin1EEE4typeEPS4_i($4,$13,$14);
 (__ZN3gsl4spanI10st_SurfaceLin1EJEEaSEOS2_($12,$4)|0);
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $2;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $3;
  $19 = ((($18)) + 68|0);
  $20 = $i;
  __ZN3gsl5indexILj1EEC2IJjEvEEDpT_($5,$20);
  $21 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($19,$5)|0);
  $22 = $1;
  $23 = $3;
  $24 = ((($23)) + 68|0);
  $25 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEE4dataEv($24)|0);
  __ZN10st_Surface8RelocateElPv($21,$22,$25);
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_17LoadUVsEPcjjRN10MeshLoader4MeshE($ptr,$size,$elements,$mesh) {
 $ptr = $ptr|0;
 $size = $size|0;
 $elements = $elements|0;
 $mesh = $mesh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $size;
 $2 = $elements;
 $3 = $mesh;
 $4 = $2;
 $5 = $3;
 $6 = ((($5)) + 76|0);
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = $4;
 $8 = $1;
 $9 = (__Znaj($8)|0);
 $dest = $9;
 $10 = $dest;
 $11 = $0;
 $12 = $1;
 _memcpy(($10|0),($11|0),($12|0))|0;
 $13 = $dest;
 $14 = $3;
 $15 = ((($14)) + 76|0);
 $16 = ((($15)) + 16|0);
 HEAP32[$16>>2] = $13;
 $i = 0;
 while(1) {
  $17 = $i;
  $18 = $2;
  $19 = ($17>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = $3;
  $22 = ((($21)) + 76|0);
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($20<<4)|0);
  $26 = $1;
  $27 = $3;
  $28 = ((($27)) + 76|0);
  $29 = ((($28)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  __ZN9_st_UVMap8RelocateElPv($25,$26,$30);
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_18LoadDUVsEPcjjRN10MeshLoader4MeshE($ptr,$size,$elements,$mesh) {
 $ptr = $ptr|0;
 $size = $size|0;
 $elements = $elements|0;
 $mesh = $mesh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $size;
 $2 = $elements;
 $3 = $mesh;
 $4 = $1;
 $5 = (__Znaj($4)|0);
 $dest = $5;
 $6 = $dest;
 $7 = $0;
 $8 = $1;
 _memcpy(($6|0),($7|0),($8|0))|0;
 $9 = $dest;
 $10 = $3;
 $11 = ((($10)) + 76|0);
 $12 = ((($11)) + 20|0);
 HEAP32[$12>>2] = $9;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $2;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = $3;
  $18 = ((($17)) + 76|0);
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($16<<4)|0);
  $22 = $1;
  $23 = $3;
  $24 = ((($23)) + 76|0);
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  __ZN9_st_DVMap8RelocateElPv($21,$22,$26);
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_19LoadLinesEPcjRN10MeshLoader4MeshE($ptr,$elements,$mesh) {
 $ptr = $ptr|0;
 $elements = $elements|0;
 $mesh = $mesh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $elements;
 $2 = $mesh;
 $3 = $0;
 $p = $3;
 $4 = $2;
 $5 = ((($4)) + 48|0);
 $6 = $p;
 $7 = $p;
 $8 = $1;
 $9 = (($7) + ($8<<3)|0);
 __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($5,$6,$9);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_111LoadLayers2EPcjjRN10MeshLoader4MeshE($ptr,$size,$elements,$mesh) {
 $ptr = $ptr|0;
 $size = $size|0;
 $elements = $elements|0;
 $mesh = $mesh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $ptr;
 $1 = $size;
 $2 = $elements;
 $3 = $mesh;
 $6 = $1;
 $7 = (__Znaj($6)|0);
 $dest = $7;
 $8 = $dest;
 $9 = $0;
 $10 = $1;
 _memcpy(($8|0),($9|0),($10|0))|0;
 $11 = $3;
 $12 = ((($11)) + 60|0);
 $13 = $dest;
 $14 = $2;
 __ZN3gsl7as_spanI6Layer2EENS_7details15SpanArrayTraitsIT_JLin1EEE4typeEPS4_i($4,$13,$14);
 (__ZN3gsl4spanI6Layer2Lin1EJEEaSEOS2_($12,$4)|0);
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $2;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $3;
  $19 = ((($18)) + 60|0);
  $20 = $i;
  __ZN3gsl5indexILj1EEC2IJjEvEEDpT_($5,$20);
  $21 = (__ZNK3gsl4spanI6Layer2Lin1EJEEixERKNS_5indexILj1EEE($19,$5)|0);
  $22 = $1;
  $23 = $3;
  $24 = ((($23)) + 60|0);
  $25 = (__ZNK3gsl4spanI6Layer2Lin1EJEE4dataEv($24)|0);
  __ZN6Layer28RelocateElPv($21,$22,$25);
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 STACKTOP = sp;return;
}
function __ZN3gsl7as_spanI6Layer2EENS_7details15SpanArrayTraitsIT_JLin1EEE4typeEPS4_i($agg$result,$arr,$len) {
 $agg$result = $agg$result|0;
 $arr = $arr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $arr;
 $1 = $len;
 $2 = $0;
 $3 = $1;
 __ZN3gsl4spanI6Layer2Lin1EJEEC2EPS1_i($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __ZN3gsl4spanI6Layer2Lin1EJEEaSEOS2_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = $2;
 $8 = ((($7)) + 4|0);
 (__ZN3gsl13static_boundsIJLin1EEEaSERKS1_($6,$8)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK3gsl4spanI6Layer2Lin1EJEEixERKNS_5indexILj1EEE($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = $1;
 __THREW__ = 0;
 $5 = (invoke_iii(418,($3|0),($4|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + (($5*48)|0)|0);
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZNK3gsl4spanI6Layer2Lin1EJEE4dataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN3gsl13static_boundsIJLin1EEEaSERKS1_($this,$otherBounds) {
 $this = $this|0;
 $otherBounds = $otherBounds|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $otherBounds;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN3gsl4spanI6Layer2Lin1EJEEC2EPS1_i($this,$ptr,$size) {
 $this = $this|0;
 $ptr = $ptr|0;
 $size = $size|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 40|0;
 $$byval_copy = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $this;
 $1 = $ptr;
 $2 = $size;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 HEAP32[$5>>2] = $8;
 HEAP32[$4>>2] = $5;
 $9 = ((($4)) + 4|0);
 HEAP32[$9>>2] = 1;
 __THREW__ = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 invoke_vii(614,($3|0),($$byval_copy|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
  __ZN3gsl4spanI6Layer2Lin1EJEEC2EPS1_NS_13static_boundsIJLin1EEEE($6,$7,$$byval_copy1);
  STACKTOP = sp;return;
 }
}
function __ZN3gsl13static_boundsIJLin1EEEC2ESt16initializer_listIiE($this,$il) {
 $this = $this|0;
 $il = $il|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $1 = $il;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 __ZN3gsl7details12BoundsRangesIJLin1EEEC2EPKi($3,$5);
 $0 = $il;
 $6 = $0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (1)==($8|0);
 if (!($9)) {
  __ZSt9terminatev();
  // unreachable;
 }
 $10 = (__ZNK3gsl7details12BoundsRangesIJLin1EEE9totalSizeEv($3)|0);
 $11 = ($10|0)<=(2147483647);
 if ($11) {
  STACKTOP = sp;return;
 } else {
  __ZSt9terminatev();
  // unreachable;
 }
}
function __ZN3gsl7details12BoundsRangesIJLin1EEEC2EPKi($this,$arr) {
 $this = $this|0;
 $arr = $arr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $arr;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 __ZN3gsl7details12BoundsRangesIJEEC2EPKi($2,$4);
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZNK3gsl7details12BoundsRangesIJEE9totalSizeEv($2)|0);
 $8 = Math_imul($6, $7)|0;
 HEAP32[$2>>2] = $8;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = (0)<=($10|0);
 if ($11) {
  STACKTOP = sp;return;
 } else {
  __ZSt9terminatev();
  // unreachable;
 }
}
function __ZN3gsl7details12BoundsRangesIJEEC2EPKi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap$i = 0, $__growing = 0, $__m = 0;
 var $__mid = 0, $__ms$i = 0, $__n$i$i = 0, $__new_size = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 24|0;
 $7 = sp + 292|0;
 $28 = sp + 16|0;
 $31 = sp + 291|0;
 $38 = sp + 8|0;
 $41 = sp + 290|0;
 $49 = sp + 104|0;
 $50 = sp + 92|0;
 $59 = sp;
 $62 = sp + 289|0;
 $__mid = sp + 32|0;
 $63 = $this;
 $64 = $__first;
 $65 = $__last;
 $66 = $63;
 $67 = $64;
 $68 = $65;
 $60 = $67;
 $61 = $68;
 $69 = $60;
 $70 = $61;
 ;HEAP8[$59>>0]=HEAP8[$62>>0]|0;
 $57 = $69;
 $58 = $70;
 $71 = $58;
 $72 = $57;
 $73 = $71;
 $74 = $72;
 $75 = (($73) - ($74))|0;
 $76 = (($75|0) / 8)&-1;
 $__new_size = $76;
 $77 = $__new_size;
 $56 = $66;
 $78 = $56;
 $55 = $78;
 $79 = $55;
 $54 = $79;
 $80 = $54;
 $81 = ((($80)) + 8|0);
 $53 = $81;
 $82 = $53;
 $52 = $82;
 $83 = $52;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 8)&-1;
 $90 = ($77>>>0)<=($89>>>0);
 if (!($90)) {
  __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE10deallocateEv($66);
  $176 = $__new_size;
  $48 = $66;
  HEAP32[$49>>2] = $176;
  $177 = $48;
  $178 = (__ZNKSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE8max_sizeEv($177)|0);
  $__ms$i = $178;
  $179 = HEAP32[$49>>2]|0;
  $180 = $__ms$i;
  $181 = ($179>>>0)>($180>>>0);
  if ($181) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($177);
  }
  $46 = $177;
  $182 = $46;
  $45 = $182;
  $183 = $45;
  $44 = $183;
  $184 = $44;
  $185 = ((($184)) + 8|0);
  $43 = $185;
  $186 = $43;
  $42 = $186;
  $187 = $42;
  $188 = HEAP32[$187>>2]|0;
  $189 = HEAP32[$183>>2]|0;
  $190 = $188;
  $191 = $189;
  $192 = (($190) - ($191))|0;
  $193 = (($192|0) / 8)&-1;
  $__cap$i = $193;
  $194 = $__cap$i;
  $195 = $__ms$i;
  $196 = (($195>>>0) / 2)&-1;
  $197 = ($194>>>0)>=($196>>>0);
  if ($197) {
   $198 = $__ms$i;
   $47 = $198;
  } else {
   $199 = $__cap$i;
   $200 = $199<<1;
   HEAP32[$50>>2] = $200;
   $39 = $50;
   $40 = $49;
   $201 = $39;
   $202 = $40;
   ;HEAP8[$38>>0]=HEAP8[$41>>0]|0;
   $36 = $201;
   $37 = $202;
   $203 = $36;
   $204 = $37;
   $33 = $38;
   $34 = $203;
   $35 = $204;
   $205 = $34;
   $206 = HEAP32[$205>>2]|0;
   $207 = $35;
   $208 = HEAP32[$207>>2]|0;
   $209 = ($206>>>0)<($208>>>0);
   $210 = $37;
   $211 = $36;
   $212 = $209 ? $210 : $211;
   $213 = HEAP32[$212>>2]|0;
   $47 = $213;
  }
  $214 = $47;
  __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE8allocateEj($66,$214);
  $215 = $64;
  $216 = $65;
  __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($66,$215,$216);
  STACKTOP = sp;return;
 }
 $91 = $65;
 HEAP32[$__mid>>2] = $91;
 $__growing = 0;
 $92 = $__new_size;
 $51 = $66;
 $93 = $51;
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = HEAP32[$93>>2]|0;
 $97 = $95;
 $98 = $96;
 $99 = (($97) - ($98))|0;
 $100 = (($99|0) / 8)&-1;
 $101 = ($92>>>0)>($100>>>0);
 if ($101) {
  $__growing = 1;
  $102 = $64;
  HEAP32[$__mid>>2] = $102;
  $32 = $66;
  $103 = $32;
  $104 = ((($103)) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$103>>2]|0;
  $107 = $105;
  $108 = $106;
  $109 = (($107) - ($108))|0;
  $110 = (($109|0) / 8)&-1;
  $29 = $__mid;
  $30 = $110;
  $111 = $29;
  $112 = $30;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $26 = $111;
  $27 = $112;
  $113 = $27;
  $114 = $26;
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + ($113<<3)|0);
  HEAP32[$114>>2] = $116;
 }
 $117 = $64;
 $118 = HEAP32[$__mid>>2]|0;
 $119 = HEAP32[$66>>2]|0;
 $23 = $117;
 $24 = $118;
 $25 = $119;
 $120 = $23;
 $22 = $120;
 $121 = $22;
 $122 = $24;
 $17 = $122;
 $123 = $17;
 $124 = $25;
 $18 = $124;
 $125 = $18;
 $19 = $121;
 $20 = $123;
 $21 = $125;
 $126 = $20;
 $127 = $19;
 $128 = $126;
 $129 = $127;
 $130 = (($128) - ($129))|0;
 $131 = (($130|0) / 8)&-1;
 $__n$i$i = $131;
 $132 = $21;
 $133 = $19;
 $134 = $__n$i$i;
 $135 = $134<<3;
 _memmove(($132|0),($133|0),($135|0))|0;
 $136 = $21;
 $137 = $__n$i$i;
 $138 = (($136) + ($137<<3)|0);
 $__m = $138;
 $139 = $__growing;
 $140 = $139&1;
 if ($140) {
  $141 = HEAP32[$__mid>>2]|0;
  $142 = $65;
  __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($66,$141,$142);
  STACKTOP = sp;return;
 }
 $143 = $__m;
 $15 = $66;
 $16 = $143;
 $144 = $15;
 $14 = $144;
 $145 = $14;
 $146 = ((($145)) + 4|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = HEAP32[$145>>2]|0;
 $149 = $147;
 $150 = $148;
 $151 = (($149) - ($150))|0;
 $152 = (($151|0) / 8)&-1;
 $__old_size$i = $152;
 $153 = $16;
 $12 = $144;
 $13 = $153;
 $154 = $12;
 while(1) {
  $155 = $13;
  $156 = ((($154)) + 4|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($155|0)!=($157|0);
  if (!($158)) {
   break;
  }
  $11 = $154;
  $159 = $11;
  $160 = ((($159)) + 8|0);
  $10 = $160;
  $161 = $10;
  $9 = $161;
  $162 = $9;
  $163 = ((($154)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ((($164)) + -8|0);
  HEAP32[$163>>2] = $165;
  $8 = $165;
  $166 = $8;
  $5 = $162;
  $6 = $166;
  $167 = $5;
  $168 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $167;
  $3 = $168;
  $169 = $2;
  $170 = $3;
  $0 = $169;
  $1 = $170;
 }
 $171 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(615,($144|0),($171|0));
 $172 = __THREW__; __THREW__ = 0;
 $173 = $172&1;
 if ($173) {
  $174 = ___cxa_find_matching_catch(0|0)|0;
  $175 = tempRet0;
  ___clang_call_terminate($174);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  ;HEAP32[$42>>2]=HEAP32[$44>>2]|0;HEAP32[$42+4>>2]=HEAP32[$44+4>>2]|0;
  __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 8|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 8|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 8)&-1;
 $35 = (($22) + ($34<<3)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<3)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 8)&-1;
 $52 = (($43) + ($51<<3)|0);
 __ZNKSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 8)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -8|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(615,($40|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $73 = $17;
 $74 = ((($73)) + 8|0);
 $16 = $74;
 $75 = $16;
 $15 = $75;
 $76 = $15;
 $77 = HEAP32[$37>>2]|0;
 $14 = $37;
 $78 = $14;
 $13 = $78;
 $79 = $13;
 $12 = $79;
 $80 = $12;
 $81 = ((($80)) + 8|0);
 $11 = $81;
 $82 = $11;
 $10 = $82;
 $83 = $10;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 8)&-1;
 $4 = $76;
 $5 = $77;
 $6 = $89;
 $90 = $4;
 $91 = $5;
 $92 = $6;
 $1 = $90;
 $2 = $91;
 $3 = $92;
 $93 = $2;
 $0 = $93;
 $94 = $0;
 __ZdlPv($94);
 $9 = $37;
 $95 = $9;
 $96 = ((($95)) + 8|0);
 $8 = $96;
 $97 = $8;
 $7 = $97;
 $98 = $7;
 HEAP32[$98>>2] = 0;
 $99 = ((($37)) + 4|0);
 HEAP32[$99>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN3gsl7as_spanI10st_SurfaceEENS_7details15SpanArrayTraitsIT_JLin1EEE4typeEPS4_i($agg$result,$arr,$len) {
 $agg$result = $agg$result|0;
 $arr = $arr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $arr;
 $1 = $len;
 $2 = $0;
 $3 = $1;
 __ZN3gsl4spanI10st_SurfaceLin1EJEEC2EPS1_i($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __ZN3gsl4spanI10st_SurfaceLin1EJEEaSEOS2_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = $2;
 $8 = ((($7)) + 4|0);
 (__ZN3gsl13static_boundsIJLin1EEEaSERKS1_($6,$8)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK3gsl4spanI10st_SurfaceLin1EJEE4dataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN3gsl4spanI10st_SurfaceLin1EJEEC2EPS1_i($this,$ptr,$size) {
 $this = $this|0;
 $ptr = $ptr|0;
 $size = $size|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 40|0;
 $$byval_copy = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $this;
 $1 = $ptr;
 $2 = $size;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 HEAP32[$5>>2] = $8;
 HEAP32[$4>>2] = $5;
 $9 = ((($4)) + 4|0);
 HEAP32[$9>>2] = 1;
 __THREW__ = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 invoke_vii(614,($3|0),($$byval_copy|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
  __ZN3gsl4spanI10st_SurfaceLin1EJEEC2EPS1_NS_13static_boundsIJLin1EEEE($6,$7,$$byval_copy1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap$i = 0, $__growing = 0, $__m = 0, $__mid = 0, $__ms$i = 0, $__new_size = 0, $__old_size$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 24|0;
 $7 = sp + 288|0;
 $28 = sp + 16|0;
 $31 = sp + 287|0;
 $38 = sp + 8|0;
 $41 = sp + 286|0;
 $49 = sp + 104|0;
 $50 = sp + 92|0;
 $59 = sp;
 $62 = sp + 285|0;
 $__mid = sp + 32|0;
 $63 = $this;
 $64 = $__first;
 $65 = $__last;
 $66 = $63;
 $67 = $64;
 $68 = $65;
 $60 = $67;
 $61 = $68;
 $69 = $60;
 $70 = $61;
 ;HEAP8[$59>>0]=HEAP8[$62>>0]|0;
 $57 = $69;
 $58 = $70;
 $71 = $58;
 $72 = $57;
 $73 = $71;
 $74 = $72;
 $75 = (($73) - ($74))|0;
 $76 = (($75|0) / 12)&-1;
 $__new_size = $76;
 $77 = $__new_size;
 $56 = $66;
 $78 = $56;
 $55 = $78;
 $79 = $55;
 $54 = $79;
 $80 = $54;
 $81 = ((($80)) + 8|0);
 $53 = $81;
 $82 = $53;
 $52 = $82;
 $83 = $52;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 12)&-1;
 $90 = ($77>>>0)<=($89>>>0);
 if (!($90)) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE10deallocateEv($66);
  $172 = $__new_size;
  $48 = $66;
  HEAP32[$49>>2] = $172;
  $173 = $48;
  $174 = (__ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8max_sizeEv($173)|0);
  $__ms$i = $174;
  $175 = HEAP32[$49>>2]|0;
  $176 = $__ms$i;
  $177 = ($175>>>0)>($176>>>0);
  if ($177) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($173);
  }
  $46 = $173;
  $178 = $46;
  $45 = $178;
  $179 = $45;
  $44 = $179;
  $180 = $44;
  $181 = ((($180)) + 8|0);
  $43 = $181;
  $182 = $43;
  $42 = $182;
  $183 = $42;
  $184 = HEAP32[$183>>2]|0;
  $185 = HEAP32[$179>>2]|0;
  $186 = $184;
  $187 = $185;
  $188 = (($186) - ($187))|0;
  $189 = (($188|0) / 12)&-1;
  $__cap$i = $189;
  $190 = $__cap$i;
  $191 = $__ms$i;
  $192 = (($191>>>0) / 2)&-1;
  $193 = ($190>>>0)>=($192>>>0);
  if ($193) {
   $194 = $__ms$i;
   $47 = $194;
  } else {
   $195 = $__cap$i;
   $196 = $195<<1;
   HEAP32[$50>>2] = $196;
   $39 = $50;
   $40 = $49;
   $197 = $39;
   $198 = $40;
   ;HEAP8[$38>>0]=HEAP8[$41>>0]|0;
   $36 = $197;
   $37 = $198;
   $199 = $36;
   $200 = $37;
   $33 = $38;
   $34 = $199;
   $35 = $200;
   $201 = $34;
   $202 = HEAP32[$201>>2]|0;
   $203 = $35;
   $204 = HEAP32[$203>>2]|0;
   $205 = ($202>>>0)<($204>>>0);
   $206 = $37;
   $207 = $36;
   $208 = $205 ? $206 : $207;
   $209 = HEAP32[$208>>2]|0;
   $47 = $209;
  }
  $210 = $47;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8allocateEj($66,$210);
  $211 = $64;
  $212 = $65;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($66,$211,$212);
  STACKTOP = sp;return;
 }
 $91 = $65;
 HEAP32[$__mid>>2] = $91;
 $__growing = 0;
 $92 = $__new_size;
 $51 = $66;
 $93 = $51;
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = HEAP32[$93>>2]|0;
 $97 = $95;
 $98 = $96;
 $99 = (($97) - ($98))|0;
 $100 = (($99|0) / 12)&-1;
 $101 = ($92>>>0)>($100>>>0);
 if ($101) {
  $__growing = 1;
  $102 = $64;
  HEAP32[$__mid>>2] = $102;
  $32 = $66;
  $103 = $32;
  $104 = ((($103)) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$103>>2]|0;
  $107 = $105;
  $108 = $106;
  $109 = (($107) - ($108))|0;
  $110 = (($109|0) / 12)&-1;
  $29 = $__mid;
  $30 = $110;
  $111 = $29;
  $112 = $30;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $26 = $111;
  $27 = $112;
  $113 = $27;
  $114 = $26;
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + (($113*12)|0)|0);
  HEAP32[$114>>2] = $116;
 }
 $117 = $64;
 $118 = HEAP32[$__mid>>2]|0;
 $119 = HEAP32[$66>>2]|0;
 $23 = $117;
 $24 = $118;
 $25 = $119;
 $120 = $23;
 $22 = $120;
 $121 = $22;
 $122 = $24;
 $18 = $122;
 $123 = $18;
 $124 = $25;
 $17 = $124;
 $125 = $17;
 $19 = $121;
 $20 = $123;
 $21 = $125;
 while(1) {
  $126 = $19;
  $127 = $20;
  $128 = ($126|0)!=($127|0);
  $129 = $21;
  if (!($128)) {
   break;
  }
  $130 = $19;
  (__ZN3glm5tvec3IfLNS_9precisionE0EEaSERKS2_($129,$130)|0);
  $131 = $19;
  $132 = ((($131)) + 12|0);
  $19 = $132;
  $133 = $21;
  $134 = ((($133)) + 12|0);
  $21 = $134;
 }
 $__m = $129;
 $135 = $__growing;
 $136 = $135&1;
 if ($136) {
  $137 = HEAP32[$__mid>>2]|0;
  $138 = $65;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($66,$137,$138);
  STACKTOP = sp;return;
 }
 $139 = $__m;
 $15 = $66;
 $16 = $139;
 $140 = $15;
 $14 = $140;
 $141 = $14;
 $142 = ((($141)) + 4|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = HEAP32[$141>>2]|0;
 $145 = $143;
 $146 = $144;
 $147 = (($145) - ($146))|0;
 $148 = (($147|0) / 12)&-1;
 $__old_size$i = $148;
 $149 = $16;
 $12 = $140;
 $13 = $149;
 $150 = $12;
 while(1) {
  $151 = $13;
  $152 = ((($150)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ($151|0)!=($153|0);
  if (!($154)) {
   break;
  }
  $11 = $150;
  $155 = $11;
  $156 = ((($155)) + 8|0);
  $10 = $156;
  $157 = $10;
  $9 = $157;
  $158 = $9;
  $159 = ((($150)) + 4|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ((($160)) + -12|0);
  HEAP32[$159>>2] = $161;
  $8 = $161;
  $162 = $8;
  $5 = $158;
  $6 = $162;
  $163 = $5;
  $164 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $163;
  $3 = $164;
  $165 = $2;
  $166 = $3;
  $0 = $165;
  $1 = $166;
 }
 $167 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(549,($140|0),($167|0));
 $168 = __THREW__; __THREW__ = 0;
 $169 = $168&1;
 if ($169) {
  $170 = ___cxa_find_matching_catch(0|0)|0;
  $171 = tempRet0;
  ___clang_call_terminate($170);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap$i = 0, $__growing = 0, $__m = 0;
 var $__mid = 0, $__ms$i = 0, $__n$i$i = 0, $__new_size = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 24|0;
 $7 = sp + 292|0;
 $28 = sp + 16|0;
 $31 = sp + 291|0;
 $38 = sp + 8|0;
 $41 = sp + 290|0;
 $49 = sp + 104|0;
 $50 = sp + 92|0;
 $59 = sp;
 $62 = sp + 289|0;
 $__mid = sp + 32|0;
 $63 = $this;
 $64 = $__first;
 $65 = $__last;
 $66 = $63;
 $67 = $64;
 $68 = $65;
 $60 = $67;
 $61 = $68;
 $69 = $60;
 $70 = $61;
 ;HEAP8[$59>>0]=HEAP8[$62>>0]|0;
 $57 = $69;
 $58 = $70;
 $71 = $58;
 $72 = $57;
 $73 = $71;
 $74 = $72;
 $75 = (($73) - ($74))|0;
 $76 = (($75|0) / 12)&-1;
 $__new_size = $76;
 $77 = $__new_size;
 $56 = $66;
 $78 = $56;
 $55 = $78;
 $79 = $55;
 $54 = $79;
 $80 = $54;
 $81 = ((($80)) + 8|0);
 $53 = $81;
 $82 = $53;
 $52 = $82;
 $83 = $52;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 12)&-1;
 $90 = ($77>>>0)<=($89>>>0);
 if (!($90)) {
  __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE10deallocateEv($66);
  $176 = $__new_size;
  $48 = $66;
  HEAP32[$49>>2] = $176;
  $177 = $48;
  $178 = (__ZNKSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE8max_sizeEv($177)|0);
  $__ms$i = $178;
  $179 = HEAP32[$49>>2]|0;
  $180 = $__ms$i;
  $181 = ($179>>>0)>($180>>>0);
  if ($181) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($177);
  }
  $46 = $177;
  $182 = $46;
  $45 = $182;
  $183 = $45;
  $44 = $183;
  $184 = $44;
  $185 = ((($184)) + 8|0);
  $43 = $185;
  $186 = $43;
  $42 = $186;
  $187 = $42;
  $188 = HEAP32[$187>>2]|0;
  $189 = HEAP32[$183>>2]|0;
  $190 = $188;
  $191 = $189;
  $192 = (($190) - ($191))|0;
  $193 = (($192|0) / 12)&-1;
  $__cap$i = $193;
  $194 = $__cap$i;
  $195 = $__ms$i;
  $196 = (($195>>>0) / 2)&-1;
  $197 = ($194>>>0)>=($196>>>0);
  if ($197) {
   $198 = $__ms$i;
   $47 = $198;
  } else {
   $199 = $__cap$i;
   $200 = $199<<1;
   HEAP32[$50>>2] = $200;
   $39 = $50;
   $40 = $49;
   $201 = $39;
   $202 = $40;
   ;HEAP8[$38>>0]=HEAP8[$41>>0]|0;
   $36 = $201;
   $37 = $202;
   $203 = $36;
   $204 = $37;
   $33 = $38;
   $34 = $203;
   $35 = $204;
   $205 = $34;
   $206 = HEAP32[$205>>2]|0;
   $207 = $35;
   $208 = HEAP32[$207>>2]|0;
   $209 = ($206>>>0)<($208>>>0);
   $210 = $37;
   $211 = $36;
   $212 = $209 ? $210 : $211;
   $213 = HEAP32[$212>>2]|0;
   $47 = $213;
  }
  $214 = $47;
  __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE8allocateEj($66,$214);
  $215 = $64;
  $216 = $65;
  __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($66,$215,$216);
  STACKTOP = sp;return;
 }
 $91 = $65;
 HEAP32[$__mid>>2] = $91;
 $__growing = 0;
 $92 = $__new_size;
 $51 = $66;
 $93 = $51;
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = HEAP32[$93>>2]|0;
 $97 = $95;
 $98 = $96;
 $99 = (($97) - ($98))|0;
 $100 = (($99|0) / 12)&-1;
 $101 = ($92>>>0)>($100>>>0);
 if ($101) {
  $__growing = 1;
  $102 = $64;
  HEAP32[$__mid>>2] = $102;
  $32 = $66;
  $103 = $32;
  $104 = ((($103)) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$103>>2]|0;
  $107 = $105;
  $108 = $106;
  $109 = (($107) - ($108))|0;
  $110 = (($109|0) / 12)&-1;
  $29 = $__mid;
  $30 = $110;
  $111 = $29;
  $112 = $30;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $26 = $111;
  $27 = $112;
  $113 = $27;
  $114 = $26;
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + (($113*12)|0)|0);
  HEAP32[$114>>2] = $116;
 }
 $117 = $64;
 $118 = HEAP32[$__mid>>2]|0;
 $119 = HEAP32[$66>>2]|0;
 $23 = $117;
 $24 = $118;
 $25 = $119;
 $120 = $23;
 $22 = $120;
 $121 = $22;
 $122 = $24;
 $17 = $122;
 $123 = $17;
 $124 = $25;
 $18 = $124;
 $125 = $18;
 $19 = $121;
 $20 = $123;
 $21 = $125;
 $126 = $20;
 $127 = $19;
 $128 = $126;
 $129 = $127;
 $130 = (($128) - ($129))|0;
 $131 = (($130|0) / 12)&-1;
 $__n$i$i = $131;
 $132 = $21;
 $133 = $19;
 $134 = $__n$i$i;
 $135 = ($134*12)|0;
 _memmove(($132|0),($133|0),($135|0))|0;
 $136 = $21;
 $137 = $__n$i$i;
 $138 = (($136) + (($137*12)|0)|0);
 $__m = $138;
 $139 = $__growing;
 $140 = $139&1;
 if ($140) {
  $141 = HEAP32[$__mid>>2]|0;
  $142 = $65;
  __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($66,$141,$142);
  STACKTOP = sp;return;
 }
 $143 = $__m;
 $15 = $66;
 $16 = $143;
 $144 = $15;
 $14 = $144;
 $145 = $14;
 $146 = ((($145)) + 4|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = HEAP32[$145>>2]|0;
 $149 = $147;
 $150 = $148;
 $151 = (($149) - ($150))|0;
 $152 = (($151|0) / 12)&-1;
 $__old_size$i = $152;
 $153 = $16;
 $12 = $144;
 $13 = $153;
 $154 = $12;
 while(1) {
  $155 = $13;
  $156 = ((($154)) + 4|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($155|0)!=($157|0);
  if (!($158)) {
   break;
  }
  $11 = $154;
  $159 = $11;
  $160 = ((($159)) + 8|0);
  $10 = $160;
  $161 = $10;
  $9 = $161;
  $162 = $9;
  $163 = ((($154)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ((($164)) + -12|0);
  HEAP32[$163>>2] = $165;
  $8 = $165;
  $166 = $8;
  $5 = $162;
  $6 = $166;
  $167 = $5;
  $168 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $167;
  $3 = $168;
  $169 = $2;
  $170 = $3;
  $0 = $169;
  $1 = $170;
 }
 $171 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(616,($144|0),($171|0));
 $172 = __THREW__; __THREW__ = 0;
 $173 = $172&1;
 if ($173) {
  $174 = ___cxa_find_matching_catch(0|0)|0;
  $175 = tempRet0;
  ___clang_call_terminate($174);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  ;HEAP32[$42>>2]=HEAP32[$44>>2]|0;HEAP32[$42+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$42+8>>2]=HEAP32[$44+8>>2]|0;
  __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 12|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 12|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($22) + (($34*12)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*12)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 __ZNKSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 12)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -12|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(616,($40|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $73 = $17;
 $74 = ((($73)) + 8|0);
 $16 = $74;
 $75 = $16;
 $15 = $75;
 $76 = $15;
 $77 = HEAP32[$37>>2]|0;
 $14 = $37;
 $78 = $14;
 $13 = $78;
 $79 = $13;
 $12 = $79;
 $80 = $12;
 $81 = ((($80)) + 8|0);
 $11 = $81;
 $82 = $11;
 $10 = $82;
 $83 = $10;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 12)&-1;
 $4 = $76;
 $5 = $77;
 $6 = $89;
 $90 = $4;
 $91 = $5;
 $92 = $6;
 $1 = $90;
 $2 = $91;
 $3 = $92;
 $93 = $2;
 $0 = $93;
 $94 = $0;
 __ZdlPv($94);
 $9 = $37;
 $95 = $9;
 $96 = ((($95)) + 8|0);
 $8 = $96;
 $97 = $8;
 $7 = $97;
 $98 = $7;
 HEAP32[$98>>2] = 0;
 $99 = ((($37)) + 4|0);
 HEAP32[$99>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 357913941;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
 }
 $11 = $14;
 $18 = $11;
 $19 = ((($18)) + 8|0);
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = $13;
 $7 = $21;
 $8 = $22;
 $23 = $7;
 $24 = $8;
 $4 = $23;
 $5 = $24;
 $6 = 0;
 $25 = $5;
 $26 = ($25*12)|0;
 $3 = $26;
 $27 = $3;
 $28 = (__Znwj($27)|0);
 $29 = ((($14)) + 4|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$14>>2] = $28;
 $30 = HEAP32[$14>>2]|0;
 $31 = $13;
 $32 = (($30) + (($31*12)|0)|0);
 $2 = $14;
 $33 = $2;
 $34 = ((($33)) + 8|0);
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 HEAP32[$36>>2] = $32;
 __ZNKSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE14__annotate_newEj($14,0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN6Layer28RelocateElPv($this,$size,$p) {
 $this = $this|0;
 $size = $size|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $p;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = $1;
 $9 = ($8|0)<(0);
 $10 = $9 << 31 >> 31;
 $11 = ($7|0)!=($8|0);
 $12 = (0)!=($10|0);
 $13 = $11 | $12;
 if ($13) {
  $14 = $2;
  $15 = $14;
  $16 = ((($3)) + 16|0);
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18;
  $20 = (_i64Add(($15|0),0,($19|0),0)|0);
  $21 = tempRet0;
  $22 = $20;
  $25 = $22;
 } else {
  $25 = 0;
 }
 $23 = ((($3)) + 16|0);
 $24 = ((($23)) + 8|0);
 HEAP32[$24>>2] = $25;
 $26 = ((($3)) + 32|0);
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28;
 $30 = $1;
 $31 = ($30|0)<(0);
 $32 = $31 << 31 >> 31;
 $33 = ($29|0)!=($30|0);
 $34 = (0)!=($32|0);
 $35 = $33 | $34;
 if (!($35)) {
  $47 = 0;
  $45 = ((($3)) + 32|0);
  $46 = ((($45)) + 8|0);
  HEAP32[$46>>2] = $47;
  STACKTOP = sp;return;
 }
 $36 = $2;
 $37 = $36;
 $38 = ((($3)) + 32|0);
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40;
 $42 = (_i64Add(($37|0),0,($41|0),0)|0);
 $43 = tempRet0;
 $44 = $42;
 $47 = $44;
 $45 = ((($3)) + 32|0);
 $46 = ((($45)) + 8|0);
 HEAP32[$46>>2] = $47;
 STACKTOP = sp;return;
}
function __ZN10MeshLoader4Mesh5SetupEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 24|0;
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 __ZN10MeshLoader4Mesh11CalcNormalsEv($3);
 $4 = ((($3)) + 76|0);
 $5 = ((($3)) + 60|0);
 ;HEAP32[$1>>2]=HEAP32[$5>>2]|0;HEAP32[$1+4>>2]=HEAP32[$5+4>>2]|0;
 $6 = ((($3)) + 68|0);
 ;HEAP32[$2>>2]=HEAP32[$6>>2]|0;HEAP32[$2+4>>2]=HEAP32[$6+4>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;
 __ZN10MeshLoader6UVMaps5SetupEN3gsl4spanI6Layer2Lin1EJEEENS2_I10st_SurfaceLin1EJEEERKNSt3__16vectorINS_7PolygonENS7_9allocatorIS9_EEEE($4,$$byval_copy,$$byval_copy1,$3);
 STACKTOP = sp;return;
}
function __ZN10MeshLoader4Mesh11CalcNormalsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__begin = 0, $__begin2 = 0, $__end = 0, $__end3 = 0, $__range = 0, $__range1 = 0, $end = 0, $j = 0, $j4 = 0, $l = 0, $np = 0, $p = 0;
 var $section = 0, $v_to_n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 676|0;
 $11 = sp + 56|0;
 $12 = sp + 664|0;
 $15 = sp + 652|0;
 $16 = sp + 48|0;
 $22 = sp + 628|0;
 $23 = sp + 624|0;
 $24 = sp + 40|0;
 $25 = sp + 32|0;
 $26 = sp + 24|0;
 $28 = sp + 616|0;
 $29 = sp + 612|0;
 $30 = sp + 714|0;
 $31 = sp + 16|0;
 $32 = sp + 8|0;
 $37 = sp + 592|0;
 $40 = sp + 580|0;
 $44 = sp + 564|0;
 $47 = sp + 552|0;
 $61 = sp;
 $66 = sp + 713|0;
 $__annotator$i = sp + 712|0;
 $112 = sp + 300|0;
 $115 = sp + 288|0;
 $119 = sp + 272|0;
 $122 = sp + 260|0;
 $__begin = sp + 240|0;
 $__end = sp + 236|0;
 $126 = sp + 220|0;
 $127 = sp + 208|0;
 $128 = sp + 196|0;
 $__begin2 = sp + 184|0;
 $__end3 = sp + 176|0;
 $v_to_n = sp + 148|0;
 $129 = sp + 144|0;
 $130 = sp + 140|0;
 $131 = sp + 128|0;
 $132 = sp + 124|0;
 $133 = sp + 120|0;
 $134 = sp + 116|0;
 $137 = sp + 84|0;
 $138 = sp + 72|0;
 $139 = sp + 60|0;
 $125 = $this;
 $140 = $125;
 $141 = ((($140)) + 12|0);
 $124 = $140;
 $142 = $124;
 $143 = ((($142)) + 4|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = HEAP32[$142>>2]|0;
 $146 = $144;
 $147 = $145;
 $148 = (($146) - ($147))|0;
 $149 = (($148|0) / 12)&-1;
 __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE7reserveEj($141,$149);
 $__range = $140;
 $150 = $__range;
 $123 = $150;
 $151 = $123;
 $152 = HEAP32[$151>>2]|0;
 $120 = $151;
 $121 = $152;
 $153 = $121;
 $117 = $119;
 $118 = $153;
 $154 = $117;
 $155 = $118;
 HEAP32[$154>>2] = $155;
 $156 = HEAP32[$119>>2]|0;
 HEAP32[$122>>2] = $156;
 $157 = HEAP32[$122>>2]|0;
 HEAP32[$__begin>>2] = $157;
 $158 = $__range;
 $116 = $158;
 $159 = $116;
 $160 = ((($159)) + 4|0);
 $161 = HEAP32[$160>>2]|0;
 $113 = $159;
 $114 = $161;
 $162 = $114;
 $110 = $112;
 $111 = $162;
 $163 = $110;
 $164 = $111;
 HEAP32[$163>>2] = $164;
 $165 = HEAP32[$112>>2]|0;
 HEAP32[$115>>2] = $165;
 $166 = HEAP32[$115>>2]|0;
 HEAP32[$__end>>2] = $166;
 while(1) {
  $108 = $__begin;
  $109 = $__end;
  $167 = $108;
  $168 = $109;
  $106 = $167;
  $107 = $168;
  $169 = $106;
  $105 = $169;
  $170 = $105;
  $171 = HEAP32[$170>>2]|0;
  $172 = $107;
  $104 = $172;
  $173 = $104;
  $174 = HEAP32[$173>>2]|0;
  $175 = ($171|0)==($174|0);
  $176 = $175 ^ 1;
  if (!($176)) {
   break;
  }
  $103 = $__begin;
  $177 = $103;
  $178 = HEAP32[$177>>2]|0;
  $p = $178;
  $179 = ((($140)) + 12|0);
  $180 = ((($140)) + 24|0);
  $181 = $p;
  $182 = HEAP32[$181>>2]|0;
  $95 = $180;
  $96 = $182;
  $183 = $95;
  $184 = $96;
  $185 = HEAP32[$183>>2]|0;
  $186 = (($185) + (($184*12)|0)|0);
  $187 = ((($140)) + 24|0);
  $188 = $p;
  $189 = ((($188)) + 8|0);
  $190 = HEAP32[$189>>2]|0;
  $93 = $187;
  $94 = $190;
  $191 = $93;
  $192 = $94;
  $193 = HEAP32[$191>>2]|0;
  $194 = (($193) + (($192*12)|0)|0);
  __ZN3glmmiIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($127,$186,$194);
  $195 = ((($140)) + 24|0);
  $196 = $p;
  $197 = ((($196)) + 8|0);
  $198 = HEAP32[$197>>2]|0;
  $85 = $195;
  $86 = $198;
  $199 = $85;
  $200 = $86;
  $201 = HEAP32[$199>>2]|0;
  $202 = (($201) + (($200*12)|0)|0);
  $203 = ((($140)) + 24|0);
  $204 = $p;
  $205 = ((($204)) + 4|0);
  $206 = HEAP32[$205>>2]|0;
  $83 = $203;
  $84 = $206;
  $207 = $83;
  $208 = $84;
  $209 = HEAP32[$207>>2]|0;
  $210 = (($209) + (($208*12)|0)|0);
  __ZN3glmmiIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($128,$202,$210);
  __ZN3glm5crossIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($126,$127,$128);
  $75 = $179;
  $76 = $126;
  $211 = $75;
  $212 = ((($211)) + 4|0);
  $213 = HEAP32[$212>>2]|0;
  $74 = $211;
  $214 = $74;
  $215 = ((($214)) + 8|0);
  $73 = $215;
  $216 = $73;
  $72 = $216;
  $217 = $72;
  $218 = HEAP32[$217>>2]|0;
  $219 = ($213>>>0)<($218>>>0);
  if ($219) {
   __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i,$211,1);
   $71 = $211;
   $220 = $71;
   $221 = ((($220)) + 8|0);
   $70 = $221;
   $222 = $70;
   $69 = $222;
   $223 = $69;
   $224 = ((($211)) + 4|0);
   $225 = HEAP32[$224>>2]|0;
   $67 = $225;
   $226 = $67;
   $227 = $76;
   $52 = $227;
   $228 = $52;
   $63 = $223;
   $64 = $226;
   $65 = $228;
   $229 = $63;
   $230 = $64;
   $231 = $65;
   $62 = $231;
   $232 = $62;
   ;HEAP8[$61>>0]=HEAP8[$66>>0]|0;
   $58 = $229;
   $59 = $230;
   $60 = $232;
   $233 = $58;
   $234 = $59;
   $235 = $60;
   $57 = $235;
   $236 = $57;
   $54 = $233;
   $55 = $234;
   $56 = $236;
   $237 = $55;
   $238 = $56;
   $53 = $238;
   $239 = $53;
   __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($237,$239);
   __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $240 = ((($211)) + 4|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = ((($241)) + 12|0);
   HEAP32[$240>>2] = $242;
  } else {
   $243 = $76;
   $68 = $243;
   $244 = $68;
   __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($211,$244);
  }
  $51 = $__begin;
  $245 = $51;
  $246 = HEAP32[$245>>2]|0;
  $247 = ((($246)) + 12|0);
  HEAP32[$245>>2] = $247;
 }
 $248 = ((($140)) + 36|0);
 $50 = $140;
 $249 = $50;
 $250 = ((($249)) + 4|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = HEAP32[$249>>2]|0;
 $253 = $251;
 $254 = $252;
 $255 = (($253) - ($254))|0;
 $256 = (($255|0) / 12)&-1;
 __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE6resizeEj($248,$256);
 $257 = ((($140)) + 60|0);
 $__range1 = $257;
 $258 = $__range1;
 __ZNK3gsl4spanI6Layer2Lin1EJEE5beginEv($__begin2,$258);
 $259 = $__range1;
 __ZNK3gsl4spanI6Layer2Lin1EJEE3endEv($__end3,$259);
 L9: while(1) {
  $260 = (__ZNK3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEneERKS4_($__begin2,$__end3)|0);
  if (!($260)) {
   label = 33;
   break;
  }
  $261 = (__ZNK3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEdeEv($__begin2)|0);
  $l = $261;
  $section = 0;
  while(1) {
   $262 = $section;
   $263 = $l;
   $264 = ((($263)) + 16|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = ($262>>>0)<($265>>>0);
   if (!($266)) {
    break;
   }
   $267 = $section;
   $268 = $l;
   $269 = ((($268)) + 16|0);
   $270 = ((($269)) + 8|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = (($271) + ($267<<4)|0);
   $273 = ((($272)) + 8|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = $section;
   $276 = $l;
   $277 = ((($276)) + 16|0);
   $278 = ((($277)) + 8|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = (($279) + ($275<<4)|0);
   $281 = ((($280)) + 12|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($274) + ($282))|0;
   $end = $283;
   $284 = ((($140)) + 24|0);
   $49 = $284;
   $285 = $49;
   $286 = ((($285)) + 4|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = HEAP32[$285>>2]|0;
   $289 = $287;
   $290 = $288;
   $291 = (($289) - ($290))|0;
   $292 = (($291|0) / 12)&-1;
   __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEEC2Ej($v_to_n,$292);
   $48 = $v_to_n;
   $293 = $48;
   $294 = HEAP32[$293>>2]|0;
   $45 = $293;
   $46 = $294;
   $295 = $46;
   $42 = $44;
   $43 = $295;
   $296 = $42;
   $297 = $43;
   HEAP32[$296>>2] = $297;
   $298 = HEAP32[$44>>2]|0;
   HEAP32[$47>>2] = $298;
   $299 = HEAP32[$47>>2]|0;
   HEAP32[$129>>2] = $299;
   $41 = $v_to_n;
   $300 = $41;
   $301 = ((($300)) + 4|0);
   $302 = HEAP32[$301>>2]|0;
   $38 = $300;
   $39 = $302;
   $303 = $39;
   $35 = $37;
   $36 = $303;
   $304 = $35;
   $305 = $36;
   HEAP32[$304>>2] = $305;
   $306 = HEAP32[$37>>2]|0;
   HEAP32[$40>>2] = $306;
   $307 = HEAP32[$40>>2]|0;
   HEAP32[$130>>2] = $307;
   HEAPF32[$132>>2] = nan;
   HEAPF32[$133>>2] = nan;
   HEAPF32[$134>>2] = nan;
   __THREW__ = 0;
   invoke_viiii(405,($131|0),($132|0),($133|0),($134|0));
   $308 = __THREW__; __THREW__ = 0;
   $309 = $308&1;
   if ($309) {
    label = 21;
    break L9;
   }
   ;HEAP8[$31>>0]=HEAP8[$130>>0]|0;HEAP8[$31+1>>0]=HEAP8[$130+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$130+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$130+3>>0]|0;
   ;HEAP8[$32>>0]=HEAP8[$129>>0]|0;HEAP8[$32+1>>0]=HEAP8[$129+1>>0]|0;HEAP8[$32+2>>0]=HEAP8[$129+2>>0]|0;HEAP8[$32+3>>0]=HEAP8[$129+3>>0]|0;
   $27 = $131;
   ;HEAP32[$28>>2]=HEAP32[$32>>2]|0;
   ;HEAP32[$29>>2]=HEAP32[$31>>2]|0;
   $310 = $27;
   ;HEAP8[$24>>0]=HEAP8[$30>>0]|0;
   ;HEAP8[$25>>0]=HEAP8[$29>>0]|0;HEAP8[$25+1>>0]=HEAP8[$29+1>>0]|0;HEAP8[$25+2>>0]=HEAP8[$29+2>>0]|0;HEAP8[$25+3>>0]=HEAP8[$29+3>>0]|0;
   ;HEAP8[$26>>0]=HEAP8[$28>>0]|0;HEAP8[$26+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$28+3>>0]|0;
   $21 = $310;
   ;HEAP32[$22>>2]=HEAP32[$26>>2]|0;
   $19 = $25;
   $20 = $26;
   $311 = $19;
   $18 = $311;
   $312 = $18;
   $313 = HEAP32[$312>>2]|0;
   $314 = $20;
   $17 = $314;
   $315 = $17;
   $316 = HEAP32[$315>>2]|0;
   $317 = $313;
   $318 = $316;
   $319 = (($317) - ($318))|0;
   $320 = (($319|0) / 12)&-1;
   $321 = $21;
   ;HEAP8[$16>>0]=HEAP8[$22>>0]|0;HEAP8[$16+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$22+3>>0]|0;
   $13 = $320;
   $14 = $321;
   ;HEAP32[$15>>2]=HEAP32[$16>>2]|0;
   $322 = $13;
   $323 = $14;
   ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;HEAP8[$11+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$15+3>>0]|0;
   $9 = $322;
   $10 = $323;
   while(1) {
    $324 = $9;
    $325 = ($324|0)>(0);
    if (!($325)) {
     break;
    }
    $7 = $11;
    $326 = $7;
    $327 = HEAP32[$326>>2]|0;
    $328 = $10;
    (__ZN3glm5tvec3IfLNS_9precisionE0EEaSERKS2_($327,$328)|0);
    $6 = $11;
    $329 = $6;
    $330 = HEAP32[$329>>2]|0;
    $331 = ((($330)) + 12|0);
    HEAP32[$329>>2] = $331;
    $332 = $9;
    $333 = (($332) + -1)|0;
    $9 = $333;
   }
   ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;
   $334 = HEAP32[$8>>2]|0;
   HEAP32[$12>>2] = $334;
   $335 = HEAP32[$12>>2]|0;
   HEAP32[$23>>2] = $335;
   $336 = $section;
   $337 = $l;
   $338 = ((($337)) + 16|0);
   $339 = ((($338)) + 8|0);
   $340 = HEAP32[$339>>2]|0;
   $341 = (($340) + ($336<<4)|0);
   $342 = ((($341)) + 8|0);
   $343 = HEAP32[$342>>2]|0;
   $j = $343;
   while(1) {
    $344 = $j;
    $345 = $end;
    $346 = ($344>>>0)<($345>>>0);
    if (!($346)) {
     break;
    }
    $347 = ((($140)) + 12|0);
    $348 = $j;
    $4 = $347;
    $5 = $348;
    $349 = $4;
    $350 = $5;
    $351 = HEAP32[$349>>2]|0;
    $352 = (($351) + (($350*12)|0)|0);
    $np = $352;
    $353 = $j;
    $0 = $140;
    $1 = $353;
    $354 = $0;
    $355 = $1;
    $356 = HEAP32[$354>>2]|0;
    $357 = (($356) + (($355*12)|0)|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = $np;
    __THREW__ = 0;
    invoke_viii(617,($v_to_n|0),($358|0),($359|0));
    $360 = __THREW__; __THREW__ = 0;
    $361 = $360&1;
    if ($361) {
     label = 21;
     break L9;
    }
    $362 = $j;
    $2 = $140;
    $3 = $362;
    $363 = $2;
    $364 = $3;
    $365 = HEAP32[$363>>2]|0;
    $366 = (($365) + (($364*12)|0)|0);
    $367 = ((($366)) + 4|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = $np;
    __THREW__ = 0;
    invoke_viii(617,($v_to_n|0),($368|0),($369|0));
    $370 = __THREW__; __THREW__ = 0;
    $371 = $370&1;
    if ($371) {
     label = 21;
     break L9;
    }
    $372 = $j;
    $33 = $140;
    $34 = $372;
    $373 = $33;
    $374 = $34;
    $375 = HEAP32[$373>>2]|0;
    $376 = (($375) + (($374*12)|0)|0);
    $377 = ((($376)) + 8|0);
    $378 = HEAP32[$377>>2]|0;
    $379 = $np;
    __THREW__ = 0;
    invoke_viii(617,($v_to_n|0),($378|0),($379|0));
    $380 = __THREW__; __THREW__ = 0;
    $381 = $380&1;
    if ($381) {
     label = 21;
     break L9;
    }
    $382 = $j;
    $383 = (($382) + 1)|0;
    $j = $383;
   }
   $388 = $section;
   $389 = $l;
   $390 = ((($389)) + 16|0);
   $391 = ((($390)) + 8|0);
   $392 = HEAP32[$391>>2]|0;
   $393 = (($392) + ($388<<4)|0);
   $394 = ((($393)) + 8|0);
   $395 = HEAP32[$394>>2]|0;
   $j4 = $395;
   while(1) {
    $396 = $j4;
    $397 = $end;
    $398 = ($396>>>0)<($397>>>0);
    if (!($398)) {
     break;
    }
    $399 = ((($140)) + 36|0);
    $400 = $j4;
    $77 = $399;
    $78 = $400;
    $401 = $77;
    $402 = $78;
    $403 = HEAP32[$401>>2]|0;
    $404 = (($403) + (($402*36)|0)|0);
    $405 = $j4;
    $79 = $140;
    $80 = $405;
    $406 = $79;
    $407 = $80;
    $408 = HEAP32[$406>>2]|0;
    $409 = (($408) + (($407*12)|0)|0);
    $410 = HEAP32[$409>>2]|0;
    $81 = $v_to_n;
    $82 = $410;
    $411 = $81;
    $412 = $82;
    $413 = HEAP32[$411>>2]|0;
    $414 = (($413) + (($412*12)|0)|0);
    __THREW__ = 0;
    invoke_vii(618,($137|0),($414|0));
    $415 = __THREW__; __THREW__ = 0;
    $416 = $415&1;
    if ($416) {
     label = 21;
     break L9;
    }
    __THREW__ = 0;
    (invoke_iii(473,($404|0),($137|0))|0);
    $417 = __THREW__; __THREW__ = 0;
    $418 = $417&1;
    if ($418) {
     label = 21;
     break L9;
    }
    $419 = ((($140)) + 36|0);
    $420 = $j4;
    $87 = $419;
    $88 = $420;
    $421 = $87;
    $422 = $88;
    $423 = HEAP32[$421>>2]|0;
    $424 = (($423) + (($422*36)|0)|0);
    $425 = ((($424)) + 12|0);
    $426 = $j4;
    $89 = $140;
    $90 = $426;
    $427 = $89;
    $428 = $90;
    $429 = HEAP32[$427>>2]|0;
    $430 = (($429) + (($428*12)|0)|0);
    $431 = ((($430)) + 4|0);
    $432 = HEAP32[$431>>2]|0;
    $91 = $v_to_n;
    $92 = $432;
    $433 = $91;
    $434 = $92;
    $435 = HEAP32[$433>>2]|0;
    $436 = (($435) + (($434*12)|0)|0);
    __THREW__ = 0;
    invoke_vii(618,($138|0),($436|0));
    $437 = __THREW__; __THREW__ = 0;
    $438 = $437&1;
    if ($438) {
     label = 21;
     break L9;
    }
    __THREW__ = 0;
    (invoke_iii(473,($425|0),($138|0))|0);
    $439 = __THREW__; __THREW__ = 0;
    $440 = $439&1;
    if ($440) {
     label = 21;
     break L9;
    }
    $441 = ((($140)) + 36|0);
    $442 = $j4;
    $97 = $441;
    $98 = $442;
    $443 = $97;
    $444 = $98;
    $445 = HEAP32[$443>>2]|0;
    $446 = (($445) + (($444*36)|0)|0);
    $447 = ((($446)) + 24|0);
    $448 = $j4;
    $99 = $140;
    $100 = $448;
    $449 = $99;
    $450 = $100;
    $451 = HEAP32[$449>>2]|0;
    $452 = (($451) + (($450*12)|0)|0);
    $453 = ((($452)) + 8|0);
    $454 = HEAP32[$453>>2]|0;
    $101 = $v_to_n;
    $102 = $454;
    $455 = $101;
    $456 = $102;
    $457 = HEAP32[$455>>2]|0;
    $458 = (($457) + (($456*12)|0)|0);
    __THREW__ = 0;
    invoke_vii(618,($139|0),($458|0));
    $459 = __THREW__; __THREW__ = 0;
    $460 = $459&1;
    if ($460) {
     label = 21;
     break L9;
    }
    __THREW__ = 0;
    (invoke_iii(473,($447|0),($139|0))|0);
    $461 = __THREW__; __THREW__ = 0;
    $462 = $461&1;
    if ($462) {
     label = 21;
     break L9;
    }
    $463 = $j4;
    $464 = (($463) + 1)|0;
    $j4 = $464;
   }
   __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($v_to_n);
   $465 = $section;
   $466 = (($465) + 1)|0;
   $section = $466;
  }
  (__ZN3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEppEv($__begin2)|0);
 }
 if ((label|0) == 21) {
  $384 = ___cxa_find_matching_catch()|0;
  $385 = tempRet0;
  $135 = $384;
  $136 = $385;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($v_to_n);
  $386 = $135;
  $387 = $136;
  ___resumeException($386|0);
  // unreachable;
 }
 else if ((label|0) == 33) {
  STACKTOP = sp;return;
 }
}
function __ZN10MeshLoader6UVMaps5SetupEN3gsl4spanI6Layer2Lin1EJEEENS2_I10st_SurfaceLin1EJEEERKNSt3__16vectorINS_7PolygonENS7_9allocatorIS9_EEEE($this,$layers,$surfaces,$polygons) {
 $this = $this|0;
 $layers = $layers|0;
 $surfaces = $surfaces|0;
 $polygons = $polygons|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__begin = 0;
 var $__end = 0, $__range = 0, $i = 0, $j = 0, $k = 0, $l = 0, $pLayer = 0, $surface_section = 0, $uvmap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 100|0;
 $17 = sp + 88|0;
 $21 = sp + 72|0;
 $24 = sp + 60|0;
 $__begin = sp + 40|0;
 $__end = sp + 36|0;
 $28 = sp + 20|0;
 $29 = sp;
 $26 = $this;
 $27 = $polygons;
 $30 = $26;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEE4sizeEv($surfaces)|0);
 __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE6resizeEj($30,$34);
 $__range = $30;
 $35 = $__range;
 $25 = $35;
 $36 = $25;
 $37 = HEAP32[$36>>2]|0;
 $22 = $36;
 $23 = $37;
 $38 = $23;
 $19 = $21;
 $20 = $38;
 $39 = $19;
 $40 = $20;
 HEAP32[$39>>2] = $40;
 $41 = HEAP32[$21>>2]|0;
 HEAP32[$24>>2] = $41;
 $42 = HEAP32[$24>>2]|0;
 HEAP32[$__begin>>2] = $42;
 $43 = $__range;
 $18 = $43;
 $44 = $18;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $15 = $44;
 $16 = $46;
 $47 = $16;
 $12 = $14;
 $13 = $47;
 $48 = $12;
 $49 = $13;
 HEAP32[$48>>2] = $49;
 $50 = HEAP32[$14>>2]|0;
 HEAP32[$17>>2] = $50;
 $51 = HEAP32[$17>>2]|0;
 HEAP32[$__end>>2] = $51;
 while(1) {
  $6 = $__begin;
  $7 = $__end;
  $52 = $6;
  $53 = $7;
  $4 = $52;
  $5 = $53;
  $54 = $4;
  $3 = $54;
  $55 = $3;
  $56 = HEAP32[$55>>2]|0;
  $57 = $5;
  $2 = $57;
  $58 = $2;
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56|0)==($59|0);
  $61 = $60 ^ 1;
  if (!($61)) {
   break;
  }
  $1 = $__begin;
  $62 = $1;
  $63 = HEAP32[$62>>2]|0;
  $uvmap = $63;
  $64 = $uvmap;
  $65 = ((($30)) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE6resizeEj($64,$66);
  $0 = $__begin;
  $67 = $0;
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($68)) + 12|0);
  HEAP32[$67>>2] = $69;
 }
 $i = 0;
 while(1) {
  $70 = $i;
  $71 = (__ZNK3gsl4spanI6Layer2Lin1EJEE4sizeEv($layers)|0);
  $72 = ($70>>>0)<($71>>>0);
  if (!($72)) {
   break;
  }
  $73 = $i;
  __ZN3gsl5indexILj1EEC2IJjEvEEDpT_($28,$73);
  $74 = (__ZNK3gsl4spanI6Layer2Lin1EJEEixERKNS_5indexILj1EEE($layers,$28)|0);
  $l = $74;
  $k = 0;
  while(1) {
   $75 = $k;
   $76 = $l;
   $77 = ((($76)) + 16|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($75>>>0)<($78>>>0);
   if (!($79)) {
    break;
   }
   $80 = $k;
   $81 = $l;
   $82 = ((($81)) + 16|0);
   $83 = ((($82)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($80<<4)|0);
   $surface_section = $85;
   $j = 0;
   while(1) {
    $86 = $j;
    $87 = ($86>>>0)<(10);
    if (!($87)) {
     break;
    }
    $88 = $j;
    $89 = $surface_section;
    $90 = ((($89)) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    __ZN3gsl5indexILj1EEC2IJjEvEEDpT_($29,$91);
    $92 = (__ZNK3gsl4spanI10st_SurfaceLin1EJEEixERKNS_5indexILj1EEE($surfaces,$29)|0);
    $93 = ((($92)) + 24|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) + (($88*24)|0)|0);
    $96 = ((($95)) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $pLayer = $97;
    while(1) {
     $98 = $pLayer;
     $99 = ($98|0)!=(0|0);
     if (!($99)) {
      break;
     }
     $100 = $pLayer;
     $101 = ((($100)) + 16|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ((($30)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($102|0)!=($104|0);
     if (!($105)) {
      break;
     }
     $106 = $pLayer;
     $107 = ((($106)) + 16|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = $surface_section;
     $110 = ((($109)) + 4|0);
     $111 = HEAP32[$110>>2]|0;
     $8 = $30;
     $9 = $111;
     $112 = $8;
     $113 = $9;
     $114 = HEAP32[$112>>2]|0;
     $115 = (($114) + (($113*12)|0)|0);
     $116 = $pLayer;
     $117 = ((($116)) + 16|0);
     $118 = HEAP32[$117>>2]|0;
     $10 = $115;
     $11 = $118;
     $119 = $10;
     $120 = $11;
     $121 = HEAP32[$119>>2]|0;
     $122 = (($121) + ($120<<3)|0);
     $123 = $surface_section;
     $124 = ((($123)) + 8|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $surface_section;
     $127 = ((($126)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $27;
     __ZN10MeshLoader6UVMaps16CreateSurfaceUVsElPNS0_15st_SurfaceUVMapEjjRKNSt3__16vectorINS_7PolygonENS3_9allocatorIS5_EEEE($30,$108,$122,$125,$128,$129);
     $130 = $pLayer;
     $131 = ((($130)) + 56|0);
     $132 = HEAP32[$131>>2]|0;
     $pLayer = $132;
    }
    $133 = $j;
    $134 = (($133) + 1)|0;
    $j = $134;
   }
   $135 = $k;
   $136 = (($135) + 1)|0;
   $k = $136;
  }
  $137 = $i;
  $138 = (($137) + 1)|0;
  $i = $138;
 }
 STACKTOP = sp;return;
}
function __ZN10MeshLoader6UVMaps7CleanUpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  __ZdaPv($3);
 }
 $5 = ((($1)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 __ZdaPv($6);
 STACKTOP = sp;return;
}
function __ZN10MeshLoader6UVMaps16CreateSurfaceUVsElPNS0_15st_SurfaceUVMapEjjRKNSt3__16vectorINS_7PolygonENS3_9allocatorIS5_EEEE($this,$n,$uvmap,$offset,$num,$polygons) {
 $this = $this|0;
 $n = $n|0;
 $uvmap = $uvmap|0;
 $offset = $offset|0;
 $num = $num|0;
 $polygons = $polygons|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0;
 var $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $l = 0;
 var $pDV = 0, $pUV = 0, $size = 0, $uv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $n;
 $4 = $uvmap;
 $5 = $offset;
 $6 = $num;
 $7 = $polygons;
 $8 = $2;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $3;
 $14 = ((($8)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13>>>0)<($15>>>0);
 if (!($16)) {
  ___assert_fail((22882|0),(22904|0),139,(22931|0));
  // unreachable;
 }
 $17 = $6;
 $18 = ($17*6)|0;
 $size = $18;
 $$arith = $18<<2;
 $$overflow = ($18>>>0)>(1073741823);
 $19 = $$overflow ? -1 : $$arith;
 $20 = (__Znaj($19)|0);
 $21 = $4;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = $20;
 $23 = $5;
 $i = $23;
 $j = 0;
 while(1) {
  $24 = $i;
  $25 = $5;
  $26 = $6;
  $27 = (($25) + ($26))|0;
  $28 = ($24>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $k = 0;
  while(1) {
   $29 = $k;
   $30 = ($29>>>0)<(3);
   if (!($30)) {
    break;
   }
   $31 = $k;
   $32 = $7;
   $33 = $i;
   $0 = $32;
   $1 = $33;
   $34 = $0;
   $35 = $1;
   $36 = HEAP32[$34>>2]|0;
   $37 = (($36) + (($35*12)|0)|0);
   $38 = (($37) + ($31<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39;
   $41 = $3;
   $42 = ((($8)) + 16|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($41<<4)|0);
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $3;
   $48 = ((($8)) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($47<<4)|0);
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (_bsearch($40,$46,$52,12,619)|0);
   $pUV = $53;
   $54 = $pUV;
   $55 = ($54|0)!=(0|0);
   if ($55) {
    $56 = $pUV;
    $57 = ((($56)) + 4|0);
    $58 = +HEAPF32[$57>>2];
    $59 = $j;
    $60 = $4;
    $61 = ((($60)) + 4|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + ($59<<2)|0);
    HEAPF32[$63>>2] = $58;
    $64 = $j;
    $65 = (($64) + 1)|0;
    $j = $65;
    $66 = $pUV;
    $67 = ((($66)) + 8|0);
    $68 = +HEAPF32[$67>>2];
    $69 = $j;
    $70 = $4;
    $71 = ((($70)) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) + ($69<<2)|0);
    HEAPF32[$73>>2] = $68;
    $74 = $j;
    $75 = (($74) + 1)|0;
    $j = $75;
   }
   $76 = $k;
   $77 = (($76) + 1)|0;
   $k = $77;
  }
  $78 = $i;
  $79 = (($78) + 1)|0;
  $i = $79;
 }
 $l = 0;
 while(1) {
  $80 = $l;
  $81 = $3;
  $82 = ((($8)) + 20|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + ($81<<4)|0);
  $85 = ((($84)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($80>>>0)<($86>>>0);
  if (!($87)) {
   break;
  }
  $88 = $l;
  $89 = $3;
  $90 = ((($8)) + 20|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + ($89<<4)|0);
  $93 = ((($92)) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + ($88<<4)|0);
  $pDV = $95;
  $96 = $pDV;
  $97 = HEAP32[$96>>2]|0;
  $98 = $5;
  $99 = ($97>>>0)>=($98>>>0);
  if ($99) {
   $100 = $pDV;
   $101 = HEAP32[$100>>2]|0;
   $102 = $5;
   $103 = $6;
   $104 = (($102) + ($103))|0;
   $105 = ($101>>>0)<($104>>>0);
   if ($105) {
    $106 = $pDV;
    $107 = HEAP32[$106>>2]|0;
    $108 = $5;
    $109 = (($107) - ($108))|0;
    $110 = $109<<1;
    $111 = ($110*3)|0;
    $112 = $4;
    $113 = ((($112)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + ($111<<2)|0);
    $uv = $115;
    $116 = $pDV;
    $117 = ((($116)) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $118<<1;
    $120 = $uv;
    $121 = (($120) + ($119<<2)|0);
    $uv = $121;
    $122 = $pDV;
    $123 = ((($122)) + 8|0);
    $124 = +HEAPF32[$123>>2];
    $125 = $uv;
    HEAPF32[$125>>2] = $124;
    $126 = $uv;
    $127 = ((($126)) + 4|0);
    $uv = $127;
    $128 = $pDV;
    $129 = ((($128)) + 12|0);
    $130 = +HEAPF32[$129>>2];
    $131 = $uv;
    HEAPF32[$131>>2] = $130;
   }
  }
  $132 = $l;
  $133 = (($132) + 1)|0;
  $l = $133;
 }
 STACKTOP = sp;return;
}
function __ZN3glmmiIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $v1;
 $1 = $v2;
 $5 = $0;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 - $8;
 HEAPF32[$2>>2] = $9;
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $12 - $15;
 HEAPF32[$3>>2] = $16;
 $17 = $0;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $19 - $22;
 HEAPF32[$4>>2] = $23;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZN3glm5crossIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_($agg$result,$x,$y) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $0 = $x;
 $1 = $y;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = ((($8)) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $7 * $10;
 $12 = $1;
 $13 = ((($12)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $0;
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $14 * $17;
 $19 = $11 - $18;
 HEAPF32[$2>>2] = $19;
 $20 = $0;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $1;
 $24 = +HEAPF32[$23>>2];
 $25 = $22 * $24;
 $26 = $1;
 $27 = ((($26)) + 8|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $0;
 $30 = +HEAPF32[$29>>2];
 $31 = $28 * $30;
 $32 = $25 - $31;
 HEAPF32[$3>>2] = $32;
 $33 = $0;
 $34 = +HEAPF32[$33>>2];
 $35 = $1;
 $36 = ((($35)) + 4|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $34 * $37;
 $39 = $1;
 $40 = +HEAPF32[$39>>2];
 $41 = $0;
 $42 = ((($41)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $40 * $43;
 $45 = $38 - $44;
 HEAPF32[$4>>2] = $45;
 __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_($agg$result,$2,$3,$4);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 36)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + (($39*36)|0)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 36)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -36|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(620,($41|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $6 = sp + 24|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $7 = $14;
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($14)) + 8|0);
 $5 = $16;
 HEAP32[$6>>2] = 0;
 $17 = $5;
 $4 = $6;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $2 = $17;
 HEAP32[$3>>2] = $19;
 $20 = $2;
 $1 = $20;
 $0 = $3;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 $23 = $10;
 $24 = ($23>>>0)>(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $10;
 __THREW__ = 0;
 invoke_vii(419,($13|0),($25|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = $10;
  __THREW__ = 0;
  invoke_vii(621,($13|0),($28|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if (!($30)) {
   STACKTOP = sp;return;
  }
 }
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $11 = $31;
 $12 = $32;
 __ZNSt3__113__vector_baseIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEED2Ev($13);
 $33 = $11;
 $34 = $12;
 ___resumeException($33|0);
 // unreachable;
}
function __ZN12_GLOBAL__N_110SumNormalsERNSt3__16vectorIN3glm5tvec3IfLNS2_9precisionE0EEENS0_9allocatorIS5_EEEEjPKS5_($v_to_n,$v,$np) {
 $v_to_n = $v_to_n|0;
 $v = $v|0;
 $np = $np|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp;
 $11 = $v_to_n;
 $12 = $v;
 $13 = $np;
 $15 = $11;
 $16 = $12;
 $9 = $15;
 $10 = $16;
 $17 = $9;
 $18 = $10;
 $19 = HEAP32[$17>>2]|0;
 $20 = (($19) + (($18*12)|0)|0);
 $21 = +HEAPF32[$20>>2];
 $8 = $21;
 $22 = $8;
 $7 = $22;
 $23 = $7;
 __THREW__ = 0;
 $24 = (invoke_id(622,(+$23))|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch(0|0)|0;
  $28 = tempRet0;
  ___clang_call_terminate($27);
  // unreachable;
 }
 $29 = $24 & 2147483647;
 $30 = ($29>>>0)>(2139095040);
 $31 = $11;
 $32 = $12;
 if ($30) {
  $5 = $31;
  $6 = $32;
  $33 = $5;
  $34 = $6;
  $35 = HEAP32[$33>>2]|0;
  $36 = (($35) + (($34*12)|0)|0);
  $37 = $13;
  (__ZN3glm5tvec3IfLNS_9precisionE0EEaSERKS2_($36,$37)|0);
  STACKTOP = sp;return;
 }
 $3 = $31;
 $4 = $32;
 $38 = $3;
 $39 = $4;
 $40 = HEAP32[$38>>2]|0;
 $41 = (($40) + (($39*12)|0)|0);
 __ZN3glm9normalizeIfLNS_9precisionE0ENS_5tvec3EEET1_IT_XT0_EERKS5_($14,$41);
 $42 = $13;
 $43 = (+__ZN3glm3dotIfLNS_9precisionE0ENS_5tvec3EEET_RKT1_IS3_XT0_EES7_($14,$42));
 $0 = $43;
 $44 = $0;
 $45 = (+Math_acos((+$44)));
 $46 = $45 <= 1.5620696544647217;
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = $11;
 $48 = $12;
 $1 = $47;
 $2 = $48;
 $49 = $1;
 $50 = $2;
 $51 = HEAP32[$49>>2]|0;
 $52 = (($51) + (($50*12)|0)|0);
 $53 = $13;
 (__ZN3glm5tvec3IfLNS_9precisionE0EEpLIfEERS2_RKNS0_IT_LS1_0EEE($52,$53)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 12)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + (($39*12)|0)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 12)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -12|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
  $68 = $1;
  __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEED2Ev($68);
 }
 $69 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(623,($41|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $72 = ___cxa_find_matching_catch(0|0)|0;
  $73 = tempRet0;
  ___clang_call_terminate($72);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 8)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + ($39<<3)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 8)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -8|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
  $68 = $1;
  __ZN10MeshLoader6UVMaps15st_SurfaceUVMapD2Ev($68);
 }
 $69 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(624,($41|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $72 = ___cxa_find_matching_catch(0|0)|0;
  $73 = tempRet0;
  ___clang_call_terminate($72);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN12_GLOBAL__N_19cmpUVVertEPKvS1_($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $p2;
 $2 = $0;
 $3 = $2;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_i64Subtract(($3|0),0,($5|0),0)|0);
 $7 = tempRet0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 8)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 8)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 8)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 8)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIN10MeshLoader6UVMaps15st_SurfaceUVMapERNS_9allocatorIS3_EEEC2EjjS6_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(625,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN10MeshLoader6UVMaps15st_SurfaceUVMapERNS_9allocatorIS3_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(626,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN10MeshLoader6UVMaps15st_SurfaceUVMapERNS_9allocatorIS3_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN10MeshLoader6UVMaps15st_SurfaceUVMapERNS_9allocatorIS3_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 8)&-1;
 $35 = (($22) + ($34<<3)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<3)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 8)&-1;
 $52 = (($43) + ($51<<3)|0);
 __ZNKSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  __ZN10MeshLoader6UVMaps15st_SurfaceUVMapC2Ev($27);
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 8|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 536870911;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN10MeshLoader6UVMaps15st_SurfaceUVMapERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<3;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<3)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<3)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN10MeshLoader6UVMaps15st_SurfaceUVMapERNS_9allocatorIS3_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  __ZN10MeshLoader6UVMaps15st_SurfaceUVMapC2Ev($29);
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 8|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 156|0;
 $__t$i = sp + 108|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -8|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -8|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  ;HEAP32[$79>>2]=HEAP32[$81>>2]|0;HEAP32[$79+4>>2]=HEAP32[$81+4>>2]|0;
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -8|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $3 = $49;
 $4 = $86;
 $87 = $3;
 $2 = $87;
 $88 = $2;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i2>>2] = $89;
 $90 = $4;
 $0 = $90;
 $91 = $0;
 $92 = HEAP32[$91>>2]|0;
 $93 = $3;
 HEAP32[$93>>2] = $92;
 $1 = $__t$i2;
 $94 = $1;
 $95 = HEAP32[$94>>2]|0;
 $96 = $4;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $8 = $97;
 $9 = $99;
 $100 = $8;
 $7 = $100;
 $101 = $7;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i1>>2] = $102;
 $103 = $9;
 $5 = $103;
 $104 = $5;
 $105 = HEAP32[$104>>2]|0;
 $106 = $8;
 HEAP32[$106>>2] = $105;
 $6 = $__t$i1;
 $107 = $6;
 $108 = HEAP32[$107>>2]|0;
 $109 = $9;
 HEAP32[$109>>2] = $108;
 $12 = $49;
 $110 = $12;
 $111 = ((($110)) + 8|0);
 $11 = $111;
 $112 = $11;
 $10 = $112;
 $113 = $10;
 $114 = $48;
 $15 = $114;
 $115 = $15;
 $116 = ((($115)) + 12|0);
 $14 = $116;
 $117 = $14;
 $13 = $117;
 $118 = $13;
 $19 = $113;
 $20 = $118;
 $119 = $19;
 $18 = $119;
 $120 = $18;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i>>2] = $121;
 $122 = $20;
 $16 = $122;
 $123 = $16;
 $124 = HEAP32[$123>>2]|0;
 $125 = $19;
 HEAP32[$125>>2] = $124;
 $17 = $__t$i;
 $126 = $17;
 $127 = HEAP32[$126>>2]|0;
 $128 = $20;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $21 = $49;
 $133 = $21;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 8)&-1;
 __ZNKSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN10MeshLoader6UVMaps15st_SurfaceUVMapERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -8|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZN10MeshLoader6UVMaps15st_SurfaceUVMapD2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = ((($62)) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = ((($70)) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 8)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 8)&-1;
 $51 = (($42) + ($50<<3)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 8)&-1;
 $67 = (($54) + ($66<<3)|0);
 __ZNKSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 8)&-1;
 $55 = (($42) + ($54<<3)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<3)|0);
 __ZNKSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZN10MeshLoader6UVMaps15st_SurfaceUVMapC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 12)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 12)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 12)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 12)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferINS_6vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS4_EEEERNS5_IS7_EEEC2EjjS9_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(627,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferINS_6vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS4_EEEERNS5_IS7_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(628,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferINS_6vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS4_EEEERNS5_IS7_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferINS_6vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS4_EEEERNS5_IS7_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($22) + (($34*12)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*12)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 __ZNKSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 80|0;
 $6 = sp + 68|0;
 $14 = sp;
 $17 = sp + 97|0;
 $__annotator = sp + 96|0;
 $22 = $this;
 $23 = $__n;
 $24 = $22;
 $21 = $24;
 $25 = $21;
 $26 = ((($25)) + 8|0);
 $20 = $26;
 $27 = $20;
 $19 = $27;
 $28 = $19;
 $__a = $28;
 while(1) {
  __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator,$24,1);
  $29 = $__a;
  $30 = ((($24)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $18 = $31;
  $32 = $18;
  $15 = $29;
  $16 = $32;
  $33 = $15;
  $34 = $16;
  ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
  $12 = $33;
  $13 = $34;
  $35 = $12;
  $36 = $13;
  $10 = $35;
  $11 = $36;
  $37 = $11;
  $9 = $37;
  $38 = $9;
  $8 = $38;
  $39 = $8;
  $7 = $39;
  HEAP32[$39>>2] = 0;
  $40 = ((($39)) + 4|0);
  HEAP32[$40>>2] = 0;
  $41 = ((($39)) + 8|0);
  $5 = $41;
  HEAP32[$6>>2] = 0;
  $42 = $5;
  $4 = $6;
  $43 = $4;
  $44 = HEAP32[$43>>2]|0;
  $2 = $42;
  HEAP32[$3>>2] = $44;
  $45 = $2;
  $1 = $45;
  $0 = $3;
  $46 = $0;
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$45>>2] = $47;
  $48 = ((($24)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 12|0);
  HEAP32[$48>>2] = $50;
  $51 = $23;
  $52 = (($51) + -1)|0;
  $23 = $52;
  __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $53 = $23;
  $54 = ($53>>>0)>(0);
  if (!($54)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 357913941;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferINS_6vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS4_EEEERNS5_IS7_EEEC2EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*12)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*12)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*12)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_6vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS4_EEEERNS5_IS7_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 76|0;
 $7 = sp + 64|0;
 $15 = sp;
 $18 = sp + 96|0;
 $22 = $this;
 $23 = $__n;
 $24 = $22;
 $21 = $24;
 $25 = $21;
 $26 = ((($25)) + 12|0);
 $20 = $26;
 $27 = $20;
 $19 = $27;
 $28 = $19;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $__a = $30;
 while(1) {
  $31 = $__a;
  $32 = ((($24)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $0 = $33;
  $34 = $0;
  $16 = $31;
  $17 = $34;
  $35 = $16;
  $36 = $17;
  ;HEAP8[$15>>0]=HEAP8[$18>>0]|0;
  $13 = $35;
  $14 = $36;
  $37 = $13;
  $38 = $14;
  $11 = $37;
  $12 = $38;
  $39 = $12;
  $10 = $39;
  $40 = $10;
  $9 = $40;
  $41 = $9;
  $8 = $41;
  HEAP32[$41>>2] = 0;
  $42 = ((($41)) + 4|0);
  HEAP32[$42>>2] = 0;
  $43 = ((($41)) + 8|0);
  $6 = $43;
  HEAP32[$7>>2] = 0;
  $44 = $6;
  $5 = $7;
  $45 = $5;
  $46 = HEAP32[$45>>2]|0;
  $3 = $44;
  HEAP32[$4>>2] = $46;
  $47 = $3;
  $2 = $47;
  $1 = $4;
  $48 = $1;
  $49 = HEAP32[$48>>2]|0;
  HEAP32[$47>>2] = $49;
  $50 = ((($24)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 12|0);
  HEAP32[$50>>2] = $52;
  $53 = $23;
  $54 = (($53) + -1)|0;
  $23 = $54;
  $55 = $23;
  $56 = ($55>>>0)>(0);
  if (!($56)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 300|0;
 $__t$i1 = sp + 276|0;
 $__t$i = sp + 228|0;
 $28 = sp + 196|0;
 $29 = sp + 16|0;
 $32 = sp + 184|0;
 $33 = sp + 326|0;
 $34 = sp + 8|0;
 $38 = sp + 325|0;
 $62 = sp;
 $67 = sp + 324|0;
 $77 = $this;
 $78 = $__v;
 $79 = $77;
 __ZNKSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE17__annotate_deleteEv($79);
 $76 = $79;
 $80 = $76;
 $81 = ((($80)) + 8|0);
 $75 = $81;
 $82 = $75;
 $74 = $82;
 $83 = $74;
 $84 = HEAP32[$79>>2]|0;
 $85 = ((($79)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $78;
 $88 = ((($87)) + 4|0);
 $69 = $83;
 $70 = $84;
 $71 = $86;
 $72 = $88;
 while(1) {
  $89 = $71;
  $90 = $70;
  $91 = ($89|0)!=($90|0);
  if (!($91)) {
   break;
  }
  $92 = $69;
  $93 = $72;
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($94)) + -12|0);
  $68 = $95;
  $96 = $68;
  $97 = $71;
  $98 = ((($97)) + -12|0);
  $71 = $98;
  $23 = $98;
  $99 = $23;
  $22 = $99;
  $100 = $22;
  $64 = $92;
  $65 = $96;
  $66 = $100;
  $101 = $64;
  $102 = $65;
  $103 = $66;
  $63 = $103;
  $104 = $63;
  ;HEAP8[$62>>0]=HEAP8[$67>>0]|0;
  $59 = $101;
  $60 = $102;
  $61 = $104;
  $105 = $59;
  $106 = $60;
  $107 = $61;
  $58 = $107;
  $108 = $58;
  $55 = $105;
  $56 = $106;
  $57 = $108;
  $109 = $56;
  $110 = $57;
  $54 = $110;
  $111 = $54;
  $52 = $109;
  $53 = $111;
  $112 = $52;
  $113 = $53;
  $51 = $113;
  $114 = $51;
  $115 = ((($114)) + 8|0);
  $50 = $115;
  $116 = $50;
  $49 = $116;
  $117 = $49;
  $48 = $117;
  $118 = $48;
  $36 = $112;
  $37 = $118;
  $119 = $36;
  $35 = $119;
  HEAP32[$119>>2] = 0;
  $120 = ((($119)) + 4|0);
  HEAP32[$120>>2] = 0;
  $121 = ((($119)) + 8|0);
  ;HEAP8[$34>>0]=HEAP8[$38>>0]|0;
  $31 = $121;
  HEAP32[$32>>2] = 0;
  $122 = $31;
  $30 = $32;
  $123 = $30;
  $124 = HEAP32[$123>>2]|0;
  $24 = $34;
  ;HEAP8[$29>>0]=HEAP8[$33>>0]|0;
  $27 = $122;
  HEAP32[$28>>2] = $124;
  $125 = $27;
  $26 = $29;
  $25 = $28;
  $126 = $25;
  $127 = HEAP32[$126>>2]|0;
  HEAP32[$125>>2] = $127;
  $128 = $53;
  $129 = HEAP32[$128>>2]|0;
  HEAP32[$112>>2] = $129;
  $130 = $53;
  $131 = ((($130)) + 4|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ((($112)) + 4|0);
  HEAP32[$133>>2] = $132;
  $134 = $53;
  $41 = $134;
  $135 = $41;
  $136 = ((($135)) + 8|0);
  $40 = $136;
  $137 = $40;
  $39 = $137;
  $138 = $39;
  $139 = HEAP32[$138>>2]|0;
  $44 = $112;
  $140 = $44;
  $141 = ((($140)) + 8|0);
  $43 = $141;
  $142 = $43;
  $42 = $142;
  $143 = $42;
  HEAP32[$143>>2] = $139;
  $144 = $53;
  $47 = $144;
  $145 = $47;
  $146 = ((($145)) + 8|0);
  $46 = $146;
  $147 = $46;
  $45 = $147;
  $148 = $45;
  HEAP32[$148>>2] = 0;
  $149 = $53;
  $150 = ((($149)) + 4|0);
  HEAP32[$150>>2] = 0;
  $151 = $53;
  HEAP32[$151>>2] = 0;
  $152 = $72;
  $153 = HEAP32[$152>>2]|0;
  $154 = ((($153)) + -12|0);
  HEAP32[$152>>2] = $154;
 }
 $155 = $78;
 $156 = ((($155)) + 4|0);
 $3 = $79;
 $4 = $156;
 $157 = $3;
 $2 = $157;
 $158 = $2;
 $159 = HEAP32[$158>>2]|0;
 HEAP32[$__t$i2>>2] = $159;
 $160 = $4;
 $0 = $160;
 $161 = $0;
 $162 = HEAP32[$161>>2]|0;
 $163 = $3;
 HEAP32[$163>>2] = $162;
 $1 = $__t$i2;
 $164 = $1;
 $165 = HEAP32[$164>>2]|0;
 $166 = $4;
 HEAP32[$166>>2] = $165;
 $167 = ((($79)) + 4|0);
 $168 = $78;
 $169 = ((($168)) + 8|0);
 $8 = $167;
 $9 = $169;
 $170 = $8;
 $7 = $170;
 $171 = $7;
 $172 = HEAP32[$171>>2]|0;
 HEAP32[$__t$i1>>2] = $172;
 $173 = $9;
 $5 = $173;
 $174 = $5;
 $175 = HEAP32[$174>>2]|0;
 $176 = $8;
 HEAP32[$176>>2] = $175;
 $6 = $__t$i1;
 $177 = $6;
 $178 = HEAP32[$177>>2]|0;
 $179 = $9;
 HEAP32[$179>>2] = $178;
 $12 = $79;
 $180 = $12;
 $181 = ((($180)) + 8|0);
 $11 = $181;
 $182 = $11;
 $10 = $182;
 $183 = $10;
 $184 = $78;
 $15 = $184;
 $185 = $15;
 $186 = ((($185)) + 12|0);
 $14 = $186;
 $187 = $14;
 $13 = $187;
 $188 = $13;
 $19 = $183;
 $20 = $188;
 $189 = $19;
 $18 = $189;
 $190 = $18;
 $191 = HEAP32[$190>>2]|0;
 HEAP32[$__t$i>>2] = $191;
 $192 = $20;
 $16 = $192;
 $193 = $16;
 $194 = HEAP32[$193>>2]|0;
 $195 = $19;
 HEAP32[$195>>2] = $194;
 $17 = $__t$i;
 $196 = $17;
 $197 = HEAP32[$196>>2]|0;
 $198 = $20;
 HEAP32[$198>>2] = $197;
 $199 = $78;
 $200 = ((($199)) + 4|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = $78;
 HEAP32[$202>>2] = $201;
 $21 = $79;
 $203 = $21;
 $204 = ((($203)) + 4|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = HEAP32[$203>>2]|0;
 $207 = $205;
 $208 = $206;
 $209 = (($207) - ($208))|0;
 $210 = (($209|0) / 12)&-1;
 __ZNKSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE14__annotate_newEj($79,$210);
 $73 = $79;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_6vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS4_EEEERNS5_IS7_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -12|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEED2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = ((($62)) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = ((($70)) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 12)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __Z12__FLOAT_BITSf($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($27);
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 12|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 36)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 36)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 36)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 36)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIN10MeshLoader6NormalERNS_9allocatorIS2_EEEC2EjjS5_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(629,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN10MeshLoader6NormalERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(630,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIN10MeshLoader6NormalERNS_9allocatorIS2_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN10MeshLoader6NormalERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 36)&-1;
 $35 = (($22) + (($34*36)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*36)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 36)&-1;
 $52 = (($43) + (($51*36)|0)|0);
 __ZNKSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  dest=$27; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  __ZN10MeshLoader6NormalC2Ev($27);
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 36|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 119304647;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIN10MeshLoader6NormalERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*36)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*36)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*36)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN10MeshLoader6NormalERNS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  dest=$29; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  __ZN10MeshLoader6NormalC2Ev($29);
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 36|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = ((($50)) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = ((($49)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = ((($57)) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + -36|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = ((($67)) + -36|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = $27;
  $24 = $80;
  $81 = $24;
  __ZN10MeshLoader6NormalC2ERKS0_($79,$81);
  $82 = $42;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + -36|0);
  HEAP32[$82>>2] = $84;
 }
 $85 = $48;
 $86 = ((($85)) + 4|0);
 $20 = $49;
 $21 = $86;
 $87 = $20;
 $19 = $87;
 $88 = $19;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$__t$i>>2] = $89;
 $90 = $21;
 $17 = $90;
 $91 = $17;
 $92 = HEAP32[$91>>2]|0;
 $93 = $20;
 HEAP32[$93>>2] = $92;
 $18 = $__t$i;
 $94 = $18;
 $95 = HEAP32[$94>>2]|0;
 $96 = $21;
 HEAP32[$96>>2] = $95;
 $97 = ((($49)) + 4|0);
 $98 = $48;
 $99 = ((($98)) + 8|0);
 $3 = $97;
 $4 = $99;
 $100 = $3;
 $2 = $100;
 $101 = $2;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i2>>2] = $102;
 $103 = $4;
 $0 = $103;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $3;
 HEAP32[$106>>2] = $105;
 $1 = $__t$i2;
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = $4;
 HEAP32[$109>>2] = $108;
 $7 = $49;
 $110 = $7;
 $111 = ((($110)) + 8|0);
 $6 = $111;
 $112 = $6;
 $5 = $112;
 $113 = $5;
 $114 = $48;
 $10 = $114;
 $115 = $10;
 $116 = ((($115)) + 12|0);
 $9 = $116;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $14 = $113;
 $15 = $118;
 $119 = $14;
 $13 = $119;
 $120 = $13;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$__t$i1>>2] = $121;
 $122 = $15;
 $11 = $122;
 $123 = $11;
 $124 = HEAP32[$123>>2]|0;
 $125 = $14;
 HEAP32[$125>>2] = $124;
 $12 = $__t$i1;
 $126 = $12;
 $127 = HEAP32[$126>>2]|0;
 $128 = $15;
 HEAP32[$128>>2] = $127;
 $129 = $48;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $48;
 HEAP32[$132>>2] = $131;
 $16 = $49;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$133>>2]|0;
 $137 = $135;
 $138 = $136;
 $139 = (($137) - ($138))|0;
 $140 = (($139|0) / 36)&-1;
 __ZNKSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE14__annotate_newEj($49,$140);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN10MeshLoader6NormalERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -36|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 36)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 36)&-1;
 $39 = (($26) + (($38*36)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 36)&-1;
 $51 = (($42) + (($50*36)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 36)&-1;
 $67 = (($54) + (($66*36)|0)|0);
 __ZNKSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZN10MeshLoader6NormalC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $4 = $1;
 $3 = 0;
 $__i0 = 0;
 while(1) {
  $5 = $__i0;
  $6 = ($5>>>0)<(3);
  if (!($6)) {
   break;
  }
  $7 = $3;
  $8 = (($4) + (($7*12)|0)|0);
  $9 = (($7) + 1)|0;
  $3 = $9;
  $10 = $__i0;
  $11 = $2;
  $12 = (($11) + (($10*12)|0)|0);
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKS2_($8,$12);
  $13 = $__i0;
  $14 = (($13) + 1)|0;
  $__i0 = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 36)&-1;
 $39 = (($26) + (($38*36)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 36)&-1;
 $55 = (($42) + (($54*36)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*36)|0)|0);
 __ZNKSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZN10MeshLoader6NormalC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = $1;
 while(1) {
  __ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev($3);
  $4 = ((($3)) + 12|0);
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN10st_Surface8RelocateElPv($this,$size,$p) {
 $this = $this|0;
 $size = $size|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $p;
 $3 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($3)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = $1;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = ($8|0)!=($9|0);
 $13 = (0)!=($11|0);
 $14 = $12 | $13;
 if ($14) {
  $15 = $2;
  $16 = $15;
  $17 = ((($3)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18;
  $20 = (_i64Add(($16|0),0,($19|0),0)|0);
  $21 = tempRet0;
  $22 = $20;
  $24 = $22;
 } else {
  $24 = 0;
 }
 $23 = ((($3)) + 24|0);
 HEAP32[$23>>2] = $24;
 $25 = ((($3)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26;
 $28 = $1;
 $29 = ($28|0)<(0);
 $30 = $29 << 31 >> 31;
 $31 = ($27|0)!=($28|0);
 $32 = (0)!=($30|0);
 $33 = $31 | $32;
 if ($33) {
  $34 = $2;
  $35 = $34;
  $36 = ((($3)) + 32|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37;
  $39 = (_i64Add(($35|0),0,($38|0),0)|0);
  $40 = tempRet0;
  $41 = $39;
  $43 = $41;
 } else {
  $43 = 0;
 }
 $42 = ((($3)) + 32|0);
 HEAP32[$42>>2] = $43;
 $44 = ((($3)) + 40|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45;
 $47 = $1;
 $48 = ($47|0)<(0);
 $49 = $48 << 31 >> 31;
 $50 = ($46|0)!=($47|0);
 $51 = (0)!=($49|0);
 $52 = $50 | $51;
 if ($52) {
  $53 = $2;
  $54 = $53;
  $55 = ((($3)) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56;
  $58 = (_i64Add(($54|0),0,($57|0),0)|0);
  $59 = tempRet0;
  $60 = $58;
  $62 = $60;
 } else {
  $62 = 0;
 }
 $61 = ((($3)) + 40|0);
 HEAP32[$61>>2] = $62;
 $63 = ((($3)) + 48|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64;
 $66 = $1;
 $67 = ($66|0)<(0);
 $68 = $67 << 31 >> 31;
 $69 = ($65|0)!=($66|0);
 $70 = (0)!=($68|0);
 $71 = $69 | $70;
 if ($71) {
  $72 = $2;
  $73 = $72;
  $74 = ((($3)) + 48|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $75;
  $77 = (_i64Add(($73|0),0,($76|0),0)|0);
  $78 = tempRet0;
  $79 = $77;
  $81 = $79;
 } else {
  $81 = 0;
 }
 $80 = ((($3)) + 48|0);
 HEAP32[$80>>2] = $81;
 $82 = ((($3)) + 64|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83;
 $85 = $1;
 $86 = ($85|0)<(0);
 $87 = $86 << 31 >> 31;
 $88 = ($84|0)!=($85|0);
 $89 = (0)!=($87|0);
 $90 = $88 | $89;
 if ($90) {
  $91 = $2;
  $92 = $91;
  $93 = ((($3)) + 64|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $94;
  $96 = (_i64Add(($92|0),0,($95|0),0)|0);
  $97 = tempRet0;
  $98 = $96;
  $100 = $98;
 } else {
  $100 = 0;
 }
 $99 = ((($3)) + 64|0);
 HEAP32[$99>>2] = $100;
 $101 = ((($3)) + 32|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(0|0);
 if ($103) {
  $104 = ((($3)) + 32|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $1;
  $107 = $2;
  __ZN9st_RefMap8RelocateElPv($105,$106,$107);
 }
 $108 = ((($3)) + 40|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(0|0);
 if ($110) {
  $111 = ((($3)) + 40|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $1;
  $114 = $2;
  __ZN9st_RefMap8RelocateElPv($112,$113,$114);
 }
 $115 = ((($3)) + 24|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)!=(0|0);
 if (!($117)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $118 = $i;
  $119 = ($118>>>0)<(10);
  if (!($119)) {
   break;
  }
  $120 = $i;
  $121 = ((($3)) + 24|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + (($120*24)|0)|0);
  $124 = $1;
  $125 = $2;
  __ZN11st_SurfInfo8RelocateElPv($123,$124,$125);
  $126 = $i;
  $127 = (($126) + 1)|0;
  $i = $127;
 }
 STACKTOP = sp;return;
}
function __ZN9st_RefMap8RelocateElPv($this,$size,$p) {
 $this = $this|0;
 $size = $size|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $p;
 $3 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = $1;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = ($8|0)!=($9|0);
 $13 = (0)!=($11|0);
 $14 = $12 | $13;
 if ($14) {
  $15 = $2;
  $16 = $15;
  $17 = ((($3)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18;
  $20 = (_i64Add(($16|0),0,($19|0),0)|0);
  $21 = tempRet0;
  $22 = $20;
  $24 = $22;
 } else {
  $24 = 0;
 }
 $23 = ((($3)) + 8|0);
 HEAP32[$23>>2] = $24;
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = ((($3)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 $31 = $2;
 __ZN8st_Image8RelocateElPv($29,$30,$31);
 STACKTOP = sp;return;
}
function __ZN11st_SurfInfo8RelocateElPv($this,$size,$p) {
 $this = $this|0;
 $size = $size|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $p;
 $3 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($3)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = $1;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = ($8|0)!=($9|0);
 $13 = (0)!=($11|0);
 $14 = $12 | $13;
 if ($14) {
  $15 = $2;
  $16 = $15;
  $17 = ((($3)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18;
  $20 = (_i64Add(($16|0),0,($19|0),0)|0);
  $21 = tempRet0;
  $22 = $20;
  $24 = $22;
 } else {
  $24 = 0;
 }
 $23 = ((($3)) + 16|0);
 HEAP32[$23>>2] = $24;
 $25 = ((($3)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = ((($3)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 $31 = $2;
 __ZN12st_SurfLayer8RelocateElPv($29,$30,$31);
 STACKTOP = sp;return;
}
function __ZN8st_Image8RelocateElPv($this,$size,$p) {
 $this = $this|0;
 $size = $size|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $p;
 $3 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = $1;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = ($8|0)!=($9|0);
 $13 = (0)!=($11|0);
 $14 = $12 | $13;
 if ($14) {
  $15 = $2;
  $16 = $15;
  $17 = ((($3)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18;
  $20 = (_i64Add(($16|0),0,($19|0),0)|0);
  $21 = tempRet0;
  $22 = $20;
  $24 = $22;
 } else {
  $24 = 0;
 }
 $23 = ((($3)) + 8|0);
 HEAP32[$23>>2] = $24;
 STACKTOP = sp;return;
}
function __ZN12st_SurfLayer8RelocateElPv($this,$size,$p) {
 $this = $this|0;
 $size = $size|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $p;
 $3 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($3)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = $1;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = ($8|0)!=($9|0);
 $13 = (0)!=($11|0);
 $14 = $12 | $13;
 if ($14) {
  $15 = $2;
  $16 = $15;
  $17 = ((($3)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18;
  $20 = (_i64Add(($16|0),0,($19|0),0)|0);
  $21 = tempRet0;
  $22 = $20;
  $24 = $22;
 } else {
  $24 = 0;
 }
 $23 = ((($3)) + 24|0);
 HEAP32[$23>>2] = $24;
 $25 = ((($3)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26;
 $28 = $1;
 $29 = ($28|0)<(0);
 $30 = $29 << 31 >> 31;
 $31 = ($27|0)!=($28|0);
 $32 = (0)!=($30|0);
 $33 = $31 | $32;
 if ($33) {
  $34 = $2;
  $35 = $34;
  $36 = ((($3)) + 56|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37;
  $39 = (_i64Add(($35|0),0,($38|0),0)|0);
  $40 = tempRet0;
  $41 = $39;
  $43 = $41;
 } else {
  $43 = 0;
 }
 $42 = ((($3)) + 56|0);
 HEAP32[$42>>2] = $43;
 $44 = ((($3)) + 24|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = ((($3)) + 24|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $1;
  $50 = $2;
  __ZN8st_Image8RelocateElPv($48,$49,$50);
 }
 $51 = ((($3)) + 56|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 $54 = ((($3)) + 56|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $1;
 $57 = $2;
 __ZN12st_SurfLayer8RelocateElPv($55,$56,$57);
 STACKTOP = sp;return;
}
function __ZN9_st_UVMap8RelocateElPv($this,$size,$p) {
 $this = $this|0;
 $size = $size|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $p;
 $3 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = $1;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = ($8|0)!=($9|0);
 $13 = (0)!=($11|0);
 $14 = $12 | $13;
 if ($14) {
  $15 = $2;
  $16 = $15;
  $17 = ((($3)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18;
  $20 = (_i64Add(($16|0),0,($19|0),0)|0);
  $21 = tempRet0;
  $22 = $20;
  $24 = $22;
 } else {
  $24 = 0;
 }
 $23 = ((($3)) + 8|0);
 HEAP32[$23>>2] = $24;
 STACKTOP = sp;return;
}
function __ZN9_st_DVMap8RelocateElPv($this,$size,$p) {
 $this = $this|0;
 $size = $size|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $p;
 $3 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = $1;
 $10 = ($9|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = ($8|0)!=($9|0);
 $13 = (0)!=($11|0);
 $14 = $12 | $13;
 if ($14) {
  $15 = $2;
  $16 = $15;
  $17 = ((($3)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18;
  $20 = (_i64Add(($16|0),0,($19|0),0)|0);
  $21 = tempRet0;
  $22 = $20;
  $24 = $22;
 } else {
  $24 = 0;
 }
 $23 = ((($3)) + 8|0);
 HEAP32[$23>>2] = $24;
 STACKTOP = sp;return;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[6532>>2]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((23229|0),(23258|0),1164,(23328|0));
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((23349|0),(23372|0),303,(23328|0));
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((6280|0),(631|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[6276>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(23442,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 1023]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (6080);
   ___cxa_throw(($7|0),(416|0),(78|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6080);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23491|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(632,(23506|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(632,(23546|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(440);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(633)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[1517]|0;HEAP32[1517] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6092>>2]|0;HEAP32[6092>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9exceptionD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9exception4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23596|0);
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6124);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6144);
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23611|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,480,496,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 1023]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 1023]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 1023]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 L1: do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 511]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 1023]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   switch ($27|0) {
   case 0:  {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $57 = ((($this)) + 16|0);
    $58 = ((($this)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($this)) + 16|0) + ($59<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57,$info,$current_ptr,$path_below,$use_strcmp);
    $61 = ((($this)) + 24|0);
    $62 = ($59|0)>(1);
    if (!($62)) {
     break;
    }
    $63 = ((($this)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = ((($info)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(1);
     if (!($69)) {
      $75 = $64 & 1;
      $76 = ($75|0)==(0);
      if ($76) {
       $79 = ((($info)) + 54|0);
       $p2$2 = $61;
       while(1) {
        $88 = HEAP8[$79>>0]|0;
        $89 = ($88<<24>>24)==(0);
        if (!($89)) {
         break L1;
        }
        $90 = HEAP32[$67>>2]|0;
        $91 = ($90|0)==(1);
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $92 = ((($p2$2)) + 8|0);
        $93 = ($92>>>0)<($60>>>0);
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = ((($info)) + 24|0);
      $78 = ((($info)) + 54|0);
      $p2$1 = $61;
      while(1) {
       $80 = HEAP8[$78>>0]|0;
       $81 = ($80<<24>>24)==(0);
       if (!($81)) {
        break L1;
       }
       $82 = HEAP32[$67>>2]|0;
       $83 = ($82|0)==(1);
       if ($83) {
        $84 = HEAP32[$77>>2]|0;
        $85 = ($84|0)==(1);
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $86 = ((($p2$1)) + 8|0);
       $87 = ($86>>>0)<($60>>>0);
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = ((($info)) + 54|0);
    $p2$0 = $61;
    while(1) {
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if (!($72)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $73 = ((($p2$0)) + 8|0);
     $74 = ($73>>>0)<($60>>>0);
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($this)) + 16|0) + ($24<<3)|0);
     $26 = ((($info)) + 52|0);
     $27 = ((($info)) + 53|0);
     $28 = ((($info)) + 54|0);
     $29 = ((($this)) + 8|0);
     $30 = ((($info)) + 24|0);
     $31 = ($24|0)>(0);
     L34: do {
      if ($31) {
       $32 = ((($this)) + 16|0);
       $does_dst_type_point_to_our_static_type$0$off023 = 0;$is_dst_type_derived_from_static_type$0$off025 = 0;$p$024 = $32;
       while(1) {
        HEAP8[$26>>0] = 0;
        HEAP8[$27>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$28>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025;
         label = 20;
         break L34;
        }
        $35 = HEAP8[$27>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025;
         } else {
          $37 = HEAP8[$26>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$29>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L34;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$30>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           break L34;
          }
          $41 = HEAP32[$29>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           break L34;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = ((($p$024)) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0;$p$024 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;$is_dst_type_derived_from_static_type$2$off0 = 0;
       label = 20;
      }
     } while(0);
     do {
      if ((label|0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        HEAP32[$14>>2] = $current_ptr;
        $49 = ((($info)) + 40|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = (($50) + 1)|0;
        HEAP32[$49>>2] = $51;
        $52 = ((($info)) + 36|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($53|0)==(1);
        if ($54) {
         $55 = HEAP32[$30>>2]|0;
         $56 = ($55|0)==(2);
         if ($56) {
          HEAP8[$28>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label|0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 1023]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 1023]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ((($info)) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($this)) + 16|0);
  $8 = ((($this)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (((($this)) + 16|0) + ($9<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L4: do {
   if ($11) {
    $12 = ((($this)) + 24|0);
    $13 = ((($info)) + 24|0);
    $14 = ((($this)) + 8|0);
    $15 = ((($info)) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L4;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L4;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L4;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = ((($p$0)) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,480,528,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(416|0),(78|0));
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    HEAP32[$vararg_buffer7>>2] = 23864;
    _abort_message(23814,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[432>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 1023](432,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 1023]($29)|0);
    HEAP32[$vararg_buffer>>2] = 23864;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $33;
    _abort_message(23728,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 23864;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(23773,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(23852,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((6276|0),(634|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(23625,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[6276>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(23675,$vararg_buffer);
  // unreachable;
 }
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6544|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6548|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6552|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (23873 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 23961;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 23961;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 23961;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6284>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 6556;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _fcntl($fd,$cmd,$varargs) {
 $fd = $fd|0;
 $cmd = $cmd|0;
 $varargs = $varargs|0;
 var $$ = 0, $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $ex = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0, $vararg_buffer41 = 0;
 var $vararg_buffer46 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0, $vararg_ptr50 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer46 = sp + 152|0;
 $vararg_buffer41 = sp + 136|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $ap = sp + 176|0;
 $ex = sp + 168|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = ($cmd|0)==(4);
 $8 = $6 | 32768;
 $$ = $7 ? $8 : $6;
 L1: do {
  switch ($cmd|0) {
  case 14:  {
   $9 = $$;
   HEAP32[$vararg_buffer>>2] = $fd;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 14;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $9;
   $10 = (___syscall221(221,($vararg_buffer|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$0 = $11;
   break;
  }
  case 9:  {
   HEAP32[$vararg_buffer3>>2] = $fd;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 16;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $ex;
   $12 = (___syscall221(221,($vararg_buffer3|0))|0);
   switch ($12|0) {
   case -22:  {
    $13 = $$;
    HEAP32[$vararg_buffer8>>2] = $fd;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = 9;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $13;
    $14 = (___syscall221(221,($vararg_buffer8|0))|0);
    $$0 = $14;
    break L1;
    break;
   }
   case 0:  {
    $16 = HEAP32[$ex>>2]|0;
    $17 = ($16|0)==(2);
    $18 = ((($ex)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (0 - ($19))|0;
    $21 = $17 ? $20 : $19;
    $$0 = $21;
    break L1;
    break;
   }
   default: {
    $15 = (___syscall_ret($12)|0);
    $$0 = $15;
    break L1;
   }
   }
   break;
  }
  case 1030:  {
   HEAP32[$vararg_buffer13>>2] = $fd;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = 1030;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $$;
   $22 = (___syscall221(221,($vararg_buffer13|0))|0);
   $23 = ($22|0)==(-22);
   if (!($23)) {
    $24 = ($22|0)>(-1);
    if ($24) {
     HEAP32[$vararg_buffer18>>2] = $22;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 2;
     $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
     HEAP32[$vararg_ptr22>>2] = 1;
     (___syscall221(221,($vararg_buffer18|0))|0);
    }
    $25 = (___syscall_ret($22)|0);
    $$0 = $25;
    break L1;
   }
   HEAP32[$vararg_buffer23>>2] = $fd;
   $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
   HEAP32[$vararg_ptr26>>2] = 1030;
   $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
   HEAP32[$vararg_ptr27>>2] = 0;
   $26 = (___syscall221(221,($vararg_buffer23|0))|0);
   $27 = ($26|0)==(-22);
   if ($27) {
    HEAP32[$vararg_buffer31>>2] = $fd;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = 0;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = $$;
    $30 = (___syscall221(221,($vararg_buffer31|0))|0);
    $31 = ($30|0)>(-1);
    if ($31) {
     HEAP32[$vararg_buffer36>>2] = $30;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = 2;
     $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
     HEAP32[$vararg_ptr40>>2] = 1;
     (___syscall221(221,($vararg_buffer36|0))|0);
    }
    $32 = (___syscall_ret($30)|0);
    $$0 = $32;
    break L1;
   } else {
    $28 = ($26|0)>(-1);
    if ($28) {
     HEAP32[$vararg_buffer28>>2] = $26;
     (___syscall6(6,($vararg_buffer28|0))|0);
    }
    $29 = (___syscall_ret(-22)|0);
    $$0 = $29;
    break L1;
   }
   break;
  }
  default: {
   $$off = (($cmd) + -12)|0;
   $switch = ($$off>>>0)<(5);
   if ($switch) {
    $33 = $$;
    HEAP32[$vararg_buffer41>>2] = $fd;
    $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
    HEAP32[$vararg_ptr44>>2] = $cmd;
    $vararg_ptr45 = ((($vararg_buffer41)) + 8|0);
    HEAP32[$vararg_ptr45>>2] = $33;
    $34 = (___syscall221(221,($vararg_buffer41|0))|0);
    $35 = (___syscall_ret($34)|0);
    $$0 = $35;
    break L1;
   } else {
    HEAP32[$vararg_buffer46>>2] = $fd;
    $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
    HEAP32[$vararg_ptr49>>2] = $cmd;
    $vararg_ptr50 = ((($vararg_buffer46)) + 8|0);
    HEAP32[$vararg_ptr50>>2] = $$;
    $36 = (___syscall221(221,($vararg_buffer46|0))|0);
    $37 = (___syscall_ret($36)|0);
    $$0 = $37;
    break L1;
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _open($filename,$flags,$varargs) {
 $filename = $filename|0;
 $flags = $flags|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = $flags | 32768;
 HEAP32[$vararg_buffer>>2] = $filename;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $8 = (___syscall5(5,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0;
 var $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0;
 var $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (25765 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (27614 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$694 = $156;$695 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $170;$697 = $168;$698 = $170;$699 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$09$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$09$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$09$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$09$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$09$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$1$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$1$ph$i = $344;
       }
       $345 = ($$1$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$1$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$1$be$i = $356;
         }
         $357 = ($$1$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$1$be$i;$700 = $348;$701 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$1$ph$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa273;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3105$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3101$i = $gotdig$2$i13;$gotrad$1102$i = $gotrad$0$i14;$j$0104$i = 0;$k$0103$i = 0;$lnz$0100$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1102$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = 1;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3101$i$lcssa = $gotdig$3101$i;$j$0104$i$lcssa = $j$0104$i;$k$0103$i$lcssa = $k$0103$i;$lnz$0100$i$lcssa = $lnz$0100$i;
            break L205;
           }
          } else {
           $364 = ($k$0103$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3105$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
           $370 = ($j$0104$i|0)==(0);
           $371 = (($x$i) + ($k$0103$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3105$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0104$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0103$i))|0;
           $$11$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3105$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3101$i = $gotdig$4$i;$gotrad$1102$i = $gotrad$2$i;$j$0104$i = $j$2$i;$k$0103$i = $k$2$i;$lnz$0100$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $706;$394 = $708;$396 = $707;$397 = $709;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3101$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$069$i = $j$0104$i$lcssa;$k$065$i = $k$0103$i$lcssa;$lnz$059$i = $lnz$0100$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $700;$394 = 0;$396 = $701;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond13$i = $401 & $399;
        if (!($or$cond13$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $395;$717 = $398;$718 = $399;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $395;$723 = $398;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$0$i27 = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $426 = $716;$428 = $714;$429 = $717;$431 = $715;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $426 = $722;$428 = $719;$429 = $723;$431 = $720;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$0$i27 = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$0$i27 = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond15$i = $438 | $440;
         if ($or$cond15$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$0$i27 = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$0$i27 = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$0$i27 = $467;
         break;
        }
        $468 = ($j$067$i|0)==(0);
        if ($468) {
         $k$3$i = $k$063$i;
        } else {
         $469 = ($j$067$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$063$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$394$i = $j$067$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$394$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$394$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$063$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$057$i|0)<(9);
        if ($475) {
         $476 = ($lnz$057$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$0$i27 = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (6560 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$0$i27 = $492;
           break;
          }
          $$neg32$i = (($bits$0$ph) + 27)|0;
          $493 = Math_imul($426, -3)|0;
          $494 = (($$neg32$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond182$i = $495 | $497;
          if ($or$cond182$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i17>>>0));
           $500 = $498 * $499;
           $501 = (($426) + -10)|0;
           $502 = (6560 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$0$i27 = $505;
           break;
          }
         }
        }
        $506 = (($426|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $426;$z$1$ph37$i = $k$3$i;
        } else {
         $508 = ($426|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (6560 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa151$i = 0;$rp$0$lcssa152$i = $426;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$085$i = 0;$carry$087$i = 0;$k$486$i = 0;$rp$084$i = $426;
          while(1) {
           $516 = (($x$i) + ($k$486$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$087$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$486$i|0)==($a$085$i|0);
           $523 = ($520|0)==(0);
           $or$cond16$i = $522 & $523;
           $524 = (($k$486$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$084$i) + -9)|0;
           $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
           $a$1$i = $or$cond16$i ? $525 : $a$085$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$085$i = $a$1$i;$carry$087$i = $521;$k$486$i = $524;$rp$084$i = $rp$1$i18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa152$i))|0;
         $a$2$ph38$i = $a$0$lcssa151$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $532;$z$1$ph37$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph36$i|0)<(18);
         $534 = ($rp$2$ph36$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph38$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph37$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           if ($549) {
            $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
            $551 = tempRet0;
            $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
            $553 = tempRet0;
            $$sink$off0$i = $552;$carry1$1$i = $550;
           } else {
            $$sink$off0$i = $543;$carry1$1$i = 0;
           }
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph38$i|0);
           $or$cond17$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph36$i) + 9)|0;
         $563 = (($a$2$ph38$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph38$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph36$i = $562;$z$1$ph37$i = $z$4$i;
        }
        L302: while(1) {
         $606 = (($z$5$ph$i) + 1)|0;
         $603 = $606 & 127;
         $607 = (($z$5$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$3$ph157$i = $a$3$ph$i;$e2$1$ph156$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
         while(1) {
          $610 = ($rp$3$ph$i|0)==(18);
          $611 = ($rp$3$ph$i|0)>(27);
          $$18$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$3$i = $a$3$ph157$i;$e2$1$i = $e2$1$ph156$i;
          while(1) {
           $576 = $a$3$i & 127;
           $577 = ($576|0)==($z$5$ph$i|0);
           do {
            if ($577) {
             label = 219;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 219;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$3$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$5$ph$i|0);
             if ($584) {
              label = 219;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 219;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i28 = $693 | $$not$i;
             if (!($brmerge$i28)) {
              $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($610) {
             label = 220;
             break L302;
            }
           }
           $585 = (($e2$1$i) + ($$18$i))|0;
           $586 = ($a$3$i|0)==($z$5$ph$i|0);
           if ($586) {
            $a$3$i = $z$5$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$3$i$lcssa248 = $a$3$i;
            break;
           }
          }
          $587 = 1 << $$18$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$18$i;
          $a$478$i = $a$3$i$lcssa248;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa248;$rp$477$i = $rp$3$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$679$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$18$i;
           $594 = (($593) + ($carry3$081$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$679$i|0)==($a$478$i|0);
           $597 = ($594|0)==(0);
           $or$cond19$i = $596 & $597;
           $598 = (($k$679$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$477$i) + -9)|0;
           $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
           $a$5$i = $or$cond19$i ? $599 : $a$478$i;
           $601 = ($599|0)==($z$5$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
            break;
           } else {
            $a$478$i = $a$5$i;$carry3$081$i = $595;$k$679$i = $599;$rp$477$i = $rp$5$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
           continue;
          }
          $604 = ($603|0)==($a$5$i$lcssa|0);
          if (!($604)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
         }
         $605 = (($x$i) + ($z$5$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $603;
        }
        if ((label|0) == 220) {
         if ($577) {
          $614 = (($603) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$5$ph$i;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $603;
         } else {
          $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$3$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$7$i|0);
        if ($622) {
         $679 = (($a$3$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$7$1$i = $680;
        } else {
         $z$7$1$i = $z$7$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$010$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$010$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$010$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$010$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i25 = $626;$frac$0$i = $629;$y$1$i24 = $631;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $625;
        }
        $632 = (($a$3$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$7$1$i|0);
        do {
         if ($634) {
          $frac$2$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$3$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$7$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$3$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$7$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$010$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$2$i = $659;
         }
        } while(0);
        $660 = $y$1$i24 + $frac$2$i;
        $661 = $660 - $bias$0$i25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i246;$y$2$i26 = $661;
          } else {
           $668 = ($$010$i|0)==($669|0);
           $or$cond20$i = $670 & $668;
           $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$2$i = $672;$y$2$i26 = $671;
          }
          $673 = (($e2$2$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$2$i != 0.0;
           $or$cond8$i = $676 & $675;
           if (!($or$cond8$i)) {
            $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
         } else {
          $e2$3$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$3$i));
        $$0$i27 = $678;
       }
      } while(0);
      $$0 = $$0$i27;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa135 = $13;
     break;
    }
   }
   $16 = ($$lcssa135|0)==(45);
   L11: do {
    switch ($$lcssa135|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa135;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$123 = 8;$c$124 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $46 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $46 = $45;
     }
     $$sum20 = (($46) + 1)|0;
     $47 = (25774 + ($$sum20)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$123 = 16;$c$124 = $46;
      label = 46;
     }
    } else {
     $$base21 = $25 ? 10 : $base;
     $$sum = (($c$0) + 1)|0;
     $57 = (25774 + ($$sum)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base21>>>0);
     if ($60) {
      $$1 = $$base21;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$082 = 0;
      while(1) {
       $69 = ($x$082*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$082 = $70;
       } else {
        $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa134;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$371 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$371;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$371 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$122 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$123 = $$1;$c$124 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$123) + -1)|0;
     $117 = $116 & $$123;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$123*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (26031 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $$sum1445 = (($c$124) + 1)|0;
      $129 = (25774 + ($$sum1445)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$123>>>0);
      if ($132) {
       $135 = $131;$x$146 = 0;
       while(1) {
        $133 = $x$146 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $$sum14 = (($c$4$be) + 1)|0;
        $143 = (25774 + ($$sum14)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$123>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$146 = $134;
        } else {
         $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa131;$154 = 0;$156 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$124;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$123>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond40 = $153 | $160;
      if ($or$cond40) {
       $$122 = $$123;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $$sum15 = (($c$5$be) + 1)|0;
       $175 = (25774 + ($$sum15)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$123>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$122 = $$123;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $$sum1865 = (($c$124) + 1)|0;
     $119 = (25774 + ($$sum1865)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$123>>>0);
     if ($122) {
      $186 = $121;$x$266 = 0;
      while(1) {
       $184 = Math_imul($x$266, $$123)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $$sum18 = (($c$6$be) + 1)|0;
       $194 = (25774 + ($$sum18)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$123>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$266 = $185;
       } else {
        $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa133;$294 = $$lcssa132;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$124;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$123>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$753 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$123|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $$sum19 = (($c$7$be) + 1)|0;
       $231 = (25774 + ($$sum19)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$123>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$753 = $c$7$be;
       } else {
        $$122 = $$123;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$122 = $$123;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $$sum16 = (($c$8) + 1)|0;
    $235 = (25774 + ($$sum16)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$122>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $$sum17 = (($c$9$be) + 1)|0;
      $246 = (25774 + ($$sum17)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$122>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $27 = $41;
   }
   $28 = ($27|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($28)) {
    $29 = $27;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$36>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _catclose($catd) {
 $catd = $catd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _catgets($catd,$set_id,$msg_id,$s) {
 $catd = $catd|0;
 $set_id = $set_id|0;
 $msg_id = $msg_id|0;
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($s|0);
}
function _catopen($name,$oflag) {
 $name = $name|0;
 $oflag = $oflag|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _freelocale($l) {
 $l = $l|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($l);
 return;
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 return ($0|0);
}
function _newlocale($mask,$name,$base) {
 $mask = $mask|0;
 $name = $name|0;
 $base = $base|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  label = 4;
 } else {
  $2 = (_strcmp($name,29736)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 4;
  } else {
   $4 = (_strcmp($name,26040)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    label = 4;
   } else {
    $$01 = 0;
   }
  }
 }
 if ((label|0) == 4) {
  $6 = ($base|0)==(0|0);
  if ($6) {
   $7 = (_calloc(1,4)|0);
   $$01 = $7;
  } else {
   $$01 = $base;
  }
 }
 return ($$01|0);
}
function _uselocale($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 176|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($l|0)==(0|0);
 if (!($3)) {
  HEAP32[$1>>2] = $l;
 }
 return ($2|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $95 = ($94|0)==($85|0);
        $97 = ($96|0)==($86|0);
        $98 = $95 & $97;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $94;$101 = $96;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $114 = ($113|0)==($85|0);
     $116 = ($115|0)==($86|0);
     $117 = $114 & $116;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $118 = $156;$120 = $155;
     }
    } else {
     $118 = $115;$120 = $113;
    }
    $119 = ($118>>>0)<(1048576);
    $121 = ($120>>>0)<(0);
    $122 = ($118|0)==(1048576);
    $123 = $122 & $121;
    $124 = $119 | $123;
    if ($124) {
     $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$151 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$151 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $150;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 6592;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 6596 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (6328 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$02$ = 0, $$021 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$216 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$019 = 0, $cnt$1 = 0, $cnt$214 = 0, $cnt$214$lcssa = 0, $cnt$3 = 0, $or$cond = 0, $or$cond17 = 0, $s = 0, $wbuf = 0, $wcs$ = 0;
 var $wn$ = 0, $ws$020 = 0, $ws$020$lcssa56 = 0, $ws$09 = 0, $ws$1 = 0, $ws$215 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($wn$|0)!=(0);
 $or$cond17 = $3 & $2;
 L1: do {
  if ($or$cond17) {
   $$021 = $n;$$0218 = $wn$;$37 = $$cast;$cnt$019 = 0;$ws$020 = $wcs$;
   while(1) {
    $4 = $$021 >>> 2;
    $5 = ($4>>>0)>=($$0218>>>0);
    $6 = ($$021>>>0)>(131);
    $7 = $6 | $5;
    if (!($7)) {
     $$1 = $$021;$$24 = $$0218;$18 = $37;$cnt$1 = $cnt$019;$ws$09 = $ws$020;
     break L1;
    }
    $$02$ = $5 ? $$0218 : $4;
    $8 = (($$021) - ($$02$))|0;
    $9 = (_mbsrtowcs($ws$020,$s,$$02$,$st)|0);
    $10 = ($9|0)==(-1);
    if ($10) {
     $$lcssa57 = $8;$ws$020$lcssa56 = $ws$020;
     break;
    }
    $11 = ($ws$020|0)==($wbuf|0);
    $12 = (($ws$020) + ($9<<2)|0);
    $13 = $11 ? 0 : $9;
    $$13 = (($$0218) - ($13))|0;
    $ws$1 = $11 ? $ws$020 : $12;
    $14 = (($9) + ($cnt$019))|0;
    $15 = HEAP32[$s>>2]|0;
    $16 = ($15|0)!=(0|0);
    $17 = ($$0218|0)!=($13|0);
    $or$cond = $17 & $16;
    if ($or$cond) {
     $$021 = $8;$$0218 = $$13;$37 = $15;$cnt$019 = $14;$ws$020 = $ws$1;
    } else {
     $$1 = $8;$$24 = $$13;$18 = $15;$cnt$1 = $14;$ws$09 = $ws$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$18 = $$pr$pre;$cnt$1 = -1;$ws$09 = $ws$020$lcssa56;
  } else {
   $$1 = $n;$$24 = $wn$;$18 = $$cast;$cnt$1 = 0;$ws$09 = $wcs$;
  }
 } while(0);
 $19 = ($18|0)==(0|0);
 L8: do {
  if ($19) {
   $cnt$3 = $cnt$1;
  } else {
   $20 = ($$24|0)!=(0);
   $21 = ($$1|0)!=(0);
   $22 = $20 & $21;
   if ($22) {
    $$216 = $$1;$$313 = $$24;$23 = $18;$cnt$214 = $cnt$1;$ws$215 = $ws$09;
    while(1) {
     $24 = (_mbrtowc($ws$215,$23,$$216,$st)|0);
     $25 = (($24) + 2)|0;
     $26 = ($25>>>0)<(3);
     if ($26) {
      $$lcssa = $24;$cnt$214$lcssa = $cnt$214;
      break;
     }
     $27 = HEAP32[$s>>2]|0;
     $28 = (($27) + ($24)|0);
     HEAP32[$s>>2] = $28;
     $29 = (($$216) - ($24))|0;
     $30 = ((($ws$215)) + 4|0);
     $31 = (($$313) + -1)|0;
     $32 = (($cnt$214) + 1)|0;
     $33 = ($31|0)!=(0);
     $34 = ($$216|0)!=($24|0);
     $35 = $33 & $34;
     if ($35) {
      $$216 = $29;$$313 = $31;$23 = $28;$cnt$214 = $32;$ws$215 = $30;
     } else {
      $cnt$3 = $32;
      break L8;
     }
    }
    switch ($$lcssa|0) {
    case -1:  {
     $cnt$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$214$lcssa;
     break L8;
     break;
    }
    default: {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$214$lcssa;
     break L8;
    }
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($1) {
  $36 = HEAP32[$s>>2]|0;
  HEAP32[$src>>2] = $36;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$14$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0;
 var $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$in = 0, $$lcssa102 = 0, $$lcssa90 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0;
 var $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0219 = $$02$ph;$$4718 = $$47$ph;$s$520 = $s$5$ph;
   }
   while(1) {
    $63 = HEAP8[$s$520>>0]|0;
    $64 = $63&255;
    $65 = (($64) + -1)|0;
    $66 = ($65>>>0)<(127);
    do {
     if ($66) {
      $67 = $s$520;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      $70 = ($$4718>>>0)>(4);
      $or$cond = $70 & $69;
      if ($or$cond) {
       $$1 = $$0219;$$5 = $$4718;$s$6 = $s$520;
       while(1) {
        $71 = HEAP32[$s$6>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74|0)==(0);
        if (!($75)) {
         $$1$lcssa = $$1;$$5$lcssa = $$5;$$lcssa94 = $71;$s$6$lcssa = $s$6;
         label = 32;
         break;
        }
        $76 = ((($s$6)) + 1|0);
        $77 = $71 & 255;
        $78 = ((($$1)) + 4|0);
        HEAP32[$$1>>2] = $77;
        $79 = ((($s$6)) + 2|0);
        $80 = HEAP8[$76>>0]|0;
        $81 = $80&255;
        $82 = ((($$1)) + 8|0);
        HEAP32[$78>>2] = $81;
        $83 = ((($s$6)) + 3|0);
        $84 = HEAP8[$79>>0]|0;
        $85 = $84&255;
        $86 = ((($$1)) + 12|0);
        HEAP32[$82>>2] = $85;
        $87 = ((($s$6)) + 4|0);
        $88 = HEAP8[$83>>0]|0;
        $89 = $88&255;
        $90 = ((($$1)) + 16|0);
        HEAP32[$86>>2] = $89;
        $91 = (($$5) + -4)|0;
        $$old1 = ($91>>>0)>(4);
        if ($$old1) {
         $$1 = $90;$$5 = $91;$s$6 = $87;
        } else {
         $$lcssa96 = $87;$$lcssa97 = $90;$$lcssa98 = $91;
         label = 31;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$$lcssa96>>0]|0;
        $$2 = $$lcssa97;$$6 = $$lcssa98;$94 = $$pre$pre;$s$7 = $$lcssa96;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $92 = $$lcssa94&255;
        $$2 = $$1$lcssa;$$6 = $$5$lcssa;$94 = $92;$s$7 = $s$6$lcssa;
        break;
       }
      } else {
       $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
      }
     } else {
      $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
     }
    } while(0);
    $93 = $94&255;
    $95 = (($93) + -1)|0;
    $96 = ($95>>>0)<(127);
    if (!($96)) {
     $$2$lcssa = $$2;$$6$lcssa = $$6;$$lcssa102 = $93;$s$7$lcssa = $s$7;
     break;
    }
    $97 = ((($s$7)) + 1|0);
    $98 = ((($$2)) + 4|0);
    HEAP32[$$2>>2] = $93;
    $99 = (($$6) + -1)|0;
    $100 = ($99|0)==(0);
    if ($100) {
     $s$5$lcssa = $97;
     label = 26;
     break L7;
    } else {
     $$0219 = $98;$$4718 = $99;$s$520 = $97;
    }
   }
   $101 = (($$lcssa102) + -194)|0;
   $102 = ($101>>>0)>(50);
   if ($102) {
    $$434 = $$2$lcssa;$$833 = $$6$lcssa;$s$1035 = $s$7$lcssa;
    label = 48;
    break;
   }
   $103 = ((($s$7$lcssa)) + 1|0);
   $104 = (6328 + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $$3 = $$2$lcssa;$$7 = $$6$lcssa;$c$4 = $105;$s$8 = $103;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$1415 = $$03;$s$116 = $s$0;
      while(1) {
       $19 = ((($s$116)) + 4|0);
       $20 = (($$1415) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$1415 = $20;$s$116 = $19;
       } else {
        $$14$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$14$lcssa = $$03;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$25 = $$14$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$25 = $$03;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = ((($s$2)) + 1|0);
    $32 = (($$25) + -1)|0;
    $$03 = $32;$s$0 = $31;
    label = 7;
    continue;
   } else {
    $$25$lcssa = $$25;$$lcssa90 = $27;$s$2$lcssa = $s$2;
   }
   $33 = (($$lcssa90) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$434 = $ws;$$833 = $$25$lcssa;$s$1035 = $s$2$lcssa;
    label = 48;
    break;
   }
   $35 = ((($s$2$lcssa)) + 1|0);
   $36 = (6328 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$36 = $$25$lcssa;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = ((($s$3)) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if (!($52)) {
     label = 20;
     break;
    }
    $54 = ((($s$3)) + 2|0);
    $55 = $c$2 & 524288;
    $56 = ($55|0)==(0);
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54>>0]|0;
     $58 = $57 & -64;
     $59 = ($58<<24>>24)==(-128);
     if (!($59)) {
      label = 23;
      break;
     }
     $61 = ((($s$3)) + 3|0);
     $s$4 = $61;
    }
   }
   $62 = (($$36) + -1)|0;
   $$03 = $62;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $106 = HEAP8[$s$8>>0]|0;
   $107 = $106&255;
   $108 = $107 >>> 3;
   $109 = (($108) + -16)|0;
   $110 = $c$4 >> 26;
   $111 = (($108) + ($110))|0;
   $112 = $109 | $111;
   $113 = ($112>>>0)>(7);
   if ($113) {
    label = 38;
    break;
   }
   $115 = $c$4 << 6;
   $116 = ((($s$8)) + 1|0);
   $117 = (($107) + -128)|0;
   $118 = $117 | $115;
   $119 = ($118|0)<(0);
   if ($119) {
    $120 = HEAP8[$116>>0]|0;
    $121 = $120&255;
    $122 = $121 & 192;
    $123 = ($122|0)==(128);
    if (!($123)) {
     label = 41;
     break;
    }
    $125 = $118 << 6;
    $126 = ((($s$8)) + 2|0);
    $127 = (($121) + -128)|0;
    $128 = $127 | $125;
    $129 = ($128|0)<(0);
    if ($129) {
     $130 = HEAP8[$126>>0]|0;
     $131 = $130&255;
     $132 = $131 & 192;
     $133 = ($132|0)==(128);
     if (!($133)) {
      label = 44;
      break;
     }
     $135 = $128 << 6;
     $136 = ((($s$8)) + 3|0);
     $137 = (($131) + -128)|0;
     $138 = $137 | $135;
     $c$5 = $138;$s$9 = $136;
    } else {
     $c$5 = $128;$s$9 = $126;
    }
   } else {
    $c$5 = $118;$s$9 = $116;
   }
   $139 = ((($$3)) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $140 = (($$7) + -1)|0;
   $$02$ph = $139;$$47$ph = $140;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $46;
  label = 47;
 }
 else if ((label|0) == 20) {
  $53 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $53;
  label = 47;
 }
 else if ((label|0) == 23) {
  $60 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $60;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
 }
 else if ((label|0) == 38) {
  $114 = ((($s$8)) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $114;
  label = 47;
 }
 else if ((label|0) == 41) {
  $124 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $124;
  label = 52;
 }
 else if ((label|0) == 44) {
  $134 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $134;
  label = 52;
 }
 if ((label|0) == 47) {
  $141 = ($c$6|0)==(0);
  if ($141) {
   $$434 = $$4;$$833 = $$8;$s$1035 = $s$10;
   label = 48;
  } else {
   $$48 = $$4;$s$109 = $s$10;
   label = 52;
  }
 }
 if ((label|0) == 48) {
  $142 = HEAP8[$s$1035>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = ($$434|0)==(0|0);
   if (!($144)) {
    HEAP32[$$434>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $145 = (($wn) - ($$833))|0;
   $$0 = $145;
  } else {
   $$48 = $$434;$s$109 = $s$1035;
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $146 = (___errno_location()|0);
  HEAP32[$146>>2] = 84;
  $147 = ($$48|0)==(0|0);
  if ($147) {
   $$0 = -1;
  } else {
   HEAP32[$src>>2] = $s$109;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, $dummy$wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($src|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = ($n|0)==(0);
   do {
    if (!($1)) {
     $2 = ($wc|0)==(0|0);
     $dummy$wc = $2 ? $dummy : $wc;
     $3 = HEAP8[$src>>0]|0;
     $4 = $3&255;
     $5 = ($3<<24>>24)>(-1);
     if ($5) {
      HEAP32[$dummy$wc>>2] = $4;
      $6 = ($3<<24>>24)!=(0);
      $7 = $6&1;
      $$0 = $7;
      break L1;
     }
     $8 = (($4) + -194)|0;
     $9 = ($8>>>0)>(50);
     if (!($9)) {
      $10 = ((($src)) + 1|0);
      $11 = (6328 + ($8<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = ($n>>>0)<(4);
      if ($13) {
       $14 = ($n*6)|0;
       $15 = (($14) + -6)|0;
       $16 = -2147483648 >>> $15;
       $17 = $12 & $16;
       $18 = ($17|0)==(0);
       if (!($18)) {
        break;
       }
      }
      $19 = HEAP8[$10>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $12 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if (!($26)) {
       $27 = $12 << 6;
       $28 = (($20) + -128)|0;
       $29 = $28 | $27;
       $30 = ($29|0)<(0);
       if (!($30)) {
        HEAP32[$dummy$wc>>2] = $29;
        $$0 = 2;
        break L1;
       }
       $31 = ((($src)) + 2|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if ($35) {
        $36 = $29 << 6;
        $37 = (($33) + -128)|0;
        $38 = $37 | $36;
        $39 = ($38|0)<(0);
        if (!($39)) {
         HEAP32[$dummy$wc>>2] = $38;
         $$0 = 3;
         break L1;
        }
        $40 = ((($src)) + 3|0);
        $41 = HEAP8[$40>>0]|0;
        $42 = $41&255;
        $43 = $42 & 192;
        $44 = ($43|0)==(128);
        if ($44) {
         $45 = $38 << 6;
         $46 = (($42) + -128)|0;
         $47 = $46 | $45;
         HEAP32[$dummy$wc>>2] = $47;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $48 = (___errno_location()|0);
   HEAP32[$48>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$02$$0 = 0, $$021 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$216 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$019 = 0, $cnt$1 = 0, $cnt$214 = 0, $cnt$214$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0;
 var $or$cond17 = 0, $s$020 = 0, $s$020$lcssa56 = 0, $s$09 = 0, $s$1 = 0, $s$215 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($n$|0)!=(0);
 $or$cond17 = $3 & $2;
 L1: do {
  if ($or$cond17) {
   $$021 = $wn;$$0218 = $n$;$38 = $$cast;$cnt$019 = 0;$s$020 = $dst$;
   while(1) {
    $4 = ($$021>>>0)>=($$0218>>>0);
    $5 = ($$021>>>0)>(32);
    $6 = $4 | $5;
    if (!($6)) {
     $$1 = $$021;$$24 = $$0218;$17 = $38;$cnt$1 = $cnt$019;$s$09 = $s$020;
     break L1;
    }
    $$02$$0 = $4 ? $$0218 : $$021;
    $7 = (($$021) - ($$02$$0))|0;
    $8 = (_wcsrtombs($s$020,$ws,$$02$$0,0)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $$lcssa57 = $7;$s$020$lcssa56 = $s$020;
     break;
    }
    $10 = ($s$020|0)==($buf|0);
    $11 = (($s$020) + ($8)|0);
    $12 = $10 ? 0 : $8;
    $$13 = (($$0218) - ($12))|0;
    $s$1 = $10 ? $s$020 : $11;
    $13 = (($8) + ($cnt$019))|0;
    $14 = HEAP32[$ws>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$0218|0)!=($12|0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$021 = $7;$$0218 = $$13;$38 = $14;$cnt$019 = $13;$s$020 = $s$1;
    } else {
     $$1 = $7;$$24 = $$13;$17 = $14;$cnt$1 = $13;$s$09 = $s$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$17 = $$pr$pre;$cnt$1 = -1;$s$09 = $s$020$lcssa56;
  } else {
   $$1 = $wn;$$24 = $n$;$17 = $$cast;$cnt$1 = 0;$s$09 = $dst$;
  }
 } while(0);
 $18 = ($17|0)==(0|0);
 L8: do {
  if ($18) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$24|0)!=(0);
   $20 = ($$1|0)!=(0);
   $21 = $19 & $20;
   if ($21) {
    $$216 = $$1;$$313 = $$24;$23 = $17;$cnt$214 = $cnt$1;$s$215 = $s$09;
    while(1) {
     $22 = HEAP32[$23>>2]|0;
     $24 = (_wcrtomb($s$215,$22,0)|0);
     $25 = (($24) + 1)|0;
     $26 = ($25>>>0)<(2);
     if ($26) {
      $$lcssa = $24;$cnt$214$lcssa = $cnt$214;
      break;
     }
     $28 = HEAP32[$ws>>2]|0;
     $29 = ((($28)) + 4|0);
     HEAP32[$ws>>2] = $29;
     $30 = (($$216) + -1)|0;
     $31 = (($s$215) + ($24)|0);
     $32 = (($$313) - ($24))|0;
     $33 = (($cnt$214) + 1)|0;
     $34 = ($$313|0)!=($24|0);
     $35 = ($30|0)!=(0);
     $36 = $34 & $35;
     if ($36) {
      $$216 = $30;$$313 = $32;$23 = $29;$cnt$214 = $33;$s$215 = $31;
     } else {
      $cnt$3 = $33;
      break L8;
     }
    }
    $27 = ($$lcssa|0)==(0);
    if ($27) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$214$lcssa;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($1) {
  $37 = HEAP32[$ws>>2]|0;
  HEAP32[$wcs>>2] = $37;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa82 = 0, $$5 = 0, $$pn = 0, $$pre = 0;
 var $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 L1: do {
  if ($0) {
   $2 = HEAP32[$ws>>2]|0;
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = 0;
   } else {
    $$0218 = 0;$5 = $3;$ws2$019 = $2;
    while(1) {
     $6 = ($5>>>0)>(127);
     if ($6) {
      $7 = (_wcrtomb($buf,$5,0)|0);
      $8 = ($7|0)==(-1);
      if ($8) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $7;
      }
     } else {
      $$pn = 1;
     }
     $$13 = (($$pn) + ($$0218))|0;
     $9 = ((($ws2$019)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==(0);
     if ($11) {
      $$0 = $$13;
      break;
     } else {
      $$0218 = $$13;$5 = $10;$ws2$019 = $9;
     }
    }
   }
  } else {
   $1 = ($n>>>0)>(3);
   L9: do {
    if ($1) {
     $$pre = HEAP32[$ws>>2]|0;
     $$0129 = $s;$$2428 = $n;$14 = $$pre;
     while(1) {
      $13 = HEAP32[$14>>2]|0;
      $15 = (($13) + -1)|0;
      $16 = ($15>>>0)>(126);
      if ($16) {
       $17 = ($13|0)==(0);
       if ($17) {
        $$0129$lcssa = $$0129;$$2428$lcssa = $$2428;
        break;
       }
       $19 = (_wcrtomb($$0129,$13,0)|0);
       $20 = ($19|0)==(-1);
       if ($20) {
        $$0 = -1;
        break L1;
       }
       $21 = (($$0129) + ($19)|0);
       $22 = (($$2428) - ($19))|0;
       $$1 = $21;$$35 = $22;$27 = $14;
      } else {
       $23 = $13&255;
       $24 = ((($$0129)) + 1|0);
       HEAP8[$$0129>>0] = $23;
       $25 = (($$2428) + -1)|0;
       $$pre43 = HEAP32[$ws>>2]|0;
       $$1 = $24;$$35 = $25;$27 = $$pre43;
      }
      $26 = ((($27)) + 4|0);
      HEAP32[$ws>>2] = $26;
      $28 = ($$35>>>0)>(3);
      if ($28) {
       $$0129 = $$1;$$2428 = $$35;$14 = $26;
      } else {
       $$01$lcssa = $$1;$$24$lcssa = $$35;
       break L9;
      }
     }
     HEAP8[$$0129$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $18 = (($n) - ($$2428$lcssa))|0;
     $$0 = $18;
     break L1;
    } else {
     $$01$lcssa = $s;$$24$lcssa = $n;
    }
   } while(0);
   $12 = ($$24$lcssa|0)==(0);
   if ($12) {
    $$0 = $n;
   } else {
    $$pre44 = HEAP32[$ws>>2]|0;
    $$223 = $$01$lcssa;$$422 = $$24$lcssa;$30 = $$pre44;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (($29) + -1)|0;
     $32 = ($31>>>0)>(126);
     if ($32) {
      $33 = ($29|0)==(0);
      if ($33) {
       $$223$lcssa = $$223;$$422$lcssa = $$422;
       label = 19;
       break;
      }
      $35 = (_wcrtomb($buf,$29,0)|0);
      $36 = ($35|0)==(-1);
      if ($36) {
       $$0 = -1;
       break L1;
      }
      $37 = ($$422>>>0)<($35>>>0);
      if ($37) {
       $$422$lcssa82 = $$422;
       label = 22;
       break;
      }
      $39 = HEAP32[$30>>2]|0;
      (_wcrtomb($$223,$39,0)|0);
      $40 = (($$223) + ($35)|0);
      $41 = (($$422) - ($35))|0;
      $$3 = $40;$$5 = $41;$46 = $30;
     } else {
      $42 = $29&255;
      $43 = ((($$223)) + 1|0);
      HEAP8[$$223>>0] = $42;
      $44 = (($$422) + -1)|0;
      $$pre45 = HEAP32[$ws>>2]|0;
      $$3 = $43;$$5 = $44;$46 = $$pre45;
     }
     $45 = ((($46)) + 4|0);
     HEAP32[$ws>>2] = $45;
     $47 = ($$5|0)==(0);
     if ($47) {
      $$0 = $n;
      break L1;
     } else {
      $$223 = $$3;$$422 = $$5;$30 = $45;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$$223$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $34 = (($n) - ($$422$lcssa))|0;
     $$0 = $34;
     break;
    }
    else if ((label|0) == 22) {
     $38 = (($n) - ($$422$lcssa82))|0;
     $$0 = $38;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _connect($fd,$addr,$len) {
 $fd = $fd|0;
 $addr = $addr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $addr;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $len;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $7 = (___syscall102(102,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _getsockopt($fd,$level,$optname,$optval,$optlen) {
 $fd = $fd|0;
 $level = $level|0;
 $optname = $optname|0;
 $optval = $optval|0;
 $optlen = $optlen|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $level;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $optname;
 $3 = ((($0)) + 12|0);
 $4 = $optval;
 HEAP32[$3>>2] = $4;
 $5 = ((($0)) + 16|0);
 $6 = $optlen;
 HEAP32[$5>>2] = $6;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $8 = (___syscall102(102,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _htonl($n) {
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_llvm_bswap_i32(($n|0))|0);
 return ($0|0);
}
function _htons($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function _inet_pton($af,$s,$a0) {
 $af = $af|0;
 $s = $s|0;
 $a0 = $a0|0;
 var $$0 = 0, $$01545 = 0, $$2 = 0, $$2$lcssa125 = 0, $$3 = 0, $$4 = 0, $$lcssa132 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$pre = 0, $$pre73 = 0, $$sum = 0, $$sum16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $a$048 = 0, $brk$0 = 0, $brk$0$lcssa129 = 0, $brk$1 = 0, $brk$2 = 0, $exitcond = 0, $i$047 = 0, $i$1 = 0, $i$1$lcssa127 = 0, $i$2 = 0, $ip = 0, $isdigit = 0, $isdigit$1 = 0, $isdigit$2 = 0;
 var $isdigittmp = 0, $isdigittmp$1 = 0, $isdigittmp$2 = 0, $j$026 = 0, $j$027 = 0, $j$132 = 0, $j$151 = 0, $j$151$lcssa = 0, $j$349 = 0, $need_v4$0 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond18 = 0, $or$cond4 = 0, $or$cond7 = 0, $v$029 = 0, $v$030 = 0, $v$134 = 0, $v$152 = 0;
 var $v$152$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ip = sp;
 L1: do {
  switch ($af|0) {
  case 2:  {
   $$01545 = $s;$i$047 = 0;
   while(1) {
    $0 = HEAP8[$$01545>>0]|0;
    $1 = $0 << 24 >> 24;
    $isdigittmp = (($1) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if (!($isdigit)) {
     $$0 = 0;
     break L1;
    }
    $2 = ((($$01545)) + 1|0);
    $3 = HEAP8[$2>>0]|0;
    $4 = $3 << 24 >> 24;
    $isdigittmp$1 = (($4) + -48)|0;
    $isdigit$1 = ($isdigittmp$1>>>0)<(10);
    if ($isdigit$1) {
     $84 = ($isdigittmp*10)|0;
     $85 = (($84) + -48)|0;
     $86 = (($85) + ($4))|0;
     $87 = ((($$01545)) + 2|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = $88 << 24 >> 24;
     $isdigittmp$2 = (($89) + -48)|0;
     $isdigit$2 = ($isdigittmp$2>>>0)<(10);
     if ($isdigit$2) {
      $90 = ($86*10)|0;
      $91 = (($90) + -48)|0;
      $92 = (($91) + ($89))|0;
      $j$027 = 3;$v$030 = $92;
     } else {
      $j$027 = 2;$v$030 = $86;
     }
     $5 = ($0<<24>>24)==(48);
     $6 = ($v$030|0)>(255);
     $or$cond = $6 | $5;
     if ($or$cond) {
      $$0 = 0;
      break L1;
     } else {
      $j$026 = $j$027;$v$029 = $v$030;
     }
    } else {
     $j$026 = 1;$v$029 = $isdigittmp;
    }
    $7 = $v$029&255;
    $8 = (($a0) + ($i$047)|0);
    HEAP8[$8>>0] = $7;
    $9 = (($$01545) + ($j$026)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    $12 = ($i$047|0)==(3);
    $or$cond4 = $12 & $11;
    if ($or$cond4) {
     $$0 = 1;
     break L1;
    }
    $13 = ($10<<24>>24)==(46);
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    $14 = (($j$026) + 1)|0;
    $15 = (($$01545) + ($14)|0);
    $16 = (($i$047) + 1)|0;
    $17 = ($16|0)<(4);
    if ($17) {
     $$01545 = $15;$i$047 = $16;
    } else {
     $$0 = 0;
     break;
    }
   }
   break;
  }
  case 10:  {
   $19 = HEAP8[$s>>0]|0;
   $20 = ($19<<24>>24)==(58);
   if ($20) {
    $21 = ((($s)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==(58);
    if ($23) {
     $$2 = $21;$24 = 58;$brk$0 = -1;$i$1 = 0;
    } else {
     $$0 = 0;
     break L1;
    }
   } else {
    $$2 = $s;$24 = $19;$brk$0 = -1;$i$1 = 0;
   }
   L17: while(1) {
    $25 = ($24<<24>>24)==(58);
    $26 = ($brk$0|0)<(0);
    $or$cond7 = $26 & $25;
    if ($or$cond7) {
     $27 = $i$1 & 7;
     $28 = (($ip) + ($27<<1)|0);
     HEAP16[$28>>1] = 0;
     $29 = ((($$2)) + 1|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $$4 = $29;$brk$2 = $i$1;$i$2 = $i$1;$need_v4$0 = 0;
      break;
     }
     $32 = ($i$1|0)==(7);
     if ($32) {
      $$0 = 0;
      break L1;
     } else {
      $$3 = $29;$$pre = $30;$brk$1 = $i$1;
     }
    } else {
     $34 = $24;$j$151 = 0;$v$152 = 0;
     while(1) {
      $33 = $34 << 24 >> 24;
      $35 = (($33) + -48)|0;
      $36 = ($35>>>0)<(10);
      if ($36) {
       $44 = $35;
      } else {
       $37 = $33 | 32;
       $38 = (($37) + -97)|0;
       $39 = ($38>>>0)<(6);
       $40 = (($37) + -87)|0;
       $41 = ($40|0)>(-1);
       $or$cond18 = $39 & $41;
       if ($or$cond18) {
        $44 = $40;
       } else {
        $j$151$lcssa = $j$151;$v$152$lcssa = $v$152;
        label = 18;
        break;
       }
      }
      $42 = $v$152 << 4;
      $43 = (($44) + ($42))|0;
      $45 = (($j$151) + 1)|0;
      $46 = ($45|0)<(4);
      if (!($46)) {
       $j$132 = $45;$v$134 = $43;
       break;
      }
      $$phi$trans$insert = (($$2) + ($45)|0);
      $$pre73 = HEAP8[$$phi$trans$insert>>0]|0;
      $34 = $$pre73;$j$151 = $45;$v$152 = $43;
     }
     if ((label|0) == 18) {
      label = 0;
      $47 = ($j$151$lcssa|0)==(0);
      if ($47) {
       $$0 = 0;
       break L1;
      } else {
       $j$132 = $j$151$lcssa;$v$134 = $v$152$lcssa;
      }
     }
     $48 = $v$134&65535;
     $49 = $i$1 & 7;
     $50 = (($ip) + ($49<<1)|0);
     HEAP16[$50>>1] = $48;
     $51 = (($$2) + ($j$132)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = ($52<<24>>24)==(0);
     if ($53) {
      $54 = ($brk$0|0)>(-1);
      $55 = ($i$1|0)==(7);
      $or$cond11 = $55 | $54;
      if ($or$cond11) {
       $$4 = $$2;$brk$2 = $brk$0;$i$2 = $i$1;$need_v4$0 = 0;
       break;
      }
     }
     $56 = ($i$1|0)==(7);
     if ($56) {
      $$0 = 0;
      break L1;
     }
     switch ($52<<24>>24) {
     case 46:  {
      $$2$lcssa125 = $$2;$$lcssa132 = $26;$brk$0$lcssa129 = $brk$0;$i$1$lcssa127 = $i$1;
      label = 23;
      break L17;
      break;
     }
     case 58:  {
      break;
     }
     default: {
      $$0 = 0;
      break L1;
     }
     }
     $59 = (($j$132) + 1)|0;
     $60 = (($$2) + ($59)|0);
     $$pre$pre = HEAP8[$60>>0]|0;
     $$3 = $60;$$pre = $$pre$pre;$brk$1 = $brk$0;
    }
    $61 = (($i$1) + 1)|0;
    $$2 = $$3;$24 = $$pre;$brk$0 = $brk$1;$i$1 = $61;
   }
   if ((label|0) == 23) {
    $57 = ($i$1$lcssa127|0)<(6);
    $or$cond14 = $57 & $$lcssa132;
    if ($or$cond14) {
     $$0 = 0;
     break L1;
    }
    $58 = (($i$1$lcssa127) + 1)|0;
    $$4 = $$2$lcssa125;$brk$2 = $brk$0$lcssa129;$i$2 = $58;$need_v4$0 = 1;
   }
   $62 = ($brk$2|0)>(-1);
   if ($62) {
    $63 = (($ip) + ($brk$2<<1)|0);
    $$sum = (7 - ($i$2))|0;
    $$sum16 = (($$sum) + ($brk$2))|0;
    $64 = (($ip) + ($$sum16<<1)|0);
    $65 = (($i$2) + 1)|0;
    $66 = (($65) - ($brk$2))|0;
    $67 = $66 << 1;
    _memmove(($64|0),($63|0),($67|0))|0;
    $68 = ($$sum|0)>(0);
    if ($68) {
     $69 = $i$2 << 1;
     $70 = (14 - ($69))|0;
     _memset(($63|0),0,($70|0))|0;
     $a$048 = $a0;$j$349 = 0;
    } else {
     $a$048 = $a0;$j$349 = 0;
    }
   } else {
    $a$048 = $a0;$j$349 = 0;
   }
   while(1) {
    $71 = (($ip) + ($j$349<<1)|0);
    $72 = HEAP16[$71>>1]|0;
    $73 = ($72&65535) >>> 8;
    $74 = $73&255;
    $75 = ((($a$048)) + 1|0);
    HEAP8[$a$048>>0] = $74;
    $76 = HEAP16[$71>>1]|0;
    $77 = $76&255;
    $78 = ((($a$048)) + 2|0);
    HEAP8[$75>>0] = $77;
    $79 = (($j$349) + 1)|0;
    $exitcond = ($79|0)==(8);
    if ($exitcond) {
     break;
    } else {
     $a$048 = $78;$j$349 = $79;
    }
   }
   $80 = ($need_v4$0|0)==(0);
   if (!($80)) {
    $81 = ((($a0)) + 12|0);
    $82 = (_inet_pton(2,$$4,$81)|0);
    $83 = ($82|0)<(1);
    if ($83) {
     $$0 = 0;
     break L1;
    }
   }
   $$0 = 1;
   break;
  }
  default: {
   $18 = (___errno_location()|0);
   HEAP32[$18>>2] = 97;
   $$0 = -1;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ntohs($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function _recv($fd,$buf,$len,$flags) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_recvfrom($fd,$buf,$len,$flags,0,0)|0);
 return ($0|0);
}
function _recvfrom($fd,$buf,$len,$flags,$addr,$alen) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 $addr = $addr|0;
 $alen = $alen|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $buf;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $len;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = $flags;
 $5 = ((($0)) + 16|0);
 $6 = $addr;
 HEAP32[$5>>2] = $6;
 $7 = ((($0)) + 20|0);
 $8 = $alen;
 HEAP32[$7>>2] = $8;
 HEAP32[$vararg_buffer>>2] = 12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $9 = (___syscall102(102,($vararg_buffer|0))|0);
 $10 = (___syscall_ret($9)|0);
 STACKTOP = sp;return ($10|0);
}
function _socket($domain,$type,$protocol) {
 $domain = $domain|0;
 $type = $type|0;
 $protocol = $protocol|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 64|0;
 $1 = sp + 40|0;
 HEAP32[$0>>2] = $domain;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $type;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $protocol;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $7 = (___syscall102(102,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 L1: do {
  if ($9) {
   $10 = (___errno_location()|0);
   $11 = HEAP32[$10>>2]|0;
   switch ($11|0) {
   case 93: case 22:  {
    break;
   }
   default: {
    $$0 = $8;
    break L1;
   }
   }
   $12 = $type & 526336;
   $13 = ($12|0)==(0);
   if ($13) {
    $$0 = $8;
   } else {
    HEAP32[$1>>2] = $domain;
    $14 = ((($1)) + 4|0);
    $15 = $type & -526337;
    HEAP32[$14>>2] = $15;
    $16 = ((($1)) + 8|0);
    HEAP32[$16>>2] = $protocol;
    $17 = ((($1)) + 12|0);
    HEAP32[$17>>2] = 0;
    $18 = ((($1)) + 16|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($1)) + 20|0);
    HEAP32[$19>>2] = 0;
    HEAP32[$vararg_buffer2>>2] = 1;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $1;
    $20 = (___syscall102(102,($vararg_buffer2|0))|0);
    $21 = (___syscall_ret($20)|0);
    $22 = ($21|0)<(0);
    if ($22) {
     $$0 = $21;
    } else {
     $23 = $type & 524288;
     $24 = ($23|0)==(0);
     if (!($24)) {
      HEAP32[$vararg_buffer6>>2] = 1;
      (_fcntl($21,2,$vararg_buffer6)|0);
     }
     $25 = $type & 2048;
     $26 = ($25|0)==(0);
     if ($26) {
      $$0 = $21;
     } else {
      $27 = (_fcntl($21,3,$vararg_buffer9)|0);
      $28 = $27 | 2048;
      HEAP32[$vararg_buffer11>>2] = $28;
      (_fcntl($21,4,$vararg_buffer11)|0);
      $$0 = $21;
     }
    }
   }
  } else {
   $$0 = $8;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  (___lockfile($f)|0);
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((6312)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(6308)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(6308)>>2] = $14;
  }
  ___unlock(((6312)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 1023]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[6540>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[6540>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((6312)|0));
   $$012 = HEAP32[(6308)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((6312)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(26046,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $31 = $4;
 } else {
  $31 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = ($17>>>0)<($0>>>0);
  $$ = $19 ? $17 : $0;
  _memcpy(($destv|0),($14|0),($$|0))|0;
  $20 = (($14) + ($$)|0);
  HEAP32[$13>>2] = $20;
  $21 = (($destv) + ($$)|0);
  $22 = (($0) - ($$))|0;
  $dest$0$ph = $21;$l$0$ph = $22;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $23 = ($l$0$ph|0)==(0);
 L7: do {
  if ($23) {
   label = 13;
  } else {
   $24 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $25 = (___toread($f)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $27 = HEAP32[$24>>2]|0;
    $28 = (FUNCTION_TABLE_iiii[$27 & 1023]($f,$dest$02,$l$03)|0);
    $29 = (($28) + 1)|0;
    $30 = ($29>>>0)<(2);
    if ($30) {
     $l$03$lcssa = $l$03;
     break;
    }
    $35 = (($l$03) - ($28))|0;
    $36 = (($dest$02) + ($28)|0);
    $37 = ($l$03|0)==($28|0);
    if ($37) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $36;$l$03 = $35;
    }
   }
   $32 = ($31|0)==(0);
   if (!($32)) {
    ___unlockfile($f);
   }
   $33 = (($0) - ($l$03$lcssa))|0;
   $34 = (($33>>>0) / ($size>>>0))&-1;
   $$0 = $34;
  }
 } while(0);
 if ((label|0) == 13) {
  $38 = ($31|0)==(0);
  if ($38) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $2;
  $6 = $4;
  $7 = (($off) - ($5))|0;
  $8 = (($7) + ($6))|0;
  $$01 = $8;
 } else {
  $$01 = $off;
 }
 $9 = ((($f)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($f)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = ((($f)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $18 = ((($f)) + 16|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $19 = ((($f)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 1023]($f,$$01,$whence)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   $$0 = -1;
  } else {
   $23 = ((($f)) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($f)) + 4|0);
   HEAP32[$24>>2] = 0;
   $25 = HEAP32[$f>>2]|0;
   $26 = $25 & -17;
   HEAP32[$f>>2] = $26;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 1023]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $14;
  $18 = $16;
  $19 = ((($f)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($f)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($11) - ($17))|0;
  $26 = (($25) + ($18))|0;
  $27 = (($26) + ($23))|0;
  $28 = (($27) - ($24))|0;
  $$0 = $28;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $7 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $7 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $8 = $7;
   $9 = $6;
   $10 = (($8) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _perror($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6532>>2]|0;
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strerror($2)|0);
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(-1);
 if ($6) {
  $7 = (___lockfile($0)|0);
  $13 = $7;
 } else {
  $13 = 0;
 }
 $8 = ($msg|0)==(0|0);
 if (!($8)) {
  $9 = HEAP8[$msg>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if (!($10)) {
   $11 = (_strlen($msg)|0);
   (_fwrite($msg,$11,1,$0)|0);
   (_fputc(58,$0)|0);
   (_fputc(32,$0)|0);
  }
 }
 $12 = (_strlen($3)|0);
 (_fwrite($3,$12,1,$0)|0);
 (_fputc(10,$0)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  ___unlockfile($0);
 }
 return;
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[6536>>2]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 1023]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$9 = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa384 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi182Z2D = 0, $$pre168 = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre181 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0400 = 0, $alloc$1 = 0;
 var $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0;
 var $factor16 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit795 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp694 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0104 = 0, $matches$0104$lcssa = 0, $matches$0104376 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, $p$0109 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0;
 var $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0108 = 0, $pos$1 = 0, $pos$2 = 0, $s$0107 = 0, $s$0107$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0;
 var $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0103 = 0, $wcs$0103$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0;
 var $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $333 = $4;
 } else {
  $333 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0104 = 0;$p$0109 = $fmt;$pos$0108 = 0;$s$0107 = 0;$wcs$0103 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0109>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0109)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0109)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0109)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0109)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp694 = (($93) + -48)|0;
        $isdigit795 = ($isdigittmp694>>>0)<(10);
        if ($isdigit795) {
         $97 = $93;$p$396 = $p$2;$width$097 = 0;
         while(1) {
          $94 = ($width$097*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$396)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp6 = (($100) + -48)|0;
          $isdigit7 = ($isdigittmp6>>>0)<(10);
          if ($isdigit7) {
           $97 = $100;$p$396 = $98;$width$097 = $96;
          } else {
           $$lcssa38 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa38 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa38<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre168 = HEAP8[$104>>0]|0;
         $107 = $$pre168;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa38;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0107;$wcs$1 = $wcs$0103;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$9 = $109 ? $110 : $105;
         $$10 = $109 ? -2 : -1;
         $p$5 = $$9;$size$0 = $$10;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$11 = $112 ? $113 : $105;
         $$12 = $112 ? 3 : 1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
         label = 152;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0108;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0108;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0108|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0108&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0108&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0108;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         $$pre170 = HEAP32[$7>>2]|0;
         if ($140) {
          $144 = $$pre170;
         } else {
          $141 = ((($$pre170)) + -1|0);
          HEAP32[$7>>2] = $141;
          $144 = $141;
         }
         $142 = HEAP32[$9>>2]|0;
         $143 = HEAP32[$10>>2]|0;
         $145 = $144;
         $146 = $143;
         $147 = (($142) + ($pos$0108))|0;
         $148 = (($147) + ($145))|0;
         $149 = (($148) - ($146))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $156 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
          label = 152;
          break L6;
         }
         $$pre172 = HEAP32[$8>>2]|0;
         $156 = $$pre172;
        }
        $157 = ($156|0)==(0|0);
        if (!($157)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L67: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ & 239;
          $162 = ($161|0)==(99);
          L69: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $168 = $166 ? $164 : $p$5;
            $p$6 = $166 ? $167 : $164;
            $169 = $166&1;
            _memset(($scanset|0),($169|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $170 = HEAP8[$p$6>>0]|0;
            switch ($170<<24>>24) {
            case 45:  {
             $171 = ((($168)) + 2|0);
             $172 = $invert$0 ^ 1;
             $173 = $172&255;
             HEAP8[$14>>0] = $173;
             $$pre$phi182Z2D = $173;$p$7$ph = $171;
             break;
            }
            case 93:  {
             $174 = ((($168)) + 2|0);
             $175 = $invert$0 ^ 1;
             $176 = $175&255;
             HEAP8[$15>>0] = $176;
             $$pre$phi182Z2D = $176;$p$7$ph = $174;
             break;
            }
            default: {
             $$pre180 = $invert$0 ^ 1;
             $$pre181 = $$pre180&255;
             $$pre$phi182Z2D = $$pre181;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $177 = HEAP8[$p$7>>0]|0;
             L80: do {
              switch ($177<<24>>24) {
              case 0:  {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
               label = 152;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L69;
               break;
              }
              case 45:  {
               $178 = ((($p$7)) + 1|0);
               $179 = HEAP8[$178>>0]|0;
               switch ($179<<24>>24) {
               case 93: case 0:  {
                $190 = 45;$p$8 = $p$7;
                break L80;
                break;
               }
               default: {
               }
               }
               $180 = ((($p$7)) + -1|0);
               $181 = HEAP8[$180>>0]|0;
               $182 = ($181&255)<($179&255);
               if ($182) {
                $183 = $181&255;
                $c$0100 = $183;
                while(1) {
                 $184 = (($c$0100) + 1)|0;
                 $185 = (($scanset) + ($184)|0);
                 HEAP8[$185>>0] = $$pre$phi182Z2D;
                 $186 = HEAP8[$178>>0]|0;
                 $187 = $186&255;
                 $188 = ($184|0)<($187|0);
                 if ($188) {
                  $c$0100 = $184;
                 } else {
                  $190 = $186;$p$8 = $178;
                  break;
                 }
                }
               } else {
                $190 = $179;$p$8 = $178;
               }
               break;
              }
              default: {
               $190 = $177;$p$8 = $p$7;
              }
              }
             } while(0);
             $189 = $190&255;
             $191 = (($189) + 1)|0;
             $192 = (($scanset) + ($191)|0);
             HEAP8[$192>>0] = $$pre$phi182Z2D;
             $193 = ((($p$8)) + 1|0);
             $p$7 = $193;
            }
           }
          } while(0);
          $194 = (($width$1) + 1)|0;
          $195 = $160 ? $194 : 31;
          $196 = ($$size$0|0)==(1);
          $197 = ($alloc$0|0)!=(0);
          L88: do {
           if ($196) {
            if ($197) {
             $198 = $195 << 2;
             $199 = (_malloc($198)|0);
             $200 = ($199|0)==(0|0);
             if ($200) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $199;
              label = 152;
              break L6;
             } else {
              $wcs$2 = $199;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $195;$wcs$3$ph = $wcs$2;
            L94: while(1) {
             $201 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph20 = $i$0$ph;
             while(1) {
              L98: while(1) {
               $202 = HEAP32[$7>>2]|0;
               $203 = HEAP32[$8>>2]|0;
               $204 = ($202>>>0)<($203>>>0);
               if ($204) {
                $205 = ((($202)) + 1|0);
                HEAP32[$7>>2] = $205;
                $206 = HEAP8[$202>>0]|0;
                $207 = $206&255;
                $210 = $207;
               } else {
                $208 = (___shgetc($f)|0);
                $210 = $208;
               }
               $209 = (($210) + 1)|0;
               $211 = (($scanset) + ($209)|0);
               $212 = HEAP8[$211>>0]|0;
               $213 = ($212<<24>>24)==(0);
               if ($213) {
                $i$0$ph20$lcssa = $i$0$ph20;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L94;
               }
               $214 = $210&255;
               HEAP8[$0>>0] = $214;
               $215 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($215|0) {
               case -1:  {
                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
                label = 152;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L98;
               }
               }
              }
              if ($201) {
               $i$1 = $i$0$ph20;
              } else {
               $216 = HEAP32[$wc>>2]|0;
               $217 = (($i$0$ph20) + 1)|0;
               $218 = (($wcs$3$ph) + ($i$0$ph20<<2)|0);
               HEAP32[$218>>2] = $216;
               $i$1 = $217;
              }
              $219 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $197 & $219;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph20 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $220 = $factor | 1;
             $221 = $220 << 2;
             $222 = (_realloc($wcs$3$ph,$221)|0);
             $223 = ($222|0)==(0|0);
             if ($223) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
              label = 152;
              break L6;
             }
             $i$0$ph$phi = $k$0$ph;$k$0$ph = $220;$wcs$3$ph = $222;$i$0$ph = $i$0$ph$phi;
            }
            $224 = (_mbsinit($st)|0);
            $225 = ($224|0)==(0);
            if ($225) {
             $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa;
             label = 152;
             break L6;
            } else {
             $i$4 = $i$0$ph20$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($197) {
             $226 = (_malloc($195)|0);
             $227 = ($226|0)==(0|0);
             if ($227) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = 0;
              label = 152;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $195;$s$2$ph = $226;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $228 = HEAP32[$7>>2]|0;
               $229 = HEAP32[$8>>2]|0;
               $230 = ($228>>>0)<($229>>>0);
               if ($230) {
                $231 = ((($228)) + 1|0);
                HEAP32[$7>>2] = $231;
                $232 = HEAP8[$228>>0]|0;
                $233 = $232&255;
                $236 = $233;
               } else {
                $234 = (___shgetc($f)|0);
                $236 = $234;
               }
               $235 = (($236) + 1)|0;
               $237 = (($scanset) + ($235)|0);
               $238 = HEAP8[$237>>0]|0;
               $239 = ($238<<24>>24)==(0);
               if ($239) {
                $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
                break L88;
               }
               $240 = $236&255;
               $241 = (($i$2) + 1)|0;
               $242 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$242>>0] = $240;
               $243 = ($241|0)==($k$1$ph|0);
               if ($243) {
                break;
               } else {
                $i$2 = $241;
               }
              }
              $factor16 = $k$1$ph << 1;
              $244 = $factor16 | 1;
              $245 = (_realloc($s$2$ph,$244)|0);
              $246 = ($245|0)==(0|0);
              if ($246) {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$2$ph;$wcs$7 = 0;
               label = 152;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $244;$s$2$ph = $245;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $247 = ($dest$0|0)==(0|0);
            if ($247) {
             $265 = $156;
             while(1) {
              $263 = HEAP32[$7>>2]|0;
              $264 = ($263>>>0)<($265>>>0);
              if ($264) {
               $266 = ((($263)) + 1|0);
               HEAP32[$7>>2] = $266;
               $267 = HEAP8[$263>>0]|0;
               $268 = $267&255;
               $271 = $268;
              } else {
               $269 = (___shgetc($f)|0);
               $271 = $269;
              }
              $270 = (($271) + 1)|0;
              $272 = (($scanset) + ($270)|0);
              $273 = HEAP8[$272>>0]|0;
              $274 = ($273<<24>>24)==(0);
              if ($274) {
               $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
               break L88;
              }
              $$pre176 = HEAP32[$8>>2]|0;
              $265 = $$pre176;
             }
            } else {
             $250 = $156;$i$3 = 0;
             while(1) {
              $248 = HEAP32[$7>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$7>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($f)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($scanset) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
               break L88;
              }
              $260 = $256&255;
              $261 = (($i$3) + 1)|0;
              $262 = (($dest$0) + ($i$3)|0);
              HEAP8[$262>>0] = $260;
              $$pre174 = HEAP32[$8>>2]|0;
              $250 = $$pre174;$i$3 = $261;
             }
            }
           }
          } while(0);
          $275 = HEAP32[$8>>2]|0;
          $276 = ($275|0)==(0|0);
          $$pre178 = HEAP32[$7>>2]|0;
          if ($276) {
           $280 = $$pre178;
          } else {
           $277 = ((($$pre178)) + -1|0);
           HEAP32[$7>>2] = $277;
           $280 = $277;
          }
          $278 = HEAP32[$9>>2]|0;
          $279 = HEAP32[$10>>2]|0;
          $281 = $280;
          $282 = $279;
          $283 = (($281) - ($282))|0;
          $284 = (($283) + ($278))|0;
          $285 = ($284|0)==(0);
          if ($285) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          $$not = $160 ^ 1;
          $286 = ($284|0)==($width$1|0);
          $or$cond8 = $286 | $$not;
          if (!($or$cond8)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          do {
           if ($197) {
            if ($196) {
             HEAP32[$dest$0>>2] = $wcs$4;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$3;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          } else {
           $287 = ($wcs$4|0)==(0|0);
           if (!($287)) {
            $288 = (($wcs$4) + ($i$4<<2)|0);
            HEAP32[$288>>2] = 0;
           }
           $289 = ($s$3|0)==(0|0);
           if ($289) {
            $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
            break L67;
           }
           $290 = (($s$3) + ($i$4)|0);
           HEAP8[$290>>0] = 0;
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 134;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 134;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 134;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 134;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $310 = (+___floatscan($f,$$size$0,0));
          $311 = HEAP32[$9>>2]|0;
          $312 = HEAP32[$7>>2]|0;
          $313 = HEAP32[$10>>2]|0;
          $314 = $312;
          $315 = $313;
          $316 = (($315) - ($314))|0;
          $317 = ($311|0)==($316|0);
          if ($317) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $318 = ($dest$0|0)==(0|0);
          if ($318) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $319 = $310;
            HEAPF32[$dest$0>>2] = $319;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         }
         }
        } while(0);
        L168: do {
         if ((label|0) == 134) {
          label = 0;
          $291 = (___intscan($f,$base$0,0,-1,-1)|0);
          $292 = tempRet0;
          $293 = HEAP32[$9>>2]|0;
          $294 = HEAP32[$7>>2]|0;
          $295 = HEAP32[$10>>2]|0;
          $296 = $294;
          $297 = $295;
          $298 = (($297) - ($296))|0;
          $299 = ($293|0)==($298|0);
          if ($299) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $300 = ($$|0)==(112);
          $301 = ($dest$0|0)!=(0|0);
          $or$cond3 = $301 & $300;
          if ($or$cond3) {
           $302 = $291;
           HEAP32[$dest$0>>2] = $302;
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
           break;
          }
          $303 = ($dest$0|0)==(0|0);
          if ($303) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $304 = $291&255;
            HEAP8[$dest$0>>0] = $304;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case -1:  {
            $305 = $291&65535;
            HEAP16[$dest$0>>1] = $305;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 3:  {
            $306 = $dest$0;
            $307 = $306;
            HEAP32[$307>>2] = $291;
            $308 = (($306) + 4)|0;
            $309 = $308;
            HEAP32[$309>>2] = $292;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
           }
           }
          }
         }
        } while(0);
        $320 = HEAP32[$9>>2]|0;
        $321 = HEAP32[$7>>2]|0;
        $322 = HEAP32[$10>>2]|0;
        $323 = $321;
        $324 = $322;
        $325 = (($320) + ($pos$1))|0;
        $326 = (($325) + ($323))|0;
        $327 = (($326) - ($324))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $328 = $not$&1;
        $matches$0$ = (($328) + ($matches$0104))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $327;$s$5 = $s$4;$wcs$6 = $wcs$5;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0109) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $61 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $61 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $62 = ($61|0)==($60|0);
      if (!($62)) {
       $$lcssa384 = $61;$matches$0104$lcssa = $matches$0104;$s$0107$lcssa = $s$0107;$wcs$0103$lcssa = $wcs$0103;
       label = 21;
       break L6;
      }
      $69 = (($pos$0108) + 1)|0;
      $matches$1 = $matches$0104;$p$11 = $51;$pos$2 = $69;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     } else {
      $p$1 = $p$0109;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      $$pre = HEAP32[$7>>2]|0;
      if ($36) {
       $40 = $$pre;
      } else {
       $37 = ((($$pre)) + -1|0);
       HEAP32[$7>>2] = $37;
       $40 = $37;
      }
      $38 = HEAP32[$9>>2]|0;
      $39 = HEAP32[$10>>2]|0;
      $41 = $40;
      $42 = $39;
      $43 = (($38) + ($pos$0108))|0;
      $44 = (($43) + ($41))|0;
      $45 = (($44) - ($42))|0;
      $matches$1 = $matches$0104;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     }
    } while(0);
    $329 = ((($p$11)) + 1|0);
    $330 = HEAP8[$329>>0]|0;
    $331 = ($330<<24>>24)==(0);
    if ($331) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $330;$matches$0104 = $matches$1;$p$0109 = $329;$pos$0108 = $pos$2;$s$0107 = $s$5;$wcs$0103 = $wcs$6;
    }
   }
   if ((label|0) == 21) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa384|0)>(-1);
    $68 = ($matches$0104$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0104$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$7 = $s$0107$lcssa;$wcs$8 = $wcs$0103$lcssa;
     label = 153;
    }
   }
   else if ((label|0) == 152) {
    $$old4 = ($matches$0104376|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0400;$s$7 = $s$6;$wcs$8 = $wcs$7;
     label = 153;
    } else {
     $alloc$2 = $alloc$0400;$matches$2 = $matches$0104376;$s$8 = $s$6;$wcs$9 = $wcs$7;
    }
   }
   if ((label|0) == 153) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
   }
   $332 = ($alloc$2|0)==(0);
   if ($332) {
    $matches$3 = $matches$2;
   } else {
    _free($s$8);
    _free($wcs$9);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $334 = ($333|0)==(0);
 if (!($334)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=6600; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 635;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(26046,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 636;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 107;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 108;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 106;
   $34 = HEAP32[(6288)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((6312)|0));
   $37 = HEAP32[(6308)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $40 = $37;
    $41 = ((($40)) + 52|0);
    HEAP32[$41>>2] = $4;
   }
   HEAP32[(6308)>>2] = $4;
   ___unlock(((6312)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 1023]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[6284>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((637|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[6284>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((638|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 107;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _bsearch($key,$base,$nel,$width,$cmp) {
 $key = $key|0;
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0 = 0, $$01$ = 0, $$014 = 0, $$023 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nel|0)==(0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $$014 = $base;$$023 = $nel;
   while(1) {
    $1 = $$023 >>> 1;
    $2 = Math_imul($1, $width)|0;
    $3 = (($$014) + ($2)|0);
    $4 = (FUNCTION_TABLE_iii[$cmp & 1023]($key,$3)|0);
    $5 = ($4|0)==(0);
    if ($5) {
     $$0 = $3;
     break L1;
    }
    $6 = ($$023|0)==(1);
    if ($6) {
     $$0 = 0;
     break L1;
    }
    $7 = ($4|0)<(0);
    $8 = (($$023) - ($1))|0;
    $$ = $7 ? $1 : $8;
    $$01$ = $7 ? $$014 : $3;
    $9 = ($$|0)==(0);
    if ($9) {
     $$0 = 0;
     break;
    } else {
     $$014 = $$01$;$$023 = $$;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strtold_l($s,$p,$l) {
 $s = $s|0;
 $p = $p|0;
 $l = $l|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,2));
 return (+$0);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox555($s,$p,$base,-1,-1)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox555($s,$p,$base,0,-2147483648)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = ((($$0)) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$014 = $n;$$023 = $s;$$05 = $d;
  while(1) {
   $1 = (($$014) + -1)|0;
   $2 = ((($$023)) + 4|0);
   $3 = HEAP32[$$023>>2]|0;
   $4 = ((($$05)) + 4|0);
   HEAP32[$$05>>2] = $3;
   $5 = ($1|0)==(0);
   if ($5) {
    break;
   } else {
    $$014 = $1;$$023 = $2;$$05 = $4;
   }
  }
 }
 return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = ((($$025)) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = ((($$07)) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = ((($$03)) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 return ($d|0);
}
function _close($fd) {
 $fd = $fd|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall6(6,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-4);
 $$ = $1 ? -115 : $0;
 $2 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($2|0);
}
function _read($fd,$buf,$count) {
 $fd = $fd|0;
 $buf = $buf|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $0 = (___syscall3(3,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 1023]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $65 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((27090 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 27570;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 27570;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 27570;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 27570 : (27572);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (27571);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 27570;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 27570;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 27580;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 27587;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (27588) : (27593);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (27590);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (27554 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$480 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$480 = $$pre179$i;
      }
      $481 = ($480|0)<(0);
      $$31$i = $481 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $490 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $491 = ($490|0)>(29);
        $492 = $491 ? 29 : $490;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $490 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(27622,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(27622,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 27606 : 27610;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 27614 : 27618;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 27570;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 27570;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (27554 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 27570;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (27570 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 27570;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $792 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $793 = ($792|0)<(10);
       if ($793) {
        $i$398 = $792;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _cleanup521($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup526($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if (!($13)) {
  $14 = ($12|0)!=(0);
  $15 = (($s) + ($12)|0);
  $16 = $14 ? $15 : $s;
  HEAP32[$p>>2] = $16;
 }
 STACKTOP = sp;return (+$4);
}
function _strtox555($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) + ($12))|0;
  $18 = (($17) - ($16))|0;
  $19 = (($s) + ($18)|0);
  HEAP32[$p>>2] = $19;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[10008>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (10048 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (10048 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[10008>>2] = $22;
     } else {
      $23 = HEAP32[(10024)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(10016)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (10048 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (10048 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[10008>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(10024)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(10016)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(10028)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (10048 + ($92<<2)|0);
      $94 = HEAP32[10008>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[10008>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (10048 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (10048 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(10024)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(10016)>>2] = $81;
     HEAP32[(10028)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(10012)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (10312 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(10024)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (10312 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(10012)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(10012)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(10024)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(10024)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(10024)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(10016)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(10028)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (10048 + ($229<<2)|0);
       $231 = HEAP32[10008>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[10008>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (10048 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (10048 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(10024)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(10016)>>2] = $rsize$0$i$lcssa;
      HEAP32[(10028)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(10012)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (10312 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (10312 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(10016)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(10024)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (10312 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(10012)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(10012)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(10024)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(10024)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(10024)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (10048 + ($424<<2)|0);
          $426 = HEAP32[10008>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[10008>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (10048 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (10048 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(10024)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (10312 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(10012)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(10012)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(10024)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(10024)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(10016)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(10028)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(10028)>>2] = $514;
   HEAP32[(10016)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(10016)>>2] = 0;
   HEAP32[(10028)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(10020)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(10020)>>2] = $528;
  $529 = HEAP32[(10032)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(10032)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[10480>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(10488)>>2] = $538;
    HEAP32[(10484)>>2] = $538;
    HEAP32[(10492)>>2] = -1;
    HEAP32[(10496)>>2] = -1;
    HEAP32[(10500)>>2] = 0;
    HEAP32[(10452)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[10480>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(10488)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(10448)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(10440)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(10452)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(10032)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (10456);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(10020)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(10484)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(10440)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(10448)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(10488)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(10452)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(10452)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(10440)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(10440)>>2] = $632;
  $633 = HEAP32[(10444)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(10444)>>2] = $632;
  }
  $635 = HEAP32[(10032)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(10024)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(10024)>>2] = $tbase$255$i;
    }
    HEAP32[(10456)>>2] = $tbase$255$i;
    HEAP32[(10460)>>2] = $tsize$254$i;
    HEAP32[(10468)>>2] = 0;
    $640 = HEAP32[10480>>2]|0;
    HEAP32[(10044)>>2] = $640;
    HEAP32[(10040)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (10048 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (10048 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (10048 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(10032)>>2] = $654;
    HEAP32[(10020)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(10496)>>2]|0;
    HEAP32[(10036)>>2] = $659;
   } else {
    $sp$084$i = (10456);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(10020)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(10032)>>2] = $684;
       HEAP32[(10020)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(10496)>>2]|0;
       HEAP32[(10036)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(10024)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(10024)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (10456);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (10456);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(10020)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(10020)>>2] = $730;
        HEAP32[(10032)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(10028)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(10016)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(10016)>>2] = $736;
         HEAP32[(10028)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (10048 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[10008>>2]|0;
            $763 = $762 & $761;
            HEAP32[10008>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (10312 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(10012)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(10012)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(10024)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(10024)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(10024)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (10048 + ($840<<2)|0);
         $842 = HEAP32[10008>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[10008>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (10048 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (10048 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(10024)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (10312 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(10012)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(10012)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(10024)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(10024)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (10456);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(10032)>>2] = $953;
    HEAP32[(10020)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(10496)>>2]|0;
    HEAP32[(10036)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(10456)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(10456)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(10456)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(10456)+12>>2]|0;
    HEAP32[(10456)>>2] = $tbase$255$i;
    HEAP32[(10460)>>2] = $tsize$254$i;
    HEAP32[(10468)>>2] = 0;
    HEAP32[(10464)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (10048 + ($977<<2)|0);
      $979 = HEAP32[10008>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[10008>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (10048 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (10048 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(10024)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (10312 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(10012)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(10012)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(10024)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(10024)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(10020)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(10020)>>2] = $1062;
   $1063 = HEAP32[(10032)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(10032)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(10024)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(10028)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(10016)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (10048 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[10008>>2]|0;
     $36 = $35 & $34;
     HEAP32[10008>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (10312 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(10012)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(10012)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(10024)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(10024)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(10024)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(10032)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(10020)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(10020)>>2] = $120;
   HEAP32[(10032)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(10028)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(10028)>>2] = 0;
   HEAP32[(10016)>>2] = 0;
   return;
  }
  $125 = HEAP32[(10028)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(10016)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(10016)>>2] = $128;
   HEAP32[(10028)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (10048 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(10024)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[10008>>2]|0;
     $152 = $151 & $150;
     HEAP32[10008>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(10024)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(10024)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(10024)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (10312 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(10012)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(10012)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(10024)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(10024)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(10024)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(10028)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(10016)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (10048 + ($233<<2)|0);
  $235 = HEAP32[10008>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[10008>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (10048 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (10048 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(10024)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (10312 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(10012)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(10012)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(10024)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(10024)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(10040)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(10040)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (10464);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(10040)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(10024)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(10488)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(10032)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(10020)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(10032)>>2] = $36;
  HEAP32[(10020)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(10028)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(10016)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(10016)>>2] = $storemerge21;
  HEAP32[(10028)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (10048 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[10008>>2]|0;
    $88 = $87 & $86;
    HEAP32[10008>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (10312 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(10012)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(10012)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(10024)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(10024)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(10024)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(10024)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(10028)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(10016)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (10048 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[10008>>2]|0;
     $32 = $31 & $30;
     HEAP32[10008>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (10312 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(10012)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(10012)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(10024)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(10024)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(10024)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(10024)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(10032)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(10020)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(10020)>>2] = $115;
   HEAP32[(10032)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(10028)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(10028)>>2] = 0;
   HEAP32[(10016)>>2] = 0;
   return;
  }
  $120 = HEAP32[(10028)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(10016)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(10016)>>2] = $123;
   HEAP32[(10028)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (10048 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[10008>>2]|0;
     $146 = $145 & $144;
     HEAP32[10008>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (10312 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(10012)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(10012)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(10024)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(10024)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(10024)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(10028)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(10016)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (10048 + ($224<<2)|0);
  $226 = HEAP32[10008>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[10008>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (10048 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (10048 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(10024)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (10312 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(10012)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(10012)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(10024)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(10024)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function __ZNSt3__113random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($this,$__token) {
 $this = $this|0;
 $__token = $__token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 $1 = HEAP8[$__token>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__token)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__token)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_open($7,0,$vararg_buffer)|0);
 HEAP32[$this>>2] = $8;
 $9 = ($8|0)<(0);
 do {
  if ($9) {
   $10 = (___errno_location()|0);
   $11 = HEAP32[$10>>2]|0;
   __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($0,27624,$__token);
   $12 = HEAP8[$0>>0]|0;
   $13 = $12 & 1;
   $14 = ($13<<24>>24)==(0);
   $15 = ((($0)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 1|0);
   $18 = $14 ? $17 : $16;
   __THREW__ = 0;
   invoke_vii(639,($11|0),($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    ___resumeException($21|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__113random_deviceclEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$ph6 = 0, $p$0$ph5 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp;
 $n$0$ph6 = 4;$p$0$ph5 = $r;
 while(1) {
  L3: while(1) {
   $0 = HEAP32[$this>>2]|0;
   $1 = (_read($0,$p$0$ph5,$n$0$ph6)|0);
   switch ($1|0) {
   case 0:  {
    label = 4;
    break L3;
    break;
   }
   case -1:  {
    break;
   }
   default: {
    $6 = $1;
    break L3;
   }
   }
   $2 = (___errno_location()|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(4);
   if ($4) {
    continue;
   }
   __ZNSt3__120__throw_system_errorEiPKc($3,27676);
  }
  if ((label|0) == 4) {
   label = 0;
   __ZNSt3__120__throw_system_errorEiPKc(61,27654);
   $6 = 0;
  }
  $5 = (($n$0$ph6) - ($6))|0;
  $7 = (($p$0$ph5) + ($6)|0);
  $8 = ($n$0$ph6|0)==($6|0);
  if ($8) {
   break;
  } else {
   $n$0$ph6 = $5;$p$0$ph5 = $7;
  }
 }
 $9 = HEAP32[$r>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (_strlen($__lhs)|0);
 $3 = HEAP8[$__rhs>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 $6 = ((($__rhs)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3&255;
 $9 = $8 >>> 1;
 $10 = $5 ? $9 : $7;
 $11 = (($10) + ($2))|0;
 __THREW__ = 0;
 invoke_viiii(640,($agg$result|0),($__lhs|0),($2|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $14 = HEAP8[$__rhs>>0]|0;
  $15 = $14 & 1;
  $16 = ($15<<24>>24)==(0);
  $17 = ((($__rhs)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($__rhs)) + 1|0);
  $20 = $16 ? $19 : $18;
  __THREW__ = 0;
  (invoke_iiii(641,($agg$result|0),($20|0),($10|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   return;
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = $this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($condition)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = HEAP32[$condition>>2]|0;
  $11 = ($9|0)==($10|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($code)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $2 & $4;
 return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror($ev)|0);
 $1 = (_strlen($0)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 return;
}
function __ZNKSt3__124__generic_error_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27854|0);
}
function __ZNKSt3__124__generic_error_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)>(256);
 if ($0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,27862,34);
 } else {
  __ZNKSt3__112__do_message7messageEi($agg$result,0,$ev);
 }
 return;
}
function __ZNSt3__116generic_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[648>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((648|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[10596>>2] = (10532);
   ___cxa_guard_release((648|0));
  }
 }
 return (10596|0);
}
function __ZNKSt3__123__system_error_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27897|0);
}
function __ZNKSt3__123__system_error_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)>(256);
 if ($0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,27904,33);
 } else {
  __ZNKSt3__112__do_message7messageEi($agg$result,0,$ev);
 }
 return;
}
function __ZNKSt3__123__system_error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $$sink = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)>(256);
 if ($0) {
  (__ZNSt3__115system_categoryEv()|0);
  $$sink = 10600;
 } else {
  (__ZNSt3__116generic_categoryEv()|0);
  $$sink = 10596;
 }
 HEAP32[$agg$result>>2] = $ev;
 $1 = ((($agg$result)) + 4|0);
 HEAP32[$1>>2] = $$sink;
 return;
}
function __ZNSt3__115system_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[656>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((656|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[10600>>2] = (10568);
   ___cxa_guard_release((656|0));
  }
 }
 return (10600|0);
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = HEAP8[$what_arg>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = $3&255;
    $9 = $8 >>> 1;
    $10 = $9;
   } else {
    $6 = ((($what_arg)) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $10 = $7;
   }
   $11 = ($10|0)==(0);
   if ($11) {
    $17 = $1;
   } else {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,27938)|0);
    $$pre = HEAP32[$ec>>2]|0;
    $17 = $$pre;
   }
   $12 = ((($ec)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viii[$16 & 1023]($0,$13,$17);
   $18 = HEAP8[$0>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   $21 = ((($0)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($0)) + 1|0);
   $24 = $20 ? $23 : $22;
   $25 = ((($0)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $18&255;
   $28 = $27 >>> 1;
   $29 = $20 ? $28 : $26;
   __THREW__ = 0;
   (invoke_iiii(641,($what_arg|0),($24|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    ___resumeException($32|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    break;
   }
  }
 } while(0);
 ;HEAP32[$agg$result>>2]=HEAP32[$what_arg>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 HEAP32[$what_arg>>2] = 0;
 $34 = ((($what_arg)) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($what_arg)) + 8|0);
 HEAP32[$35>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen($what_arg)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(642,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $18 = ___cxa_find_matching_catch()|0;
   $19 = tempRet0;
   $$0 = $19;$$01 = $18;
  } else {
   __THREW__ = 0;
   invoke_vii(643,($this|0),($0|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $20 = ___cxa_find_matching_catch()|0;
    $21 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    $$0 = $21;$$01 = $20;
    break;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
    HEAP32[$this>>2] = (10512);
    $7 = ((($this)) + 8|0);
    $8 = $ec;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = $7;
    $15 = $14;
    HEAP32[$15>>2] = $10;
    $16 = (($14) + 4)|0;
    $17 = $16;
    HEAP32[$17>>2] = $13;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 return;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__120__throw_system_errorEiPKc($ev,$what_arg) {
 $ev = $ev|0;
 $what_arg = $what_arg|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__115system_categoryEv()|0);
 HEAP32[$0>>2] = $ev;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 10600;
 __THREW__ = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 invoke_viii(644,($1|0),($$byval_copy|0),($what_arg|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($5|0);
  // unreachable;
 } else {
  ___cxa_throw(($1|0),(576|0),(110|0));
  // unreachable;
 }
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__124__generic_error_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__123__system_error_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = ((($__str)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($__str)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if (!($0)) {
  $1 = HEAP8[$__str>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  $4 = ((($__str)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($__str)) + 1|0);
  $7 = $3 ? $6 : $5;
  $8 = ((($__str)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1&255;
  $11 = $10 >>> 1;
  $12 = $3 ? $11 : $9;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$7,$12)|0);
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 1|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__n>>>0);
 do {
  if ($8) {
   $9 = (($__n) - ($7))|0;
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  } else {
   if ($2) {
    $14 = (((($this)) + 1|0) + ($__n)|0);
    HEAP8[$14>>0] = 0;
    $15 = $__n << 1;
    $16 = $15&255;
    HEAP8[$this>>0] = $16;
    break;
   } else {
    $10 = ((($this)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + ($__n)|0);
    HEAP8[$12>>0] = 0;
    $13 = ((($this)) + 4|0);
    HEAP32[$13>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $15 = 10;$8 = $1;
  } else {
   $4 = HEAP32[$this>>2]|0;
   $5 = $4 & -2;
   $phitmp$i = (($5) + -1)|0;
   $6 = $4&255;
   $15 = $phitmp$i;$8 = $6;
  }
  $7 = $8 & 1;
  $9 = ($7<<24>>24)==(0);
  if ($9) {
   $12 = $8&255;
   $13 = $12 >>> 1;
   $16 = $13;
  } else {
   $10 = ((($this)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $16 = $11;
  }
  $14 = (($15) - ($16))|0;
  $17 = ($14>>>0)<($__n>>>0);
  if ($17) {
   $18 = (($__n) - ($15))|0;
   $19 = (($18) + ($16))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
   $$pre = HEAP8[$this>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   $25 = ((($this)) + 1|0);
   $27 = $25;
  } else {
   $23 = ((($this)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $27 = $24;
  }
  $26 = (($27) + ($16)|0);
  _memset(($26|0),($__c|0),($__n|0))|0;
  $28 = (($16) + ($__n))|0;
  $29 = HEAP8[$this>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $33 = $28 << 1;
   $34 = $33&255;
   HEAP8[$this>>0] = $34;
  } else {
   $32 = ((($this)) + 4|0);
   HEAP32[$32>>2] = $28;
  }
  $35 = (($27) + ($28)|0);
  HEAP8[$35>>0] = 0;
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $20 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(10);
   do {
    if ($23) {
     $24 = ((($this)) + 1|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = (($20) + 1)|0;
     if ($27) {
      $29 = (__Znwj($28)|0);
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (invoke_ii(437,($28|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       (___cxa_begin_catch(($33|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $39 = ((($this)) + 1|0);
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
      break;
     } else {
      $37 = ((($this)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $40 = $8 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $44 = $8&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = ((($this)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $47 = $43;
   }
   $46 = (($47) + 1)|0;
   _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $48 = (($20) + 1)|0;
    $49 = $48 | 1;
    HEAP32[$this>>2] = $49;
    $50 = ((($this)) + 4|0);
    HEAP32[$50>>2] = $14;
    $51 = ((($this)) + 8|0);
    HEAP32[$51>>2] = $__new_data$1;
    break;
   } else {
    $52 = $14 << 1;
    $53 = $52&255;
    HEAP8[$this>>0] = $53;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $$pre;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0)|0);
 HEAP8[$__p$0>>0] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
 HEAP8[$22>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($15)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($15) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1)|0);
  _memcpy(($26|0),($27|0),($25|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = ((($this)) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = ((($this)) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31)|0);
 HEAP8[$33>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1)|0);
  _memcpy(($24|0),($25|0),($23|0))|0;
 }
 $26 = ($__old_cap|0)==(10);
 if (!($26)) {
  __ZdlPv($20);
 }
 $27 = ((($this)) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj($this,$__s,$__sz,$__reserve) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 $__reserve = $__reserve|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__reserve>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__reserve>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__reserve) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 4|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   (_wmemmove($14,$__s,$__n)|0);
   $15 = (($14) + ($__n<<2)|0);
   HEAP32[$15>>2] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 var $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $20 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(1);
   do {
    if ($23) {
     $24 = ((($this)) + 4|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = $20 << 2;
     $29 = (($28) + 4)|0;
     if ($27) {
      $30 = (__Znwj($29)|0);
      $$sink = $30;
     } else {
      __THREW__ = 0;
      $31 = (invoke_ii(437,($29|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $34 = ___cxa_find_matching_catch(0|0)|0;
       $35 = tempRet0;
       (___cxa_begin_catch(($34|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $$sink = $31;
      }
     }
     $36 = $8 & 1;
     $37 = ($36<<24>>24)==(0);
     if ($37) {
      $40 = ((($this)) + 4|0);
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
      break;
     } else {
      $38 = ((($this)) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $41 = $8 & 1;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $45 = $8&255;
    $46 = $45 >>> 1;
    $48 = $46;
   } else {
    $43 = ((($this)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $48 = $44;
   }
   $47 = (($48) + 1)|0;
   (_wmemcpy($__new_data$1,$__p$0,$47)|0);
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $49 = (($20) + 1)|0;
    $50 = $49 | 1;
    HEAP32[$this>>2] = $50;
    $51 = ((($this)) + 4|0);
    HEAP32[$51>>2] = $14;
    $52 = ((($this)) + 8|0);
    HEAP32[$52>>2] = $__new_data$1;
    break;
   } else {
    $53 = $14 << 1;
    $54 = $53&255;
    HEAP8[$this>>0] = $54;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $$pre;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0<<2)|0);
 HEAP32[$__p$0>>2] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
 HEAP32[$22>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = ($__n_add|0)==(0);
 if (!($22)) {
  $23 = (($19) + ($__n_copy<<2)|0);
  (_wmemcpy($23,$__p_new_stuff,$__n_add)|0);
 }
 $24 = (($__old_sz) - ($__n_del))|0;
 $25 = ($24|0)==($__n_copy|0);
 if (!($25)) {
  $26 = (($24) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $27 = (($19) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $28 = (($21) + ($$sum1<<2)|0);
  (_wmemcpy($27,$28,$26)|0);
 }
 $29 = ($__old_cap|0)==(1);
 if (!($29)) {
  __ZdlPv($21);
 }
 $30 = ((($this)) + 8|0);
 HEAP32[$30>>2] = $19;
 $31 = $18 | 1;
 HEAP32[$this>>2] = $31;
 $32 = (($24) + ($__n_add))|0;
 $33 = ((($this)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = (($19) + ($32<<2)|0);
 HEAP32[$34>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($19) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($21) + ($$sum1<<2)|0);
  (_wmemcpy($25,$26,$24)|0);
 }
 $27 = ($__old_cap|0)==(1);
 if (!($27)) {
  __ZdlPv($21);
 }
 $28 = ((($this)) + 8|0);
 HEAP32[$28>>2] = $19;
 $29 = $18 | 1;
 HEAP32[$this>>2] = $29;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p$0$ph = 0, $__p$03 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = ((($this)) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = ((($this)) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = ((($this)) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = $__last;
 $15 = (($14) - ($0))|0;
 $16 = ($__first|0)==($__last|0);
 if (!($16)) {
  $$04 = $__first;$__p$03 = $__p$0$ph;
  while(1) {
   $17 = HEAP8[$$04>>0]|0;
   HEAP8[$__p$03>>0] = $17;
   $18 = ((($$04)) + 1|0);
   $19 = ((($__p$03)) + 1|0);
   $20 = ($18|0)==($__last|0);
   if ($20) {
    break;
   } else {
    $$04 = $18;$__p$03 = $19;
   }
  }
 }
 $scevgep2 = (($__p$0$ph) + ($15)|0);
 HEAP8[$scevgep2>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$ph = 0, $__p$03 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = ((($this)) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = ((($this)) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = ((($this)) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = $__last;
 $17 = (($16) - ($0))|0;
 $18 = $17 >>> 2;
 $19 = ($__first|0)==($__last|0);
 if (!($19)) {
  $$04 = $__first;$__p$03 = $__p$0$ph;
  while(1) {
   $20 = HEAP32[$$04>>2]|0;
   HEAP32[$__p$03>>2] = $20;
   $21 = ((($$04)) + 4|0);
   $22 = ((($__p$03)) + 4|0);
   $23 = ($21|0)==($__last|0);
   if ($23) {
    break;
   } else {
    $$04 = $21;$__p$03 = $22;
   }
  }
 }
 $scevgep = (($__p$0$ph) + ($18<<2)|0);
 HEAP32[$scevgep>>2] = 0;
 return;
}
function __ZNSt3__16chrono12steady_clock3nowEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $tp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tp = sp;
 __THREW__ = 0;
 $0 = (invoke_iii(645,1,($tp|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if (!($2)) {
   $3 = ($0|0)==(0);
   if (!($3)) {
    $4 = (___errno_location()|0);
    $5 = HEAP32[$4>>2]|0;
    __THREW__ = 0;
    invoke_vii(639,($5|0),(27943|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     break;
    }
   }
   $8 = HEAP32[$tp>>2]|0;
   $9 = ($8|0)<(0);
   $10 = $9 << 31 >> 31;
   $11 = ((($tp)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)<(0);
   $14 = $13 << 31 >> 31;
   $15 = (___muldi3(($8|0),($10|0),1000000000,0)|0);
   $16 = tempRet0;
   $17 = (_i64Add(($15|0),($16|0),($12|0),($14|0))|0);
   $18 = tempRet0;
   tempRet0 = ($18);
   STACKTOP = sp;return ($17|0);
  }
 } while(0);
 $19 = ___cxa_find_matching_catch(0|0)|0;
 $20 = tempRet0;
 ___clang_call_terminate($19);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $$state = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = $3&1;
 $$state = $4 | $state;
 $5 = ((($this)) + 16|0);
 HEAP32[$5>>2] = $$state;
 $6 = $3&1;
 $7 = $6 | $state;
 $8 = ((($this)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $7 & $9;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__117iostream_categoryEv()|0);
 HEAP32[$0>>2] = 1;
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = (10756);
 __THREW__ = 0;
 invoke_viii(646,($12|0),(28288|0),($0|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  ___cxa_free_exception(($12|0));
  ___resumeException($16|0);
  // unreachable;
 } else {
  ___cxa_throw(($12|0),(664|0),(132|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10712);
 __THREW__ = 0;
 invoke_vii(647,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  $2 = ((($this)) + 28|0);
  __ZNSt3__16localeD2Ev($2);
  $3 = ((($this)) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = ((($this)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = ((($this)) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = ((($this)) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  return;
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 32|0);
 $3 = ((($this)) + 36|0);
 $4 = ($1|0)==(0);
 if (!($4)) {
  $i$01 = $1;
  while(1) {
   $5 = (($i$01) + -1)|0;
   $6 = HEAP32[$2>>2]|0;
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$3>>2]|0;
   $10 = (($9) + ($5<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_viii[$8 & 1023]($ev,$this,$11);
   $12 = ($5|0)==(0);
   if ($12) {
    break;
   } else {
    $i$01 = $5;
   }
  }
 }
 return;
}
function __ZNKSt3__18ios_base6getlocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 28|0);
 __ZNSt3__16localeC2ERKS0_($0,$1);
 $2 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = ((($this)) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($this)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = ((($this)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = ((($this)) + 32|0);
 $8 = ((($this)) + 28|0);
 dest=$7; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10628);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10628);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10628);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = ((($this)) + 8|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($agg$result)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($agg$result)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = ((($this)) + 16|0);
 $2 = ($__n|0)>(0);
 L1: do {
  if ($2) {
   $$01 = $__s;$__i$02 = 0;
   while(1) {
    $3 = HEAP32[$0>>2]|0;
    $4 = HEAP32[$1>>2]|0;
    $5 = ($3>>>0)<($4>>>0);
    if ($5) {
     $6 = ((($3)) + 1|0);
     HEAP32[$0>>2] = $6;
     $7 = HEAP8[$3>>0]|0;
     $storemerge = $7;
    } else {
     $8 = HEAP32[$this>>2]|0;
     $9 = ((($8)) + 40|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      $__i$0$lcssa = $__i$02;
      break L1;
     }
     $13 = $11&255;
     $storemerge = $13;
    }
    HEAP8[$$01>>0] = $storemerge;
    $14 = (($__i$02) + 1)|0;
    $15 = ((($$01)) + 1|0);
    $16 = ($14|0)<($__n|0);
    if ($16) {
     $$01 = $15;$__i$02 = $14;
    } else {
     $__i$0$lcssa = $14;
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0;
  }
 } while(0);
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = ((($this)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8&255;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = ((($this)) + 28|0);
 $2 = ($__n|0)>(0);
 L1: do {
  if ($2) {
   $$02 = $__s;$__i$01 = 0;
   while(1) {
    $3 = HEAP32[$0>>2]|0;
    $4 = HEAP32[$1>>2]|0;
    $5 = ($3>>>0)<($4>>>0);
    if ($5) {
     $6 = HEAP8[$$02>>0]|0;
     $7 = ((($3)) + 1|0);
     HEAP32[$0>>2] = $7;
     HEAP8[$3>>0] = $6;
    } else {
     $8 = HEAP32[$this>>2]|0;
     $9 = ((($8)) + 52|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = HEAP8[$$02>>0]|0;
     $12 = $11&255;
     $13 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$12)|0);
     $14 = ($13|0)==(-1);
     if ($14) {
      $__i$0$lcssa = $__i$01;
      break L1;
     }
    }
    $15 = ((($$02)) + 1|0);
    $16 = (($__i$01) + 1)|0;
    $17 = ($16|0)<($__n|0);
    if ($17) {
     $$02 = $15;$__i$01 = $16;
    } else {
     $__i$0$lcssa = $16;
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0;
  }
 } while(0);
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 L1: do {
  if (!($5)) {
   __THREW__ = 0;
   invoke_vii(557,($__s|0),($this|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     $31 = ___cxa_find_matching_catch(0|0)|0;
     $32 = tempRet0;
     $$0 = $31;
    } else {
     $8 = HEAP8[$__s>>0]|0;
     $9 = ($8<<24>>24)==(0);
     do {
      if (!($9)) {
       $10 = HEAP32[$this>>2]|0;
       $11 = ((($10)) + -12|0);
       $12 = HEAP32[$11>>2]|0;
       $$sum1 = (($12) + 24)|0;
       $13 = (($this) + ($$sum1)|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = HEAP32[$14>>2]|0;
       $16 = ((($15)) + 24|0);
       $17 = HEAP32[$16>>2]|0;
       __THREW__ = 0;
       $18 = (invoke_ii($17|0,($14|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        $21 = ($18|0)==(-1);
        if (!($21)) {
         break;
        }
        $22 = HEAP32[$this>>2]|0;
        $23 = ((($22)) + -12|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($this) + ($24)|0);
        $$sum2 = (($24) + 16)|0;
        $26 = (($this) + ($$sum2)|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = $27 | 1;
        __THREW__ = 0;
        invoke_vii(561,($25|0),($28|0));
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if (!($30)) {
         break;
        }
       }
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
       $$0 = $33;
       break L3;
      }
     } while(0);
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $35 = HEAP32[$this>>2]|0;
   $36 = ((($35)) + -12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($this) + ($37)|0);
   __THREW__ = 0;
   invoke_vi(562,($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if (!($40)) {
    ___cxa_end_catch();
    break;
   }
   $41 = ___cxa_find_matching_catch()|0;
   $42 = tempRet0;
   __THREW__ = 0;
   invoke_v(440);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $45 = ___cxa_find_matching_catch(0|0)|0;
    $46 = tempRet0;
    ___clang_call_terminate($45);
    // unreachable;
   } else {
    ___resumeException($41|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = ((($this)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$sum1 = (($3) + 72)|0;
  $7 = (($__os) + ($$sum1)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if (!($7)) {
   $$sum1 = (($4) + 16)|0;
   $8 = (($1) + ($$sum1)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $$sum2 = (($4) + 4)|0;
    $11 = (($1) + ($$sum2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $12 & 8192;
    $14 = ($13|0)==(0);
    if (!($14)) {
     $15 = (__ZSt18uncaught_exceptionv()|0);
     if (!($15)) {
      $16 = HEAP32[$0>>2]|0;
      $17 = HEAP32[$16>>2]|0;
      $18 = ((($17)) + -12|0);
      $19 = HEAP32[$18>>2]|0;
      $$sum3 = (($19) + 24)|0;
      $20 = (($16) + ($$sum3)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = HEAP32[$21>>2]|0;
      $23 = ((($22)) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($21|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = ($25|0)==(-1);
       if (!($28)) {
        break;
       }
       $29 = HEAP32[$0>>2]|0;
       $30 = HEAP32[$29>>2]|0;
       $31 = ((($30)) + -12|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($29) + ($32)|0);
       $$sum4 = (($32) + 16)|0;
       $34 = (($29) + ($$sum4)|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = $35 | 1;
       __THREW__ = 0;
       invoke_vii(561,($33|0),($36|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if (!($38)) {
        break;
       }
      }
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      (___cxa_begin_catch(($39|0))|0);
      __THREW__ = 0;
      invoke_v(440);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       $43 = ___cxa_find_matching_catch(0|0)|0;
       $44 = tempRet0;
       ___clang_call_terminate($43);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -8|0);
 $1 = ((($0)) + 12|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 12)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -8|0);
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($0);
 return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (28304|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)!=(1);
 $1 = ($ev|0)<(257);
 $or$cond = $0 & $1;
 if ($or$cond) {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,28313,35);
 }
 return;
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[808>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((808|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[10756>>2] = (10728);
   ___cxa_guard_release((808|0));
  }
 }
 return (10756|0);
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpcast$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = (10692);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__17collateIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$018 = 0, $$02$lcssa = 0, $$027 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$018 = $__lo2;$$027 = $__lo1;
   while(1) {
    $1 = ($$027|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$027>>0]|0;
    $3 = HEAP8[$$018>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = ((($$027)) + 1|0);
    $7 = ((($$018)) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$018 = $7;$$027 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
  while(1) {
   $1 = $__h$02 << 4;
   $2 = HEAP8[$__p$01>>0]|0;
   $3 = $2 << 24 >> 24;
   $4 = (($3) + ($1))|0;
   $5 = $4 & -268435456;
   $6 = $5 >>> 24;
   $7 = $6 | $5;
   $8 = $7 ^ $4;
   $9 = ((($__p$01)) + 1|0);
   $10 = ($9|0)==($__hi|0);
   if ($10) {
    $__h$0$lcssa = $8;
    break;
   } else {
    $__h$02 = $8;$__p$01 = $9;
   }
  }
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$018 = 0, $$02$lcssa = 0, $$027 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$018 = $__lo2;$$027 = $__lo1;
   while(1) {
    $1 = ($$027|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$027>>2]|0;
    $3 = HEAP32[$$018>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = ((($$027)) + 4|0);
    $7 = ((($$018)) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$018 = $7;$$027 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
  while(1) {
   $1 = $__h$02 << 4;
   $2 = HEAP32[$__p$01>>2]|0;
   $3 = (($2) + ($1))|0;
   $4 = $3 & -268435456;
   $5 = $4 >>> 24;
   $6 = $5 | $4;
   $7 = $6 ^ $3;
   $8 = ((($__p$01)) + 4|0);
   $9 = ($8|0)==($__hi|0);
   if ($9) {
    $__h$0$lcssa = $7;
    break;
   } else {
    $__h$02 = $7;$__p$01 = $8;
   }
  }
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $__names = sp + 8|0;
 $4 = sp;
 $5 = ((($__iob)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   HEAP32[$__lv>>2] = -1;
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$0>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $13;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
   $14 = (FUNCTION_TABLE_iiiiiii[$11 & 1023]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $14;
   $15 = HEAP32[$__lv>>2]|0;
   switch ($15|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    $$sroa$01$0 = $14;
    break L1;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    $$sroa$01$0 = $14;
    break L1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
    $$sroa$01$0 = $14;
    break L1;
   }
   }
  } else {
   $16 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$2>>2] = $16;
   __THREW__ = 0;
   $17 = (invoke_iii(559,($2|0),(11864|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $44 = ___cxa_find_matching_catch()|0;
     $45 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $$0 = $44;$$03 = $45;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $20 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
     HEAP32[$3>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(559,($3|0),(12004|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $46 = ___cxa_find_matching_catch()|0;
      $47 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
      $$0 = $46;$$03 = $47;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     invoke_vii($26|0,($__names|0),($21|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$02 = $__names;
     } else {
      $29 = ((($__names)) + 12|0);
      $30 = HEAP32[$21>>2]|0;
      $31 = ((($30)) + 28|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($29|0),($21|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $$02 = $29;
      } else {
       $35 = HEAP32[$__e>>2]|0;
       HEAP32[$4>>2] = $35;
       $36 = ((($__names)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
       $37 = (invoke_iiiiiiii(648,($__b|0),($$byval_copy2|0),($__names|0),($36|0),($17|0),($__err|0),1)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $54 = ___cxa_find_matching_catch()|0;
        $55 = tempRet0;
        $56 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($56);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
        $$0 = $54;$$03 = $55;
        break;
       } else {
        $40 = ($37|0)==($__names|0);
        $41 = $40&1;
        HEAP8[$__v>>0] = $41;
        $42 = HEAP32[$__b>>2]|0;
        $43 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($43);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = ___cxa_find_matching_catch()|0;
     $49 = tempRet0;
     $50 = ($__names|0)==($$02|0);
     if ($50) {
      $$0 = $48;$$03 = $49;
     } else {
      $52 = $$02;
      while(1) {
       $51 = ((($52)) + -12|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($51);
       $53 = ($51|0)==($__names|0);
       if ($53) {
        $$0 = $48;$$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$01$0|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i10 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0;
 var $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 HEAP32[$__grouping>>2] = 0;
 $1 = ((($__grouping)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__grouping)) + 8|0);
 HEAP32[$2>>2] = 0;
 __THREW__ = 0;
 $3 = (invoke_ii(558,($__iob|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $87 = ___cxa_find_matching_catch()|0;
   $88 = tempRet0;
   $$0 = $87;$$01 = $88;
  } else {
   HEAP32[$0>>2] = $3;
   __THREW__ = 0;
   $6 = (invoke_iii(559,($0|0),(11864|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$6>>2]|0;
    $10 = ((($9)) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($11|0,($6|0),(28349|0),((28375)|0),($__atoms|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
     HEAP32[$__buf>>2] = 0;
     $14 = ((($__buf)) + 4|0);
     HEAP32[$14>>2] = 0;
     $15 = ((($__buf)) + 8|0);
     HEAP32[$15>>2] = 0;
     $16 = HEAP8[$__buf>>0]|0;
     $17 = $16 & 1;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf>>2]|0;
      $20 = $19 & -2;
      $phitmp$i = (($20) + -1)|0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($21|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     L10: do {
      if ($23) {
       label = 30;
      } else {
       $24 = HEAP8[$__buf>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       $27 = ((($__buf)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($__buf)) + 1|0);
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end>>2] = $30;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $31 = ((($__buf)) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i10 = $$pre;$__a$0 = $30;
       L12: while(1) {
        $32 = ($$pre$i$i$i10|0)==(0|0);
        if ($32) {
         $$pre$i$i$i = 0;
        } else {
         $33 = ((($$pre$i$i$i10)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($$pre$i$i$i10)) + 16|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i10>>2]|0;
          $39 = ((($38)) + 36|0);
          $40 = HEAP32[$39>>2]|0;
          __THREW__ = 0;
          $41 = (invoke_ii($40|0,($$pre$i$i$i10|0))|0);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           label = 29;
           break;
          }
          $44 = ($41|0)==(-1);
          if ($44) {
           HEAP32[$__b>>2] = 0;
           $$pre$i$i$i = 0;
          } else {
           $$pre$i$i$i = $$pre$i$i$i10;
          }
         } else {
          $$pre$i$i$i = $$pre$i$i$i10;
         }
        }
        $45 = ($$pre$i$i$i|0)==(0|0);
        $46 = HEAP32[$__e>>2]|0;
        $47 = ($46|0)==(0|0);
        do {
         if ($47) {
          label = 19;
         } else {
          $48 = ((($46)) + 12|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ((($46)) + 16|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = ($49|0)==($51|0);
          if (!($52)) {
           if ($45) {
            $169 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $46;$__a$2 = $__a$0;
            break L12;
           }
          }
          $53 = HEAP32[$46>>2]|0;
          $54 = ((($53)) + 36|0);
          $55 = HEAP32[$54>>2]|0;
          __THREW__ = 0;
          $56 = (invoke_ii($55|0,($46|0))|0);
          $57 = __THREW__; __THREW__ = 0;
          $58 = $57&1;
          if ($58) {
           label = 29;
           break L12;
          }
          $59 = ($56|0)==(-1);
          if ($59) {
           HEAP32[$__e>>2] = 0;
           label = 19;
           break;
          } else {
           if ($45) {
            $169 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $46;$__a$2 = $__a$0;
            break L12;
           }
          }
         }
        } while(0);
        if ((label|0) == 19) {
         label = 0;
         if ($45) {
          $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $169 = 0;
         }
        }
        $60 = HEAP32[$__a_end>>2]|0;
        $61 = HEAP8[$__buf>>0]|0;
        $62 = $61 & 1;
        $63 = ($62<<24>>24)==(0);
        $64 = HEAP32[$31>>2]|0;
        $65 = $61&255;
        $66 = $65 >>> 1;
        $67 = $63 ? $66 : $64;
        $68 = (($__a$0) + ($67)|0);
        $69 = ($60|0)==($68|0);
        if ($69) {
         $70 = $67 << 1;
         __THREW__ = 0;
         invoke_viii(556,($__buf|0),($70|0),0);
         $71 = __THREW__; __THREW__ = 0;
         $72 = $71&1;
         if ($72) {
          label = 29;
          break;
         }
         $73 = HEAP8[$__buf>>0]|0;
         $74 = $73 & 1;
         $75 = ($74<<24>>24)==(0);
         if ($75) {
          $78 = 10;
         } else {
          $76 = HEAP32[$__buf>>2]|0;
          $77 = $76 & -2;
          $phitmp$i26 = (($77) + -1)|0;
          $78 = $phitmp$i26;
         }
         __THREW__ = 0;
         invoke_viii(556,($__buf|0),($78|0),0);
         $79 = __THREW__; __THREW__ = 0;
         $80 = $79&1;
         if ($80) {
          label = 29;
          break;
         }
         $81 = HEAP8[$__buf>>0]|0;
         $82 = $81 & 1;
         $83 = ($82<<24>>24)==(0);
         $84 = HEAP32[$27>>2]|0;
         $85 = $83 ? $29 : $84;
         $86 = (($85) + ($67)|0);
         HEAP32[$__a_end>>2] = $86;
         $__a$1 = $85;
        } else {
         $__a$1 = $__a$0;
        }
        $95 = ((($$pre$i$i$i)) + 12|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ((($$pre$i$i$i)) + 16|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($96|0)==($98|0);
        if ($99) {
         $100 = HEAP32[$$pre$i$i$i>>2]|0;
         $101 = ((($100)) + 36|0);
         $102 = HEAP32[$101>>2]|0;
         __THREW__ = 0;
         $103 = (invoke_ii($102|0,($$pre$i$i$i|0))|0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 29;
          break;
         } else {
          $$0$i$i = $103;
         }
        } else {
         $106 = HEAP8[$96>>0]|0;
         $107 = $106&255;
         $$0$i$i = $107;
        }
        $108 = $$0$i$i&255;
        $109 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $110 = ($109|0)==(0);
        if (!($110)) {
         $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $169;$__a$2 = $__a$1;
         break;
        }
        $111 = HEAP32[$95>>2]|0;
        $112 = HEAP32[$97>>2]|0;
        $113 = ($111|0)==($112|0);
        if ($113) {
         $114 = HEAP32[$$pre$i$i$i>>2]|0;
         $115 = ((($114)) + 40|0);
         $116 = HEAP32[$115>>2]|0;
         __THREW__ = 0;
         (invoke_ii($116|0,($$pre$i$i$i|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 29;
          break;
         } else {
          $$pre$i$i$i10 = $$pre$i$i$i;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $119 = ((($111)) + 1|0);
         HEAP32[$95>>2] = $119;
         $$pre$i$i$i10 = $$pre$i$i$i;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 29) {
        $91 = ___cxa_find_matching_catch()|0;
        $92 = tempRet0;
        $lpad$phi$index = $91;$lpad$phi$index2 = $92;
        break;
       }
       $120 = HEAP32[$__a_end>>2]|0;
       $121 = $120;
       $122 = $__a$2;
       $123 = (($121) - ($122))|0;
       __THREW__ = 0;
       invoke_viii(556,($__buf|0),($123|0),0);
       $124 = __THREW__; __THREW__ = 0;
       $125 = $124&1;
       if ($125) {
        label = 30;
       } else {
        $126 = HEAP8[$__buf>>0]|0;
        $127 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        $128 = (invoke_i(649)|0);
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         label = 30;
        } else {
         $131 = $126 & 1;
         $132 = ($131<<24>>24)==(0);
         $133 = $132 ? $29 : $127;
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $134 = (invoke_iiiii(650,($133|0),($128|0),(29733|0),($vararg_buffer|0))|0);
         $135 = __THREW__; __THREW__ = 0;
         $136 = $135&1;
         if ($136) {
          label = 30;
         } else {
          $137 = ($134|0)==(1);
          if (!($137)) {
           HEAP32[$__err>>2] = 4;
          }
          $138 = ($$pre$i$i$i$lcssa|0)==(0|0);
          if ($138) {
           $151 = 0;
          } else {
           $139 = ((($$pre$i$i$i$lcssa)) + 12|0);
           $140 = HEAP32[$139>>2]|0;
           $141 = ((($$pre$i$i$i$lcssa)) + 16|0);
           $142 = HEAP32[$141>>2]|0;
           $143 = ($140|0)==($142|0);
           if ($143) {
            $144 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
            $145 = ((($144)) + 36|0);
            $146 = HEAP32[$145>>2]|0;
            __THREW__ = 0;
            $147 = (invoke_ii($146|0,($$pre$i$i$i$lcssa|0))|0);
            $148 = __THREW__; __THREW__ = 0;
            $149 = $148&1;
            if ($149) {
             label = 30;
             break;
            }
            $150 = ($147|0)==(-1);
            if ($150) {
             HEAP32[$__b>>2] = 0;
             $151 = 0;
            } else {
             $151 = $$pre$i$i$i$lcssa;
            }
           } else {
            $151 = $$pre$i$i$i$lcssa;
           }
          }
          $152 = ($151|0)==(0|0);
          $153 = ($$pre$i2$i$i|0)==(0|0);
          do {
           if ($153) {
            label = 55;
           } else {
            $154 = ((($$pre$i2$i$i)) + 12|0);
            $155 = HEAP32[$154>>2]|0;
            $156 = ((($$pre$i2$i$i)) + 16|0);
            $157 = HEAP32[$156>>2]|0;
            $158 = ($155|0)==($157|0);
            if ($158) {
             $159 = HEAP32[$$pre$i2$i$i>>2]|0;
             $160 = ((($159)) + 36|0);
             $161 = HEAP32[$160>>2]|0;
             __THREW__ = 0;
             $162 = (invoke_ii($161|0,($$pre$i2$i$i|0))|0);
             $163 = __THREW__; __THREW__ = 0;
             $164 = $163&1;
             if ($164) {
              label = 30;
              break L10;
             }
             $165 = ($162|0)==(-1);
             if ($165) {
              HEAP32[$__e>>2] = 0;
              label = 55;
              break;
             }
            }
            if (!($152)) {
             label = 56;
            }
           }
          } while(0);
          if ((label|0) == 55) {
           if ($152) {
            label = 56;
           }
          }
          if ((label|0) == 56) {
           $166 = HEAP32[$__err>>2]|0;
           $167 = $166 | 2;
           HEAP32[$__err>>2] = $167;
          }
          $168 = HEAP32[$__b>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
          STACKTOP = sp;return ($168|0);
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 30) {
      $93 = ___cxa_find_matching_catch()|0;
      $94 = tempRet0;
      $lpad$phi$index = $93;$lpad$phi$index2 = $94;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $89 = ___cxa_find_matching_catch()|0;
   $90 = tempRet0;
   (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
   $$0 = $89;$$01 = $90;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i2 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = ((($__atoms)) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = ((($__atoms)) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__grouping)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $10&255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17|0)!=(0);
   $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = ((($20)) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$0 = 0;
    break;
   }
   $27 = ((($__atoms)) + 26|0);
   $$0$i2 = $__atoms;
   while(1) {
    $28 = HEAP8[$$0$i2>>0]|0;
    $29 = ($28<<24>>24)==($__ct<<24>>24);
    if ($29) {
     $$0$lcssa$i = $$0$i2;
     break;
    }
    $30 = ((($$0$i2)) + 1|0);
    $31 = ($30|0)==($27|0);
    if ($31) {
     $$0$lcssa$i = $27;
     break;
    } else {
     $$0$i2 = $30;
    }
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = ($34|0)>(23);
   if ($35) {
    $$0 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $36 = ($34|0)<($__base|0);
     if (!($36)) {
      $$0 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $37 = ($34|0)<(22);
     if (!($37)) {
      if ($1) {
       $$0 = -1;
       break L6;
      }
      $38 = $0;
      $39 = $__a;
      $40 = (($38) - ($39))|0;
      $41 = ($40|0)<(3);
      if (!($41)) {
       $$0 = -1;
       break L6;
      }
      $42 = ((($0)) + -1|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($43<<24>>24)==(48);
      if (!($44)) {
       $$0 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $45 = (28349 + ($34)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $47;
      HEAP8[$0>>0] = $46;
      $$0 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $48 = (28349 + ($34)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $50;
    HEAP8[$0>>0] = $49;
    $51 = HEAP32[$__dc>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[$__dc>>2] = $52;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1728>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((1728|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(651,2147483647,(29736|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((1728|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[12428>>2] = $4;
     ___cxa_guard_release((1728|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[12428>>2]|0;
 return ($7|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $__names = sp + 8|0;
 $4 = sp;
 $5 = ((($__iob)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   HEAP32[$__lv>>2] = -1;
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$0>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $13;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
   $14 = (FUNCTION_TABLE_iiiiiii[$11 & 1023]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $14;
   $15 = HEAP32[$__lv>>2]|0;
   switch ($15|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    $$sroa$01$0 = $14;
    break L1;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    $$sroa$01$0 = $14;
    break L1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
    $$sroa$01$0 = $14;
    break L1;
   }
   }
  } else {
   $16 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$2>>2] = $16;
   __THREW__ = 0;
   $17 = (invoke_iii(559,($2|0),(11856|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $44 = ___cxa_find_matching_catch()|0;
     $45 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $$0 = $44;$$03 = $45;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $20 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
     HEAP32[$3>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(559,($3|0),(12012|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $46 = ___cxa_find_matching_catch()|0;
      $47 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
      $$0 = $46;$$03 = $47;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     invoke_vii($26|0,($__names|0),($21|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$02 = $__names;
     } else {
      $29 = ((($__names)) + 12|0);
      $30 = HEAP32[$21>>2]|0;
      $31 = ((($30)) + 28|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($29|0),($21|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $$02 = $29;
      } else {
       $35 = HEAP32[$__e>>2]|0;
       HEAP32[$4>>2] = $35;
       $36 = ((($__names)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
       $37 = (invoke_iiiiiiii(652,($__b|0),($$byval_copy2|0),($__names|0),($36|0),($17|0),($__err|0),1)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $54 = ___cxa_find_matching_catch()|0;
        $55 = tempRet0;
        $56 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($56);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
        $$0 = $54;$$03 = $55;
        break;
       } else {
        $40 = ($37|0)==($__names|0);
        $41 = $40&1;
        HEAP8[$__v>>0] = $41;
        $42 = HEAP32[$__b>>2]|0;
        $43 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($43);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = ___cxa_find_matching_catch()|0;
     $49 = tempRet0;
     $50 = ($__names|0)==($$02|0);
     if ($50) {
      $$0 = $48;$$03 = $49;
     } else {
      $52 = $$02;
      while(1) {
       $51 = ((($52)) + -12|0);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($51);
       $53 = ($51|0)==($__names|0);
       if ($53) {
        $$0 = $48;$$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$01$0|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i9 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i15 = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i11 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i30 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 HEAP32[$__grouping>>2] = 0;
 $1 = ((($__grouping)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__grouping)) + 8|0);
 HEAP32[$2>>2] = 0;
 __THREW__ = 0;
 $3 = (invoke_ii(558,($__iob|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $88 = ___cxa_find_matching_catch()|0;
   $89 = tempRet0;
   $$0 = $88;$$01 = $89;
  } else {
   HEAP32[$0>>2] = $3;
   __THREW__ = 0;
   $6 = (invoke_iii(559,($0|0),(11856|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$6>>2]|0;
    $10 = ((($9)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($11|0,($6|0),(28349|0),((28375)|0),($__atoms|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
     HEAP32[$__buf>>2] = 0;
     $14 = ((($__buf)) + 4|0);
     HEAP32[$14>>2] = 0;
     $15 = ((($__buf)) + 8|0);
     HEAP32[$15>>2] = 0;
     $16 = HEAP8[$__buf>>0]|0;
     $17 = $16 & 1;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf>>2]|0;
      $20 = $19 & -2;
      $phitmp$i = (($20) + -1)|0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($21|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     L10: do {
      if ($23) {
       label = 31;
      } else {
       $24 = HEAP8[$__buf>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       $27 = ((($__buf)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($__buf)) + 1|0);
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end>>2] = $30;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $31 = ((($__buf)) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i11 = $$pre;$__a$0 = $30;
       L12: while(1) {
        $32 = ($$pre$i$i$i11|0)==(0|0);
        if ($32) {
         $$pre$i$i$i = 0;$168 = 1;
        } else {
         $33 = ((($$pre$i$i$i11)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($$pre$i$i$i11)) + 16|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i11>>2]|0;
          $39 = ((($38)) + 36|0);
          $40 = HEAP32[$39>>2]|0;
          __THREW__ = 0;
          $41 = (invoke_ii($40|0,($$pre$i$i$i11|0))|0);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           label = 30;
           break;
          } else {
           $$0$i$i$i$i9 = $41;
          }
         } else {
          $44 = HEAP32[$34>>2]|0;
          $$0$i$i$i$i9 = $44;
         }
         $45 = ($$0$i$i$i$i9|0)==(-1);
         if ($45) {
          HEAP32[$__b>>2] = 0;
          $$pre$i$i$i = 0;$168 = 1;
         } else {
          $$pre$i$i$i = $$pre$i$i$i11;$168 = 0;
         }
        }
        $46 = HEAP32[$__e>>2]|0;
        $47 = ($46|0)==(0|0);
        do {
         if ($47) {
          label = 20;
         } else {
          $48 = ((($46)) + 12|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ((($46)) + 16|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = ($49|0)==($51|0);
          if ($52) {
           $53 = HEAP32[$46>>2]|0;
           $54 = ((($53)) + 36|0);
           $55 = HEAP32[$54>>2]|0;
           __THREW__ = 0;
           $56 = (invoke_ii($55|0,($46|0))|0);
           $57 = __THREW__; __THREW__ = 0;
           $58 = $57&1;
           if ($58) {
            label = 30;
            break L12;
           } else {
            $$0$i$i1$i$i15 = $56;
           }
          } else {
           $59 = HEAP32[$49>>2]|0;
           $$0$i$i1$i$i15 = $59;
          }
          $60 = ($$0$i$i1$i$i15|0)==(-1);
          if ($60) {
           HEAP32[$__e>>2] = 0;
           label = 20;
           break;
          } else {
           if ($168) {
            $169 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $46;$__a$2 = $__a$0;
            break L12;
           }
          }
         }
        } while(0);
        if ((label|0) == 20) {
         label = 0;
         if ($168) {
          $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $169 = 0;
         }
        }
        $61 = HEAP32[$__a_end>>2]|0;
        $62 = HEAP8[$__buf>>0]|0;
        $63 = $62 & 1;
        $64 = ($63<<24>>24)==(0);
        $65 = HEAP32[$31>>2]|0;
        $66 = $62&255;
        $67 = $66 >>> 1;
        $68 = $64 ? $67 : $65;
        $69 = (($__a$0) + ($68)|0);
        $70 = ($61|0)==($69|0);
        if ($70) {
         $71 = $68 << 1;
         __THREW__ = 0;
         invoke_viii(556,($__buf|0),($71|0),0);
         $72 = __THREW__; __THREW__ = 0;
         $73 = $72&1;
         if ($73) {
          label = 30;
          break;
         }
         $74 = HEAP8[$__buf>>0]|0;
         $75 = $74 & 1;
         $76 = ($75<<24>>24)==(0);
         if ($76) {
          $79 = 10;
         } else {
          $77 = HEAP32[$__buf>>2]|0;
          $78 = $77 & -2;
          $phitmp$i30 = (($78) + -1)|0;
          $79 = $phitmp$i30;
         }
         __THREW__ = 0;
         invoke_viii(556,($__buf|0),($79|0),0);
         $80 = __THREW__; __THREW__ = 0;
         $81 = $80&1;
         if ($81) {
          label = 30;
          break;
         }
         $82 = HEAP8[$__buf>>0]|0;
         $83 = $82 & 1;
         $84 = ($83<<24>>24)==(0);
         $85 = HEAP32[$27>>2]|0;
         $86 = $84 ? $29 : $85;
         $87 = (($86) + ($68)|0);
         HEAP32[$__a_end>>2] = $87;
         $__a$1 = $86;
        } else {
         $__a$1 = $__a$0;
        }
        $96 = ((($$pre$i$i$i)) + 12|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ((($$pre$i$i$i)) + 16|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = ($97|0)==($99|0);
        if ($100) {
         $101 = HEAP32[$$pre$i$i$i>>2]|0;
         $102 = ((($101)) + 36|0);
         $103 = HEAP32[$102>>2]|0;
         __THREW__ = 0;
         $104 = (invoke_ii($103|0,($$pre$i$i$i|0))|0);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          label = 30;
          break;
         } else {
          $$0$i$i = $104;
         }
        } else {
         $107 = HEAP32[$97>>2]|0;
         $$0$i$i = $107;
        }
        $108 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $109 = ($108|0)==(0);
        if (!($109)) {
         $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $169;$__a$2 = $__a$1;
         break;
        }
        $110 = HEAP32[$96>>2]|0;
        $111 = HEAP32[$98>>2]|0;
        $112 = ($110|0)==($111|0);
        if ($112) {
         $113 = HEAP32[$$pre$i$i$i>>2]|0;
         $114 = ((($113)) + 40|0);
         $115 = HEAP32[$114>>2]|0;
         __THREW__ = 0;
         (invoke_ii($115|0,($$pre$i$i$i|0))|0);
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          label = 30;
          break;
         } else {
          $$pre$i$i$i11 = $$pre$i$i$i;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $118 = ((($110)) + 4|0);
         HEAP32[$96>>2] = $118;
         $$pre$i$i$i11 = $$pre$i$i$i;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 30) {
        $92 = ___cxa_find_matching_catch()|0;
        $93 = tempRet0;
        $lpad$phi$index = $92;$lpad$phi$index2 = $93;
        break;
       }
       $119 = HEAP32[$__a_end>>2]|0;
       $120 = $119;
       $121 = $__a$2;
       $122 = (($120) - ($121))|0;
       __THREW__ = 0;
       invoke_viii(556,($__buf|0),($122|0),0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        label = 31;
       } else {
        $125 = HEAP8[$__buf>>0]|0;
        $126 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        $127 = (invoke_i(649)|0);
        $128 = __THREW__; __THREW__ = 0;
        $129 = $128&1;
        if ($129) {
         label = 31;
        } else {
         $130 = $125 & 1;
         $131 = ($130<<24>>24)==(0);
         $132 = $131 ? $29 : $126;
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $133 = (invoke_iiiii(650,($132|0),($127|0),(29733|0),($vararg_buffer|0))|0);
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          label = 31;
         } else {
          $136 = ($133|0)==(1);
          if (!($136)) {
           HEAP32[$__err>>2] = 4;
          }
          $137 = ($$pre$i$i$i$lcssa|0)==(0|0);
          if ($137) {
           $170 = 1;
          } else {
           $138 = ((($$pre$i$i$i$lcssa)) + 12|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = ((($$pre$i$i$i$lcssa)) + 16|0);
           $141 = HEAP32[$140>>2]|0;
           $142 = ($139|0)==($141|0);
           if ($142) {
            $143 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
            $144 = ((($143)) + 36|0);
            $145 = HEAP32[$144>>2]|0;
            __THREW__ = 0;
            $146 = (invoke_ii($145|0,($$pre$i$i$i$lcssa|0))|0);
            $147 = __THREW__; __THREW__ = 0;
            $148 = $147&1;
            if ($148) {
             label = 31;
             break;
            } else {
             $$0$i$i$i$i = $146;
            }
           } else {
            $149 = HEAP32[$139>>2]|0;
            $$0$i$i$i$i = $149;
           }
           $150 = ($$0$i$i$i$i|0)==(-1);
           if ($150) {
            HEAP32[$__b>>2] = 0;
            $170 = 1;
           } else {
            $170 = 0;
           }
          }
          $151 = ($$pre$i3$i$i|0)==(0|0);
          do {
           if ($151) {
            label = 57;
           } else {
            $152 = ((($$pre$i3$i$i)) + 12|0);
            $153 = HEAP32[$152>>2]|0;
            $154 = ((($$pre$i3$i$i)) + 16|0);
            $155 = HEAP32[$154>>2]|0;
            $156 = ($153|0)==($155|0);
            if ($156) {
             $157 = HEAP32[$$pre$i3$i$i>>2]|0;
             $158 = ((($157)) + 36|0);
             $159 = HEAP32[$158>>2]|0;
             __THREW__ = 0;
             $160 = (invoke_ii($159|0,($$pre$i3$i$i|0))|0);
             $161 = __THREW__; __THREW__ = 0;
             $162 = $161&1;
             if ($162) {
              label = 31;
              break L10;
             } else {
              $$0$i$i1$i$i = $160;
             }
            } else {
             $163 = HEAP32[$153>>2]|0;
             $$0$i$i1$i$i = $163;
            }
            $164 = ($$0$i$i1$i$i|0)==(-1);
            if ($164) {
             HEAP32[$__e>>2] = 0;
             label = 57;
             break;
            } else {
             if ($170) {
              break;
             } else {
              label = 59;
              break;
             }
            }
           }
          } while(0);
          if ((label|0) == 57) {
           if ($170) {
            label = 59;
           }
          }
          if ((label|0) == 59) {
           $165 = HEAP32[$__err>>2]|0;
           $166 = $165 | 2;
           HEAP32[$__err>>2] = $166;
          }
          $167 = HEAP32[$__b>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
          STACKTOP = sp;return ($167|0);
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 31) {
      $94 = ___cxa_find_matching_catch()|0;
      $95 = tempRet0;
      $lpad$phi$index = $94;$lpad$phi$index2 = $95;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $90 = ___cxa_find_matching_catch()|0;
   $91 = tempRet0;
   (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
   $$0 = $90;$$01 = $91;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i2 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = ((($__atoms)) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = ((($__atoms)) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__grouping)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $10&255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17|0)!=(0);
   $19 = ($__ct|0)==($__thousands_sep|0);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = ((($20)) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$0 = 0;
    break;
   }
   $27 = ((($__atoms)) + 104|0);
   $$0$i2 = $__atoms;
   while(1) {
    $28 = HEAP32[$$0$i2>>2]|0;
    $29 = ($28|0)==($__ct|0);
    if ($29) {
     $$0$lcssa$i = $$0$i2;
     break;
    }
    $30 = ((($$0$i2)) + 4|0);
    $31 = ($30|0)==($27|0);
    if ($31) {
     $$0$lcssa$i = $27;
     break;
    } else {
     $$0$i2 = $30;
    }
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = $34 >> 2;
   $36 = ($34|0)>(92);
   if ($36) {
    $$0 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $37 = ($35|0)<($__base|0);
     if (!($37)) {
      $$0 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $38 = ($34|0)<(88);
     if (!($38)) {
      if ($1) {
       $$0 = -1;
       break L6;
      }
      $39 = $0;
      $40 = $__a;
      $41 = (($39) - ($40))|0;
      $42 = ($41|0)<(3);
      if (!($42)) {
       $$0 = -1;
       break L6;
      }
      $43 = ((($0)) + -1|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = ($44<<24>>24)==(48);
      if (!($45)) {
       $$0 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $46 = (28349 + ($35)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $48;
      HEAP8[$0>>0] = $47;
      $$0 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $49 = (28349 + ($35)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $51;
    HEAP8[$0>>0] = $50;
    $52 = HEAP32[$__dc>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$__dc>>2] = $53;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(559,($__loc|0),(11864|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(28349|0),((28375)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(559,($__loc|0),(12004|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP8[$__thousands_sep>>0] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     invoke_vii($20|0,($agg$result|0),($9|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(559,($__loc|0),(11864|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(28349|0),((28381)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(559,($__loc|0),(12004|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP8[$__decimal_point>>0] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     $21 = (invoke_ii($20|0,($9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      HEAP8[$__thousands_sep>>0] = $21;
      $24 = HEAP32[$9>>2]|0;
      $25 = ((($24)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      invoke_vii($26|0,($agg$result|0),($9|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i3 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 L1: do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = ((($3)) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($__grouping)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = ((($14)) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    $25 = ((($__grouping)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = ((($33)) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = ((($__atoms)) + 32|0);
   $$0$i3 = $__atoms;
   while(1) {
    $41 = HEAP8[$$0$i3>>0]|0;
    $42 = ($41<<24>>24)==($__ct<<24>>24);
    if ($42) {
     $$0$lcssa$i = $$0$i3;
     break;
    }
    $43 = ((($$0$i3)) + 1|0);
    $44 = ($43|0)==($40|0);
    if ($44) {
     $$0$lcssa$i = $40;
     break;
    } else {
     $$0$i3 = $43;
    }
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = ($47|0)>(31);
   if ($48) {
    $$0 = -1;
   } else {
    $49 = (28349 + ($47)|0);
    $50 = HEAP8[$49>>0]|0;
    switch ($47|0) {
    case 24: case 25:  {
     $51 = HEAP32[$__a_end>>2]|0;
     $52 = ($51|0)==($__a|0);
     if (!($52)) {
      $53 = ((($51)) + -1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = $55 & 95;
      $57 = HEAP8[$__exp>>0]|0;
      $58 = $57&255;
      $59 = $58 & 127;
      $60 = ($56|0)==($59|0);
      if (!($60)) {
       $$0 = -1;
       break L1;
      }
     }
     $61 = ((($51)) + 1|0);
     HEAP32[$__a_end>>2] = $61;
     HEAP8[$51>>0] = $50;
     $$0 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     $62 = HEAP32[$__a_end>>2]|0;
     $63 = ((($62)) + 1|0);
     HEAP32[$__a_end>>2] = $63;
     HEAP8[$62>>0] = $50;
     $$0 = 0;
     break L1;
     break;
    }
    default: {
     $64 = $50&255;
     $65 = $64 & 95;
     $66 = HEAP8[$__exp>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = ($65|0)==($67|0);
     if ($68) {
      $69 = $65 | 128;
      $70 = $69&255;
      HEAP8[$__exp>>0] = $70;
      $71 = HEAP8[$__in_units>>0]|0;
      $72 = ($71<<24>>24)==(0);
      if (!($72)) {
       HEAP8[$__in_units>>0] = 0;
       $73 = HEAP8[$__grouping>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       $76 = ((($__grouping)) + 4|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $73&255;
       $79 = $78 >>> 1;
       $80 = $75 ? $79 : $77;
       $81 = ($80|0)==(0);
       if (!($81)) {
        $82 = HEAP32[$__g_end>>2]|0;
        $83 = $82;
        $84 = $__g;
        $85 = (($83) - ($84))|0;
        $86 = ($85|0)<(160);
        if ($86) {
         $87 = HEAP32[$__dc>>2]|0;
         $88 = ((($82)) + 4|0);
         HEAP32[$__g_end>>2] = $88;
         HEAP32[$82>>2] = $87;
        }
       }
      }
     }
     $89 = HEAP32[$__a_end>>2]|0;
     $90 = ((($89)) + 1|0);
     HEAP32[$__a_end>>2] = $90;
     HEAP8[$89>>0] = $50;
     $91 = ($47|0)>(21);
     if ($91) {
      $$0 = 0;
      break L1;
     }
     $92 = HEAP32[$__dc>>2]|0;
     $93 = (($92) + 1)|0;
     HEAP32[$__dc>>2] = $93;
     $$0 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(559,($__loc|0),(11856|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(28349|0),((28375)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(559,($__loc|0),(12012|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$__thousands_sep>>2] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     invoke_vii($20|0,($agg$result|0),($9|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(559,($__loc|0),(11856|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(28349|0),((28381)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(559,($__loc|0),(12012|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$__decimal_point>>2] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     $21 = (invoke_ii($20|0,($9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      HEAP32[$__thousands_sep>>2] = $21;
      $24 = HEAP32[$9>>2]|0;
      $25 = ((($24)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      invoke_vii($26|0,($agg$result|0),($9|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i3 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 L1: do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = ((($3)) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($__grouping)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = ((($14)) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct|0)==($__thousands_sep|0);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    $25 = ((($__grouping)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = ((($33)) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = ((($__atoms)) + 128|0);
   $$0$i3 = $__atoms;
   while(1) {
    $41 = HEAP32[$$0$i3>>2]|0;
    $42 = ($41|0)==($__ct|0);
    if ($42) {
     $$0$lcssa$i = $$0$i3;
     break;
    }
    $43 = ((($$0$i3)) + 4|0);
    $44 = ($43|0)==($40|0);
    if ($44) {
     $$0$lcssa$i = $40;
     break;
    } else {
     $$0$i3 = $43;
    }
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = $47 >> 2;
   $49 = ($47|0)>(124);
   if ($49) {
    $$0 = -1;
   } else {
    $50 = (28349 + ($48)|0);
    $51 = HEAP8[$50>>0]|0;
    switch ($48|0) {
    case 24: case 25:  {
     $52 = HEAP32[$__a_end>>2]|0;
     $53 = ($52|0)==($__a|0);
     if (!($53)) {
      $54 = ((($52)) + -1|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = $56 & 95;
      $58 = HEAP8[$__exp>>0]|0;
      $59 = $58&255;
      $60 = $59 & 127;
      $61 = ($57|0)==($60|0);
      if (!($61)) {
       $$0 = -1;
       break L1;
      }
     }
     $62 = ((($52)) + 1|0);
     HEAP32[$__a_end>>2] = $62;
     HEAP8[$52>>0] = $51;
     $$0 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     break;
    }
    default: {
     $63 = $51&255;
     $64 = $63 & 95;
     $65 = HEAP8[$__exp>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = ($64|0)==($66|0);
     if ($67) {
      $68 = $64 | 128;
      $69 = $68&255;
      HEAP8[$__exp>>0] = $69;
      $70 = HEAP8[$__in_units>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       HEAP8[$__in_units>>0] = 0;
       $72 = HEAP8[$__grouping>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       $75 = ((($__grouping)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $72&255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = ($79|0)==(0);
       if (!($80)) {
        $81 = HEAP32[$__g_end>>2]|0;
        $82 = $81;
        $83 = $__g;
        $84 = (($82) - ($83))|0;
        $85 = ($84|0)<(160);
        if ($85) {
         $86 = HEAP32[$__dc>>2]|0;
         $87 = ((($81)) + 4|0);
         HEAP32[$__g_end>>2] = $87;
         HEAP32[$81>>2] = $86;
        }
       }
      }
     }
    }
    }
    $88 = HEAP32[$__a_end>>2]|0;
    $89 = ((($88)) + 1|0);
    HEAP32[$__a_end>>2] = $89;
    HEAP8[$88>>0] = $51;
    $90 = ($47|0)>(84);
    if ($90) {
     $$0 = 0;
    } else {
     $91 = HEAP32[$__dc>>2]|0;
     $92 = (($91) + 1)|0;
     HEAP32[$__dc>>2] = $92;
     $$0 = 0;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre2 = 0, $$pre2$val = 0, $$pre2$val7 = 0, $$pre5 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = ((($__iob)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $11 = (FUNCTION_TABLE_iiiiii[$8 & 1023]($this,$$byval_copy,$__iob,$__fl,$10)|0);
   $$sroa$0$0 = $11;
  } else {
   $12 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$1>>2] = $12;
   __THREW__ = 0;
   $13 = (invoke_iii(559,($1|0),(12004|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   L4: do {
    if ($15) {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $$0 = $66;$$01 = $65;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $16 = HEAP32[$13>>2]|0;
     if ($__v) {
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm,$13);
     } else {
      $19 = ((($16)) + 28|0);
      $20 = HEAP32[$19>>2]|0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm,$13);
     }
     $21 = HEAP8[$__nm>>0]|0;
     $22 = $21 & 1;
     $23 = ($22<<24>>24)==(0);
     $24 = ((($__nm)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $$pre5 = ((($__nm)) + 1|0);
     $26 = ((($__nm)) + 1|0);
     $$pre2 = ((($__nm)) + 8|0);
     $$pre$phi6Z2D = $23 ? $26 : $$pre5;
     $$ph = $23 ? $26 : $25;
     $27 = ((($__nm)) + 4|0);
     $28 = $21 & 1;
     $29 = ($28<<24>>24)==(0);
     $$pre2$val7 = HEAP32[$$pre2>>2]|0;
     $30 = HEAP32[$27>>2]|0;
     $31 = $21&255;
     $32 = $31 >>> 1;
     $33 = $29 ? $$pre$phi6Z2D : $$pre2$val7;
     $34 = $29 ? $32 : $30;
     $35 = (($33) + ($34)|0);
     $36 = ($$ph|0)==($35|0);
     L11: do {
      if (!($36)) {
       $38 = $$ph;
       L12: while(1) {
        $37 = HEAP8[$38>>0]|0;
        $39 = HEAP32[$__s>>2]|0;
        $40 = ($39|0)==(0|0);
        do {
         if (!($40)) {
          $41 = ((($39)) + 24|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = ((($39)) + 28|0);
          $44 = HEAP32[$43>>2]|0;
          $45 = ($42|0)==($44|0);
          if (!($45)) {
           $46 = ((($42)) + 1|0);
           HEAP32[$41>>2] = $46;
           HEAP8[$42>>0] = $37;
           break;
          }
          $47 = HEAP32[$39>>2]|0;
          $48 = ((($47)) + 52|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = $37&255;
          __THREW__ = 0;
          $51 = (invoke_iii($49|0,($39|0),($50|0))|0);
          $52 = __THREW__; __THREW__ = 0;
          $53 = $52&1;
          if ($53) {
           break L12;
          }
          $54 = ($51|0)==(-1);
          if ($54) {
           HEAP32[$__s>>2] = 0;
          }
         }
        } while(0);
        $55 = ((($38)) + 1|0);
        $$pre = HEAP8[$__nm>>0]|0;
        $56 = $$pre & 1;
        $57 = ($56<<24>>24)==(0);
        $$pre2$val = HEAP32[$$pre2>>2]|0;
        $58 = HEAP32[$27>>2]|0;
        $59 = $$pre&255;
        $60 = $59 >>> 1;
        $61 = $57 ? $$pre$phi6Z2D : $$pre2$val;
        $62 = $57 ? $60 : $58;
        $63 = (($61) + ($62)|0);
        $64 = ($55|0)==($63|0);
        if ($64) {
         break L11;
        } else {
         $38 = $55;
        }
       }
       $67 = ___cxa_find_matching_catch()|0;
       $68 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
       $$0 = $68;$$01 = $67;
       break L4;
      }
     } while(0);
     $69 = HEAP32[$__s>>2]|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
     $$sroa$0$0 = $69;
     break L1;
    }
   } while(0);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[29738>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[29738+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[29738+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[29738+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[29738+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[29738+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,29744,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(653,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;$$13 = $$1$ph;$10 = $6;
  while(1) {
   $8 = ((($$012)) + 1|0);
   $9 = ((($$13)) + 1|0);
   HEAP8[$$13>>0] = $10;
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$1$lcssa = $9;
    break;
   } else {
    $$012 = $8;$$13 = $9;$10 = $11;
   }
  }
 }
 $13 = $__flags & 74;
 L11: do {
  switch ($13|0) {
  case 64:  {
   HEAP8[$$1$lcssa>>0] = 111;
   break;
  }
  case 8:  {
   $14 = $__flags & 16384;
   $15 = ($14|0)==(0);
   if ($15) {
    HEAP8[$$1$lcssa>>0] = 120;
    break L11;
   } else {
    HEAP8[$$1$lcssa>>0] = 88;
    break L11;
   }
   break;
  }
  default: {
   if ($__signd) {
    HEAP8[$$1$lcssa>>0] = 100;
    break L11;
   } else {
    HEAP8[$$1$lcssa>>0] = 117;
    break L11;
   }
  }
  }
 } while(0);
 return;
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 L1: do {
  switch ($2|0) {
  case 16:  {
   $3 = HEAP8[$__nb>>0]|0;
   switch ($3<<24>>24) {
   case 43: case 45:  {
    $4 = ((($__nb)) + 1|0);
    $$0 = $4;
    break L1;
    break;
   }
   default: {
   }
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = ((($__nb)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    switch ($11<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $12 = ((($__nb)) + 2|0);
    $$0 = $12;
   } else {
    label = 7;
   }
   break;
  }
  case 32:  {
   $$0 = $__ne;
   break;
  }
  default: {
   label = 7;
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$01$i$i10 = 0, $$01$i$i414 = 0, $$__dg$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$011 = 0;
 var $__dc$1 = 0, $__dg$012 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$013 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11864)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12004)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__grouping)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5&255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
    $$pre$phiZ2D = $20;$133 = $22;
    label = 29;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   switch ($27<<24>>24) {
   case 43: case 45:  {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 5;
     break L1;
    }
    $34 = ((($__nb)) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = ((($35)) + 1|0);
    HEAP32[$__oe>>2] = $36;
    HEAP8[$35>>0] = $31;
    $__nf$0 = $34;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   L9: do {
    if ($40) {
     $41 = HEAP8[$__nf$0>>0]|0;
     $42 = ($41<<24>>24)==(48);
     if ($42) {
      $43 = ((($__nf$0)) + 1|0);
      $44 = HEAP8[$43>>0]|0;
      switch ($44<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $45 = HEAP32[$0>>2]|0;
      $46 = ((($45)) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = ((($51)) + 1|0);
      HEAP32[$__oe>>2] = $52;
      HEAP8[$51>>0] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = ((($__nf$0)) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = ((($61)) + 1|0);
      HEAP32[$__oe>>2] = $62;
      HEAP8[$61>>0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = ((($__ne)) + -1|0);
    $65 = ($__nf$1>>>0)<($64>>>0);
    if ($65) {
     $$01$i$i414 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$01$i$i414>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$01$i$i414>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = ((($$01$i$i414)) + 1|0);
      $70 = ((($68)) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$01$i$i414 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = ((($72)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 5;
   } else {
    $78 = ((($__grouping)) + 8|0);
    $79 = ((($__grouping)) + 1|0);
    $80 = ($__nf$1>>>0)<($__ne>>>0);
    L22: do {
     if ($80) {
      $__dc$011 = 0;$__dg$012 = 0;$__p$013 = $__nf$1;
      while(1) {
       $81 = HEAP8[$__grouping>>0]|0;
       $82 = $81 & 1;
       $83 = ($82<<24>>24)==(0);
       $84 = HEAP32[$78>>2]|0;
       $85 = $83 ? $79 : $84;
       $86 = (($85) + ($__dg$012)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)!=(0);
       $89 = $87 << 24 >> 24;
       $90 = ($__dc$011|0)==($89|0);
       $or$cond = $88 & $90;
       if ($or$cond) {
        $91 = HEAP32[$__oe>>2]|0;
        $92 = ((($91)) + 1|0);
        HEAP32[$__oe>>2] = $92;
        HEAP8[$91>>0] = $75;
        $93 = HEAP8[$__grouping>>0]|0;
        $94 = $93 & 1;
        $95 = ($94<<24>>24)==(0);
        $96 = HEAP32[$8>>2]|0;
        $97 = $93&255;
        $98 = $97 >>> 1;
        $99 = $95 ? $98 : $96;
        $100 = (($99) + -1)|0;
        $101 = ($__dg$012>>>0)<($100>>>0);
        $102 = $101&1;
        $$__dg$0 = (($102) + ($__dg$012))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$011;$__dg$1 = $__dg$012;
       }
       $103 = HEAP8[$__p$013>>0]|0;
       $104 = HEAP32[$0>>2]|0;
       $105 = ((($104)) + 28|0);
       $106 = HEAP32[$105>>2]|0;
       __THREW__ = 0;
       $107 = (invoke_iii($106|0,($0|0),($103|0))|0);
       $108 = __THREW__; __THREW__ = 0;
       $109 = $108&1;
       if ($109) {
        break;
       }
       $110 = HEAP32[$__oe>>2]|0;
       $111 = ((($110)) + 1|0);
       HEAP32[$__oe>>2] = $111;
       HEAP8[$110>>0] = $107;
       $112 = (($__dc$1) + 1)|0;
       $113 = ((($__p$013)) + 1|0);
       $114 = ($113>>>0)<($__ne>>>0);
       if ($114) {
        $__dc$011 = $112;$__dg$012 = $__dg$1;$__p$013 = $113;
       } else {
        break L22;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      break L1;
     }
    } while(0);
    $115 = $__nf$1;
    $116 = $__nb;
    $117 = (($115) - ($116))|0;
    $118 = (($__ob) + ($117)|0);
    $119 = HEAP32[$__oe>>2]|0;
    $120 = ($118|0)==($119|0);
    if ($120) {
     $$pre$phiZ2D = $116;$133 = $118;
     label = 29;
    } else {
     $121 = ((($119)) + -1|0);
     $122 = ($118>>>0)<($121>>>0);
     if ($122) {
      $$01$i$i10 = $118;$125 = $121;
      while(1) {
       $123 = HEAP8[$$01$i$i10>>0]|0;
       $124 = HEAP8[$125>>0]|0;
       HEAP8[$$01$i$i10>>0] = $124;
       HEAP8[$125>>0] = $123;
       $126 = ((($$01$i$i10)) + 1|0);
       $127 = ((($125)) + -1|0);
       $128 = ($126>>>0)<($127>>>0);
       if ($128) {
        $$01$i$i10 = $126;$125 = $127;
       } else {
        break;
       }
      }
     }
     $$pre = HEAP32[$__oe>>2]|0;
     $$pre$phiZ2D = $116;$133 = $$pre;
     label = 29;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 29) {
  $129 = ($__np|0)==($__ne|0);
  $130 = $__np;
  $131 = (($130) - ($$pre$phiZ2D))|0;
  $132 = (($__ob) + ($131)|0);
  $storemerge = $129 ? $133 : $132;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 78|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,29746,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(653,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[29738>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[29738+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[29738+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[29738+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[29738+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[29738+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,29744,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(653,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 79|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,29746,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(653,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$112 = 0, $$1311 = 0, $$byval_copy = 0, $$pre = 0, $$pre8 = 0, $$pre9 = 0, $$pre9$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 84|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 146|0;
 $__nb = sp + 80|0;
 $__o = sp + 88|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,29749,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 L5: do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(649)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(654,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     $26 = ((($__iob)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $27;
     $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
     HEAPF64[$vararg_ptr12>>3] = $__v;
     $28 = (invoke_iiiii(654,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if (!($30)) {
      $__nc$1 = $28;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $31 = HEAP32[$__nb>>2]|0;
     $32 = ($31|0)==(0|0);
     if ($32) {
      __THREW__ = 0;
      invoke_v(655);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      $$pre = HEAP32[$__nb>>2]|0;
      $35 = $$pre;
     } else {
      $35 = $31;
     }
     $36 = $35;
     $38 = $35;$64 = $36;$__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while(0);
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$112 = $24;$$1311 = $25;
  } else {
   $$pre8 = HEAP32[$__nb>>2]|0;
   $38 = $$pre8;$64 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $37 = (($38) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
  $40 = ($38|0)==($__nar|0);
  do {
   if ($40) {
    $52 = $__nar;$61 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $41 = $__nc$2 << 1;
    $42 = (_malloc($41)|0);
    $43 = ($42|0)==(0|0);
    if ($43) {
     __THREW__ = 0;
     invoke_v(655);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $74 = 0;
      label = 20;
      break;
     }
     $$pre9$pre = HEAP32[$__nb>>2]|0;
     $$pre9 = $$pre9$pre;
    } else {
     $$pre9 = $38;
    }
    $48 = $42;
    $52 = $$pre9;$61 = $48;$__ob$0 = $42;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $49 = (invoke_ii(558,($__iob|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $74 = $61;
     label = 20;
    } else {
     HEAP32[$0>>2] = $49;
     __THREW__ = 0;
     invoke_viiiiiii(656,($52|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $67 = ___cxa_find_matching_catch()|0;
      $68 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
      $$0 = $67;$$02 = $68;$69 = $61;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
     $55 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $55;
     $56 = HEAP32[$__op>>2]|0;
     $57 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $58 = (invoke_iiiiiii(560,($$byval_copy|0),($__ob$0|0),($56|0),($57|0),($__iob|0),($__fl|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $74 = $61;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $58;
      $62 = ($61|0)==(0);
      if (!($62)) {
       $63 = $61;
       _free($63);
      }
      $65 = ($64|0)==(0);
      if (!($65)) {
       $66 = $64;
       _free($66);
      }
      STACKTOP = sp;return ($58|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $$0 = $46;$$02 = $47;$69 = $74;
  }
  $70 = ($69|0)==(0);
  if (!($70)) {
   $71 = $69;
   _free($71);
  }
  $72 = ($64|0)==(0);
  if ($72) {
   $$112 = $$0;$$1311 = $$02;
  } else {
   $73 = $64;
   _free($73);
   $$112 = $$0;$$1311 = $$02;
  }
 }
 ___resumeException($$112|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = ((($$1)) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;$$23 = $$2$ph;$15 = $11;
  while(1) {
   $13 = ((($$012)) + 1|0);
   $14 = ((($$23)) + 1|0);
   HEAP8[$$23>>0] = $15;
   $16 = HEAP8[$13>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $$2$lcssa = $14;
    break;
   } else {
    $$012 = $13;$$23 = $14;$15 = $16;
   }
  }
 }
 L14: do {
  switch ($6|0) {
  case 4:  {
   $18 = $7 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2$lcssa>>0] = 102;
    break L14;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break L14;
   }
   break;
  }
  case 256:  {
   $20 = $7 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2$lcssa>>0] = 101;
    break L14;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break L14;
   }
   break;
  }
  default: {
   $22 = $7 & 1;
   $23 = ($22|0)!=(0);
   if ($8) {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 65;
     break L14;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break L14;
    }
   } else {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 71;
     break L14;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break L14;
    }
   }
  }
  }
 } while(0);
 return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$01$i$i46 = 0, $$01$i$i641 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$043 = 0, $__dc$1 = 0, $__dg$044 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$240 = 0, $__nf$240$lcssa = 0, $__nf$3 = 0, $__ns$052 = 0, $__ns$148 = 0, $__ns$2 = 0, $__p$045 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11864)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12004)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 switch ($5<<24>>24) {
 case 43: case 45:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = ((($__nb)) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = ((($13)) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 10;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 10;
 }
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = ((($__nf$0)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      switch ($33<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       label = 11;
       break L6;
      }
      }
      $34 = HEAP32[$0>>2]|0;
      $35 = ((($34)) + 28|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_iii($36|0,($0|0),48)|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 8;
       break L4;
      }
      $40 = HEAP32[$__oe>>2]|0;
      $41 = ((($40)) + 1|0);
      HEAP32[$__oe>>2] = $41;
      HEAP8[$40>>0] = $37;
      $42 = ((($__nf$0)) + 2|0);
      $43 = HEAP8[$32>>0]|0;
      $44 = HEAP32[$0>>2]|0;
      $45 = ((($44)) + 28|0);
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 8;
       break L4;
      }
      $50 = HEAP32[$__oe>>2]|0;
      $51 = ((($50)) + 1|0);
      HEAP32[$__oe>>2] = $51;
      HEAP8[$50>>0] = $47;
      $52 = ($42>>>0)<($__ne>>>0);
      if ($52) {
       $__ns$052 = $42;
       while(1) {
        $53 = HEAP8[$__ns$052>>0]|0;
        __THREW__ = 0;
        $54 = (invoke_i(649)|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         break;
        }
        $57 = $53 << 24 >> 24;
        __THREW__ = 0;
        $58 = (invoke_iii(657,($57|0),($54|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         break;
        }
        $61 = ($58|0)==(0);
        if ($61) {
         $__nf$1 = $42;$__ns$2 = $__ns$052;
         break L6;
        }
        $62 = ((($__ns$052)) + 1|0);
        $63 = ($62>>>0)<($__ne>>>0);
        if ($63) {
         $__ns$052 = $62;
        } else {
         $__nf$1 = $42;$__ns$2 = $62;
         break L6;
        }
       }
       $21 = ___cxa_find_matching_catch()|0;
       $22 = tempRet0;
       $lpad$phi$index = $21;$lpad$phi$index5 = $22;
       break L4;
      } else {
       $__nf$1 = $42;$__ns$2 = $42;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L18: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$148 = $__nf$0;
      while(1) {
       $64 = HEAP8[$__ns$148>>0]|0;
       __THREW__ = 0;
       $65 = (invoke_i(649)|0);
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        break;
       }
       $68 = $64 << 24 >> 24;
       __THREW__ = 0;
       $69 = (invoke_iii(658,($68|0),($65|0))|0);
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        break;
       }
       $72 = ($69|0)==(0);
       if ($72) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$148;
        break L18;
       }
       $73 = ((($__ns$148)) + 1|0);
       $74 = ($73>>>0)<($__ne>>>0);
       if ($74) {
        $__ns$148 = $73;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $73;
        break L18;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      break L4;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   $78 = ((($__grouping)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $75&255;
   $81 = $80 >>> 1;
   $82 = $77 ? $81 : $79;
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = ((($85)) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     label = 8;
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92)|0);
    HEAP32[$__oe>>2] = $94;
    $$pre$phiZ2D = $0;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = ((($__ns$2)) + -1|0);
     $97 = ($__nf$1>>>0)<($96>>>0);
     if ($97) {
      $$01$i$i46 = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$01$i$i46>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$01$i$i46>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = ((($$01$i$i46)) + 1|0);
       $102 = ((($100)) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$01$i$i46 = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = ((($104)) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 8;
     break;
    }
    $110 = ((($__grouping)) + 8|0);
    $111 = ((($__grouping)) + 1|0);
    $112 = ($__nf$1>>>0)<($__ns$2>>>0);
    L37: do {
     if ($112) {
      $__dc$043 = 0;$__dg$044 = 0;$__p$045 = $__nf$1;
      while(1) {
       $113 = HEAP8[$__grouping>>0]|0;
       $114 = $113 & 1;
       $115 = ($114<<24>>24)==(0);
       $116 = HEAP32[$110>>2]|0;
       $117 = $115 ? $111 : $116;
       $118 = (($117) + ($__dg$044)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       $121 = $119 << 24 >> 24;
       $122 = ($__dc$043|0)==($121|0);
       $or$cond = $120 & $122;
       if ($or$cond) {
        $123 = HEAP32[$__oe>>2]|0;
        $124 = ((($123)) + 1|0);
        HEAP32[$__oe>>2] = $124;
        HEAP8[$123>>0] = $107;
        $125 = HEAP8[$__grouping>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        $128 = HEAP32[$78>>2]|0;
        $129 = $125&255;
        $130 = $129 >>> 1;
        $131 = $127 ? $130 : $128;
        $132 = (($131) + -1)|0;
        $133 = ($__dg$044>>>0)<($132>>>0);
        $134 = $133&1;
        $$__dg$0 = (($134) + ($__dg$044))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$043;$__dg$1 = $__dg$044;
       }
       $135 = HEAP8[$__p$045>>0]|0;
       $136 = HEAP32[$0>>2]|0;
       $137 = ((($136)) + 28|0);
       $138 = HEAP32[$137>>2]|0;
       __THREW__ = 0;
       $139 = (invoke_iii($138|0,($0|0),($135|0))|0);
       $140 = __THREW__; __THREW__ = 0;
       $141 = $140&1;
       if ($141) {
        break;
       }
       $142 = HEAP32[$__oe>>2]|0;
       $143 = ((($142)) + 1|0);
       HEAP32[$__oe>>2] = $143;
       HEAP8[$142>>0] = $139;
       $144 = (($__dc$1) + 1)|0;
       $145 = ((($__p$045)) + 1|0);
       $146 = ($145>>>0)<($__ns$2>>>0);
       if ($146) {
        $__dc$043 = $144;$__dg$044 = $__dg$1;$__p$045 = $145;
       } else {
        break L37;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      break L4;
     }
    } while(0);
    $147 = $__nf$1;
    $148 = $__nb;
    $149 = (($147) - ($148))|0;
    $150 = (($__ob) + ($149)|0);
    $151 = HEAP32[$__oe>>2]|0;
    $152 = ($150|0)==($151|0);
    if ($152) {
     $$pre$phiZ2D = $0;
    } else {
     $153 = ((($151)) + -1|0);
     $154 = ($150>>>0)<($153>>>0);
     if ($154) {
      $$01$i$i641 = $150;$158 = $153;
      while(1) {
       $156 = HEAP8[$$01$i$i641>>0]|0;
       $157 = HEAP8[$158>>0]|0;
       HEAP8[$$01$i$i641>>0] = $157;
       HEAP8[$158>>0] = $156;
       $159 = ((($$01$i$i641)) + 1|0);
       $160 = ((($158)) + -1|0);
       $161 = ($159>>>0)<($160>>>0);
       if ($161) {
        $$01$i$i641 = $159;$158 = $160;
       } else {
        $$pre$phiZ2D = $0;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $0;
     }
    }
   }
   $155 = ($__ns$2>>>0)<($__ne>>>0);
   L50: do {
    if ($155) {
     $__nf$240 = $__ns$2;
     while(1) {
      $162 = HEAP8[$__nf$240>>0]|0;
      $163 = ($162<<24>>24)==(46);
      if ($163) {
       $__nf$240$lcssa = $__nf$240;
       break;
      }
      $173 = HEAP32[$$pre$phiZ2D>>2]|0;
      $174 = ((($173)) + 28|0);
      $175 = HEAP32[$174>>2]|0;
      __THREW__ = 0;
      $176 = (invoke_iii($175|0,($0|0),($162|0))|0);
      $177 = __THREW__; __THREW__ = 0;
      $178 = $177&1;
      if ($178) {
       label = 4;
       break;
      }
      $179 = HEAP32[$__oe>>2]|0;
      $180 = ((($179)) + 1|0);
      HEAP32[$__oe>>2] = $180;
      HEAP8[$179>>0] = $176;
      $181 = ((($__nf$240)) + 1|0);
      $182 = ($181>>>0)<($__ne>>>0);
      if ($182) {
       $__nf$240 = $181;
      } else {
       $__nf$3 = $181;
       break L50;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      break L4;
     }
     $164 = HEAP32[$1>>2]|0;
     $165 = ((($164)) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = (invoke_ii($166|0,($1|0))|0);
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     if ($169) {
      label = 8;
      break L4;
     }
     $170 = HEAP32[$__oe>>2]|0;
     $171 = ((($170)) + 1|0);
     HEAP32[$__oe>>2] = $171;
     HEAP8[$170>>0] = $167;
     $172 = ((($__nf$240$lcssa)) + 1|0);
     $__nf$3 = $172;
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $183 = HEAP32[$__oe>>2]|0;
   $184 = HEAP32[$0>>2]|0;
   $185 = ((($184)) + 32|0);
   $186 = HEAP32[$185>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($186|0,($0|0),($__nf$3|0),($__ne|0),($183|0))|0);
   $187 = __THREW__; __THREW__ = 0;
   $188 = $187&1;
   if ($188) {
    label = 8;
   } else {
    $189 = $__nf$3;
    $190 = (($25) - ($189))|0;
    $191 = HEAP32[$__oe>>2]|0;
    $192 = (($191) + ($190)|0);
    HEAP32[$__oe>>2] = $192;
    $193 = ($__np|0)==($__ne|0);
    $194 = $__np;
    $195 = $__nb;
    $196 = (($194) - ($195))|0;
    $197 = (($__ob) + ($196)|0);
    $storemerge = $193 ? $192 : $197;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$112 = 0, $$1311 = 0, $$byval_copy = 0, $$pre = 0, $$pre8 = 0, $$pre9 = 0, $$pre9$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 138|0;
 $__nb = sp + 72|0;
 $__o = sp + 80|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,29750,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 L5: do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(649)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(654,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $26 = (invoke_iiiii(654,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      $__nc$1 = $26;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $29 = HEAP32[$__nb>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(655);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       break;
      }
      $$pre = HEAP32[$__nb>>2]|0;
      $33 = $$pre;
     } else {
      $33 = $29;
     }
     $34 = $33;
     $36 = $33;$62 = $34;$__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while(0);
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$112 = $24;$$1311 = $25;
  } else {
   $$pre8 = HEAP32[$__nb>>2]|0;
   $36 = $$pre8;$62 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $35 = (($36) + ($__nc$2)|0);
  $37 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($36,$35,$__iob)|0);
  $38 = ($36|0)==($__nar|0);
  do {
   if ($38) {
    $50 = $__nar;$59 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $39 = $__nc$2 << 1;
    $40 = (_malloc($39)|0);
    $41 = ($40|0)==(0|0);
    if ($41) {
     __THREW__ = 0;
     invoke_v(655);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $72 = 0;
      label = 20;
      break;
     }
     $$pre9$pre = HEAP32[$__nb>>2]|0;
     $$pre9 = $$pre9$pre;
    } else {
     $$pre9 = $36;
    }
    $46 = $40;
    $50 = $$pre9;$59 = $46;$__ob$0 = $40;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $47 = (invoke_ii(558,($__iob|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $72 = $59;
     label = 20;
    } else {
     HEAP32[$0>>2] = $47;
     __THREW__ = 0;
     invoke_viiiiiii(656,($50|0),($37|0),($35|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
      $$0 = $65;$$02 = $66;$67 = $59;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
     $53 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $53;
     $54 = HEAP32[$__op>>2]|0;
     $55 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $56 = (invoke_iiiiiii(560,($$byval_copy|0),($__ob$0|0),($54|0),($55|0),($__iob|0),($__fl|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $72 = $59;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $56;
      $60 = ($59|0)==(0);
      if (!($60)) {
       $61 = $59;
       _free($61);
      }
      $63 = ($62|0)==(0);
      if (!($63)) {
       $64 = $62;
       _free($64);
      }
      STACKTOP = sp;return ($56|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $44 = ___cxa_find_matching_catch()|0;
   $45 = tempRet0;
   $$0 = $44;$$02 = $45;$67 = $72;
  }
  $68 = ($67|0)==(0);
  if (!($68)) {
   $69 = $67;
   _free($69);
  }
  $70 = ($62|0)==(0);
  if ($70) {
   $$112 = $$0;$$1311 = $$02;
  } else {
   $71 = $62;
   _free($71);
   $$112 = $$0;$$1311 = $$02;
  }
 }
 ___resumeException($$112|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 76|0;
 $__nar = sp + 56|0;
 $__o = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[29752>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[29752+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[29752+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[29752+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[29752+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[29752+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 $6 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(559,($0|0),(11864|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($21|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 1023]($7,$__nar,$4,$__o)|0);
  $13 = (($__o) + ($3)|0);
  $14 = ($5|0)==($4|0);
  $15 = $__nar;
  $16 = $5;
  $17 = (($16) - ($15))|0;
  $18 = (($__o) + ($17)|0);
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $20 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$__op$0,$13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre2 = 0, $$pre2$val = 0, $$pre2$val5 = 0, $$pre3 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = ((($__iob)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $11 = (FUNCTION_TABLE_iiiiii[$8 & 1023]($this,$$byval_copy,$__iob,$__fl,$10)|0);
   $$sroa$0$0 = $11;
  } else {
   $12 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$1>>2] = $12;
   __THREW__ = 0;
   $13 = (invoke_iii(559,($1|0),(12012|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   L4: do {
    if ($15) {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $$0 = $64;$$01 = $63;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $16 = HEAP32[$13>>2]|0;
     if ($__v) {
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm,$13);
     } else {
      $19 = ((($16)) + 28|0);
      $20 = HEAP32[$19>>2]|0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm,$13);
     }
     $21 = HEAP8[$__nm>>0]|0;
     $22 = $21 & 1;
     $23 = ($22<<24>>24)==(0);
     $24 = ((($__nm)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $$pre3 = ((($__nm)) + 4|0);
     $26 = ((($__nm)) + 4|0);
     $$pre2 = ((($__nm)) + 8|0);
     $$pre$phi4Z2D = $23 ? $26 : $$pre3;
     $$ph = $23 ? $26 : $25;
     $27 = $21 & 1;
     $28 = ($27<<24>>24)==(0);
     $$pre2$val5 = HEAP32[$$pre2>>2]|0;
     $29 = HEAP32[$$pre$phi4Z2D>>2]|0;
     $30 = $21&255;
     $31 = $30 >>> 1;
     $32 = $28 ? $$pre$phi4Z2D : $$pre2$val5;
     $33 = $28 ? $31 : $29;
     $34 = (($32) + ($33<<2)|0);
     $35 = ($$ph|0)==($34|0);
     L11: do {
      if (!($35)) {
       $37 = $$ph;
       while(1) {
        $36 = HEAP32[$37>>2]|0;
        $38 = HEAP32[$__s>>2]|0;
        $39 = ($38|0)==(0|0);
        if (!($39)) {
         $40 = ((($38)) + 24|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = ((($38)) + 28|0);
         $43 = HEAP32[$42>>2]|0;
         $44 = ($41|0)==($43|0);
         if ($44) {
          $45 = HEAP32[$38>>2]|0;
          $46 = ((($45)) + 52|0);
          $47 = HEAP32[$46>>2]|0;
          __THREW__ = 0;
          $48 = (invoke_iii($47|0,($38|0),($36|0))|0);
          $49 = __THREW__; __THREW__ = 0;
          $50 = $49&1;
          if ($50) {
           break;
          } else {
           $$0$i$i = $48;
          }
         } else {
          $51 = ((($41)) + 4|0);
          HEAP32[$40>>2] = $51;
          HEAP32[$41>>2] = $36;
          $$0$i$i = $36;
         }
         $52 = ($$0$i$i|0)==(-1);
         if ($52) {
          HEAP32[$__s>>2] = 0;
         }
        }
        $53 = ((($37)) + 4|0);
        $$pre = HEAP8[$__nm>>0]|0;
        $54 = $$pre & 1;
        $55 = ($54<<24>>24)==(0);
        $$pre2$val = HEAP32[$$pre2>>2]|0;
        $56 = HEAP32[$$pre$phi4Z2D>>2]|0;
        $57 = $$pre&255;
        $58 = $57 >>> 1;
        $59 = $55 ? $$pre$phi4Z2D : $$pre2$val;
        $60 = $55 ? $58 : $56;
        $61 = (($59) + ($60<<2)|0);
        $62 = ($53|0)==($61|0);
        if ($62) {
         break L11;
        } else {
         $37 = $53;
        }
       }
       $65 = ___cxa_find_matching_catch()|0;
       $66 = tempRet0;
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
       $$0 = $66;$$01 = $65;
       break L4;
      }
     } while(0);
     $67 = HEAP32[$__s>>2]|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
     $$sroa$0$0 = $67;
     break L1;
    }
   } while(0);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[29738>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[29738+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[29738+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[29738+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[29738+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[29738+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,29744,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(659,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$01$i$i413 = 0, $$01$i$i9 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$010 = 0, $__dc$1 = 0;
 var $__dg$011 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$012 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11856)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12012)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__grouping)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5&255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $$pre$phiZ2D = $20;$133 = $22;
    label = 28;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   switch ($27<<24>>24) {
   case 43: case 45:  {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 5;
     break L1;
    }
    $34 = ((($__nb)) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = ((($35)) + 4|0);
    HEAP32[$__oe>>2] = $36;
    HEAP32[$35>>2] = $31;
    $__nf$0 = $34;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   L9: do {
    if ($40) {
     $41 = HEAP8[$__nf$0>>0]|0;
     $42 = ($41<<24>>24)==(48);
     if ($42) {
      $43 = ((($__nf$0)) + 1|0);
      $44 = HEAP8[$43>>0]|0;
      switch ($44<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $45 = HEAP32[$0>>2]|0;
      $46 = ((($45)) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = ((($51)) + 4|0);
      HEAP32[$__oe>>2] = $52;
      HEAP32[$51>>2] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = ((($__nf$0)) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = ((($61)) + 4|0);
      HEAP32[$__oe>>2] = $62;
      HEAP32[$61>>2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = ((($__ne)) + -1|0);
    $65 = ($__nf$1>>>0)<($64>>>0);
    if ($65) {
     $$01$i$i413 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$01$i$i413>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$01$i$i413>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = ((($$01$i$i413)) + 1|0);
      $70 = ((($68)) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$01$i$i413 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = ((($72)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 5;
   } else {
    $78 = ((($__grouping)) + 8|0);
    $79 = ((($__grouping)) + 1|0);
    $80 = ($__nf$1>>>0)<($__ne>>>0);
    L22: do {
     if ($80) {
      $__dc$010 = 0;$__dg$011 = 0;$__p$012 = $__nf$1;
      while(1) {
       $81 = HEAP8[$__grouping>>0]|0;
       $82 = $81 & 1;
       $83 = ($82<<24>>24)==(0);
       $84 = HEAP32[$78>>2]|0;
       $85 = $83 ? $79 : $84;
       $86 = (($85) + ($__dg$011)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)!=(0);
       $89 = $87 << 24 >> 24;
       $90 = ($__dc$010|0)==($89|0);
       $or$cond = $88 & $90;
       if ($or$cond) {
        $91 = HEAP32[$__oe>>2]|0;
        $92 = ((($91)) + 4|0);
        HEAP32[$__oe>>2] = $92;
        HEAP32[$91>>2] = $75;
        $93 = HEAP8[$__grouping>>0]|0;
        $94 = $93 & 1;
        $95 = ($94<<24>>24)==(0);
        $96 = HEAP32[$8>>2]|0;
        $97 = $93&255;
        $98 = $97 >>> 1;
        $99 = $95 ? $98 : $96;
        $100 = (($99) + -1)|0;
        $101 = ($__dg$011>>>0)<($100>>>0);
        $102 = $101&1;
        $$__dg$0 = (($102) + ($__dg$011))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$010;$__dg$1 = $__dg$011;
       }
       $103 = HEAP8[$__p$012>>0]|0;
       $104 = HEAP32[$0>>2]|0;
       $105 = ((($104)) + 44|0);
       $106 = HEAP32[$105>>2]|0;
       __THREW__ = 0;
       $107 = (invoke_iii($106|0,($0|0),($103|0))|0);
       $108 = __THREW__; __THREW__ = 0;
       $109 = $108&1;
       if ($109) {
        break;
       }
       $110 = HEAP32[$__oe>>2]|0;
       $111 = ((($110)) + 4|0);
       HEAP32[$__oe>>2] = $111;
       HEAP32[$110>>2] = $107;
       $112 = (($__dc$1) + 1)|0;
       $113 = ((($__p$012)) + 1|0);
       $114 = ($113>>>0)<($__ne>>>0);
       if ($114) {
        $__dc$010 = $112;$__dg$011 = $__dg$1;$__p$012 = $113;
       } else {
        break L22;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      break L1;
     }
    } while(0);
    $115 = $__nf$1;
    $116 = $__nb;
    $117 = (($115) - ($116))|0;
    $118 = (($__ob) + ($117<<2)|0);
    $119 = HEAP32[$__oe>>2]|0;
    $120 = ($118|0)==($119|0);
    if ($120) {
     $$pre$phiZ2D = $116;$133 = $118;
     label = 28;
    } else {
     $121 = ((($119)) + -4|0);
     $122 = ($118>>>0)<($121>>>0);
     if ($122) {
      $$01$i$i9 = $118;$125 = $121;
      while(1) {
       $123 = HEAP32[$$01$i$i9>>2]|0;
       $124 = HEAP32[$125>>2]|0;
       HEAP32[$$01$i$i9>>2] = $124;
       HEAP32[$125>>2] = $123;
       $126 = ((($$01$i$i9)) + 4|0);
       $127 = ((($125)) + -4|0);
       $128 = ($126>>>0)<($127>>>0);
       if ($128) {
        $$01$i$i9 = $126;$125 = $127;
       } else {
        $$pre$phiZ2D = $116;$133 = $119;
        label = 28;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $116;$133 = $119;
      label = 28;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 28) {
  $129 = ($__np|0)==($__ne|0);
  $130 = $__np;
  $131 = (($130) - ($$pre$phiZ2D))|0;
  $132 = (($__ob) + ($131<<2)|0);
  $storemerge = $129 ? $133 : $132;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 196|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 200|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,29746,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(659,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[29738>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[29738+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[29738+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[29738+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[29738+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[29738+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,29744,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(659,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 208|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,29746,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(659,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$110 = 0, $$139 = 0, $$byval_copy = 0, $$pre = 0, $$pre6 = 0, $$pre7 = 0, $$pre7$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 312|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 308|0;
 $__o = sp + 80|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,29749,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 L5: do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(649)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(654,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     $26 = ((($__iob)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $27;
     $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
     HEAPF64[$vararg_ptr12>>3] = $__v;
     $28 = (invoke_iiiii(654,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if (!($30)) {
      $__nc$1 = $28;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $31 = HEAP32[$__nb>>2]|0;
     $32 = ($31|0)==(0|0);
     if ($32) {
      __THREW__ = 0;
      invoke_v(655);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      $$pre = HEAP32[$__nb>>2]|0;
      $35 = $$pre;
     } else {
      $35 = $31;
     }
     $36 = $35;
     $38 = $35;$64 = $36;$__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while(0);
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$110 = $24;$$139 = $25;
  } else {
   $$pre6 = HEAP32[$__nb>>2]|0;
   $38 = $$pre6;$64 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $37 = (($38) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
  $40 = ($38|0)==($__nar|0);
  do {
   if ($40) {
    $52 = $__nar;$61 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $41 = $__nc$2 << 3;
    $42 = (_malloc($41)|0);
    $43 = ($42|0)==(0|0);
    if ($43) {
     __THREW__ = 0;
     invoke_v(655);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $74 = 0;
      label = 20;
      break;
     }
     $$pre7$pre = HEAP32[$__nb>>2]|0;
     $$pre7 = $$pre7$pre;
    } else {
     $$pre7 = $38;
    }
    $48 = $42;
    $52 = $$pre7;$61 = $48;$__ob$0 = $42;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $49 = (invoke_ii(558,($__iob|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $74 = $61;
     label = 20;
    } else {
     HEAP32[$0>>2] = $49;
     __THREW__ = 0;
     invoke_viiiiiii(660,($52|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $67 = ___cxa_find_matching_catch()|0;
      $68 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
      $$0 = $67;$$02 = $68;$69 = $61;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
     $55 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $55;
     $56 = HEAP32[$__op>>2]|0;
     $57 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $58 = (invoke_iiiiiii(661,($$byval_copy|0),($__ob$0|0),($56|0),($57|0),($__iob|0),($__fl|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $74 = $61;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $58;
      $62 = ($61|0)==(0);
      if (!($62)) {
       $63 = $61;
       _free($63);
      }
      $65 = ($64|0)==(0);
      if (!($65)) {
       $66 = $64;
       _free($66);
      }
      STACKTOP = sp;return ($58|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $$0 = $46;$$02 = $47;$69 = $74;
  }
  $70 = ($69|0)==(0);
  if (!($70)) {
   $71 = $69;
   _free($71);
  }
  $72 = ($64|0)==(0);
  if ($72) {
   $$110 = $$0;$$139 = $$02;
  } else {
   $73 = $64;
   _free($73);
   $$110 = $$0;$$139 = $$02;
  }
 }
 ___resumeException($$110|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$01$i$i50 = 0, $$01$i$i645 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dc$047 = 0, $__dc$1 = 0, $__dg$048 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$243 = 0, $__nf$243$lcssa = 0, $__nf$3 = 0, $__ns$056 = 0, $__ns$152 = 0, $__ns$2 = 0, $__p$049 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11856)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12012)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 switch ($5<<24>>24) {
 case 43: case 45:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = ((($__nb)) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = ((($13)) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 10;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 10;
 }
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = ((($__nf$0)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      switch ($33<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       label = 11;
       break L6;
      }
      }
      $34 = HEAP32[$0>>2]|0;
      $35 = ((($34)) + 44|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_iii($36|0,($0|0),48)|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 8;
       break L4;
      }
      $40 = HEAP32[$__oe>>2]|0;
      $41 = ((($40)) + 4|0);
      HEAP32[$__oe>>2] = $41;
      HEAP32[$40>>2] = $37;
      $42 = ((($__nf$0)) + 2|0);
      $43 = HEAP8[$32>>0]|0;
      $44 = HEAP32[$0>>2]|0;
      $45 = ((($44)) + 44|0);
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 8;
       break L4;
      }
      $50 = HEAP32[$__oe>>2]|0;
      $51 = ((($50)) + 4|0);
      HEAP32[$__oe>>2] = $51;
      HEAP32[$50>>2] = $47;
      $52 = ($42>>>0)<($__ne>>>0);
      if ($52) {
       $__ns$056 = $42;
       while(1) {
        $53 = HEAP8[$__ns$056>>0]|0;
        __THREW__ = 0;
        $54 = (invoke_i(649)|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         break;
        }
        $57 = $53 << 24 >> 24;
        __THREW__ = 0;
        $58 = (invoke_iii(657,($57|0),($54|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         break;
        }
        $61 = ($58|0)==(0);
        if ($61) {
         $__nf$1 = $42;$__ns$2 = $__ns$056;
         break L6;
        }
        $62 = ((($__ns$056)) + 1|0);
        $63 = ($62>>>0)<($__ne>>>0);
        if ($63) {
         $__ns$056 = $62;
        } else {
         $__nf$1 = $42;$__ns$2 = $62;
         break L6;
        }
       }
       $21 = ___cxa_find_matching_catch()|0;
       $22 = tempRet0;
       $lpad$phi$index = $21;$lpad$phi$index5 = $22;
       break L4;
      } else {
       $__nf$1 = $42;$__ns$2 = $42;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L18: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$152 = $__nf$0;
      while(1) {
       $64 = HEAP8[$__ns$152>>0]|0;
       __THREW__ = 0;
       $65 = (invoke_i(649)|0);
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        break;
       }
       $68 = $64 << 24 >> 24;
       __THREW__ = 0;
       $69 = (invoke_iii(658,($68|0),($65|0))|0);
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        break;
       }
       $72 = ($69|0)==(0);
       if ($72) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$152;
        break L18;
       }
       $73 = ((($__ns$152)) + 1|0);
       $74 = ($73>>>0)<($__ne>>>0);
       if ($74) {
        $__ns$152 = $73;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $73;
        break L18;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      break L4;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   $78 = ((($__grouping)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $75&255;
   $81 = $80 >>> 1;
   $82 = $77 ? $81 : $79;
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = ((($85)) + 48|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     label = 8;
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92<<2)|0);
    HEAP32[$__oe>>2] = $94;
    $$pre$phiZ2D = $0;$198 = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = ((($__ns$2)) + -1|0);
     $97 = ($__nf$1>>>0)<($96>>>0);
     if ($97) {
      $$01$i$i50 = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$01$i$i50>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$01$i$i50>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = ((($$01$i$i50)) + 1|0);
       $102 = ((($100)) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$01$i$i50 = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = ((($104)) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 8;
     break;
    }
    $110 = ((($__grouping)) + 8|0);
    $111 = ((($__grouping)) + 1|0);
    $112 = ($__nf$1>>>0)<($__ns$2>>>0);
    L37: do {
     if ($112) {
      $__dc$047 = 0;$__dg$048 = 0;$__p$049 = $__nf$1;
      while(1) {
       $113 = HEAP8[$__grouping>>0]|0;
       $114 = $113 & 1;
       $115 = ($114<<24>>24)==(0);
       $116 = HEAP32[$110>>2]|0;
       $117 = $115 ? $111 : $116;
       $118 = (($117) + ($__dg$048)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       $121 = $119 << 24 >> 24;
       $122 = ($__dc$047|0)==($121|0);
       $or$cond = $120 & $122;
       if ($or$cond) {
        $123 = HEAP32[$__oe>>2]|0;
        $124 = ((($123)) + 4|0);
        HEAP32[$__oe>>2] = $124;
        HEAP32[$123>>2] = $107;
        $125 = HEAP8[$__grouping>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        $128 = HEAP32[$78>>2]|0;
        $129 = $125&255;
        $130 = $129 >>> 1;
        $131 = $127 ? $130 : $128;
        $132 = (($131) + -1)|0;
        $133 = ($__dg$048>>>0)<($132>>>0);
        $134 = $133&1;
        $$__dg$0 = (($134) + ($__dg$048))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$047;$__dg$1 = $__dg$048;
       }
       $135 = HEAP8[$__p$049>>0]|0;
       $136 = HEAP32[$0>>2]|0;
       $137 = ((($136)) + 44|0);
       $138 = HEAP32[$137>>2]|0;
       __THREW__ = 0;
       $139 = (invoke_iii($138|0,($0|0),($135|0))|0);
       $140 = __THREW__; __THREW__ = 0;
       $141 = $140&1;
       if ($141) {
        break;
       }
       $142 = HEAP32[$__oe>>2]|0;
       $143 = ((($142)) + 4|0);
       HEAP32[$__oe>>2] = $143;
       HEAP32[$142>>2] = $139;
       $144 = (($__dc$1) + 1)|0;
       $145 = ((($__p$049)) + 1|0);
       $146 = ($145>>>0)<($__ns$2>>>0);
       if ($146) {
        $__dc$047 = $144;$__dg$048 = $__dg$1;$__p$049 = $145;
       } else {
        break L37;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      break L4;
     }
    } while(0);
    $147 = $__nf$1;
    $148 = $__nb;
    $149 = (($147) - ($148))|0;
    $150 = (($__ob) + ($149<<2)|0);
    $151 = HEAP32[$__oe>>2]|0;
    $152 = ($150|0)==($151|0);
    if ($152) {
     $$pre$phiZ2D = $0;$198 = $150;
    } else {
     $153 = ((($151)) + -4|0);
     $154 = ($150>>>0)<($153>>>0);
     if ($154) {
      $$01$i$i645 = $150;$158 = $153;
      while(1) {
       $156 = HEAP32[$$01$i$i645>>2]|0;
       $157 = HEAP32[$158>>2]|0;
       HEAP32[$$01$i$i645>>2] = $157;
       HEAP32[$158>>2] = $156;
       $159 = ((($$01$i$i645)) + 4|0);
       $160 = ((($158)) + -4|0);
       $161 = ($159>>>0)<($160>>>0);
       if ($161) {
        $$01$i$i645 = $159;$158 = $160;
       } else {
        $$pre$phiZ2D = $0;$198 = $151;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $0;$198 = $151;
     }
    }
   }
   $155 = ($__ns$2>>>0)<($__ne>>>0);
   L50: do {
    if ($155) {
     $__nf$243 = $__ns$2;
     while(1) {
      $162 = HEAP8[$__nf$243>>0]|0;
      $163 = ($162<<24>>24)==(46);
      if ($163) {
       $__nf$243$lcssa = $__nf$243;
       break;
      }
      $173 = HEAP32[$$pre$phiZ2D>>2]|0;
      $174 = ((($173)) + 44|0);
      $175 = HEAP32[$174>>2]|0;
      __THREW__ = 0;
      $176 = (invoke_iii($175|0,($0|0),($162|0))|0);
      $177 = __THREW__; __THREW__ = 0;
      $178 = $177&1;
      if ($178) {
       label = 4;
       break;
      }
      $179 = HEAP32[$__oe>>2]|0;
      $180 = ((($179)) + 4|0);
      HEAP32[$__oe>>2] = $180;
      HEAP32[$179>>2] = $176;
      $181 = ((($__nf$243)) + 1|0);
      $182 = ($181>>>0)<($__ne>>>0);
      if ($182) {
       $__nf$243 = $181;
      } else {
       $186 = $180;$__nf$3 = $181;
       break L50;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      break L4;
     }
     $164 = HEAP32[$1>>2]|0;
     $165 = ((($164)) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = (invoke_ii($166|0,($1|0))|0);
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     if ($169) {
      label = 8;
      break L4;
     }
     $170 = HEAP32[$__oe>>2]|0;
     $171 = ((($170)) + 4|0);
     HEAP32[$__oe>>2] = $171;
     HEAP32[$170>>2] = $167;
     $172 = ((($__nf$243$lcssa)) + 1|0);
     $186 = $171;$__nf$3 = $172;
    } else {
     $186 = $198;$__nf$3 = $__ns$2;
    }
   } while(0);
   $183 = HEAP32[$0>>2]|0;
   $184 = ((($183)) + 48|0);
   $185 = HEAP32[$184>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($185|0,($0|0),($__nf$3|0),($__ne|0),($186|0))|0);
   $187 = __THREW__; __THREW__ = 0;
   $188 = $187&1;
   if ($188) {
    label = 8;
   } else {
    $189 = $__nf$3;
    $190 = (($25) - ($189))|0;
    $191 = HEAP32[$__oe>>2]|0;
    $192 = (($191) + ($190<<2)|0);
    HEAP32[$__oe>>2] = $192;
    $193 = ($__np|0)==($__ne|0);
    $194 = $__np;
    $195 = $__nb;
    $196 = (($194) - ($195))|0;
    $197 = (($__ob) + ($196<<2)|0);
    $storemerge = $193 ? $192 : $197;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$110 = 0, $$139 = 0, $$byval_copy = 0, $$pre = 0, $$pre6 = 0, $$pre7 = 0, $$pre7$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 300|0;
 $__o = sp + 72|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,29750,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 L5: do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(649)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(654,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $26 = (invoke_iiiii(654,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      $__nc$1 = $26;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $29 = HEAP32[$__nb>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(655);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       break;
      }
      $$pre = HEAP32[$__nb>>2]|0;
      $33 = $$pre;
     } else {
      $33 = $29;
     }
     $34 = $33;
     $36 = $33;$62 = $34;$__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while(0);
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$110 = $24;$$139 = $25;
  } else {
   $$pre6 = HEAP32[$__nb>>2]|0;
   $36 = $$pre6;$62 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $35 = (($36) + ($__nc$2)|0);
  $37 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($36,$35,$__iob)|0);
  $38 = ($36|0)==($__nar|0);
  do {
   if ($38) {
    $50 = $__nar;$59 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $39 = $__nc$2 << 3;
    $40 = (_malloc($39)|0);
    $41 = ($40|0)==(0|0);
    if ($41) {
     __THREW__ = 0;
     invoke_v(655);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $72 = 0;
      label = 20;
      break;
     }
     $$pre7$pre = HEAP32[$__nb>>2]|0;
     $$pre7 = $$pre7$pre;
    } else {
     $$pre7 = $36;
    }
    $46 = $40;
    $50 = $$pre7;$59 = $46;$__ob$0 = $40;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $47 = (invoke_ii(558,($__iob|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $72 = $59;
     label = 20;
    } else {
     HEAP32[$0>>2] = $47;
     __THREW__ = 0;
     invoke_viiiiiii(660,($50|0),($37|0),($35|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
      $$0 = $65;$$02 = $66;$67 = $59;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
     $53 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $53;
     $54 = HEAP32[$__op>>2]|0;
     $55 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $56 = (invoke_iiiiiii(661,($$byval_copy|0),($__ob$0|0),($54|0),($55|0),($__iob|0),($__fl|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $72 = $59;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $56;
      $60 = ($59|0)==(0);
      if (!($60)) {
       $61 = $59;
       _free($61);
      }
      $63 = ($62|0)==(0);
      if (!($63)) {
       $64 = $62;
       _free($64);
      }
      STACKTOP = sp;return ($56|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $44 = ___cxa_find_matching_catch()|0;
   $45 = tempRet0;
   $$0 = $44;$$02 = $45;$67 = $72;
  }
  $68 = ($67|0)==(0);
  if (!($68)) {
   $69 = $67;
   _free($69);
  }
  $70 = ($62|0)==(0);
  if ($70) {
   $$110 = $$0;$$139 = $$02;
  } else {
   $71 = $62;
   _free($71);
   $$110 = $$0;$$139 = $$02;
  }
 }
 ___resumeException($$110|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 184|0;
 $__nar = sp + 164|0;
 $__o = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[29752>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[29752+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[29752+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[29752+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[29752+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[29752+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 $6 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(559,($0|0),(11856|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($21|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 1023]($7,$__nar,$4,$__o)|0);
  $13 = (($__o) + ($3<<2)|0);
  $14 = ($5|0)==($4|0);
  $15 = $__nar;
  $16 = $5;
  $17 = (($16) - ($15))|0;
  $18 = (($__o) + ($17<<2)|0);
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $20 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$__op$0,$13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i26 = 0, $$0$ph$be = 0, $$0$ph86 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa = 0, $$lcssa94 = 0, $$lcssa95 = 0, $$pre$i$i$i17 = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i21 = 0, $$pre$i2$i$i2139 = 0, $$pre$i2$i$i2140 = 0, $$pre$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i24 = 0, $isascii1$i5 = 0;
 var $or$cond84 = 0, $sext = 0, $tmp$i$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(559,($0|0),(11864|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 HEAP32[$__err>>2] = 0;
 $7 = ((($4)) + 8|0);
 $8 = ($__fmtb|0)==($__fmte|0);
 $9 = HEAP32[$__b>>2]|0;
 L4: do {
  if ($8) {
   $$pre$i$i$i8 = $9;
  } else {
   $$0$ph86 = $__fmtb;$10 = $9;
   L5: while(1) {
    $11 = ($10|0)==(0|0);
    $12 = $10;
    if ($11) {
     $23 = 0;$63 = $12;
    } else {
     $13 = ((($10)) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($10)) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$10>>2]|0;
      $19 = ((($18)) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (FUNCTION_TABLE_ii[$20 & 1023]($10)|0);
      $22 = ($21|0)==(-1);
      if ($22) {
       HEAP32[$__b>>2] = 0;
       $23 = 0;$63 = 0;
      } else {
       $23 = $10;$63 = $12;
      }
     } else {
      $23 = $10;$63 = $12;
     }
    }
    $24 = ($23|0)==(0|0);
    $25 = HEAP32[$__e>>2]|0;
    $26 = ($25|0)==(0|0);
    $27 = $25;
    do {
     if ($26) {
      $194 = $27;
      label = 12;
     } else {
      $28 = ((($25)) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ((($25)) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$25>>2]|0;
       $34 = ((($33)) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (FUNCTION_TABLE_ii[$35 & 1023]($25)|0);
       $37 = ($36|0)==(-1);
       if ($37) {
        HEAP32[$__e>>2] = 0;
        $194 = 0;
        label = 12;
        break;
       }
      }
      if ($24) {
       $195 = $25;$64 = $27;
      } else {
       $$lcssa = $23;
       label = 13;
       break L5;
      }
     }
    } while(0);
    if ((label|0) == 12) {
     label = 0;
     if ($24) {
      $$lcssa = $23;
      label = 13;
      break;
     } else {
      $195 = 0;$64 = $194;
     }
    }
    $40 = HEAP8[$$0$ph86>>0]|0;
    $41 = HEAP32[$4>>2]|0;
    $42 = ((($41)) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($4,$40,0)|0);
    $45 = ($44<<24>>24)==(37);
    L21: do {
     if ($45) {
      $46 = ((($$0$ph86)) + 1|0);
      $47 = ($46|0)==($__fmte|0);
      if ($47) {
       $$lcssa94 = $23;
       label = 17;
       break L5;
      }
      $48 = HEAP8[$46>>0]|0;
      $49 = HEAP32[$4>>2]|0;
      $50 = ((($49)) + 36|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($4,$48,0)|0);
      switch ($52<<24>>24) {
      case 48: case 69:  {
       $53 = ((($$0$ph86)) + 2|0);
       $54 = ($53|0)==($__fmte|0);
       if ($54) {
        $$lcssa95 = $23;
        label = 20;
        break L5;
       }
       $55 = HEAP8[$53>>0]|0;
       $56 = HEAP32[$4>>2]|0;
       $57 = ((($56)) + 36|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = (FUNCTION_TABLE_iiii[$58 & 1023]($4,$55,0)|0);
       $67 = $46;$__cmd$0 = $59;$__opt$0 = $52;
       break;
      }
      default: {
       $67 = $$0$ph86;$__cmd$0 = $52;$__opt$0 = 0;
      }
      }
      $60 = HEAP32[$this>>2]|0;
      $61 = ((($60)) + 36|0);
      $62 = HEAP32[$61>>2]|0;
      HEAP32[$1>>2] = $63;
      HEAP32[$2>>2] = $64;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
      $65 = (FUNCTION_TABLE_iiiiiiiii[$62 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
      HEAP32[$__b>>2] = $65;
      $66 = ((($67)) + 2|0);
      $$0$ph$be = $66;
     } else {
      $71 = HEAP8[$$0$ph86>>0]|0;
      $isascii1$i = ($71<<24>>24)>(-1);
      if ($isascii1$i) {
       $72 = $71 << 24 >> 24;
       $73 = HEAP32[$7>>2]|0;
       $74 = (($73) + ($72<<1)|0);
       $75 = HEAP16[$74>>1]|0;
       $76 = $75 & 8192;
       $77 = ($76<<16>>16)==(0);
       if (!($77)) {
        $$0$pn = $$0$ph86;
        while(1) {
         $$2 = ((($$0$pn)) + 1|0);
         $78 = ($$2|0)==($__fmte|0);
         if ($78) {
          $$2$lcssa = $__fmte;
          break;
         }
         $79 = HEAP8[$$2>>0]|0;
         $isascii1$i5 = ($79<<24>>24)>(-1);
         if (!($isascii1$i5)) {
          $$2$lcssa = $$2;
          break;
         }
         $80 = $79 << 24 >> 24;
         $81 = (($73) + ($80<<1)|0);
         $82 = HEAP16[$81>>1]|0;
         $83 = $82 & 8192;
         $84 = ($83<<16>>16)==(0);
         if ($84) {
          $$2$lcssa = $$2;
          break;
         } else {
          $$0$pn = $$2;
         }
        }
        $$pre$i$i$i17 = $23;$$pre$i2$i$i21 = $195;$98 = $195;
        while(1) {
         $85 = ($$pre$i$i$i17|0)==(0|0);
         if ($85) {
          $96 = 0;
         } else {
          $86 = ((($$pre$i$i$i17)) + 12|0);
          $87 = HEAP32[$86>>2]|0;
          $88 = ((($$pre$i$i$i17)) + 16|0);
          $89 = HEAP32[$88>>2]|0;
          $90 = ($87|0)==($89|0);
          if ($90) {
           $91 = HEAP32[$$pre$i$i$i17>>2]|0;
           $92 = ((($91)) + 36|0);
           $93 = HEAP32[$92>>2]|0;
           $94 = (FUNCTION_TABLE_ii[$93 & 1023]($$pre$i$i$i17)|0);
           $95 = ($94|0)==(-1);
           if ($95) {
            HEAP32[$__b>>2] = 0;
            $96 = 0;
           } else {
            $96 = $$pre$i$i$i17;
           }
          } else {
           $96 = $$pre$i$i$i17;
          }
         }
         $97 = ($96|0)==(0|0);
         $99 = ($98|0)==(0|0);
         do {
          if ($99) {
           $$pre$i2$i$i2140 = $$pre$i2$i$i21;
           label = 39;
          } else {
           $100 = ((($98)) + 12|0);
           $101 = HEAP32[$100>>2]|0;
           $102 = ((($98)) + 16|0);
           $103 = HEAP32[$102>>2]|0;
           $104 = ($101|0)==($103|0);
           if (!($104)) {
            if ($97) {
             $$pre$i2$i$i2139 = $$pre$i2$i$i21;$196 = $98;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L21;
            }
           }
           $105 = HEAP32[$98>>2]|0;
           $106 = ((($105)) + 36|0);
           $107 = HEAP32[$106>>2]|0;
           $108 = (FUNCTION_TABLE_ii[$107 & 1023]($98)|0);
           $109 = ($108|0)==(-1);
           if ($109) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i2140 = 0;
            label = 39;
            break;
           } else {
            $110 = ($$pre$i2$i$i21|0)==(0|0);
            $tmp$i$i23 = $97 ^ $110;
            if ($tmp$i$i23) {
             $$pre$i2$i$i2139 = $$pre$i2$i$i21;$196 = $$pre$i2$i$i21;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L21;
            }
           }
          }
         } while(0);
         if ((label|0) == 39) {
          label = 0;
          if ($97) {
           $$0$ph$be = $$2$lcssa;
           break L21;
          } else {
           $$pre$i2$i$i2139 = $$pre$i2$i$i2140;$196 = 0;
          }
         }
         $111 = ((($96)) + 12|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = ((($96)) + 16|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = ($112|0)==($114|0);
         if ($115) {
          $116 = HEAP32[$96>>2]|0;
          $117 = ((($116)) + 36|0);
          $118 = HEAP32[$117>>2]|0;
          $119 = (FUNCTION_TABLE_ii[$118 & 1023]($96)|0);
          $$0$i$i = $119;
         } else {
          $120 = HEAP8[$112>>0]|0;
          $121 = $120&255;
          $$0$i$i = $121;
         }
         $122 = $$0$i$i&255;
         $isascii1$i24 = ($122<<24>>24)>(-1);
         if (!($isascii1$i24)) {
          $$0$ph$be = $$2$lcssa;
          break L21;
         }
         $sext = $$0$i$i << 24;
         $123 = $sext >> 24;
         $124 = HEAP32[$7>>2]|0;
         $125 = (($124) + ($123<<1)|0);
         $126 = HEAP16[$125>>1]|0;
         $127 = $126 & 8192;
         $128 = ($127<<16>>16)==(0);
         if ($128) {
          $$0$ph$be = $$2$lcssa;
          break L21;
         }
         $129 = HEAP32[$111>>2]|0;
         $130 = HEAP32[$113>>2]|0;
         $131 = ($129|0)==($130|0);
         if ($131) {
          $132 = HEAP32[$96>>2]|0;
          $133 = ((($132)) + 40|0);
          $134 = HEAP32[$133>>2]|0;
          (FUNCTION_TABLE_ii[$134 & 1023]($96)|0);
          $$pre$i$i$i17 = $96;$$pre$i2$i$i21 = $$pre$i2$i$i2139;$98 = $196;
          continue;
         } else {
          $135 = ((($129)) + 1|0);
          HEAP32[$111>>2] = $135;
          $$pre$i$i$i17 = $96;$$pre$i2$i$i21 = $$pre$i2$i$i2139;$98 = $196;
          continue;
         }
        }
       }
      }
      $136 = ((($23)) + 12|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($23)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($137|0)==($139|0);
      if ($140) {
       $141 = HEAP32[$23>>2]|0;
       $142 = ((($141)) + 36|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (FUNCTION_TABLE_ii[$143 & 1023]($23)|0);
       $$0$i$i26 = $144;
      } else {
       $145 = HEAP8[$137>>0]|0;
       $146 = $145&255;
       $$0$i$i26 = $146;
      }
      $147 = $$0$i$i26&255;
      $148 = HEAP32[$4>>2]|0;
      $149 = ((($148)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = (FUNCTION_TABLE_iii[$150 & 1023]($4,$147)|0);
      $152 = HEAP8[$$0$ph86>>0]|0;
      $153 = HEAP32[$4>>2]|0;
      $154 = ((($153)) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (FUNCTION_TABLE_iii[$155 & 1023]($4,$152)|0);
      $157 = ($151<<24>>24)==($156<<24>>24);
      if (!($157)) {
       label = 57;
       break L5;
      }
      $158 = HEAP32[$136>>2]|0;
      $159 = HEAP32[$138>>2]|0;
      $160 = ($158|0)==($159|0);
      if ($160) {
       $161 = HEAP32[$23>>2]|0;
       $162 = ((($161)) + 40|0);
       $163 = HEAP32[$162>>2]|0;
       (FUNCTION_TABLE_ii[$163 & 1023]($23)|0);
      } else {
       $164 = ((($158)) + 1|0);
       HEAP32[$136>>2] = $164;
      }
      $165 = ((($$0$ph86)) + 1|0);
      $$0$ph$be = $165;
     }
    } while(0);
    $$pre$pre = HEAP32[$__err>>2]|0;
    $68 = ($$0$ph$be|0)!=($__fmte|0);
    $69 = ($$pre$pre|0)==(0);
    $or$cond84 = $68 & $69;
    $70 = HEAP32[$__b>>2]|0;
    if ($or$cond84) {
     $$0$ph86 = $$0$ph$be;$10 = $70;
    } else {
     $$pre$i$i$i8 = $70;
     break L4;
    }
   }
   if ((label|0) == 13) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i8 = $$lcssa;
    break;
   }
   else if ((label|0) == 17) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i8 = $$lcssa94;
    break;
   }
   else if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i8 = $$lcssa95;
    break;
   }
   else if ((label|0) == 57) {
    HEAP32[$__err>>2] = 4;
    $166 = HEAP32[$__b>>2]|0;
    $$pre$i$i$i8 = $166;
    break;
   }
  }
 } while(0);
 $167 = ($$pre$i$i$i8|0)==(0|0);
 if ($167) {
  $178 = 0;
 } else {
  $168 = ((($$pre$i$i$i8)) + 12|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ((($$pre$i$i$i8)) + 16|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ($169|0)==($171|0);
  if ($172) {
   $173 = HEAP32[$$pre$i$i$i8>>2]|0;
   $174 = ((($173)) + 36|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (FUNCTION_TABLE_ii[$175 & 1023]($$pre$i$i$i8)|0);
   $177 = ($176|0)==(-1);
   if ($177) {
    HEAP32[$__b>>2] = 0;
    $178 = 0;
   } else {
    $178 = $$pre$i$i$i8;
   }
  } else {
   $178 = $$pre$i$i$i8;
  }
 }
 $179 = ($178|0)==(0|0);
 $180 = HEAP32[$__e>>2]|0;
 $181 = ($180|0)==(0|0);
 do {
  if ($181) {
   label = 67;
  } else {
   $182 = ((($180)) + 12|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = ((($180)) + 16|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = ($183|0)==($185|0);
   if ($186) {
    $187 = HEAP32[$180>>2]|0;
    $188 = ((($187)) + 36|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (FUNCTION_TABLE_ii[$189 & 1023]($180)|0);
    $191 = ($190|0)==(-1);
    if ($191) {
     HEAP32[$__e>>2] = 0;
     label = 67;
     break;
    }
   }
   if (!($179)) {
    label = 68;
   }
  }
 } while(0);
 if ((label|0) == 67) {
  if ($179) {
   label = 68;
  }
 }
 if ((label|0) == 68) {
  $192 = HEAP32[$__err>>2]|0;
  $193 = $192 | 2;
  HEAP32[$__err>>2] = $193;
 }
 STACKTOP = sp;return ($178|0);
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,29758,(29766))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 1|0);
 $15 = $11 ? $14 : $13;
 $16 = ((($6)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $9&255;
 $19 = $18 >>> 1;
 $20 = $11 ? $19 : $17;
 $21 = (($15) + ($20)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $22 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$15,$21)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(559,($0|0),(11864|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($4)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(559,($0|0),(11864|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($5)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(559,($0|0),(11864|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $22 = sp + 40|0;
 $23 = sp + 36|0;
 $24 = sp + 32|0;
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $28 = sp + 16|0;
 $29 = sp + 12|0;
 $30 = sp + 8|0;
 $31 = sp + 4|0;
 $32 = sp;
 HEAP32[$__err>>2] = 0;
 $33 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$1>>2] = $33;
 __THREW__ = 0;
 $34 = (invoke_iii(559,($1|0),(11864|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37|0) {
  case 65: case 97:  {
   $40 = ((($__tm)) + 24|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$40,$__b,$$byval_copy,$__err,$34);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $42 = ((($__tm)) + 16|0);
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $43;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$42,$__b,$$byval_copy1,$__err,$34);
   label = 28;
   break;
  }
  case 99:  {
   $44 = ((($this)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
   $49 = HEAP32[$__b>>2]|0;
   HEAP32[$4>>2] = $49;
   $50 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $50;
   $51 = HEAP8[$48>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   $54 = ((($48)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($48)) + 1|0);
   $57 = $53 ? $56 : $55;
   $58 = ((($48)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $51&255;
   $61 = $60 >>> 1;
   $62 = $53 ? $61 : $59;
   $63 = (($57) + ($62)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
   $64 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$57,$63)|0);
   HEAP32[$__b>>2] = $64;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $65 = ((($__tm)) + 12|0);
   $66 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $66;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$65,$__b,$$byval_copy4,$__err,$34);
   label = 28;
   break;
  }
  case 68:  {
   $67 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $67;
   $68 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $68;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;
   $69 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,29766,(29774))|0);
   HEAP32[$__b>>2] = $69;
   label = 28;
   break;
  }
  case 70:  {
   $70 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $70;
   $71 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $71;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$9>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$10>>2]|0;
   $72 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,29774,(29782))|0);
   HEAP32[$__b>>2] = $72;
   label = 28;
   break;
  }
  case 72:  {
   $73 = ((($__tm)) + 8|0);
   $74 = HEAP32[$__e>>2]|0;
   HEAP32[$11>>2] = $74;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$11>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$73,$__b,$$byval_copy9,$__err,$34);
   label = 28;
   break;
  }
  case 73:  {
   $75 = ((($__tm)) + 8|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$12>>2] = $76;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$75,$__b,$$byval_copy10,$__err,$34);
   label = 28;
   break;
  }
  case 106:  {
   $77 = ((($__tm)) + 28|0);
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $78;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$77,$__b,$$byval_copy11,$__err,$34);
   label = 28;
   break;
  }
  case 109:  {
   $79 = ((($__tm)) + 16|0);
   $80 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $80;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$14>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$79,$__b,$$byval_copy12,$__err,$34);
   label = 28;
   break;
  }
  case 77:  {
   $81 = ((($__tm)) + 4|0);
   $82 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $82;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$15>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$81,$__b,$$byval_copy13,$__err,$34);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $83 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $83;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$16>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy14,$__err,$34);
   label = 28;
   break;
  }
  case 112:  {
   $84 = ((($__tm)) + 8|0);
   $85 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $85;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$84,$__b,$$byval_copy15,$__err,$34);
   label = 28;
   break;
  }
  case 114:  {
   $86 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $86;
   $87 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $87;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$18>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$19>>2]|0;
   $88 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,29782,(29793))|0);
   HEAP32[$__b>>2] = $88;
   label = 28;
   break;
  }
  case 82:  {
   $89 = HEAP32[$__b>>2]|0;
   HEAP32[$20>>2] = $89;
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$21>>2] = $90;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$20>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$21>>2]|0;
   $91 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,29793,(29798))|0);
   HEAP32[$__b>>2] = $91;
   label = 28;
   break;
  }
  case 83:  {
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $92;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$$byval_copy20,$__err,$34);
   label = 28;
   break;
  }
  case 84:  {
   $93 = HEAP32[$__b>>2]|0;
   HEAP32[$23>>2] = $93;
   $94 = HEAP32[$__e>>2]|0;
   HEAP32[$24>>2] = $94;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$24>>2]|0;
   $95 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,29798,(29806))|0);
   HEAP32[$__b>>2] = $95;
   label = 28;
   break;
  }
  case 119:  {
   $96 = ((($__tm)) + 24|0);
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$25>>2] = $97;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$25>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$96,$__b,$$byval_copy23,$__err,$34);
   label = 28;
   break;
  }
  case 120:  {
   $98 = HEAP32[$this>>2]|0;
   $99 = ((($98)) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = HEAP32[$__b>>2]|0;
   HEAP32[$26>>2] = $101;
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$27>>2]|0;
   $103 = (FUNCTION_TABLE_iiiiiii[$100 & 1023]($this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm)|0);
   $$sroa$07$0 = $103;
   break;
  }
  case 88:  {
   $104 = ((($this)) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($105)) + 24|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (FUNCTION_TABLE_ii[$107 & 1023]($104)|0);
   $109 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $109;
   $110 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $110;
   $111 = HEAP8[$108>>0]|0;
   $112 = $111 & 1;
   $113 = ($112<<24>>24)==(0);
   $114 = ((($108)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((($108)) + 1|0);
   $117 = $113 ? $116 : $115;
   $118 = ((($108)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $111&255;
   $121 = $120 >>> 1;
   $122 = $113 ? $121 : $119;
   $123 = (($117) + ($122)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$28>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$29>>2]|0;
   $124 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$117,$123)|0);
   HEAP32[$__b>>2] = $124;
   label = 28;
   break;
  }
  case 121:  {
   $125 = ((($__tm)) + 20|0);
   $126 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $126;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$30>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$125,$__b,$$byval_copy28,$__err,$34);
   label = 28;
   break;
  }
  case 89:  {
   $127 = ((($__tm)) + 20|0);
   $128 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $128;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$127,$__b,$$byval_copy29,$__err,$34);
   label = 28;
   break;
  }
  case 37:  {
   $129 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $129;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy30,$__err,$34);
   label = 28;
   break;
  }
  default: {
   $130 = HEAP32[$__err>>2]|0;
   $131 = $130 | 4;
   HEAP32[$__err>>2] = $131;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $132 = HEAP32[$__b>>2]|0;
  $$sroa$07$0 = $132;
 }
 STACKTOP = sp;return ($$sroa$07$0|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__ct)) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $13 = 0;
   } else {
    $3 = ((($1)) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ((($1)) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = ((($8)) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $13 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $13 = $$pre$i$i$i;
      break;
     }
    } else {
     $13 = $1;
    }
   }
  } while(0);
  $14 = ($13|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = ((($15)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($15)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = ((($22)) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($14) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($27)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = ((($33)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($46)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = ((($52)) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
   continue;
  } else {
   $55 = ((($48)) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $68 = 0;
  } else {
   $58 = ((($56)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($56)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = ((($63)) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $68 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $68 = $$pre$i$i$i2;
     break;
    }
   } else {
    $68 = $56;
   }
  }
 } while(0);
 $69 = ($68|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = ((($$pre$i2$i$i6)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($$pre$i2$i$i6)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = ((($76)) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if (!($69)) {
    label = 33;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($69) {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $81 = HEAP32[$__err>>2]|0;
  $82 = $81 | 2;
  HEAP32[$__err>>2] = $82;
 }
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = ((($5)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = ((($5)) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = ((($5)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 do {
  if ($24) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = ((($5)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = ((($14)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($14)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = ((($21)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $$pre$i2$i$i611 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $41 = HEAP32[$__ct>>2]|0;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
   $45 = ($44<<24>>24)==(37);
   if (!($45)) {
    $46 = HEAP32[$__err>>2]|0;
    $47 = $46 | 4;
    HEAP32[$__err>>2] = $47;
    break;
   }
   $48 = HEAP32[$__b>>2]|0;
   $49 = ((($48)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($48)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)==($52|0);
   if ($53) {
    $55 = HEAP32[$48>>2]|0;
    $56 = ((($55)) + 40|0);
    $57 = HEAP32[$56>>2]|0;
    (FUNCTION_TABLE_ii[$57 & 1023]($48)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $58 = ($$pre|0)==(0|0);
    if ($58) {
     $70 = 0;
    } else {
     $60 = $$pre;
     label = 21;
    }
   } else {
    $54 = ((($50)) + 1|0);
    HEAP32[$49>>2] = $54;
    $60 = $48;
    label = 21;
   }
   do {
    if ((label|0) == 21) {
     $59 = ((($60)) + 12|0);
     $61 = HEAP32[$59>>2]|0;
     $62 = ((($60)) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($61|0)==($63|0);
     if ($64) {
      $65 = HEAP32[$60>>2]|0;
      $66 = ((($65)) + 36|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_ii[$67 & 1023]($60)|0);
      $69 = ($68|0)==(-1);
      if ($69) {
       HEAP32[$__b>>2] = 0;
       $70 = 0;
       break;
      } else {
       $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
       $70 = $$pre$i$i$i2;
       break;
      }
     } else {
      $70 = $60;
     }
    }
   } while(0);
   $71 = ($70|0)==(0|0);
   $72 = ($$pre$i2$i$i611|0)==(0|0);
   do {
    if ($72) {
     label = 30;
    } else {
     $73 = ((($$pre$i2$i$i611)) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ((($$pre$i2$i$i611)) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
      $79 = ((($78)) + 36|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611)|0);
      $82 = ($81|0)==(-1);
      if ($82) {
       HEAP32[$__e>>2] = 0;
       label = 30;
       break;
      }
     }
     if ($71) {
      break L16;
     }
    }
   } while(0);
   if ((label|0) == 30) {
    if (!($71)) {
     break;
    }
   }
   $83 = HEAP32[$__err>>2]|0;
   $84 = $83 | 2;
   HEAP32[$__err>>2] = $84;
  }
 } while(0);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i20 = 0, $$0$i$i$i$i5 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i11 = 0, $$0$i$i1$i$i26 = 0, $$0$i$i17 = 0, $$0$ph$be = 0, $$0$ph89 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$ph = 0, $$pre$i$i$i22 = 0;
 var $$pre$i$i$i7 = 0, $$pre$i3$i$i13 = 0, $$pre$i3$i$i1344 = 0, $$pre$i3$i$i1345 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $or$cond87 = 0, $phitmp$i4$i$i14 = 0;
 var $tmp$i$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(559,($0|0),(11856|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  ___resumeException($37|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 HEAP32[$__err>>2] = 0;
 $7 = ($__fmtb|0)==($__fmte|0);
 $8 = HEAP32[$__b>>2]|0;
 L4: do {
  if ($7) {
   $$pre$i$i$i22 = $8;
  } else {
   $$0$ph89 = $__fmtb;$9 = $8;
   L5: while(1) {
    $10 = ($9|0)==(0|0);
    $11 = $9;
    if ($10) {
     $130 = 0;$187 = 1;$62 = $11;
    } else {
     $12 = ((($9)) + 12|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($9)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($13|0)==($15|0);
     if ($16) {
      $17 = HEAP32[$9>>2]|0;
      $18 = ((($17)) + 36|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (FUNCTION_TABLE_ii[$19 & 1023]($9)|0);
      $$0$i$i$i$i = $20;
     } else {
      $21 = HEAP32[$13>>2]|0;
      $$0$i$i$i$i = $21;
     }
     $22 = ($$0$i$i$i$i|0)==(-1);
     if ($22) {
      HEAP32[$__b>>2] = 0;
      $130 = 0;$187 = 1;$62 = 0;
     } else {
      $130 = $9;$187 = 0;$62 = $11;
     }
    }
    $23 = HEAP32[$__e>>2]|0;
    $24 = ($23|0)==(0|0);
    $25 = $23;
    do {
     if ($24) {
      $$ph = $25;
      label = 15;
     } else {
      $26 = ((($23)) + 12|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ((($23)) + 16|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($27|0)==($29|0);
      if ($30) {
       $31 = HEAP32[$23>>2]|0;
       $32 = ((($31)) + 36|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = (FUNCTION_TABLE_ii[$33 & 1023]($23)|0);
       $$0$i$i1$i$i = $34;
      } else {
       $35 = HEAP32[$27>>2]|0;
       $$0$i$i1$i$i = $35;
      }
      $36 = ($$0$i$i1$i$i|0)==(-1);
      if ($36) {
       HEAP32[$__e>>2] = 0;
       $$ph = 0;
       label = 15;
       break;
      } else {
       if ($187) {
        $188 = $23;$63 = $25;
        break;
       } else {
        $$lcssa = $130;
        label = 17;
        break L5;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($187) {
      $$lcssa = $130;
      label = 17;
      break;
     } else {
      $188 = 0;$63 = $$ph;
     }
    }
    $39 = HEAP32[$$0$ph89>>2]|0;
    $40 = HEAP32[$4>>2]|0;
    $41 = ((($40)) + 52|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (FUNCTION_TABLE_iiii[$42 & 1023]($4,$39,0)|0);
    $44 = ($43<<24>>24)==(37);
    L27: do {
     if ($44) {
      $45 = ((($$0$ph89)) + 4|0);
      $46 = ($45|0)==($__fmte|0);
      if ($46) {
       $$lcssa97 = $130;
       label = 21;
       break L5;
      }
      $47 = HEAP32[$45>>2]|0;
      $48 = HEAP32[$4>>2]|0;
      $49 = ((($48)) + 52|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (FUNCTION_TABLE_iiii[$50 & 1023]($4,$47,0)|0);
      switch ($51<<24>>24) {
      case 48: case 69:  {
       $52 = ((($$0$ph89)) + 8|0);
       $53 = ($52|0)==($__fmte|0);
       if ($53) {
        $$lcssa98 = $130;
        label = 24;
        break L5;
       }
       $54 = HEAP32[$52>>2]|0;
       $55 = HEAP32[$4>>2]|0;
       $56 = ((($55)) + 52|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (FUNCTION_TABLE_iiii[$57 & 1023]($4,$54,0)|0);
       $66 = $45;$__cmd$0 = $58;$__opt$0 = $51;
       break;
      }
      default: {
       $66 = $$0$ph89;$__cmd$0 = $51;$__opt$0 = 0;
      }
      }
      $59 = HEAP32[$this>>2]|0;
      $60 = ((($59)) + 36|0);
      $61 = HEAP32[$60>>2]|0;
      HEAP32[$1>>2] = $62;
      HEAP32[$2>>2] = $63;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
      $64 = (FUNCTION_TABLE_iiiiiiiii[$61 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
      HEAP32[$__b>>2] = $64;
      $65 = ((($66)) + 8|0);
      $$0$ph$be = $65;
     } else {
      $70 = HEAP32[$$0$ph89>>2]|0;
      $71 = HEAP32[$4>>2]|0;
      $72 = ((($71)) + 12|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (FUNCTION_TABLE_iiii[$73 & 1023]($4,8192,$70)|0);
      if ($74) {
       $$0$pn = $$0$ph89;
      } else {
       $129 = ((($130)) + 12|0);
       $131 = HEAP32[$129>>2]|0;
       $132 = ((($130)) + 16|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($131|0)==($133|0);
       if ($134) {
        $135 = HEAP32[$130>>2]|0;
        $136 = ((($135)) + 36|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = (FUNCTION_TABLE_ii[$137 & 1023]($130)|0);
        $$0$i$i17 = $138;
       } else {
        $139 = HEAP32[$131>>2]|0;
        $$0$i$i17 = $139;
       }
       $140 = HEAP32[$4>>2]|0;
       $141 = ((($140)) + 28|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = (FUNCTION_TABLE_iii[$142 & 1023]($4,$$0$i$i17)|0);
       $144 = HEAP32[$$0$ph89>>2]|0;
       $145 = HEAP32[$4>>2]|0;
       $146 = ((($145)) + 28|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = (FUNCTION_TABLE_iii[$147 & 1023]($4,$144)|0);
       $149 = ($143|0)==($148|0);
       if (!($149)) {
        label = 61;
        break L5;
       }
       $150 = HEAP32[$129>>2]|0;
       $151 = HEAP32[$132>>2]|0;
       $152 = ($150|0)==($151|0);
       if ($152) {
        $153 = HEAP32[$130>>2]|0;
        $154 = ((($153)) + 40|0);
        $155 = HEAP32[$154>>2]|0;
        (FUNCTION_TABLE_ii[$155 & 1023]($130)|0);
       } else {
        $156 = ((($150)) + 4|0);
        HEAP32[$129>>2] = $156;
       }
       $157 = ((($$0$ph89)) + 4|0);
       $$0$ph$be = $157;
       break;
      }
      while(1) {
       $$2 = ((($$0$pn)) + 4|0);
       $75 = ($$2|0)==($__fmte|0);
       if ($75) {
        $$2$lcssa = $__fmte;
        break;
       }
       $76 = HEAP32[$$2>>2]|0;
       $77 = HEAP32[$4>>2]|0;
       $78 = ((($77)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = (FUNCTION_TABLE_iiii[$79 & 1023]($4,8192,$76)|0);
       if ($80) {
        $$0$pn = $$2;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i7 = $130;$$pre$i3$i$i13 = $188;$93 = $188;
      while(1) {
       $81 = ($$pre$i$i$i7|0)==(0|0);
       if ($81) {
        $106 = 1;$108 = 0;
       } else {
        $82 = ((($$pre$i$i$i7)) + 12|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ((($$pre$i$i$i7)) + 16|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = ($83|0)==($85|0);
        if ($86) {
         $87 = HEAP32[$$pre$i$i$i7>>2]|0;
         $88 = ((($87)) + 36|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = (FUNCTION_TABLE_ii[$89 & 1023]($$pre$i$i$i7)|0);
         $$0$i$i$i$i5 = $90;
        } else {
         $91 = HEAP32[$83>>2]|0;
         $$0$i$i$i$i5 = $91;
        }
        $92 = ($$0$i$i$i$i5|0)==(-1);
        if ($92) {
         HEAP32[$__b>>2] = 0;
         $106 = 1;$108 = 0;
        } else {
         $106 = 0;$108 = $$pre$i$i$i7;
        }
       }
       $94 = ($93|0)==(0|0);
       do {
        if ($94) {
         $$pre$i3$i$i1345 = $$pre$i3$i$i13;
         label = 44;
        } else {
         $95 = ((($93)) + 12|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ((($93)) + 16|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = ($96|0)==($98|0);
         if ($99) {
          $100 = HEAP32[$93>>2]|0;
          $101 = ((($100)) + 36|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = (FUNCTION_TABLE_ii[$102 & 1023]($93)|0);
          $$0$i$i1$i$i11 = $103;
         } else {
          $104 = HEAP32[$96>>2]|0;
          $$0$i$i1$i$i11 = $104;
         }
         $105 = ($$0$i$i1$i$i11|0)==(-1);
         if ($105) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i1345 = 0;
          label = 44;
          break;
         } else {
          $phitmp$i4$i$i14 = ($$pre$i3$i$i13|0)==(0|0);
          $tmp$i$i16 = $106 ^ $phitmp$i4$i$i14;
          if ($tmp$i$i16) {
           $$pre$i3$i$i1344 = $$pre$i3$i$i13;$189 = $$pre$i3$i$i13;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L27;
          }
         }
        }
       } while(0);
       if ((label|0) == 44) {
        label = 0;
        if ($106) {
         $$0$ph$be = $$2$lcssa;
         break L27;
        } else {
         $$pre$i3$i$i1344 = $$pre$i3$i$i1345;$189 = 0;
        }
       }
       $107 = ((($108)) + 12|0);
       $109 = HEAP32[$107>>2]|0;
       $110 = ((($108)) + 16|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($109|0)==($111|0);
       if ($112) {
        $113 = HEAP32[$108>>2]|0;
        $114 = ((($113)) + 36|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = (FUNCTION_TABLE_ii[$115 & 1023]($108)|0);
        $$0$i$i = $116;
       } else {
        $117 = HEAP32[$109>>2]|0;
        $$0$i$i = $117;
       }
       $118 = HEAP32[$4>>2]|0;
       $119 = ((($118)) + 12|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = (FUNCTION_TABLE_iiii[$120 & 1023]($4,8192,$$0$i$i)|0);
       if (!($121)) {
        $$0$ph$be = $$2$lcssa;
        break L27;
       }
       $122 = HEAP32[$107>>2]|0;
       $123 = HEAP32[$110>>2]|0;
       $124 = ($122|0)==($123|0);
       if ($124) {
        $125 = HEAP32[$108>>2]|0;
        $126 = ((($125)) + 40|0);
        $127 = HEAP32[$126>>2]|0;
        (FUNCTION_TABLE_ii[$127 & 1023]($108)|0);
        $$pre$i$i$i7 = $108;$$pre$i3$i$i13 = $$pre$i3$i$i1344;$93 = $189;
        continue;
       } else {
        $128 = ((($122)) + 4|0);
        HEAP32[$107>>2] = $128;
        $$pre$i$i$i7 = $108;$$pre$i3$i$i13 = $$pre$i3$i$i1344;$93 = $189;
        continue;
       }
      }
     }
    } while(0);
    $$pre$pre = HEAP32[$__err>>2]|0;
    $67 = ($$0$ph$be|0)!=($__fmte|0);
    $68 = ($$pre$pre|0)==(0);
    $or$cond87 = $67 & $68;
    $69 = HEAP32[$__b>>2]|0;
    if ($or$cond87) {
     $$0$ph89 = $$0$ph$be;$9 = $69;
    } else {
     $$pre$i$i$i22 = $69;
     break L4;
    }
   }
   if ((label|0) == 17) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i22 = $$lcssa;
    break;
   }
   else if ((label|0) == 21) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i22 = $$lcssa97;
    break;
   }
   else if ((label|0) == 24) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i22 = $$lcssa98;
    break;
   }
   else if ((label|0) == 61) {
    HEAP32[$__err>>2] = 4;
    $158 = HEAP32[$__b>>2]|0;
    $$pre$i$i$i22 = $158;
    break;
   }
  }
 } while(0);
 $159 = ($$pre$i$i$i22|0)==(0|0);
 if ($159) {
  $186 = 0;$190 = 1;
 } else {
  $160 = ((($$pre$i$i$i22)) + 12|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ((($$pre$i$i$i22)) + 16|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ($161|0)==($163|0);
  if ($164) {
   $165 = HEAP32[$$pre$i$i$i22>>2]|0;
   $166 = ((($165)) + 36|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (FUNCTION_TABLE_ii[$167 & 1023]($$pre$i$i$i22)|0);
   $$0$i$i$i$i20 = $168;
  } else {
   $169 = HEAP32[$161>>2]|0;
   $$0$i$i$i$i20 = $169;
  }
  $170 = ($$0$i$i$i$i20|0)==(-1);
  if ($170) {
   HEAP32[$__b>>2] = 0;
   $186 = 0;$190 = 1;
  } else {
   $186 = $$pre$i$i$i22;$190 = 0;
  }
 }
 $171 = HEAP32[$__e>>2]|0;
 $172 = ($171|0)==(0|0);
 do {
  if ($172) {
   label = 74;
  } else {
   $173 = ((($171)) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ((($171)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($174|0)==($176|0);
   if ($177) {
    $178 = HEAP32[$171>>2]|0;
    $179 = ((($178)) + 36|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (FUNCTION_TABLE_ii[$180 & 1023]($171)|0);
    $$0$i$i1$i$i26 = $181;
   } else {
    $182 = HEAP32[$174>>2]|0;
    $$0$i$i1$i$i26 = $182;
   }
   $183 = ($$0$i$i1$i$i26|0)==(-1);
   if ($183) {
    HEAP32[$__e>>2] = 0;
    label = 74;
    break;
   } else {
    if ($190) {
     break;
    } else {
     label = 76;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 74) {
  if ($190) {
   label = 76;
  }
 }
 if ((label|0) == 76) {
  $184 = HEAP32[$__err>>2]|0;
  $185 = $184 | 2;
  HEAP32[$__err>>2] = $185;
 }
 STACKTOP = sp;return ($186|0);
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,12432,(12464))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 4|0);
 $15 = $11 ? $14 : $13;
 $16 = HEAP32[$14>>2]|0;
 $17 = $9&255;
 $18 = $17 >>> 1;
 $19 = $11 ? $18 : $16;
 $20 = (($15) + ($19<<2)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $21 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$15,$20)|0);
 STACKTOP = sp;return ($21|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(559,($0|0),(11856|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($4)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(559,($0|0),(11856|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($5)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(559,($0|0),(11856|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $22 = sp + 40|0;
 $23 = sp + 36|0;
 $24 = sp + 32|0;
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $28 = sp + 16|0;
 $29 = sp + 12|0;
 $30 = sp + 8|0;
 $31 = sp + 4|0;
 $32 = sp;
 HEAP32[$__err>>2] = 0;
 $33 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$1>>2] = $33;
 __THREW__ = 0;
 $34 = (invoke_iii(559,($1|0),(11856|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37|0) {
  case 65: case 97:  {
   $40 = ((($__tm)) + 24|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$40,$__b,$$byval_copy,$__err,$34);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $42 = ((($__tm)) + 16|0);
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $43;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$42,$__b,$$byval_copy1,$__err,$34);
   label = 28;
   break;
  }
  case 99:  {
   $44 = ((($this)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
   $49 = HEAP32[$__b>>2]|0;
   HEAP32[$4>>2] = $49;
   $50 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $50;
   $51 = HEAP8[$48>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   $54 = ((($48)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($48)) + 4|0);
   $57 = $53 ? $56 : $55;
   $58 = HEAP32[$56>>2]|0;
   $59 = $51&255;
   $60 = $59 >>> 1;
   $61 = $53 ? $60 : $58;
   $62 = (($57) + ($61<<2)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
   $63 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$57,$62)|0);
   HEAP32[$__b>>2] = $63;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $64 = ((($__tm)) + 12|0);
   $65 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $65;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$64,$__b,$$byval_copy4,$__err,$34);
   label = 28;
   break;
  }
  case 68:  {
   $66 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $66;
   $67 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $67;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;
   $68 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,12464,(12496))|0);
   HEAP32[$__b>>2] = $68;
   label = 28;
   break;
  }
  case 70:  {
   $69 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $69;
   $70 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $70;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$9>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$10>>2]|0;
   $71 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,12496,(12528))|0);
   HEAP32[$__b>>2] = $71;
   label = 28;
   break;
  }
  case 72:  {
   $72 = ((($__tm)) + 8|0);
   $73 = HEAP32[$__e>>2]|0;
   HEAP32[$11>>2] = $73;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$11>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$72,$__b,$$byval_copy9,$__err,$34);
   label = 28;
   break;
  }
  case 73:  {
   $74 = ((($__tm)) + 8|0);
   $75 = HEAP32[$__e>>2]|0;
   HEAP32[$12>>2] = $75;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$74,$__b,$$byval_copy10,$__err,$34);
   label = 28;
   break;
  }
  case 106:  {
   $76 = ((($__tm)) + 28|0);
   $77 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $77;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$76,$__b,$$byval_copy11,$__err,$34);
   label = 28;
   break;
  }
  case 109:  {
   $78 = ((($__tm)) + 16|0);
   $79 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $79;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$14>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$78,$__b,$$byval_copy12,$__err,$34);
   label = 28;
   break;
  }
  case 77:  {
   $80 = ((($__tm)) + 4|0);
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $81;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$15>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$80,$__b,$$byval_copy13,$__err,$34);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $82 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $82;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$16>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy14,$__err,$34);
   label = 28;
   break;
  }
  case 112:  {
   $83 = ((($__tm)) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $84;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$83,$__b,$$byval_copy15,$__err,$34);
   label = 28;
   break;
  }
  case 114:  {
   $85 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $85;
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $86;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$18>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$19>>2]|0;
   $87 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,12528,(12572))|0);
   HEAP32[$__b>>2] = $87;
   label = 28;
   break;
  }
  case 82:  {
   $88 = HEAP32[$__b>>2]|0;
   HEAP32[$20>>2] = $88;
   $89 = HEAP32[$__e>>2]|0;
   HEAP32[$21>>2] = $89;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$20>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$21>>2]|0;
   $90 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,12572,(12592))|0);
   HEAP32[$__b>>2] = $90;
   label = 28;
   break;
  }
  case 83:  {
   $91 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $91;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$$byval_copy20,$__err,$34);
   label = 28;
   break;
  }
  case 84:  {
   $92 = HEAP32[$__b>>2]|0;
   HEAP32[$23>>2] = $92;
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$24>>2] = $93;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$24>>2]|0;
   $94 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,12592,(12624))|0);
   HEAP32[$__b>>2] = $94;
   label = 28;
   break;
  }
  case 119:  {
   $95 = ((($__tm)) + 24|0);
   $96 = HEAP32[$__e>>2]|0;
   HEAP32[$25>>2] = $96;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$25>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$95,$__b,$$byval_copy23,$__err,$34);
   label = 28;
   break;
  }
  case 120:  {
   $97 = HEAP32[$this>>2]|0;
   $98 = ((($97)) + 20|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$__b>>2]|0;
   HEAP32[$26>>2] = $100;
   $101 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $101;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$27>>2]|0;
   $102 = (FUNCTION_TABLE_iiiiiii[$99 & 1023]($this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm)|0);
   $$sroa$07$0 = $102;
   break;
  }
  case 88:  {
   $103 = ((($this)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (FUNCTION_TABLE_ii[$106 & 1023]($103)|0);
   $108 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $108;
   $109 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $109;
   $110 = HEAP8[$107>>0]|0;
   $111 = $110 & 1;
   $112 = ($111<<24>>24)==(0);
   $113 = ((($107)) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ((($107)) + 4|0);
   $116 = $112 ? $115 : $114;
   $117 = HEAP32[$115>>2]|0;
   $118 = $110&255;
   $119 = $118 >>> 1;
   $120 = $112 ? $119 : $117;
   $121 = (($116) + ($120<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$28>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$29>>2]|0;
   $122 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$116,$121)|0);
   HEAP32[$__b>>2] = $122;
   label = 28;
   break;
  }
  case 121:  {
   $123 = ((($__tm)) + 20|0);
   $124 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $124;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$30>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$123,$__b,$$byval_copy28,$__err,$34);
   label = 28;
   break;
  }
  case 89:  {
   $125 = ((($__tm)) + 20|0);
   $126 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $126;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$125,$__b,$$byval_copy29,$__err,$34);
   label = 28;
   break;
  }
  case 37:  {
   $127 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $127;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy30,$__err,$34);
   label = 28;
   break;
  }
  default: {
   $128 = HEAP32[$__err>>2]|0;
   $129 = $128 | 4;
   HEAP32[$__err>>2] = $129;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $130 = HEAP32[$__b>>2]|0;
  $$sroa$07$0 = $130;
 }
 STACKTOP = sp;return ($$sroa$07$0|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = ((($0)) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ((($0)) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = ((($7)) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = ((($13)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($13)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = ((($20)) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($26)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = ((($32)) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($41)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = ((($47)) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
   continue;
  } else {
   $50 = ((($43)) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = ((($51)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($51)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = ((($58)) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = ((($$pre$i3$i$i9)) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($$pre$i3$i$i9)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = ((($70)) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   } else {
    if ($80) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if ($80) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $76 = HEAP32[$__err>>2]|0;
  $77 = $76 | 2;
  HEAP32[$__err>>2] = $77;
 }
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = ((($5)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = ((($5)) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = ((($5)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 do {
  if ($24) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = ((($5)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = ((($13)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = ((($39)) + 52|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
   $43 = ($42<<24>>24)==(37);
   if (!($43)) {
    $44 = HEAP32[$__err>>2]|0;
    $45 = $44 | 4;
    HEAP32[$__err>>2] = $45;
    break;
   }
   $46 = HEAP32[$__b>>2]|0;
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($46)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)==($50|0);
   if ($51) {
    $53 = HEAP32[$46>>2]|0;
    $54 = ((($53)) + 40|0);
    $55 = HEAP32[$54>>2]|0;
    (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $56 = ($$pre|0)==(0|0);
    if ($56) {
     $84 = 1;
    } else {
     $58 = $$pre;
     label = 25;
    }
   } else {
    $52 = ((($48)) + 4|0);
    HEAP32[$47>>2] = $52;
    $58 = $46;
    label = 25;
   }
   do {
    if ((label|0) == 25) {
     $57 = ((($58)) + 12|0);
     $59 = HEAP32[$57>>2]|0;
     $60 = ((($58)) + 16|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59|0)==($61|0);
     if ($62) {
      $63 = HEAP32[$58>>2]|0;
      $64 = ((($63)) + 36|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 1023]($58)|0);
      $$0$i$i$i$i1 = $66;
     } else {
      $67 = HEAP32[$59>>2]|0;
      $$0$i$i$i$i1 = $67;
     }
     $68 = ($$0$i$i$i$i1|0)==(-1);
     if ($68) {
      HEAP32[$__b>>2] = 0;
      $84 = 1;
      break;
     } else {
      $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
      $84 = $phitmp$i$i$i4;
      break;
     }
    }
   } while(0);
   $69 = ($$pre$i3$i$i915|0)==(0|0);
   do {
    if ($69) {
     label = 37;
    } else {
     $70 = ((($$pre$i3$i$i915)) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($$pre$i3$i$i915)) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
      $76 = ((($75)) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915)|0);
      $$0$i$i1$i$i7 = $78;
     } else {
      $79 = HEAP32[$71>>2]|0;
      $$0$i$i1$i$i7 = $79;
     }
     $80 = ($$0$i$i1$i$i7|0)==(-1);
     if ($80) {
      HEAP32[$__e>>2] = 0;
      label = 37;
      break;
     } else {
      if ($84) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 37) {
    if (!($84)) {
     break;
    }
   }
   $81 = HEAP32[$__err>>2]|0;
   $82 = $81 | 2;
   HEAP32[$__err>>2] = $82;
  }
 } while(0);
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(649)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = ($0|0)==($1|0);
   if (!($4)) {
    $5 = HEAP32[$this>>2]|0;
    __THREW__ = 0;
    invoke_vi(662,($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     break;
    }
   }
   return;
  }
 } while(0);
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i2 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = ((($this)) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = $5;
 $7 = ($__nar|0)==($4|0);
 if ($7) {
  $$lcssa = $6;
 } else {
  $$0$i$i2 = $__nar;$9 = $6;
  while(1) {
   $8 = HEAP8[$$0$i$i2>>0]|0;
   $10 = ($9|0)==(0|0);
   do {
    if ($10) {
     $25 = 0;
    } else {
     $11 = ((($9)) + 24|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($9)) + 28|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($12|0)==($14|0);
     if ($15) {
      $17 = HEAP32[$9>>2]|0;
      $18 = ((($17)) + 52|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = $8&255;
      $21 = (FUNCTION_TABLE_iii[$19 & 1023]($9,$20)|0);
      $22 = ($21|0)==(-1);
      $$$i = $22 ? 0 : $9;
      $25 = $$$i;
      break;
     } else {
      $16 = ((($12)) + 1|0);
      HEAP32[$11>>2] = $16;
      HEAP8[$12>>0] = $8;
      $25 = $9;
      break;
     }
    }
   } while(0);
   $23 = ((($$0$i$i2)) + 1|0);
   $24 = ($23|0)==($4|0);
   if ($24) {
    $$lcssa = $25;
    break;
   } else {
    $$0$i$i2 = $23;$9 = $25;
   }
  }
 }
 STACKTOP = sp;return ($$lcssa|0);
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = ((($fmt)) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = ((($fmt)) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = ((($fmt)) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$0$i$i2 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = ((($__nar)) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = ((($this)) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = $5;
 $7 = ($__nar|0)==($4|0);
 if ($7) {
  $$lcssa = $6;
 } else {
  $$0$i$i2 = $__nar;$9 = $6;
  while(1) {
   $8 = HEAP32[$$0$i$i2>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $24 = 0;
   } else {
    $11 = ((($9)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($9)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12|0)==($14|0);
    if ($15) {
     $16 = HEAP32[$9>>2]|0;
     $17 = ((($16)) + 52|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (FUNCTION_TABLE_iii[$18 & 1023]($9,$8)|0);
     $$0$i$i$i$i = $19;
    } else {
     $20 = ((($12)) + 4|0);
     HEAP32[$11>>2] = $20;
     HEAP32[$12>>2] = $8;
     $$0$i$i$i$i = $8;
    }
    $21 = ($$0$i$i$i$i|0)==(-1);
    $$$i = $21 ? 0 : $9;
    $24 = $$$i;
   }
   $22 = ((($$0$i$i2)) + 4|0);
   $23 = ($22|0)==($4|0);
   if ($23) {
    $$lcssa = $24;
    break;
   } else {
    $$0$i$i2 = $22;$9 = $24;
   }
  }
 }
 STACKTOP = sp;return ($$lcssa|0);
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $5;
 $7 = $__wb;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = HEAP32[$this>>2]|0;
 $11 = (_uselocale($10)|0);
 __THREW__ = 0;
 $12 = (invoke_iiiii(663,($__wb|0),($__nb|0),($9|0),($mb|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $22 = ($11|0)==(0|0);
  if (!($22)) {
   __THREW__ = 0;
   (invoke_ii(664,($11|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $25 = ___cxa_find_matching_catch(0|0)|0;
    $26 = tempRet0;
    ___clang_call_terminate($25);
    // unreachable;
   }
  }
  ___resumeException($20|0);
  // unreachable;
 }
 $15 = ($11|0)==(0|0);
 if (!($15)) {
  __THREW__ = 0;
  (invoke_ii(664,($11|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
 }
 $27 = ($12|0)==(-1);
 if ($27) {
  __ZNSt3__121__throw_runtime_errorEPKc(29806);
  // unreachable;
 } else {
  $28 = (($__wb) + ($12<<2)|0);
  HEAP32[$__we>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$113 = 0, $$114 = 0, $$1211 = 0, $$1212 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2$lcssa = 0, $__nc$217 = 0, $__neg = 0, $__w$018 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 8|0;
 $__neg = sp + 138|0;
 $0 = sp + 4|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (665);
 $3 = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 $4 = (invoke_ii(558,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$113 = $33;$$1211 = $34;$119 = 665;$120 = $__wbuf;
  label = 45;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(559,($__loc|0),(11864|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $13 = (invoke_iiiiiiiiiiii(666,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 10;
    } else {
     L7: do {
      if ($13) {
       $16 = HEAP32[$7>>2]|0;
       $17 = ((($16)) + 32|0);
       $18 = HEAP32[$17>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($18|0,($7|0),(29827|0),((29837)|0),($__atoms|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn>>2]|0;
       $22 = HEAP32[$__wb>>2]|0;
       $23 = $21;
       $24 = $22;
       $25 = (($23) - ($24))|0;
       $26 = ($25|0)>(98);
       if ($26) {
        $27 = (($25) + 2)|0;
        $28 = (_malloc($27)|0);
        $29 = $28;
        $30 = ($28|0)==(0|0);
        if ($30) {
         __THREW__ = 0;
         invoke_v(655);
         $31 = __THREW__; __THREW__ = 0;
         $32 = $31&1;
         if ($32) {
          $39 = $29;
         } else {
          $73 = $29;$__nc$0 = 0;
          label = 13;
         }
        } else {
         $73 = $29;$__nc$0 = $28;
         label = 13;
        }
       } else {
        $73 = 0;$__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label|0) == 13) {
         $42 = HEAP8[$__neg>>0]|0;
         $43 = ($42<<24>>24)==(0);
         if ($43) {
          $__nc$1 = $__nc$0;
         } else {
          $44 = ((($__nc$0)) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $44;
         }
         $45 = ((($__atoms)) + 10|0);
         $46 = $__atoms;
         $47 = ($22>>>0)<($21>>>0);
         if ($47) {
          $48 = ((($__atoms)) + 1|0);
          $49 = ((($48)) + 1|0);
          $50 = ((($49)) + 1|0);
          $51 = ((($50)) + 1|0);
          $52 = ((($51)) + 1|0);
          $53 = ((($52)) + 1|0);
          $54 = ((($53)) + 1|0);
          $55 = ((($54)) + 1|0);
          $56 = ((($55)) + 1|0);
          $__nc$217 = $__nc$1;$__w$018 = $22;
          while(1) {
           $57 = HEAP8[$__w$018>>0]|0;
           $58 = HEAP8[$__atoms>>0]|0;
           $59 = ($58<<24>>24)==($57<<24>>24);
           do {
            if ($59) {
             $$0$lcssa$i = $__atoms;
            } else {
             $60 = HEAP8[$48>>0]|0;
             $61 = ($60<<24>>24)==($57<<24>>24);
             if ($61) {
              $$0$lcssa$i = $48;
             } else {
              $125 = HEAP8[$49>>0]|0;
              $126 = ($125<<24>>24)==($57<<24>>24);
              if ($126) {
               $$0$lcssa$i = $49;
              } else {
               $127 = HEAP8[$50>>0]|0;
               $128 = ($127<<24>>24)==($57<<24>>24);
               if ($128) {
                $$0$lcssa$i = $50;
               } else {
                $129 = HEAP8[$51>>0]|0;
                $130 = ($129<<24>>24)==($57<<24>>24);
                if ($130) {
                 $$0$lcssa$i = $51;
                } else {
                 $131 = HEAP8[$52>>0]|0;
                 $132 = ($131<<24>>24)==($57<<24>>24);
                 if ($132) {
                  $$0$lcssa$i = $52;
                  break;
                 }
                 $133 = HEAP8[$53>>0]|0;
                 $134 = ($133<<24>>24)==($57<<24>>24);
                 if ($134) {
                  $$0$lcssa$i = $53;
                  break;
                 }
                 $135 = HEAP8[$54>>0]|0;
                 $136 = ($135<<24>>24)==($57<<24>>24);
                 if ($136) {
                  $$0$lcssa$i = $54;
                  break;
                 }
                 $137 = HEAP8[$55>>0]|0;
                 $138 = ($137<<24>>24)==($57<<24>>24);
                 if ($138) {
                  $$0$lcssa$i = $55;
                  break;
                 }
                 $139 = HEAP8[$56>>0]|0;
                 $140 = ($139<<24>>24)==($57<<24>>24);
                 $$ = $140 ? $56 : $45;
                 $$0$lcssa$i = $$;
                }
               }
              }
             }
            }
           } while(0);
           $62 = $$0$lcssa$i;
           $63 = (($62) - ($46))|0;
           $64 = (29827 + ($63)|0);
           $65 = HEAP8[$64>>0]|0;
           HEAP8[$__nc$217>>0] = $65;
           $66 = ((($__w$018)) + 1|0);
           $67 = ((($__nc$217)) + 1|0);
           $$pre = HEAP32[$__wn>>2]|0;
           $68 = ($66>>>0)<($$pre>>>0);
           if ($68) {
            $__nc$217 = $67;$__w$018 = $66;
           } else {
            $__nc$2$lcssa = $67;
            break;
           }
          }
         } else {
          $__nc$2$lcssa = $__nc$1;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $69 = (_sscanf($__nbuf,29838,$vararg_buffer)|0);
         $70 = ($69|0)==(1);
         if (!($70)) {
          __THREW__ = 0;
          invoke_vi(667,(29842|0));
          $71 = __THREW__; __THREW__ = 0;
          $72 = $71&1;
          if ($72) {
           $39 = $73;
           break;
          }
         }
         $74 = ($73|0)==(0);
         if (!($74)) {
          $75 = $73;
          _free($75);
         }
         break L7;
        }
       } while(0);
       $37 = ___cxa_find_matching_catch()|0;
       $38 = tempRet0;
       $40 = ($39|0)==(0);
       if ($40) {
        $$0 = $37;$$01 = $38;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $41 = $39;
       _free($41);
       $$0 = $37;$$01 = $38;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while(0);
     $76 = HEAP32[$__b>>2]|0;
     $77 = ($76|0)==(0|0);
     do {
      if ($77) {
       $90 = 0;
      } else {
       $78 = ((($76)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ((($76)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($79|0)==($81|0);
       if ($82) {
        $83 = HEAP32[$76>>2]|0;
        $84 = ((($83)) + 36|0);
        $85 = HEAP32[$84>>2]|0;
        __THREW__ = 0;
        $86 = (invoke_ii($85|0,($76|0))|0);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if ($88) {
         label = 10;
         break L4;
        }
        $89 = ($86|0)==(-1);
        if ($89) {
         HEAP32[$__b>>2] = 0;
         $90 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $90 = $$pre$i$i$i;
         break;
        }
       } else {
        $90 = $76;
       }
      }
     } while(0);
     $91 = ($90|0)==(0|0);
     $92 = HEAP32[$__e>>2]|0;
     $93 = ($92|0)==(0|0);
     do {
      if ($93) {
       label = 37;
      } else {
       $94 = ((($92)) + 12|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = ((($92)) + 16|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = ($95|0)==($97|0);
       if ($98) {
        $99 = HEAP32[$92>>2]|0;
        $100 = ((($99)) + 36|0);
        $101 = HEAP32[$100>>2]|0;
        __THREW__ = 0;
        $102 = (invoke_ii($101|0,($92|0))|0);
        $103 = __THREW__; __THREW__ = 0;
        $104 = $103&1;
        if ($104) {
         label = 10;
         break L4;
        }
        $105 = ($102|0)==(-1);
        if ($105) {
         HEAP32[$__e>>2] = 0;
         label = 37;
         break;
        }
       }
       if (!($91)) {
        label = 38;
       }
      }
     } while(0);
     if ((label|0) == 37) {
      if ($91) {
       label = 38;
      }
     }
     if ((label|0) == 38) {
      $106 = HEAP32[$__err>>2]|0;
      $107 = $106 | 2;
      HEAP32[$__err>>2] = $107;
     }
     $108 = HEAP32[$__b>>2]|0;
     $109 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($109)|0);
     $110 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $111 = ($110|0)==(0|0);
     if (!($111)) {
      $112 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($112|0,($110|0));
      $113 = __THREW__; __THREW__ = 0;
      $114 = $113&1;
      if ($114) {
       $115 = ___cxa_find_matching_catch(0|0)|0;
       $116 = tempRet0;
       ___clang_call_terminate($115);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($108|0);
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $35 = ___cxa_find_matching_catch()|0;
   $36 = tempRet0;
   $$0 = $35;$$01 = $36;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $117 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($117)|0);
  $$pre7 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2] = 0;
  $118 = ($$pre7|0)==(0|0);
  if ($118) {
   $$114 = $$0;$$1212 = $$01;
  } else {
   $$pre15 = HEAP32[$2>>2]|0;
   $$113 = $$0;$$1211 = $$01;$119 = $$pre15;$120 = $$pre7;
   label = 45;
  }
 }
 if ((label|0) == 45) {
  __THREW__ = 0;
  invoke_vi($119|0,($120|0));
  $121 = __THREW__; __THREW__ = 0;
  $122 = $121&1;
  if ($122) {
   $123 = ___cxa_find_matching_catch(0|0)|0;
   $124 = tempRet0;
   ___clang_call_terminate($123);
   // unreachable;
  } else {
   $$114 = $$113;$$1212 = $$1211;
  }
 }
 ___resumeException($$114|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i114 = 0, $$0$i$i121 = 0, $$0$i$i130 = 0, $$0$i$i140 = 0, $$0$i$i157 = 0, $$0$i$i42 = 0, $$0$i$i45 = 0, $$0$i$i58 = 0, $$0$i$i65 = 0, $$0$i$i68 = 0, $$0$i$i75 = 0, $$0$i$i94 = 0, $$0$i$i97 = 0, $$in340 = 0, $$lcssa = 0, $$lcssa243 = 0, $$lcssa313 = 0, $$lcssa371 = 0;
 var $$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert274 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i104 = 0, $$pre$i$i$i144 = 0, $$pre$i$i$i161 = 0, $$pre$i$i$i32 = 0, $$pre$i$i$i48 = 0, $$pre$i$i$i80 = 0, $$pre$i2$i$i108 = 0, $$pre$i2$i$i148 = 0, $$pre$i2$i$i148256 = 0, $$pre$i2$i$i148258 = 0, $$pre$i2$i$i165268 = 0, $$pre$i2$i$i165269 = 0, $$pre$i2$i$i165345 = 0, $$pre$i2$i$i52 = 0, $$pre$i2$i$i52278 = 0;
 var $$pre$i2$i$i52280 = 0, $$pre$i2$i$i84264$ph = 0, $$pre$i2$i$i84264283 = 0, $$pre$i2$i$i84336 = 0, $$pre261 = 0, $$pre263 = 0, $$pre266 = 0, $$pre267 = 0, $$pre271 = 0, $$pre272 = 0, $$pre273 = 0, $$pre275 = 0, $$pre276 = 0, $$pre277 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa372 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0353 = 0, $__pat = 0, $__psn = 0;
 var $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0355 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $isascii1$i = 0, $isascii1$i138 = 0, $isascii1$i171 = 0, $isascii1$i61 = 0, $isascii1$i73 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, $sext = 0, $sext210 = 0, $sext211 = 0, $sext212 = 0, $switch = 0, $tmp$i$i150 = 0, $tmp$i$i167 = 0, $tmp$i$i54 = 0, $tmp$i$i86 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 80|0;
 $__gn = sp + 72|0;
 $__ge = sp + 68|0;
 $__pat = sp + 496|0;
 $__dp = sp + 493|0;
 $__ts = sp + 492|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb>>2] = $1;
 $2 = ((($__gb)) + 4|0);
 HEAP32[$2>>2] = (665);
 HEAP32[$__gn>>2] = $__gbuf;
 $3 = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $3;
 HEAP32[$__grp>>2] = 0;
 $4 = ((($__grp)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($__grp)) + 8|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$__sym>>2] = 0;
 $6 = ((($__sym)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($__sym)) + 8|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$__psn>>2] = 0;
 $8 = ((($__psn)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($__psn)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$__nsn>>2] = 0;
 $10 = ((($__nsn)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($__nsn)) + 8|0);
 HEAP32[$11>>2] = 0;
 HEAP32[$__spaces>>2] = 0;
 $12 = ((($__spaces)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($__spaces)) + 8|0);
 HEAP32[$13>>2] = 0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(668,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L1: do {
  if ($15) {
   $80 = ___cxa_find_matching_catch()|0;
   $81 = tempRet0;
   $lpad$phi$index = $80;$lpad$phi$index7 = $81;
  } else {
   $16 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $16;
   $17 = ((($__ct)) + 8|0);
   $18 = ((($__psn)) + 4|0);
   $19 = ((($__nsn)) + 4|0);
   $20 = ((($__nsn)) + 8|0);
   $21 = ((($__nsn)) + 1|0);
   $22 = ((($__psn)) + 8|0);
   $23 = ((($__psn)) + 1|0);
   $24 = $__flags & 512;
   $25 = ($24|0)!=(0);
   $26 = ((($__sym)) + 8|0);
   $27 = ((($__sym)) + 1|0);
   $28 = ((($__sym)) + 4|0);
   $29 = ((($__spaces)) + 4|0);
   $30 = ((($__spaces)) + 8|0);
   $31 = ((($__spaces)) + 1|0);
   $32 = ((($__pat)) + 3|0);
   $33 = ((($__grp)) + 4|0);
   $876 = $__gbuf;$__p$0353 = 0;$__trailing_sign$0355 = 0;
   L4: while(1) {
    $34 = HEAP32[$__b>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      $48 = 0;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 24;
        break L4;
       }
       $47 = ($44|0)==(-1);
       if ($47) {
        HEAP32[$__b>>2] = 0;
        $48 = 0;
        break;
       } else {
        $$pre$i$i$i32 = HEAP32[$__b>>2]|0;
        $48 = $$pre$i$i$i32;
        break;
       }
      } else {
       $48 = $34;
      }
     }
    } while(0);
    $49 = ($48|0)==(0|0);
    $50 = HEAP32[$__e>>2]|0;
    $51 = ($50|0)==(0|0);
    do {
     if ($51) {
      label = 15;
     } else {
      $52 = ((($50)) + 12|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ((($50)) + 16|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($53|0)==($55|0);
      if (!($56)) {
       if ($49) {
        $877 = $50;
        break;
       } else {
        $$lcssa313 = $876;$__trailing_sign$0$lcssa = $__trailing_sign$0355;
        label = 235;
        break L4;
       }
      }
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 24;
       break L4;
      }
      $63 = ($60|0)==(-1);
      if ($63) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       if ($49) {
        $877 = $50;
        break;
       } else {
        $$lcssa313 = $876;$__trailing_sign$0$lcssa = $__trailing_sign$0355;
        label = 235;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($49) {
      $$lcssa313 = $876;$__trailing_sign$0$lcssa = $__trailing_sign$0355;
      label = 235;
      break;
     } else {
      $877 = 0;
     }
    }
    $64 = (($__pat) + ($__p$0353)|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    L26: do {
     switch ($66|0) {
     case 1:  {
      $cond = ($__p$0353|0)==(3);
      if ($cond) {
       $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
      } else {
       $89 = HEAP32[$__b>>2]|0;
       $90 = ((($89)) + 12|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = ((($89)) + 16|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($91|0)==($93|0);
       if ($94) {
        $95 = HEAP32[$89>>2]|0;
        $96 = ((($95)) + 36|0);
        $97 = HEAP32[$96>>2]|0;
        __THREW__ = 0;
        $98 = (invoke_ii($97|0,($89|0))|0);
        $99 = __THREW__; __THREW__ = 0;
        $100 = $99&1;
        if ($100) {
         label = 24;
         break L4;
        } else {
         $$0$i$i42 = $98;
        }
       } else {
        $101 = HEAP8[$91>>0]|0;
        $102 = $101&255;
        $$0$i$i42 = $102;
       }
       $103 = $$0$i$i42&255;
       $isascii1$i = ($103<<24>>24)>(-1);
       if (!($isascii1$i)) {
        label = 40;
        break L4;
       }
       $sext212 = $$0$i$i42 << 24;
       $104 = $sext212 >> 24;
       $105 = HEAP32[$17>>2]|0;
       $106 = (($105) + ($104<<1)|0);
       $107 = HEAP16[$106>>1]|0;
       $108 = $107 & 8192;
       $109 = ($108<<16>>16)==(0);
       if ($109) {
        label = 40;
        break L4;
       }
       $110 = HEAP32[$__b>>2]|0;
       $111 = ((($110)) + 12|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = ((($110)) + 16|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = ($112|0)==($114|0);
       if ($115) {
        $116 = HEAP32[$110>>2]|0;
        $117 = ((($116)) + 40|0);
        $118 = HEAP32[$117>>2]|0;
        __THREW__ = 0;
        $119 = (invoke_ii($118|0,($110|0))|0);
        $120 = __THREW__; __THREW__ = 0;
        $121 = $120&1;
        if ($121) {
         label = 24;
         break L4;
        } else {
         $$0$i$i45 = $119;
        }
       } else {
        $122 = ((($112)) + 1|0);
        HEAP32[$111>>2] = $122;
        $123 = HEAP8[$112>>0]|0;
        $124 = $123&255;
        $$0$i$i45 = $124;
       }
       $125 = $$0$i$i45&255;
       __THREW__ = 0;
       invoke_vii(555,($__spaces|0),($125|0));
       $126 = __THREW__; __THREW__ = 0;
       $127 = $126&1;
       if ($127) {
        label = 24;
        break L4;
       } else {
        $$pre$i2$i$i52 = $877;$147 = $877;
        label = 42;
       }
      }
      break;
     }
     case 0:  {
      $130 = ($__p$0353|0)==(3);
      if ($130) {
       $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
      } else {
       $$pre$i2$i$i52 = $877;$147 = $877;
       label = 42;
      }
      break;
     }
     case 3:  {
      $201 = HEAP8[$__psn>>0]|0;
      $202 = $201 & 1;
      $203 = ($202<<24>>24)==(0);
      $204 = HEAP32[$18>>2]|0;
      $205 = $201&255;
      $206 = $205 >>> 1;
      $207 = $203 ? $206 : $204;
      $208 = HEAP8[$__nsn>>0]|0;
      $209 = $208 & 1;
      $210 = ($209<<24>>24)==(0);
      $211 = HEAP32[$19>>2]|0;
      $212 = $208&255;
      $213 = $212 >>> 1;
      $214 = $210 ? $213 : $211;
      $215 = (0 - ($214))|0;
      $216 = ($207|0)==($215|0);
      if ($216) {
       $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
      } else {
       $217 = ($207|0)==(0);
       if ($217) {
        $261 = HEAP32[$__b>>2]|0;
        $262 = ((($261)) + 12|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = ((($261)) + 16|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = ($263|0)==($265|0);
        if ($266) {
         $267 = HEAP32[$261>>2]|0;
         $268 = ((($267)) + 36|0);
         $269 = HEAP32[$268>>2]|0;
         __THREW__ = 0;
         $270 = (invoke_ii($269|0,($261|0))|0);
         $271 = __THREW__; __THREW__ = 0;
         $272 = $271&1;
         if ($272) {
          label = 24;
          break L4;
         }
         $$pre277 = HEAP8[$__nsn>>0]|0;
         $$0$i$i114 = $270;$277 = $$pre277;
        } else {
         $273 = HEAP8[$263>>0]|0;
         $274 = $273&255;
         $$0$i$i114 = $274;$277 = $208;
        }
        $275 = $$0$i$i114&255;
        $276 = $277 & 1;
        $278 = ($276<<24>>24)==(0);
        $279 = HEAP32[$20>>2]|0;
        $280 = $278 ? $21 : $279;
        $281 = HEAP8[$280>>0]|0;
        $282 = ($275<<24>>24)==($281<<24>>24);
        if (!($282)) {
         $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
         break L26;
        }
        $283 = HEAP32[$__b>>2]|0;
        $284 = ((($283)) + 12|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = ((($283)) + 16|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = ($285|0)==($287|0);
        if ($288) {
         $289 = HEAP32[$283>>2]|0;
         $290 = ((($289)) + 40|0);
         $291 = HEAP32[$290>>2]|0;
         __THREW__ = 0;
         (invoke_ii($291|0,($283|0))|0);
         $292 = __THREW__; __THREW__ = 0;
         $293 = $292&1;
         if ($293) {
          label = 24;
          break L4;
         }
        } else {
         $294 = ((($285)) + 1|0);
         HEAP32[$284>>2] = $294;
        }
        HEAP8[$__neg>>0] = 1;
        $295 = HEAP8[$__nsn>>0]|0;
        $296 = $295 & 1;
        $297 = ($296<<24>>24)==(0);
        $298 = HEAP32[$19>>2]|0;
        $299 = $295&255;
        $300 = $299 >>> 1;
        $301 = $297 ? $300 : $298;
        $302 = ($301>>>0)>(1);
        $__nsn$__trailing_sign$0 = $302 ? $__nsn : $__trailing_sign$0355;
        $878 = $876;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L26;
       }
       $218 = ($214|0)==(0);
       $219 = HEAP32[$__b>>2]|0;
       $220 = ((($219)) + 12|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = ((($219)) + 16|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = ($221|0)==($223|0);
       if ($218) {
        if ($224) {
         $225 = HEAP32[$219>>2]|0;
         $226 = ((($225)) + 36|0);
         $227 = HEAP32[$226>>2]|0;
         __THREW__ = 0;
         $228 = (invoke_ii($227|0,($219|0))|0);
         $229 = __THREW__; __THREW__ = 0;
         $230 = $229&1;
         if ($230) {
          label = 24;
          break L4;
         }
         $$pre276 = HEAP8[$__psn>>0]|0;
         $$0$i$i94 = $228;$235 = $$pre276;
        } else {
         $231 = HEAP8[$221>>0]|0;
         $232 = $231&255;
         $$0$i$i94 = $232;$235 = $201;
        }
        $233 = $$0$i$i94&255;
        $234 = $235 & 1;
        $236 = ($234<<24>>24)==(0);
        $237 = HEAP32[$22>>2]|0;
        $238 = $236 ? $23 : $237;
        $239 = HEAP8[$238>>0]|0;
        $240 = ($233<<24>>24)==($239<<24>>24);
        if (!($240)) {
         HEAP8[$__neg>>0] = 1;
         $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
         break L26;
        }
        $241 = HEAP32[$__b>>2]|0;
        $242 = ((($241)) + 12|0);
        $243 = HEAP32[$242>>2]|0;
        $244 = ((($241)) + 16|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = ($243|0)==($245|0);
        if ($246) {
         $247 = HEAP32[$241>>2]|0;
         $248 = ((($247)) + 40|0);
         $249 = HEAP32[$248>>2]|0;
         __THREW__ = 0;
         (invoke_ii($249|0,($241|0))|0);
         $250 = __THREW__; __THREW__ = 0;
         $251 = $250&1;
         if ($251) {
          label = 24;
          break L4;
         }
        } else {
         $252 = ((($243)) + 1|0);
         HEAP32[$242>>2] = $252;
        }
        $253 = HEAP8[$__psn>>0]|0;
        $254 = $253 & 1;
        $255 = ($254<<24>>24)==(0);
        $256 = HEAP32[$18>>2]|0;
        $257 = $253&255;
        $258 = $257 >>> 1;
        $259 = $255 ? $258 : $256;
        $260 = ($259>>>0)>(1);
        $__psn$__trailing_sign$0 = $260 ? $__psn : $__trailing_sign$0355;
        $878 = $876;$__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L26;
       }
       if ($224) {
        $303 = HEAP32[$219>>2]|0;
        $304 = ((($303)) + 36|0);
        $305 = HEAP32[$304>>2]|0;
        __THREW__ = 0;
        $306 = (invoke_ii($305|0,($219|0))|0);
        $307 = __THREW__; __THREW__ = 0;
        $308 = $307&1;
        if ($308) {
         label = 24;
         break L4;
        }
        $$pre271 = HEAP8[$__psn>>0]|0;
        $$pre272 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = ((($$pre272)) + 12|0);
        $$pre273 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert274 = ((($$pre272)) + 16|0);
        $$pre275 = HEAP32[$$phi$trans$insert274>>2]|0;
        $$0$i$i121 = $306;$313 = $$pre271;$320 = $$pre272;$321 = $$pre273;$323 = $$pre275;
       } else {
        $309 = HEAP8[$221>>0]|0;
        $310 = $309&255;
        $$0$i$i121 = $310;$313 = $201;$320 = $219;$321 = $221;$323 = $223;
       }
       $311 = $$0$i$i121&255;
       $312 = $313 & 1;
       $314 = ($312<<24>>24)==(0);
       $315 = HEAP32[$22>>2]|0;
       $316 = $314 ? $23 : $315;
       $317 = HEAP8[$316>>0]|0;
       $318 = ($311<<24>>24)==($317<<24>>24);
       $319 = ((($320)) + 12|0);
       $322 = ($321|0)==($323|0);
       if ($318) {
        if ($322) {
         $324 = HEAP32[$320>>2]|0;
         $325 = ((($324)) + 40|0);
         $326 = HEAP32[$325>>2]|0;
         __THREW__ = 0;
         (invoke_ii($326|0,($320|0))|0);
         $327 = __THREW__; __THREW__ = 0;
         $328 = $327&1;
         if ($328) {
          label = 24;
          break L4;
         }
        } else {
         $329 = ((($321)) + 1|0);
         HEAP32[$319>>2] = $329;
        }
        $330 = HEAP8[$__psn>>0]|0;
        $331 = $330 & 1;
        $332 = ($331<<24>>24)==(0);
        $333 = HEAP32[$18>>2]|0;
        $334 = $330&255;
        $335 = $334 >>> 1;
        $336 = $332 ? $335 : $333;
        $337 = ($336>>>0)>(1);
        $__psn$__trailing_sign$010 = $337 ? $__psn : $__trailing_sign$0355;
        $878 = $876;$__trailing_sign$1 = $__psn$__trailing_sign$010;
        break L26;
       }
       if ($322) {
        $338 = HEAP32[$320>>2]|0;
        $339 = ((($338)) + 36|0);
        $340 = HEAP32[$339>>2]|0;
        __THREW__ = 0;
        $341 = (invoke_ii($340|0,($320|0))|0);
        $342 = __THREW__; __THREW__ = 0;
        $343 = $342&1;
        if ($343) {
         label = 24;
         break L4;
        } else {
         $$0$i$i130 = $341;
        }
       } else {
        $344 = HEAP8[$321>>0]|0;
        $345 = $344&255;
        $$0$i$i130 = $345;
       }
       $346 = $$0$i$i130&255;
       $347 = HEAP8[$__nsn>>0]|0;
       $348 = $347 & 1;
       $349 = ($348<<24>>24)==(0);
       $350 = HEAP32[$20>>2]|0;
       $351 = $349 ? $21 : $350;
       $352 = HEAP8[$351>>0]|0;
       $353 = ($346<<24>>24)==($352<<24>>24);
       if (!($353)) {
        label = 104;
        break L4;
       }
       $354 = HEAP32[$__b>>2]|0;
       $355 = ((($354)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ((($354)) + 16|0);
       $358 = HEAP32[$357>>2]|0;
       $359 = ($356|0)==($358|0);
       if ($359) {
        $360 = HEAP32[$354>>2]|0;
        $361 = ((($360)) + 40|0);
        $362 = HEAP32[$361>>2]|0;
        __THREW__ = 0;
        (invoke_ii($362|0,($354|0))|0);
        $363 = __THREW__; __THREW__ = 0;
        $364 = $363&1;
        if ($364) {
         label = 24;
         break L4;
        }
       } else {
        $365 = ((($356)) + 1|0);
        HEAP32[$355>>2] = $365;
       }
       HEAP8[$__neg>>0] = 1;
       $366 = HEAP8[$__nsn>>0]|0;
       $367 = $366 & 1;
       $368 = ($367<<24>>24)==(0);
       $369 = HEAP32[$19>>2]|0;
       $370 = $366&255;
       $371 = $370 >>> 1;
       $372 = $368 ? $371 : $369;
       $373 = ($372>>>0)>(1);
       $__nsn$__trailing_sign$011 = $373 ? $__nsn : $__trailing_sign$0355;
       $878 = $876;$__trailing_sign$1 = $__nsn$__trailing_sign$011;
      }
      break;
     }
     case 2:  {
      $376 = ($__trailing_sign$0355|0)!=(0|0);
      $377 = ($__p$0353>>>0)<(2);
      $or$cond = $377 | $376;
      if (!($or$cond)) {
       $378 = ($__p$0353|0)==(2);
       $379 = HEAP8[$32>>0]|0;
       $380 = ($379<<24>>24)!=(0);
       $381 = $378 & $380;
       $brmerge = $25 | $381;
       if (!($brmerge)) {
        $878 = $876;$__trailing_sign$1 = 0;
        break L26;
       }
      }
      $382 = HEAP8[$__sym>>0]|0;
      $383 = $382 & 1;
      $384 = ($383<<24>>24)==(0);
      $385 = HEAP32[$26>>2]|0;
      $386 = $384 ? $27 : $385;
      $387 = $386;
      $388 = ($__p$0353|0)==(0);
      L95: do {
       if ($388) {
        $$ph = $387;
       } else {
        $399 = (($__p$0353) + -1)|0;
        $400 = (($__pat) + ($399)|0);
        $401 = HEAP8[$400>>0]|0;
        $switch = ($401&255)<(2);
        if ($switch) {
         $402 = HEAP32[$28>>2]|0;
         $403 = $382&255;
         $404 = $403 >>> 1;
         $405 = $384 ? $404 : $402;
         $406 = (($386) + ($405)|0);
         $407 = HEAP32[$17>>2]|0;
         $408 = ($405|0)==(0);
         L98: do {
          if ($408) {
           $$lcssa = $387;
          } else {
           $410 = $386;$880 = $387;
           while(1) {
            $409 = HEAP8[$410>>0]|0;
            $isascii1$i171 = ($409<<24>>24)>(-1);
            if (!($isascii1$i171)) {
             $$lcssa = $880;
             break L98;
            }
            $411 = $409 << 24 >> 24;
            $412 = (($407) + ($411<<1)|0);
            $413 = HEAP16[$412>>1]|0;
            $414 = $413 & 8192;
            $415 = ($414<<16>>16)==(0);
            if ($415) {
             $$lcssa = $880;
             break L98;
            }
            $416 = ((($410)) + 1|0);
            $417 = $416;
            $418 = ($416|0)==($406|0);
            if ($418) {
             $$lcssa = $417;
             break;
            } else {
             $410 = $416;$880 = $417;
            }
           }
          }
         } while(0);
         $419 = (($$lcssa) - ($387))|0;
         $420 = HEAP8[$__spaces>>0]|0;
         $421 = $420 & 1;
         $422 = ($421<<24>>24)==(0);
         $423 = HEAP32[$29>>2]|0;
         $424 = $420&255;
         $425 = $424 >>> 1;
         $426 = $422 ? $425 : $423;
         $427 = ($426>>>0)<($419>>>0);
         if ($427) {
          $$ph = $387;
         } else {
          $428 = HEAP32[$30>>2]|0;
          $429 = $422 ? $31 : $428;
          $430 = (($429) + ($426)|0);
          $431 = ($$lcssa|0)==($387|0);
          if ($431) {
           $$ph = $$lcssa;
          } else {
           $$sum = (($426) - ($419))|0;
           $432 = (($429) + ($$sum)|0);
           $$in340 = $386;$434 = $432;
           while(1) {
            $433 = HEAP8[$434>>0]|0;
            $435 = HEAP8[$$in340>>0]|0;
            $436 = ($433<<24>>24)==($435<<24>>24);
            if (!($436)) {
             $$ph = $387;
             break L95;
            }
            $437 = ((($434)) + 1|0);
            $438 = ((($$in340)) + 1|0);
            $439 = ($437|0)==($430|0);
            if ($439) {
             $$ph = $$lcssa;
             break;
            } else {
             $$in340 = $438;$434 = $437;
            }
           }
          }
         }
        } else {
         $$ph = $387;
        }
       }
      } while(0);
      $389 = $382 & 1;
      $390 = ($389<<24>>24)==(0);
      $391 = HEAP32[$28>>2]|0;
      $392 = $382&255;
      $393 = $392 >>> 1;
      $394 = $390 ? $27 : $385;
      $395 = $390 ? $393 : $391;
      $396 = (($394) + ($395)|0);
      $397 = $$ph;
      $398 = ($397|0)==($396|0);
      L110: do {
       if ($398) {
        $$lcssa243 = $396;
       } else {
        $$pre$i2$i$i165345 = $877;$456 = $877;$487 = $397;
        while(1) {
         $440 = HEAP32[$__b>>2]|0;
         $441 = ($440|0)==(0|0);
         do {
          if ($441) {
           $454 = 0;
          } else {
           $442 = ((($440)) + 12|0);
           $443 = HEAP32[$442>>2]|0;
           $444 = ((($440)) + 16|0);
           $445 = HEAP32[$444>>2]|0;
           $446 = ($443|0)==($445|0);
           if ($446) {
            $447 = HEAP32[$440>>2]|0;
            $448 = ((($447)) + 36|0);
            $449 = HEAP32[$448>>2]|0;
            __THREW__ = 0;
            $450 = (invoke_ii($449|0,($440|0))|0);
            $451 = __THREW__; __THREW__ = 0;
            $452 = $451&1;
            if ($452) {
             label = 21;
             break L4;
            }
            $453 = ($450|0)==(-1);
            if ($453) {
             HEAP32[$__b>>2] = 0;
             $454 = 0;
             break;
            } else {
             $$pre$i$i$i161 = HEAP32[$__b>>2]|0;
             $454 = $$pre$i$i$i161;
             break;
            }
           } else {
            $454 = $440;
           }
          }
         } while(0);
         $455 = ($454|0)==(0|0);
         $457 = ($456|0)==(0|0);
         do {
          if ($457) {
           $$pre$i2$i$i165269 = $$pre$i2$i$i165345;
           label = 131;
          } else {
           $458 = ((($456)) + 12|0);
           $459 = HEAP32[$458>>2]|0;
           $460 = ((($456)) + 16|0);
           $461 = HEAP32[$460>>2]|0;
           $462 = ($459|0)==($461|0);
           if (!($462)) {
            if ($455) {
             $$pre$i2$i$i165268 = $$pre$i2$i$i165345;$881 = $456;
             break;
            } else {
             $$lcssa243 = $487;
             break L110;
            }
           }
           $463 = HEAP32[$456>>2]|0;
           $464 = ((($463)) + 36|0);
           $465 = HEAP32[$464>>2]|0;
           __THREW__ = 0;
           $466 = (invoke_ii($465|0,($456|0))|0);
           $467 = __THREW__; __THREW__ = 0;
           $468 = $467&1;
           if ($468) {
            label = 21;
            break L4;
           }
           $469 = ($466|0)==(-1);
           if ($469) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i165269 = 0;
            label = 131;
            break;
           } else {
            $470 = ($$pre$i2$i$i165345|0)==(0|0);
            $tmp$i$i167 = $455 ^ $470;
            if ($tmp$i$i167) {
             $$pre$i2$i$i165268 = $$pre$i2$i$i165345;$881 = $$pre$i2$i$i165345;
             break;
            } else {
             $$lcssa243 = $487;
             break L110;
            }
           }
          }
         } while(0);
         if ((label|0) == 131) {
          label = 0;
          if ($455) {
           $$lcssa243 = $487;
           break L110;
          } else {
           $$pre$i2$i$i165268 = $$pre$i2$i$i165269;$881 = 0;
          }
         }
         $471 = HEAP32[$__b>>2]|0;
         $472 = ((($471)) + 12|0);
         $473 = HEAP32[$472>>2]|0;
         $474 = ((($471)) + 16|0);
         $475 = HEAP32[$474>>2]|0;
         $476 = ($473|0)==($475|0);
         if ($476) {
          $477 = HEAP32[$471>>2]|0;
          $478 = ((($477)) + 36|0);
          $479 = HEAP32[$478>>2]|0;
          __THREW__ = 0;
          $480 = (invoke_ii($479|0,($471|0))|0);
          $481 = __THREW__; __THREW__ = 0;
          $482 = $481&1;
          if ($482) {
           label = 21;
           break L4;
          } else {
           $$0$i$i157 = $480;
          }
         } else {
          $483 = HEAP8[$473>>0]|0;
          $484 = $483&255;
          $$0$i$i157 = $484;
         }
         $485 = $$0$i$i157&255;
         $486 = HEAP8[$487>>0]|0;
         $488 = ($485<<24>>24)==($486<<24>>24);
         if (!($488)) {
          $$lcssa243 = $487;
          break L110;
         }
         $489 = HEAP32[$__b>>2]|0;
         $490 = ((($489)) + 12|0);
         $491 = HEAP32[$490>>2]|0;
         $492 = ((($489)) + 16|0);
         $493 = HEAP32[$492>>2]|0;
         $494 = ($491|0)==($493|0);
         if ($494) {
          $495 = HEAP32[$489>>2]|0;
          $496 = ((($495)) + 40|0);
          $497 = HEAP32[$496>>2]|0;
          __THREW__ = 0;
          (invoke_ii($497|0,($489|0))|0);
          $498 = __THREW__; __THREW__ = 0;
          $499 = $498&1;
          if ($499) {
           label = 21;
           break L4;
          }
         } else {
          $500 = ((($491)) + 1|0);
          HEAP32[$490>>2] = $500;
         }
         $501 = ((($487)) + 1|0);
         $$pre266 = HEAP8[$__sym>>0]|0;
         $$pre267 = HEAP32[$26>>2]|0;
         $502 = $$pre266 & 1;
         $503 = ($502<<24>>24)==(0);
         $504 = HEAP32[$28>>2]|0;
         $505 = $$pre266&255;
         $506 = $505 >>> 1;
         $507 = $503 ? $27 : $$pre267;
         $508 = $503 ? $506 : $504;
         $509 = (($507) + ($508)|0);
         $510 = ($501|0)==($509|0);
         if ($510) {
          $$lcssa243 = $509;
          break;
         } else {
          $$pre$i2$i$i165345 = $$pre$i2$i$i165268;$456 = $881;$487 = $501;
         }
        }
       }
      } while(0);
      if ($25) {
       $511 = HEAP8[$__sym>>0]|0;
       $512 = $511 & 1;
       $513 = ($512<<24>>24)==(0);
       $514 = HEAP32[$26>>2]|0;
       $515 = HEAP32[$28>>2]|0;
       $516 = $511&255;
       $517 = $516 >>> 1;
       $518 = $513 ? $27 : $514;
       $519 = $513 ? $517 : $515;
       $520 = (($518) + ($519)|0);
       $521 = ($$lcssa243|0)==($520|0);
       if ($521) {
        $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
       } else {
        label = 143;
        break L4;
       }
      } else {
       $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
      }
      break;
     }
     case 4:  {
      $67 = HEAP8[$__ts>>0]|0;
      $$pre$i2$i$i148 = $877;$540 = $877;$595 = $876;$__ng$0 = 0;
      L145: while(1) {
       $524 = HEAP32[$__b>>2]|0;
       $525 = ($524|0)==(0|0);
       do {
        if ($525) {
         $538 = 0;
        } else {
         $526 = ((($524)) + 12|0);
         $527 = HEAP32[$526>>2]|0;
         $528 = ((($524)) + 16|0);
         $529 = HEAP32[$528>>2]|0;
         $530 = ($527|0)==($529|0);
         if ($530) {
          $531 = HEAP32[$524>>2]|0;
          $532 = ((($531)) + 36|0);
          $533 = HEAP32[$532>>2]|0;
          __THREW__ = 0;
          $534 = (invoke_ii($533|0,($524|0))|0);
          $535 = __THREW__; __THREW__ = 0;
          $536 = $535&1;
          if ($536) {
           label = 23;
           break L4;
          }
          $537 = ($534|0)==(-1);
          if ($537) {
           HEAP32[$__b>>2] = 0;
           $538 = 0;
           break;
          } else {
           $$pre$i$i$i144 = HEAP32[$__b>>2]|0;
           $538 = $$pre$i$i$i144;
           break;
          }
         } else {
          $538 = $524;
         }
        }
       } while(0);
       $539 = ($538|0)==(0|0);
       $541 = ($540|0)==(0|0);
       do {
        if ($541) {
         $$pre$i2$i$i148256 = $$pre$i2$i$i148;
         label = 156;
        } else {
         $542 = ((($540)) + 12|0);
         $543 = HEAP32[$542>>2]|0;
         $544 = ((($540)) + 16|0);
         $545 = HEAP32[$544>>2]|0;
         $546 = ($543|0)==($545|0);
         if (!($546)) {
          if ($539) {
           $$pre$i2$i$i148258 = $$pre$i2$i$i148;$882 = $540;
           break;
          } else {
           $$lcssa371 = $595;$$pre$i2$i$i108 = $$pre$i2$i$i148;$__ng$0$lcssa372 = $__ng$0;
           break L145;
          }
         }
         $547 = HEAP32[$540>>2]|0;
         $548 = ((($547)) + 36|0);
         $549 = HEAP32[$548>>2]|0;
         __THREW__ = 0;
         $550 = (invoke_ii($549|0,($540|0))|0);
         $551 = __THREW__; __THREW__ = 0;
         $552 = $551&1;
         if ($552) {
          label = 23;
          break L4;
         }
         $553 = ($550|0)==(-1);
         if ($553) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i148256 = 0;
          label = 156;
          break;
         } else {
          $554 = ($$pre$i2$i$i148|0)==(0|0);
          $tmp$i$i150 = $539 ^ $554;
          if ($tmp$i$i150) {
           $$pre$i2$i$i148258 = $$pre$i2$i$i148;$882 = $$pre$i2$i$i148;
           break;
          } else {
           $$lcssa371 = $595;$$pre$i2$i$i108 = $$pre$i2$i$i148;$__ng$0$lcssa372 = $__ng$0;
           break L145;
          }
         }
        }
       } while(0);
       if ((label|0) == 156) {
        label = 0;
        if ($539) {
         $$lcssa371 = $595;$$pre$i2$i$i108 = $$pre$i2$i$i148256;$__ng$0$lcssa372 = $__ng$0;
         break;
        } else {
         $$pre$i2$i$i148258 = $$pre$i2$i$i148256;$882 = 0;
        }
       }
       $555 = HEAP32[$__b>>2]|0;
       $556 = ((($555)) + 12|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ((($555)) + 16|0);
       $559 = HEAP32[$558>>2]|0;
       $560 = ($557|0)==($559|0);
       if ($560) {
        $561 = HEAP32[$555>>2]|0;
        $562 = ((($561)) + 36|0);
        $563 = HEAP32[$562>>2]|0;
        __THREW__ = 0;
        $564 = (invoke_ii($563|0,($555|0))|0);
        $565 = __THREW__; __THREW__ = 0;
        $566 = $565&1;
        if ($566) {
         label = 23;
         break L4;
        } else {
         $$0$i$i140 = $564;
        }
       } else {
        $567 = HEAP8[$557>>0]|0;
        $568 = $567&255;
        $$0$i$i140 = $568;
       }
       $569 = $$0$i$i140&255;
       $isascii1$i138 = ($569<<24>>24)>(-1);
       if ($isascii1$i138) {
        $sext210 = $$0$i$i140 << 24;
        $570 = $sext210 >> 24;
        $571 = HEAP32[$17>>2]|0;
        $572 = (($571) + ($570<<1)|0);
        $573 = HEAP16[$572>>1]|0;
        $574 = $573 & 2048;
        $575 = ($574<<16>>16)==(0);
        if ($575) {
         label = 167;
        } else {
         $576 = HEAP32[$__wn>>2]|0;
         $577 = HEAP32[$0>>2]|0;
         $578 = ($576|0)==($577|0);
         if ($578) {
          __THREW__ = 0;
          invoke_viii(669,($__wb|0),($__wn|0),($0|0));
          $579 = __THREW__; __THREW__ = 0;
          $580 = $579&1;
          if ($580) {
           label = 23;
           break L4;
          }
          $$pre = HEAP32[$__wn>>2]|0;
          $582 = $$pre;
         } else {
          $582 = $576;
         }
         $581 = ((($582)) + 1|0);
         HEAP32[$__wn>>2] = $581;
         HEAP8[$582>>0] = $569;
         $583 = (($__ng$0) + 1)|0;
         $883 = $595;$__ng$1 = $583;
        }
       } else {
        label = 167;
       }
       if ((label|0) == 167) {
        label = 0;
        $584 = HEAP8[$__grp>>0]|0;
        $585 = $584 & 1;
        $586 = ($585<<24>>24)==(0);
        $587 = HEAP32[$33>>2]|0;
        $588 = $584&255;
        $589 = $588 >>> 1;
        $590 = $586 ? $589 : $587;
        $591 = ($590|0)!=(0);
        $592 = ($__ng$0|0)!=(0);
        $or$cond7 = $592 & $591;
        $593 = ($569<<24>>24)==($67<<24>>24);
        $or$cond13 = $593 & $or$cond7;
        if (!($or$cond13)) {
         $$lcssa371 = $595;$$pre$i2$i$i108 = $$pre$i2$i$i148258;$__ng$0$lcssa372 = $__ng$0;
         break;
        }
        $594 = HEAP32[$__ge>>2]|0;
        $596 = ($595|0)==($594|0);
        if ($596) {
         __THREW__ = 0;
         invoke_viii(670,($__gb|0),($__gn|0),($__ge|0));
         $597 = __THREW__; __THREW__ = 0;
         $598 = $597&1;
         if ($598) {
          label = 23;
          break L4;
         }
         $$pre261 = HEAP32[$__gn>>2]|0;
         $600 = $$pre261;
        } else {
         $600 = $595;
        }
        $599 = ((($600)) + 4|0);
        HEAP32[$__gn>>2] = $599;
        HEAP32[$600>>2] = $__ng$0;
        $883 = $599;$__ng$1 = 0;
       }
       $601 = HEAP32[$__b>>2]|0;
       $602 = ((($601)) + 12|0);
       $603 = HEAP32[$602>>2]|0;
       $604 = ((($601)) + 16|0);
       $605 = HEAP32[$604>>2]|0;
       $606 = ($603|0)==($605|0);
       if ($606) {
        $607 = HEAP32[$601>>2]|0;
        $608 = ((($607)) + 40|0);
        $609 = HEAP32[$608>>2]|0;
        __THREW__ = 0;
        (invoke_ii($609|0,($601|0))|0);
        $610 = __THREW__; __THREW__ = 0;
        $611 = $610&1;
        if ($611) {
         label = 23;
         break L4;
        } else {
         $$pre$i2$i$i148 = $$pre$i2$i$i148258;$540 = $882;$595 = $883;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $612 = ((($603)) + 1|0);
        HEAP32[$602>>2] = $612;
        $$pre$i2$i$i148 = $$pre$i2$i$i148258;$540 = $882;$595 = $883;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $613 = HEAP32[$__gb>>2]|0;
      $614 = ($613|0)!=($$lcssa371|0);
      $615 = ($__ng$0$lcssa372|0)!=(0);
      $or$cond9 = $615 & $614;
      if ($or$cond9) {
       $616 = HEAP32[$__ge>>2]|0;
       $617 = ($$lcssa371|0)==($616|0);
       if ($617) {
        __THREW__ = 0;
        invoke_viii(670,($__gb|0),($__gn|0),($__ge|0));
        $618 = __THREW__; __THREW__ = 0;
        $619 = $618&1;
        if ($619) {
         label = 24;
         break L4;
        }
        $$pre263 = HEAP32[$__gn>>2]|0;
        $621 = $$pre263;
       } else {
        $621 = $$lcssa371;
       }
       $620 = ((($621)) + 4|0);
       HEAP32[$__gn>>2] = $620;
       HEAP32[$621>>2] = $__ng$0$lcssa372;
       $884 = $620;
      } else {
       $884 = $$lcssa371;
      }
      $622 = HEAP32[$__fd>>2]|0;
      $623 = ($622|0)>(0);
      if ($623) {
       $624 = HEAP32[$__b>>2]|0;
       $625 = ($624|0)==(0|0);
       do {
        if ($625) {
         $638 = 0;
        } else {
         $626 = ((($624)) + 12|0);
         $627 = HEAP32[$626>>2]|0;
         $628 = ((($624)) + 16|0);
         $629 = HEAP32[$628>>2]|0;
         $630 = ($627|0)==($629|0);
         if ($630) {
          $631 = HEAP32[$624>>2]|0;
          $632 = ((($631)) + 36|0);
          $633 = HEAP32[$632>>2]|0;
          __THREW__ = 0;
          $634 = (invoke_ii($633|0,($624|0))|0);
          $635 = __THREW__; __THREW__ = 0;
          $636 = $635&1;
          if ($636) {
           label = 24;
           break L4;
          }
          $637 = ($634|0)==(-1);
          if ($637) {
           HEAP32[$__b>>2] = 0;
           $638 = 0;
           break;
          } else {
           $$pre$i$i$i104 = HEAP32[$__b>>2]|0;
           $638 = $$pre$i$i$i104;
           break;
          }
         } else {
          $638 = $624;
         }
        }
       } while(0);
       $639 = ($638|0)==(0|0);
       $640 = ($$pre$i2$i$i108|0)==(0|0);
       do {
        if ($640) {
         label = 193;
        } else {
         $641 = ((($$pre$i2$i$i108)) + 12|0);
         $642 = HEAP32[$641>>2]|0;
         $643 = ((($$pre$i2$i$i108)) + 16|0);
         $644 = HEAP32[$643>>2]|0;
         $645 = ($642|0)==($644|0);
         if ($645) {
          $646 = HEAP32[$$pre$i2$i$i108>>2]|0;
          $647 = ((($646)) + 36|0);
          $648 = HEAP32[$647>>2]|0;
          __THREW__ = 0;
          $649 = (invoke_ii($648|0,($$pre$i2$i$i108|0))|0);
          $650 = __THREW__; __THREW__ = 0;
          $651 = $650&1;
          if ($651) {
           label = 24;
           break L4;
          }
          $652 = ($649|0)==(-1);
          if ($652) {
           HEAP32[$__e>>2] = 0;
           label = 193;
           break;
          }
         }
         if ($639) {
          $885 = $$pre$i2$i$i108;
         } else {
          label = 198;
          break L4;
         }
        }
       } while(0);
       if ((label|0) == 193) {
        label = 0;
        if ($639) {
         label = 198;
         break L4;
        } else {
         $885 = 0;
        }
       }
       $653 = HEAP32[$__b>>2]|0;
       $654 = ((($653)) + 12|0);
       $655 = HEAP32[$654>>2]|0;
       $656 = ((($653)) + 16|0);
       $657 = HEAP32[$656>>2]|0;
       $658 = ($655|0)==($657|0);
       if ($658) {
        $659 = HEAP32[$653>>2]|0;
        $660 = ((($659)) + 36|0);
        $661 = HEAP32[$660>>2]|0;
        __THREW__ = 0;
        $662 = (invoke_ii($661|0,($653|0))|0);
        $663 = __THREW__; __THREW__ = 0;
        $664 = $663&1;
        if ($664) {
         label = 24;
         break L4;
        } else {
         $$0$i$i97 = $662;
        }
       } else {
        $665 = HEAP8[$655>>0]|0;
        $666 = $665&255;
        $$0$i$i97 = $666;
       }
       $667 = $$0$i$i97&255;
       $668 = HEAP8[$__dp>>0]|0;
       $669 = ($667<<24>>24)==($668<<24>>24);
       if (!($669)) {
        label = 198;
        break L4;
       }
       $672 = HEAP32[$__b>>2]|0;
       $673 = ((($672)) + 12|0);
       $674 = HEAP32[$673>>2]|0;
       $675 = ((($672)) + 16|0);
       $676 = HEAP32[$675>>2]|0;
       $677 = ($674|0)==($676|0);
       if ($677) {
        $678 = HEAP32[$672>>2]|0;
        $679 = ((($678)) + 40|0);
        $680 = HEAP32[$679>>2]|0;
        __THREW__ = 0;
        (invoke_ii($680|0,($672|0))|0);
        $681 = __THREW__; __THREW__ = 0;
        $682 = $681&1;
        if ($682) {
         label = 24;
         break L4;
        }
       } else {
        $683 = ((($674)) + 1|0);
        HEAP32[$673>>2] = $683;
       }
       $684 = ($622|0)>(0);
       if ($684) {
        $$pre$i2$i$i84336 = $885;$701 = $885;$762 = $622;
        while(1) {
         $685 = HEAP32[$__b>>2]|0;
         $686 = ($685|0)==(0|0);
         do {
          if ($686) {
           $699 = 0;
          } else {
           $687 = ((($685)) + 12|0);
           $688 = HEAP32[$687>>2]|0;
           $689 = ((($685)) + 16|0);
           $690 = HEAP32[$689>>2]|0;
           $691 = ($688|0)==($690|0);
           if ($691) {
            $692 = HEAP32[$685>>2]|0;
            $693 = ((($692)) + 36|0);
            $694 = HEAP32[$693>>2]|0;
            __THREW__ = 0;
            $695 = (invoke_ii($694|0,($685|0))|0);
            $696 = __THREW__; __THREW__ = 0;
            $697 = $696&1;
            if ($697) {
             label = 22;
             break L4;
            }
            $698 = ($695|0)==(-1);
            if ($698) {
             HEAP32[$__b>>2] = 0;
             $699 = 0;
             break;
            } else {
             $$pre$i$i$i80 = HEAP32[$__b>>2]|0;
             $699 = $$pre$i$i$i80;
             break;
            }
           } else {
            $699 = $685;
           }
          }
         } while(0);
         $700 = ($699|0)==(0|0);
         $702 = ($701|0)==(0|0);
         do {
          if ($702) {
           $$pre$i2$i$i84264$ph = $$pre$i2$i$i84336;
           label = 215;
          } else {
           $703 = ((($701)) + 12|0);
           $704 = HEAP32[$703>>2]|0;
           $705 = ((($701)) + 16|0);
           $706 = HEAP32[$705>>2]|0;
           $707 = ($704|0)==($706|0);
           if (!($707)) {
            if ($700) {
             $$pre$i2$i$i84264283 = $$pre$i2$i$i84336;$886 = $701;
             break;
            } else {
             label = 222;
             break L4;
            }
           }
           $708 = HEAP32[$701>>2]|0;
           $709 = ((($708)) + 36|0);
           $710 = HEAP32[$709>>2]|0;
           __THREW__ = 0;
           $711 = (invoke_ii($710|0,($701|0))|0);
           $712 = __THREW__; __THREW__ = 0;
           $713 = $712&1;
           if ($713) {
            label = 22;
            break L4;
           }
           $714 = ($711|0)==(-1);
           if ($714) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i84264$ph = 0;
            label = 215;
            break;
           } else {
            $715 = ($$pre$i2$i$i84336|0)==(0|0);
            $tmp$i$i86 = $700 ^ $715;
            if ($tmp$i$i86) {
             $$pre$i2$i$i84264283 = $$pre$i2$i$i84336;$886 = $$pre$i2$i$i84336;
             break;
            } else {
             label = 222;
             break L4;
            }
           }
          }
         } while(0);
         if ((label|0) == 215) {
          label = 0;
          if ($700) {
           label = 222;
           break L4;
          } else {
           $$pre$i2$i$i84264283 = $$pre$i2$i$i84264$ph;$886 = 0;
          }
         }
         $716 = HEAP32[$__b>>2]|0;
         $717 = ((($716)) + 12|0);
         $718 = HEAP32[$717>>2]|0;
         $719 = ((($716)) + 16|0);
         $720 = HEAP32[$719>>2]|0;
         $721 = ($718|0)==($720|0);
         if ($721) {
          $722 = HEAP32[$716>>2]|0;
          $723 = ((($722)) + 36|0);
          $724 = HEAP32[$723>>2]|0;
          __THREW__ = 0;
          $725 = (invoke_ii($724|0,($716|0))|0);
          $726 = __THREW__; __THREW__ = 0;
          $727 = $726&1;
          if ($727) {
           label = 22;
           break L4;
          } else {
           $$0$i$i75 = $725;
          }
         } else {
          $728 = HEAP8[$718>>0]|0;
          $729 = $728&255;
          $$0$i$i75 = $729;
         }
         $730 = $$0$i$i75&255;
         $isascii1$i73 = ($730<<24>>24)>(-1);
         if (!($isascii1$i73)) {
          label = 222;
          break L4;
         }
         $sext = $$0$i$i75 << 24;
         $731 = $sext >> 24;
         $732 = HEAP32[$17>>2]|0;
         $733 = (($732) + ($731<<1)|0);
         $734 = HEAP16[$733>>1]|0;
         $735 = $734 & 2048;
         $736 = ($735<<16>>16)==(0);
         if ($736) {
          label = 222;
          break L4;
         }
         $739 = HEAP32[$__wn>>2]|0;
         $740 = HEAP32[$0>>2]|0;
         $741 = ($739|0)==($740|0);
         if ($741) {
          __THREW__ = 0;
          invoke_viii(669,($__wb|0),($__wn|0),($0|0));
          $742 = __THREW__; __THREW__ = 0;
          $743 = $742&1;
          if ($743) {
           label = 22;
           break L4;
          }
         }
         $744 = HEAP32[$__b>>2]|0;
         $745 = ((($744)) + 12|0);
         $746 = HEAP32[$745>>2]|0;
         $747 = ((($744)) + 16|0);
         $748 = HEAP32[$747>>2]|0;
         $749 = ($746|0)==($748|0);
         if ($749) {
          $750 = HEAP32[$744>>2]|0;
          $751 = ((($750)) + 36|0);
          $752 = HEAP32[$751>>2]|0;
          __THREW__ = 0;
          $753 = (invoke_ii($752|0,($744|0))|0);
          $754 = __THREW__; __THREW__ = 0;
          $755 = $754&1;
          if ($755) {
           label = 22;
           break L4;
          } else {
           $$0$i$i68 = $753;
          }
         } else {
          $756 = HEAP8[$746>>0]|0;
          $757 = $756&255;
          $$0$i$i68 = $757;
         }
         $758 = $$0$i$i68&255;
         $759 = HEAP32[$__wn>>2]|0;
         $760 = ((($759)) + 1|0);
         HEAP32[$__wn>>2] = $760;
         HEAP8[$759>>0] = $758;
         $761 = (($762) + -1)|0;
         HEAP32[$__fd>>2] = $761;
         $763 = HEAP32[$__b>>2]|0;
         $764 = ((($763)) + 12|0);
         $765 = HEAP32[$764>>2]|0;
         $766 = ((($763)) + 16|0);
         $767 = HEAP32[$766>>2]|0;
         $768 = ($765|0)==($767|0);
         if ($768) {
          $769 = HEAP32[$763>>2]|0;
          $770 = ((($769)) + 40|0);
          $771 = HEAP32[$770>>2]|0;
          __THREW__ = 0;
          (invoke_ii($771|0,($763|0))|0);
          $772 = __THREW__; __THREW__ = 0;
          $773 = $772&1;
          if ($773) {
           label = 22;
           break L4;
          }
         } else {
          $775 = ((($765)) + 1|0);
          HEAP32[$764>>2] = $775;
         }
         $774 = ($762|0)>(1);
         if ($774) {
          $$pre$i2$i$i84336 = $$pre$i2$i$i84264283;$701 = $886;$762 = $761;
         } else {
          break;
         }
        }
       }
      }
      $776 = HEAP32[$__wn>>2]|0;
      $777 = HEAP32[$__wb>>2]|0;
      $778 = ($776|0)==($777|0);
      if ($778) {
       label = 233;
       break L4;
      } else {
       $878 = $884;$__trailing_sign$1 = $__trailing_sign$0355;
      }
      break;
     }
     default: {
      $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
     }
     }
    } while(0);
    L266: do {
     if ((label|0) == 42) {
      while(1) {
       label = 0;
       $131 = HEAP32[$__b>>2]|0;
       $132 = ($131|0)==(0|0);
       do {
        if ($132) {
         $145 = 0;
        } else {
         $133 = ((($131)) + 12|0);
         $134 = HEAP32[$133>>2]|0;
         $135 = ((($131)) + 16|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = ($134|0)==($136|0);
         if ($137) {
          $138 = HEAP32[$131>>2]|0;
          $139 = ((($138)) + 36|0);
          $140 = HEAP32[$139>>2]|0;
          __THREW__ = 0;
          $141 = (invoke_ii($140|0,($131|0))|0);
          $142 = __THREW__; __THREW__ = 0;
          $143 = $142&1;
          if ($143) {
           label = 20;
           break L4;
          }
          $144 = ($141|0)==(-1);
          if ($144) {
           HEAP32[$__b>>2] = 0;
           $145 = 0;
           break;
          } else {
           $$pre$i$i$i48 = HEAP32[$__b>>2]|0;
           $145 = $$pre$i$i$i48;
           break;
          }
         } else {
          $145 = $131;
         }
        }
       } while(0);
       $146 = ($145|0)==(0|0);
       $148 = ($147|0)==(0|0);
       do {
        if ($148) {
         $$pre$i2$i$i52278 = $$pre$i2$i$i52;
         label = 54;
        } else {
         $149 = ((($147)) + 12|0);
         $150 = HEAP32[$149>>2]|0;
         $151 = ((($147)) + 16|0);
         $152 = HEAP32[$151>>2]|0;
         $153 = ($150|0)==($152|0);
         if (!($153)) {
          if ($146) {
           $$pre$i2$i$i52280 = $$pre$i2$i$i52;$879 = $147;
           break;
          } else {
           $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
           break L266;
          }
         }
         $154 = HEAP32[$147>>2]|0;
         $155 = ((($154)) + 36|0);
         $156 = HEAP32[$155>>2]|0;
         __THREW__ = 0;
         $157 = (invoke_ii($156|0,($147|0))|0);
         $158 = __THREW__; __THREW__ = 0;
         $159 = $158&1;
         if ($159) {
          label = 20;
          break L4;
         }
         $160 = ($157|0)==(-1);
         if ($160) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i52278 = 0;
          label = 54;
          break;
         } else {
          $161 = ($$pre$i2$i$i52|0)==(0|0);
          $tmp$i$i54 = $146 ^ $161;
          if ($tmp$i$i54) {
           $$pre$i2$i$i52280 = $$pre$i2$i$i52;$879 = $$pre$i2$i$i52;
           break;
          } else {
           $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
           break L266;
          }
         }
        }
       } while(0);
       if ((label|0) == 54) {
        label = 0;
        if ($146) {
         $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
         break L266;
        } else {
         $$pre$i2$i$i52280 = $$pre$i2$i$i52278;$879 = 0;
        }
       }
       $162 = HEAP32[$__b>>2]|0;
       $163 = ((($162)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ((($162)) + 16|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($164|0)==($166|0);
       if ($167) {
        $168 = HEAP32[$162>>2]|0;
        $169 = ((($168)) + 36|0);
        $170 = HEAP32[$169>>2]|0;
        __THREW__ = 0;
        $171 = (invoke_ii($170|0,($162|0))|0);
        $172 = __THREW__; __THREW__ = 0;
        $173 = $172&1;
        if ($173) {
         label = 20;
         break L4;
        } else {
         $$0$i$i58 = $171;
        }
       } else {
        $174 = HEAP8[$164>>0]|0;
        $175 = $174&255;
        $$0$i$i58 = $175;
       }
       $176 = $$0$i$i58&255;
       $isascii1$i61 = ($176<<24>>24)>(-1);
       if (!($isascii1$i61)) {
        $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
        break L266;
       }
       $sext211 = $$0$i$i58 << 24;
       $177 = $sext211 >> 24;
       $178 = HEAP32[$17>>2]|0;
       $179 = (($178) + ($177<<1)|0);
       $180 = HEAP16[$179>>1]|0;
       $181 = $180 & 8192;
       $182 = ($181<<16>>16)==(0);
       if ($182) {
        $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
        break L266;
       }
       $183 = HEAP32[$__b>>2]|0;
       $184 = ((($183)) + 12|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ((($183)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($185|0)==($187|0);
       if ($188) {
        $189 = HEAP32[$183>>2]|0;
        $190 = ((($189)) + 40|0);
        $191 = HEAP32[$190>>2]|0;
        __THREW__ = 0;
        $192 = (invoke_ii($191|0,($183|0))|0);
        $193 = __THREW__; __THREW__ = 0;
        $194 = $193&1;
        if ($194) {
         label = 20;
         break L4;
        } else {
         $$0$i$i65 = $192;
        }
       } else {
        $195 = ((($185)) + 1|0);
        HEAP32[$184>>2] = $195;
        $196 = HEAP8[$185>>0]|0;
        $197 = $196&255;
        $$0$i$i65 = $197;
       }
       $198 = $$0$i$i65&255;
       __THREW__ = 0;
       invoke_vii(555,($__spaces|0),($198|0));
       $199 = __THREW__; __THREW__ = 0;
       $200 = $199&1;
       if ($200) {
        label = 20;
        break L4;
       } else {
        $$pre$i2$i$i52 = $$pre$i2$i$i52280;$147 = $879;
        label = 42;
       }
      }
     }
    } while(0);
    $781 = (($__p$0353) + 1)|0;
    $782 = ($781>>>0)<(4);
    if ($782) {
     $876 = $878;$__p$0353 = $781;$__trailing_sign$0355 = $__trailing_sign$1;
    } else {
     $$lcssa313 = $878;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 235;
     break;
    }
   }
   L300:    switch (label|0) {
    case 20: {
     $70 = ___cxa_find_matching_catch()|0;
     $71 = tempRet0;
     $lpad$phi$index = $70;$lpad$phi$index7 = $71;
     break L1;
     break;
    }
    case 21: {
     $72 = ___cxa_find_matching_catch()|0;
     $73 = tempRet0;
     $lpad$phi$index = $72;$lpad$phi$index7 = $73;
     break L1;
     break;
    }
    case 22: {
     $74 = ___cxa_find_matching_catch()|0;
     $75 = tempRet0;
     $lpad$phi$index = $74;$lpad$phi$index7 = $75;
     break L1;
     break;
    }
    case 23: {
     $76 = ___cxa_find_matching_catch()|0;
     $77 = tempRet0;
     $lpad$phi$index = $76;$lpad$phi$index7 = $77;
     break L1;
     break;
    }
    case 24: {
     $78 = ___cxa_find_matching_catch()|0;
     $79 = tempRet0;
     $lpad$phi$index = $78;$lpad$phi$index7 = $79;
     break L1;
     break;
    }
    case 40: {
     $128 = HEAP32[$__err>>2]|0;
     $129 = $128 | 4;
     HEAP32[$__err>>2] = $129;
     $$0 = 0;
     break;
    }
    case 104: {
     $374 = HEAP32[$__err>>2]|0;
     $375 = $374 | 4;
     HEAP32[$__err>>2] = $375;
     $$0 = 0;
     break;
    }
    case 143: {
     $522 = HEAP32[$__err>>2]|0;
     $523 = $522 | 4;
     HEAP32[$__err>>2] = $523;
     $$0 = 0;
     break;
    }
    case 198: {
     $670 = HEAP32[$__err>>2]|0;
     $671 = $670 | 4;
     HEAP32[$__err>>2] = $671;
     $$0 = 0;
     break;
    }
    case 222: {
     $737 = HEAP32[$__err>>2]|0;
     $738 = $737 | 4;
     HEAP32[$__err>>2] = $738;
     $$0 = 0;
     break;
    }
    case 233: {
     $779 = HEAP32[$__err>>2]|0;
     $780 = $779 | 4;
     HEAP32[$__err>>2] = $780;
     $$0 = 0;
     break;
    }
    case 235: {
     $783 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L302: do {
      if (!($783)) {
       $784 = ((($__trailing_sign$0$lcssa)) + 1|0);
       $785 = ((($__trailing_sign$0$lcssa)) + 8|0);
       $786 = ((($__trailing_sign$0$lcssa)) + 4|0);
       $__i$0 = 1;
       L304: while(1) {
        $787 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $788 = $787 & 1;
        $789 = ($788<<24>>24)==(0);
        if ($789) {
         $791 = $787&255;
         $792 = $791 >>> 1;
         $794 = $792;
        } else {
         $790 = HEAP32[$786>>2]|0;
         $794 = $790;
        }
        $793 = ($__i$0>>>0)<($794>>>0);
        if (!($793)) {
         break L302;
        }
        $795 = HEAP32[$__b>>2]|0;
        $796 = ($795|0)==(0|0);
        do {
         if ($796) {
          $809 = 0;
         } else {
          $797 = ((($795)) + 12|0);
          $798 = HEAP32[$797>>2]|0;
          $799 = ((($795)) + 16|0);
          $800 = HEAP32[$799>>2]|0;
          $801 = ($798|0)==($800|0);
          if ($801) {
           $802 = HEAP32[$795>>2]|0;
           $803 = ((($802)) + 36|0);
           $804 = HEAP32[$803>>2]|0;
           __THREW__ = 0;
           $805 = (invoke_ii($804|0,($795|0))|0);
           $806 = __THREW__; __THREW__ = 0;
           $807 = $806&1;
           if ($807) {
            label = 19;
            break L304;
           }
           $808 = ($805|0)==(-1);
           if ($808) {
            HEAP32[$__b>>2] = 0;
            $809 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $809 = $$pre$i$i$i;
            break;
           }
          } else {
           $809 = $795;
          }
         }
        } while(0);
        $810 = ($809|0)==(0|0);
        $811 = HEAP32[$__e>>2]|0;
        $812 = ($811|0)==(0|0);
        do {
         if ($812) {
          label = 253;
         } else {
          $813 = ((($811)) + 12|0);
          $814 = HEAP32[$813>>2]|0;
          $815 = ((($811)) + 16|0);
          $816 = HEAP32[$815>>2]|0;
          $817 = ($814|0)==($816|0);
          if ($817) {
           $818 = HEAP32[$811>>2]|0;
           $819 = ((($818)) + 36|0);
           $820 = HEAP32[$819>>2]|0;
           __THREW__ = 0;
           $821 = (invoke_ii($820|0,($811|0))|0);
           $822 = __THREW__; __THREW__ = 0;
           $823 = $822&1;
           if ($823) {
            label = 19;
            break L304;
           }
           $824 = ($821|0)==(-1);
           if ($824) {
            HEAP32[$__e>>2] = 0;
            label = 253;
            break;
           }
          }
          if (!($810)) {
           label = 260;
           break L304;
          }
         }
        } while(0);
        if ((label|0) == 253) {
         label = 0;
         if ($810) {
          label = 260;
          break;
         }
        }
        $825 = HEAP32[$__b>>2]|0;
        $826 = ((($825)) + 12|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = ((($825)) + 16|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = ($827|0)==($829|0);
        if ($830) {
         $831 = HEAP32[$825>>2]|0;
         $832 = ((($831)) + 36|0);
         $833 = HEAP32[$832>>2]|0;
         __THREW__ = 0;
         $834 = (invoke_ii($833|0,($825|0))|0);
         $835 = __THREW__; __THREW__ = 0;
         $836 = $835&1;
         if ($836) {
          label = 19;
          break;
         } else {
          $$0$i$i = $834;
         }
        } else {
         $837 = HEAP8[$827>>0]|0;
         $838 = $837&255;
         $$0$i$i = $838;
        }
        $839 = $$0$i$i&255;
        $840 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $841 = $840 & 1;
        $842 = ($841<<24>>24)==(0);
        if ($842) {
         $845 = $784;
        } else {
         $843 = HEAP32[$785>>2]|0;
         $845 = $843;
        }
        $844 = (($845) + ($__i$0)|0);
        $846 = HEAP8[$844>>0]|0;
        $847 = ($839<<24>>24)==($846<<24>>24);
        if (!($847)) {
         label = 260;
         break;
        }
        $850 = (($__i$0) + 1)|0;
        $851 = HEAP32[$__b>>2]|0;
        $852 = ((($851)) + 12|0);
        $853 = HEAP32[$852>>2]|0;
        $854 = ((($851)) + 16|0);
        $855 = HEAP32[$854>>2]|0;
        $856 = ($853|0)==($855|0);
        if ($856) {
         $857 = HEAP32[$851>>2]|0;
         $858 = ((($857)) + 40|0);
         $859 = HEAP32[$858>>2]|0;
         __THREW__ = 0;
         (invoke_ii($859|0,($851|0))|0);
         $860 = __THREW__; __THREW__ = 0;
         $861 = $860&1;
         if ($861) {
          label = 19;
          break;
         } else {
          $__i$0 = $850;
          continue;
         }
        } else {
         $862 = ((($853)) + 1|0);
         HEAP32[$852>>2] = $862;
         $__i$0 = $850;
         continue;
        }
       }
       if ((label|0) == 19) {
        $68 = ___cxa_find_matching_catch()|0;
        $69 = tempRet0;
        $lpad$phi$index = $68;$lpad$phi$index7 = $69;
        break L1;
       }
       else if ((label|0) == 260) {
        $848 = HEAP32[$__err>>2]|0;
        $849 = $848 | 4;
        HEAP32[$__err>>2] = $849;
        $$0 = 0;
        break L300;
       }
      }
     } while(0);
     $863 = HEAP32[$__gb>>2]|0;
     $864 = ($863|0)==($$lcssa313|0);
     if ($864) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$863,$$lcssa313,$__et);
      $865 = HEAP32[$__et>>2]|0;
      $866 = ($865|0)==(0);
      if ($866) {
       $$0 = 1;
      } else {
       $867 = HEAP32[$__err>>2]|0;
       $868 = $867 | 4;
       HEAP32[$__err>>2] = $868;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $869 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $870 = ($869|0)==(0|0);
   if (!($870)) {
    $871 = HEAP32[$2>>2]|0;
    __THREW__ = 0;
    invoke_vi($871|0,($869|0));
    $872 = __THREW__; __THREW__ = 0;
    $873 = $872&1;
    if ($873) {
     $874 = ___cxa_find_matching_catch(0|0)|0;
     $875 = tempRet0;
     ___clang_call_terminate($874);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $82 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $83 = ($82|0)==(0|0);
 if (!($83)) {
  $84 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($84|0,($82|0));
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if ($86) {
   $87 = ___cxa_find_matching_catch(0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(671,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(440|0),(83|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$013 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $__wbuf = sp + 32|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 28|0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (665);
 $3 = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 $4 = (invoke_ii(558,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$011 = $34;$$019 = $35;$96 = $__wbuf;
  label = 36;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(559,($__loc|0),(11864|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if (!($9)) {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $10;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $14 = (invoke_iiiiiiiiiiii(666,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     if ($14) {
      $17 = HEAP8[$__v>>0]|0;
      $18 = $17 & 1;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $23 = ((($__v)) + 1|0);
       HEAP8[$23>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $20 = ((($__v)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP8[$21>>0] = 0;
       $22 = ((($__v)) + 4|0);
       HEAP32[$22>>2] = 0;
      }
      $24 = HEAP8[$__neg>>0]|0;
      $25 = ($24<<24>>24)==(0);
      if (!($25)) {
       $26 = HEAP32[$7>>2]|0;
       $27 = ((($26)) + 28|0);
       $28 = HEAP32[$27>>2]|0;
       __THREW__ = 0;
       $29 = (invoke_iii($28|0,($7|0),45)|0);
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(555,($__v|0),($29|0));
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        break;
       }
      }
      $36 = HEAP32[$7>>2]|0;
      $37 = ((($36)) + 28|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_iii($38|0,($7|0),48)|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       break;
      }
      $42 = HEAP32[$__wb>>2]|0;
      $43 = HEAP32[$__wn>>2]|0;
      $44 = ((($43)) + -1|0);
      $45 = ($42>>>0)<($44>>>0);
      L18: do {
       if ($45) {
        $__w$013 = $42;
        while(1) {
         $46 = HEAP8[$__w$013>>0]|0;
         $47 = ($46<<24>>24)==($39<<24>>24);
         if (!($47)) {
          $__w$0$lcssa = $__w$013;
          break L18;
         }
         $48 = ((($__w$013)) + 1|0);
         $49 = ($48>>>0)<($44>>>0);
         if ($49) {
          $__w$013 = $48;
         } else {
          $__w$0$lcssa = $48;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $42;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(672,($__v|0),($__w$0$lcssa|0),($43|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       break;
      }
     }
     $52 = HEAP32[$__b>>2]|0;
     $53 = ($52|0)==(0|0);
     do {
      if ($53) {
       $66 = 0;
      } else {
       $54 = ((($52)) + 12|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = ((($52)) + 16|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($55|0)==($57|0);
       if ($58) {
        $59 = HEAP32[$52>>2]|0;
        $60 = ((($59)) + 36|0);
        $61 = HEAP32[$60>>2]|0;
        __THREW__ = 0;
        $62 = (invoke_ii($61|0,($52|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         break L4;
        }
        $65 = ($62|0)==(-1);
        if ($65) {
         HEAP32[$__b>>2] = 0;
         $66 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $66 = $$pre$i$i$i;
         break;
        }
       } else {
        $66 = $52;
       }
      }
     } while(0);
     $67 = ($66|0)==(0|0);
     $68 = ($10|0)==(0);
     do {
      if ($68) {
       label = 29;
      } else {
       $69 = ((($13)) + 12|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ((($13)) + 16|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($70|0)==($72|0);
       if ($73) {
        $74 = $10;
        $75 = HEAP32[$74>>2]|0;
        $76 = ((($75)) + 36|0);
        $77 = HEAP32[$76>>2]|0;
        __THREW__ = 0;
        $78 = (invoke_ii($77|0,($13|0))|0);
        $79 = __THREW__; __THREW__ = 0;
        $80 = $79&1;
        if ($80) {
         break L4;
        }
        $81 = ($78|0)==(-1);
        if ($81) {
         HEAP32[$__e>>2] = 0;
         label = 29;
         break;
        }
       }
       if (!($67)) {
        label = 30;
       }
      }
     } while(0);
     if ((label|0) == 29) {
      if ($67) {
       label = 30;
      }
     }
     if ((label|0) == 30) {
      $82 = HEAP32[$__err>>2]|0;
      $83 = $82 | 2;
      HEAP32[$__err>>2] = $83;
     }
     $84 = HEAP32[$__b>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
     $85 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $86 = ($85|0)==(0|0);
     if (!($86)) {
      $87 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($87|0,($85|0));
      $88 = __THREW__; __THREW__ = 0;
      $89 = $88&1;
      if ($89) {
       $90 = ___cxa_find_matching_catch(0|0)|0;
       $91 = tempRet0;
       ___clang_call_terminate($90);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($84|0);
    }
   }
  } while(0);
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $94 = ($$pre|0)==(0|0);
  if ($94) {
   $$0110 = $93;$$012 = $92;
  } else {
   $$011 = $92;$$019 = $93;$96 = $$pre;
   label = 36;
  }
 }
 if ((label|0) == 36) {
  $95 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($95|0,($96|0));
  $97 = __THREW__; __THREW__ = 0;
  $98 = $97&1;
  if ($98) {
   $99 = ___cxa_find_matching_catch(0|0)|0;
   $100 = tempRet0;
   ___clang_call_terminate($99);
   // unreachable;
  } else {
   $$0110 = $$019;$$012 = $$011;
  }
 }
 ___resumeException($$012|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 do {
  if ($__intl) {
   $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11472)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
   $14 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
   $15 = HEAP32[$10>>2]|0;
   $16 = ((($15)) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
   $18 = HEAP8[$__nsn>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $24 = ((($__nsn)) + 1|0);
    HEAP8[$24>>0] = 0;
    HEAP8[$__nsn>>0] = 0;
   } else {
    $21 = ((($__nsn)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP8[$22>>0] = 0;
    $23 = ((($__nsn)) + 4|0);
    HEAP32[$23>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__nsn|0),0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch(0|0)|0;
    $28 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   }
   ;HEAP32[$__nsn>>2]=HEAP32[$1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
   HEAP32[$1>>2] = 0;
   $29 = ((($1)) + 4|0);
   HEAP32[$29>>2] = 0;
   $30 = ((($1)) + 8|0);
   HEAP32[$30>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
   $31 = HEAP32[$10>>2]|0;
   $32 = ((($31)) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vii[$33 & 1023]($2,$10);
   $34 = HEAP8[$__psn>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $40 = ((($__psn)) + 1|0);
    HEAP8[$40>>0] = 0;
    HEAP8[$__psn>>0] = 0;
   } else {
    $37 = ((($__psn)) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    HEAP8[$38>>0] = 0;
    $39 = ((($__psn)) + 4|0);
    HEAP32[$39>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__psn|0),0);
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    $43 = ___cxa_find_matching_catch(0|0)|0;
    $44 = tempRet0;
    ___clang_call_terminate($43);
    // unreachable;
   }
   ;HEAP32[$__psn>>2]=HEAP32[$2>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
   HEAP32[$2>>2] = 0;
   $45 = ((($2)) + 4|0);
   HEAP32[$45>>2] = 0;
   $46 = ((($2)) + 8|0);
   HEAP32[$46>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
   $47 = HEAP32[$10>>2]|0;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
   HEAP8[$__dp>>0] = $50;
   $51 = HEAP32[$10>>2]|0;
   $52 = ((($51)) + 16|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (FUNCTION_TABLE_ii[$53 & 1023]($10)|0);
   HEAP8[$__ts>>0] = $54;
   $55 = HEAP32[$10>>2]|0;
   $56 = ((($55)) + 20|0);
   $57 = HEAP32[$56>>2]|0;
   FUNCTION_TABLE_vii[$57 & 1023]($3,$10);
   $58 = HEAP8[$__grp>>0]|0;
   $59 = $58 & 1;
   $60 = ($59<<24>>24)==(0);
   if ($60) {
    $64 = ((($__grp)) + 1|0);
    HEAP8[$64>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $61 = ((($__grp)) + 8|0);
    $62 = HEAP32[$61>>2]|0;
    HEAP8[$62>>0] = 0;
    $63 = ((($__grp)) + 4|0);
    HEAP32[$63>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__grp|0),0);
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if ($66) {
    $67 = ___cxa_find_matching_catch(0|0)|0;
    $68 = tempRet0;
    ___clang_call_terminate($67);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$3>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
   HEAP32[$3>>2] = 0;
   $69 = ((($3)) + 4|0);
   HEAP32[$69>>2] = 0;
   $70 = ((($3)) + 8|0);
   HEAP32[$70>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $71 = HEAP32[$10>>2]|0;
   $72 = ((($71)) + 24|0);
   $73 = HEAP32[$72>>2]|0;
   FUNCTION_TABLE_vii[$73 & 1023]($4,$10);
   $74 = HEAP8[$__sym>>0]|0;
   $75 = $74 & 1;
   $76 = ($75<<24>>24)==(0);
   if ($76) {
    $80 = ((($__sym)) + 1|0);
    HEAP8[$80>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $77 = ((($__sym)) + 8|0);
    $78 = HEAP32[$77>>2]|0;
    HEAP8[$78>>0] = 0;
    $79 = ((($__sym)) + 4|0);
    HEAP32[$79>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__sym|0),0);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    $83 = ___cxa_find_matching_catch(0|0)|0;
    $84 = tempRet0;
    ___clang_call_terminate($83);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$4>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
    HEAP32[$4>>2] = 0;
    $85 = ((($4)) + 4|0);
    HEAP32[$85>>2] = 0;
    $86 = ((($4)) + 8|0);
    HEAP32[$86>>2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
    $87 = HEAP32[$10>>2]|0;
    $88 = ((($87)) + 36|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (FUNCTION_TABLE_ii[$89 & 1023]($10)|0);
    $storemerge = $90;
    break;
   }
  } else {
   $91 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11408)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($92)) + 44|0);
   $94 = HEAP32[$93>>2]|0;
   FUNCTION_TABLE_vii[$94 & 1023]($5,$91);
   $95 = HEAP32[$5>>2]|0;
   HEAP8[$__pat>>0]=$95&255;HEAP8[$__pat+1>>0]=($95>>8)&255;HEAP8[$__pat+2>>0]=($95>>16)&255;HEAP8[$__pat+3>>0]=$95>>24;
   $96 = HEAP32[$91>>2]|0;
   $97 = ((($96)) + 32|0);
   $98 = HEAP32[$97>>2]|0;
   FUNCTION_TABLE_vii[$98 & 1023]($6,$91);
   $99 = HEAP8[$__nsn>>0]|0;
   $100 = $99 & 1;
   $101 = ($100<<24>>24)==(0);
   if ($101) {
    $105 = ((($__nsn)) + 1|0);
    HEAP8[$105>>0] = 0;
    HEAP8[$__nsn>>0] = 0;
   } else {
    $102 = ((($__nsn)) + 8|0);
    $103 = HEAP32[$102>>2]|0;
    HEAP8[$103>>0] = 0;
    $104 = ((($__nsn)) + 4|0);
    HEAP32[$104>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__nsn|0),0);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   if ($107) {
    $108 = ___cxa_find_matching_catch(0|0)|0;
    $109 = tempRet0;
    ___clang_call_terminate($108);
    // unreachable;
   }
   ;HEAP32[$__nsn>>2]=HEAP32[$6>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
   HEAP32[$6>>2] = 0;
   $110 = ((($6)) + 4|0);
   HEAP32[$110>>2] = 0;
   $111 = ((($6)) + 8|0);
   HEAP32[$111>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   $112 = HEAP32[$91>>2]|0;
   $113 = ((($112)) + 28|0);
   $114 = HEAP32[$113>>2]|0;
   FUNCTION_TABLE_vii[$114 & 1023]($7,$91);
   $115 = HEAP8[$__psn>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $121 = ((($__psn)) + 1|0);
    HEAP8[$121>>0] = 0;
    HEAP8[$__psn>>0] = 0;
   } else {
    $118 = ((($__psn)) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    HEAP8[$119>>0] = 0;
    $120 = ((($__psn)) + 4|0);
    HEAP32[$120>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__psn|0),0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    $124 = ___cxa_find_matching_catch(0|0)|0;
    $125 = tempRet0;
    ___clang_call_terminate($124);
    // unreachable;
   }
   ;HEAP32[$__psn>>2]=HEAP32[$7>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
   HEAP32[$7>>2] = 0;
   $126 = ((($7)) + 4|0);
   HEAP32[$126>>2] = 0;
   $127 = ((($7)) + 8|0);
   HEAP32[$127>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
   $128 = HEAP32[$91>>2]|0;
   $129 = ((($128)) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 1023]($91)|0);
   HEAP8[$__dp>>0] = $131;
   $132 = HEAP32[$91>>2]|0;
   $133 = ((($132)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (FUNCTION_TABLE_ii[$134 & 1023]($91)|0);
   HEAP8[$__ts>>0] = $135;
   $136 = HEAP32[$91>>2]|0;
   $137 = ((($136)) + 20|0);
   $138 = HEAP32[$137>>2]|0;
   FUNCTION_TABLE_vii[$138 & 1023]($8,$91);
   $139 = HEAP8[$__grp>>0]|0;
   $140 = $139 & 1;
   $141 = ($140<<24>>24)==(0);
   if ($141) {
    $145 = ((($__grp)) + 1|0);
    HEAP8[$145>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $142 = ((($__grp)) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    HEAP8[$143>>0] = 0;
    $144 = ((($__grp)) + 4|0);
    HEAP32[$144>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__grp|0),0);
   $146 = __THREW__; __THREW__ = 0;
   $147 = $146&1;
   if ($147) {
    $148 = ___cxa_find_matching_catch(0|0)|0;
    $149 = tempRet0;
    ___clang_call_terminate($148);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$8>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
   HEAP32[$8>>2] = 0;
   $150 = ((($8)) + 4|0);
   HEAP32[$150>>2] = 0;
   $151 = ((($8)) + 8|0);
   HEAP32[$151>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
   $152 = HEAP32[$91>>2]|0;
   $153 = ((($152)) + 24|0);
   $154 = HEAP32[$153>>2]|0;
   FUNCTION_TABLE_vii[$154 & 1023]($9,$91);
   $155 = HEAP8[$__sym>>0]|0;
   $156 = $155 & 1;
   $157 = ($156<<24>>24)==(0);
   if ($157) {
    $161 = ((($__sym)) + 1|0);
    HEAP8[$161>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $158 = ((($__sym)) + 8|0);
    $159 = HEAP32[$158>>2]|0;
    HEAP8[$159>>0] = 0;
    $160 = ((($__sym)) + 4|0);
    HEAP32[$160>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__sym|0),0);
   $162 = __THREW__; __THREW__ = 0;
   $163 = $162&1;
   if ($163) {
    $164 = ___cxa_find_matching_catch(0|0)|0;
    $165 = tempRet0;
    ___clang_call_terminate($164);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
    HEAP32[$9>>2] = 0;
    $166 = ((($9)) + 4|0);
    HEAP32[$166>>2] = 0;
    $167 = ((($9)) + 8|0);
    HEAP32[$167>>2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
    $168 = HEAP32[$91>>2]|0;
    $169 = ((($168)) + 36|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (FUNCTION_TABLE_ii[$170 & 1023]($91)|0);
    $storemerge = $171;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$01$i$i22 = 0, $$__ig$0 = 0, $$lcssa = 0, $$not = 0, $$not16 = 0, $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$018 = 0, $__r$019 = 0;
 var $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond217 = 0, $or$cond220 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($__grouping)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7|0)==(0);
 L1: do {
  if (!($8)) {
   $9 = ($__g|0)==($__g_end|0);
   if ($9) {
    $19 = $0;$27 = $4;
   } else {
    $10 = ((($__g_end)) + -4|0);
    $11 = ($10>>>0)>($__g>>>0);
    if ($11) {
     $$01$i$i22 = $__g;$14 = $10;
     while(1) {
      $12 = HEAP32[$$01$i$i22>>2]|0;
      $13 = HEAP32[$14>>2]|0;
      HEAP32[$$01$i$i22>>2] = $13;
      HEAP32[$14>>2] = $12;
      $15 = ((($$01$i$i22)) + 4|0);
      $16 = ((($14)) + -4|0);
      $17 = ($15>>>0)<($16>>>0);
      if ($17) {
       $$01$i$i22 = $15;$14 = $16;
      } else {
       break;
      }
     }
    }
    $$pre = HEAP8[$__grouping>>0]|0;
    $$pre11 = HEAP32[$3>>2]|0;
    $19 = $$pre;$27 = $$pre11;
   }
   $18 = $19 & 1;
   $20 = ($18<<24>>24)==(0);
   $21 = ((($__grouping)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($__grouping)) + 1|0);
   $24 = $20 ? $23 : $22;
   $25 = $19&255;
   $26 = $25 >>> 1;
   $28 = $20 ? $26 : $27;
   $29 = (($24) + ($28)|0);
   $30 = ((($__g_end)) + -4|0);
   $31 = $29;
   $32 = ($30>>>0)>($__g>>>0);
   $33 = HEAP8[$24>>0]|0;
   $$not16 = ($33<<24>>24)<(1);
   $34 = ($33<<24>>24)==(127);
   $or$cond217 = $$not16 | $34;
   L10: do {
    if ($32) {
     $36 = $33;$__ig$018 = $24;$__r$019 = $__g;$or$cond220 = $or$cond217;
     while(1) {
      if (!($or$cond220)) {
       $35 = $36 << 24 >> 24;
       $37 = HEAP32[$__r$019>>2]|0;
       $38 = ($35|0)==($37|0);
       if (!($38)) {
        break;
       }
      }
      $39 = $__ig$018;
      $40 = (($31) - ($39))|0;
      $41 = ($40|0)>(1);
      $42 = ((($__ig$018)) + 1|0);
      $$__ig$0 = $41 ? $42 : $__ig$018;
      $43 = ((($__r$019)) + 4|0);
      $44 = ($43>>>0)<($30>>>0);
      $45 = HEAP8[$$__ig$0>>0]|0;
      $$not = ($45<<24>>24)<(1);
      $46 = ($45<<24>>24)==(127);
      $or$cond2 = $$not | $46;
      if ($44) {
       $36 = $45;$__ig$018 = $$__ig$0;$__r$019 = $43;$or$cond220 = $or$cond2;
      } else {
       $$lcssa = $45;$or$cond2$lcssa = $or$cond2;
       break L10;
      }
     }
     HEAP32[$__err>>2] = 4;
     break L1;
    } else {
     $$lcssa = $33;$or$cond2$lcssa = $or$cond217;
    }
   } while(0);
   if (!($or$cond2$lcssa)) {
    $47 = $$lcssa << 24 >> 24;
    $48 = HEAP32[$30>>2]|0;
    $49 = (($48) + -1)|0;
    $50 = ($49>>>0)<($47>>>0);
    if (!($50)) {
     HEAP32[$__err>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$112 = 0, $$113 = 0, $$1210 = 0, $$1211 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre14 = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$216 = 0, $__neg = 0, $__w$017 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 72|0;
 $__wb = sp + 64|0;
 $__wn = sp + 56|0;
 $__loc = sp + 52|0;
 $__neg = sp + 576|0;
 $0 = sp + 48|0;
 $__atoms = sp + 8|0;
 $__nbuf = sp + 476|0;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (665);
 $3 = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 $4 = (invoke_ii(558,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$112 = $34;$$1210 = $35;$121 = 665;$122 = $__wbuf;
  label = 47;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(559,($__loc|0),(11856|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $13 = (invoke_iiiiiiiiiiii(674,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 10;
    } else {
     L7: do {
      if ($13) {
       $16 = HEAP32[$7>>2]|0;
       $17 = ((($16)) + 48|0);
       $18 = HEAP32[$17>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($18|0,($7|0),(29858|0),((29868)|0),($__atoms|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn>>2]|0;
       $22 = HEAP32[$__wb>>2]|0;
       $23 = $21;
       $24 = $22;
       $25 = (($23) - ($24))|0;
       $26 = ($25|0)>(392);
       if ($26) {
        $27 = $25 >> 2;
        $28 = (($27) + 2)|0;
        $29 = (_malloc($28)|0);
        $30 = $29;
        $31 = ($29|0)==(0|0);
        if ($31) {
         __THREW__ = 0;
         invoke_v(655);
         $32 = __THREW__; __THREW__ = 0;
         $33 = $32&1;
         if ($33) {
          $40 = $30;
         } else {
          $75 = $30;$__nc$0 = 0;
          label = 13;
         }
        } else {
         $75 = $30;$__nc$0 = $29;
         label = 13;
        }
       } else {
        $75 = 0;$__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label|0) == 13) {
         $43 = HEAP8[$__neg>>0]|0;
         $44 = ($43<<24>>24)==(0);
         if ($44) {
          $__nc$1 = $__nc$0;
         } else {
          $45 = ((($__nc$0)) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $45;
         }
         $46 = ((($__atoms)) + 40|0);
         $47 = $__atoms;
         $48 = ($22>>>0)<($21>>>0);
         if ($48) {
          $49 = ((($__atoms)) + 4|0);
          $50 = ((($49)) + 4|0);
          $51 = ((($50)) + 4|0);
          $52 = ((($51)) + 4|0);
          $53 = ((($52)) + 4|0);
          $54 = ((($53)) + 4|0);
          $55 = ((($54)) + 4|0);
          $56 = ((($55)) + 4|0);
          $57 = ((($56)) + 4|0);
          $__nc$216 = $__nc$1;$__w$017 = $22;
          while(1) {
           $58 = HEAP32[$__w$017>>2]|0;
           $59 = HEAP32[$__atoms>>2]|0;
           $60 = ($59|0)==($58|0);
           do {
            if ($60) {
             $$0$lcssa$i = $__atoms;
            } else {
             $61 = HEAP32[$49>>2]|0;
             $62 = ($61|0)==($58|0);
             if ($62) {
              $$0$lcssa$i = $49;
             } else {
              $127 = HEAP32[$50>>2]|0;
              $128 = ($127|0)==($58|0);
              if ($128) {
               $$0$lcssa$i = $50;
              } else {
               $129 = HEAP32[$51>>2]|0;
               $130 = ($129|0)==($58|0);
               if ($130) {
                $$0$lcssa$i = $51;
               } else {
                $131 = HEAP32[$52>>2]|0;
                $132 = ($131|0)==($58|0);
                if ($132) {
                 $$0$lcssa$i = $52;
                } else {
                 $133 = HEAP32[$53>>2]|0;
                 $134 = ($133|0)==($58|0);
                 if ($134) {
                  $$0$lcssa$i = $53;
                  break;
                 }
                 $135 = HEAP32[$54>>2]|0;
                 $136 = ($135|0)==($58|0);
                 if ($136) {
                  $$0$lcssa$i = $54;
                  break;
                 }
                 $137 = HEAP32[$55>>2]|0;
                 $138 = ($137|0)==($58|0);
                 if ($138) {
                  $$0$lcssa$i = $55;
                  break;
                 }
                 $139 = HEAP32[$56>>2]|0;
                 $140 = ($139|0)==($58|0);
                 if ($140) {
                  $$0$lcssa$i = $56;
                  break;
                 }
                 $141 = HEAP32[$57>>2]|0;
                 $142 = ($141|0)==($58|0);
                 $$ = $142 ? $57 : $46;
                 $$0$lcssa$i = $$;
                }
               }
              }
             }
            }
           } while(0);
           $63 = $$0$lcssa$i;
           $64 = (($63) - ($47))|0;
           $65 = $64 >> 2;
           $66 = (29858 + ($65)|0);
           $67 = HEAP8[$66>>0]|0;
           HEAP8[$__nc$216>>0] = $67;
           $68 = ((($__w$017)) + 4|0);
           $69 = ((($__nc$216)) + 1|0);
           $$pre = HEAP32[$__wn>>2]|0;
           $70 = ($68>>>0)<($$pre>>>0);
           if ($70) {
            $__nc$216 = $69;$__w$017 = $68;
           } else {
            $__nc$2$lcssa = $69;
            break;
           }
          }
         } else {
          $__nc$2$lcssa = $__nc$1;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $71 = (_sscanf($__nbuf,29838,$vararg_buffer)|0);
         $72 = ($71|0)==(1);
         if (!($72)) {
          __THREW__ = 0;
          invoke_vi(667,(29842|0));
          $73 = __THREW__; __THREW__ = 0;
          $74 = $73&1;
          if ($74) {
           $40 = $75;
           break;
          }
         }
         $76 = ($75|0)==(0);
         if (!($76)) {
          $77 = $75;
          _free($77);
         }
         break L7;
        }
       } while(0);
       $38 = ___cxa_find_matching_catch()|0;
       $39 = tempRet0;
       $41 = ($40|0)==(0);
       if ($41) {
        $$0 = $38;$$01 = $39;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $42 = $40;
       _free($42);
       $$0 = $38;$$01 = $39;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while(0);
     $78 = HEAP32[$__b>>2]|0;
     $79 = ($78|0)==(0|0);
     do {
      if ($79) {
       $143 = 1;
      } else {
       $80 = ((($78)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ((($78)) + 16|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ($81|0)==($83|0);
       if ($84) {
        $85 = HEAP32[$78>>2]|0;
        $86 = ((($85)) + 36|0);
        $87 = HEAP32[$86>>2]|0;
        __THREW__ = 0;
        $88 = (invoke_ii($87|0,($78|0))|0);
        $89 = __THREW__; __THREW__ = 0;
        $90 = $89&1;
        if ($90) {
         label = 10;
         break L4;
        } else {
         $$0$i$i$i$i = $88;
        }
       } else {
        $91 = HEAP32[$81>>2]|0;
        $$0$i$i$i$i = $91;
       }
       $92 = ($$0$i$i$i$i|0)==(-1);
       if ($92) {
        HEAP32[$__b>>2] = 0;
        $143 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $143 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $93 = HEAP32[$__e>>2]|0;
     $94 = ($93|0)==(0|0);
     do {
      if ($94) {
       label = 38;
      } else {
       $95 = ((($93)) + 12|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = ((($93)) + 16|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = ($96|0)==($98|0);
       if ($99) {
        $100 = HEAP32[$93>>2]|0;
        $101 = ((($100)) + 36|0);
        $102 = HEAP32[$101>>2]|0;
        __THREW__ = 0;
        $103 = (invoke_ii($102|0,($93|0))|0);
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        if ($105) {
         label = 10;
         break L4;
        } else {
         $$0$i$i1$i$i = $103;
        }
       } else {
        $106 = HEAP32[$96>>2]|0;
        $$0$i$i1$i$i = $106;
       }
       $107 = ($$0$i$i1$i$i|0)==(-1);
       if ($107) {
        HEAP32[$__e>>2] = 0;
        label = 38;
        break;
       } else {
        if ($143) {
         break;
        } else {
         label = 40;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 38) {
      if ($143) {
       label = 40;
      }
     }
     if ((label|0) == 40) {
      $108 = HEAP32[$__err>>2]|0;
      $109 = $108 | 2;
      HEAP32[$__err>>2] = $109;
     }
     $110 = HEAP32[$__b>>2]|0;
     $111 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($111)|0);
     $112 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $113 = ($112|0)==(0|0);
     if (!($113)) {
      $114 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($114|0,($112|0));
      $115 = __THREW__; __THREW__ = 0;
      $116 = $115&1;
      if ($116) {
       $117 = ___cxa_find_matching_catch(0|0)|0;
       $118 = tempRet0;
       ___clang_call_terminate($117);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($110|0);
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $36 = ___cxa_find_matching_catch()|0;
   $37 = tempRet0;
   $$0 = $36;$$01 = $37;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $119 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($119)|0);
  $$pre6 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2] = 0;
  $120 = ($$pre6|0)==(0|0);
  if ($120) {
   $$113 = $$0;$$1211 = $$01;
  } else {
   $$pre14 = HEAP32[$2>>2]|0;
   $$112 = $$0;$$1210 = $$01;$121 = $$pre14;$122 = $$pre6;
   label = 47;
  }
 }
 if ((label|0) == 47) {
  __THREW__ = 0;
  invoke_vi($121|0,($122|0));
  $123 = __THREW__; __THREW__ = 0;
  $124 = $123&1;
  if ($124) {
   $125 = ___cxa_find_matching_catch(0|0)|0;
   $126 = tempRet0;
   ___clang_call_terminate($125);
   // unreachable;
  } else {
   $$113 = $$112;$$1211 = $$1210;
  }
 }
 ___resumeException($$113|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i126 = 0, $$0$i$i$i$i158 = 0, $$0$i$i$i$i183 = 0, $$0$i$i$i$i30 = 0, $$0$i$i$i$i51 = 0, $$0$i$i$i$i92 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i132 = 0, $$0$i$i1$i$i164 = 0, $$0$i$i1$i$i189 = 0, $$0$i$i1$i$i36 = 0, $$0$i$i1$i$i57 = 0, $$0$i$i1$i$i98 = 0, $$0$i$i110 = 0, $$0$i$i119 = 0, $$0$i$i122 = 0, $$0$i$i144 = 0;
 var $$0$i$i155 = 0, $$0$i$i179 = 0, $$0$i$i45 = 0, $$0$i$i49 = 0, $$0$i$i66 = 0, $$0$i$i73 = 0, $$0$i$i78 = 0, $$0$i$i86 = 0, $$0$i$i89 = 0, $$in386 = 0, $$lcssa261 = 0, $$lcssa357 = 0, $$lcssa416 = 0, $$lcssa418 = 0, $$ph = 0, $$ph345 = 0, $$ph346 = 0, $$phi$trans$insert = 0, $$phi$trans$insert296 = 0, $$pre = 0;
 var $$pre$i$i$i = 0, $$pre$i$i$i128 = 0, $$pre$i$i$i160 = 0, $$pre$i$i$i185 = 0, $$pre$i$i$i32 = 0, $$pre$i$i$i53 = 0, $$pre$i$i$i94 = 0, $$pre$i3$i$i100282$ph = 0, $$pre$i3$i$i100282306 = 0, $$pre$i3$i$i100382 = 0, $$pre$i3$i$i134 = 0, $$pre$i3$i$i166 = 0, $$pre$i3$i$i166275 = 0, $$pre$i3$i$i166277 = 0, $$pre$i3$i$i191290 = 0, $$pre$i3$i$i191291 = 0, $$pre$i3$i$i191391 = 0, $$pre$i3$i$i59 = 0, $$pre$i3$i$i59300 = 0, $$pre$i3$i$i59302 = 0;
 var $$pre279 = 0, $$pre281 = 0, $$pre284 = 0, $$pre285 = 0, $$pre286 = 0, $$pre287 = 0, $$pre288 = 0, $$pre289 = 0, $$pre293 = 0, $$pre294 = 0, $$pre295 = 0, $$pre297 = 0, $$pre298 = 0, $$pre299 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0;
 var $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa417 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0397 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0399 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0;
 var $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0, $or$cond9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i129 = 0, $phitmp$i$i$i161 = 0, $phitmp$i$i$i186 = 0, $phitmp$i$i$i33 = 0, $phitmp$i$i$i54 = 0, $phitmp$i$i$i95 = 0, $phitmp$i4$i$i101 = 0, $phitmp$i4$i$i167 = 0, $phitmp$i4$i$i192 = 0, $phitmp$i4$i$i60 = 0, $switch = 0, $tmp$i$i103 = 0, $tmp$i$i169 = 0;
 var $tmp$i$i194 = 0, $tmp$i$i62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 88|0;
 $__gn = sp + 80|0;
 $__ge = sp + 76|0;
 $__pat = sp + 500|0;
 $__dp = sp + 72|0;
 $__ts = sp + 68|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb>>2] = $1;
 $2 = ((($__gb)) + 4|0);
 HEAP32[$2>>2] = (665);
 HEAP32[$__gn>>2] = $__gbuf;
 $3 = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $3;
 HEAP32[$__grp>>2] = 0;
 $4 = ((($__grp)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($__grp)) + 8|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$__sym>>2] = 0;
 $6 = ((($__sym)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($__sym)) + 8|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$__psn>>2] = 0;
 $8 = ((($__psn)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($__psn)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$__nsn>>2] = 0;
 $10 = ((($__nsn)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($__nsn)) + 8|0);
 HEAP32[$11>>2] = 0;
 HEAP32[$__spaces>>2] = 0;
 $12 = ((($__spaces)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($__spaces)) + 8|0);
 HEAP32[$13>>2] = 0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(675,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L1: do {
  if ($15) {
   $77 = ___cxa_find_matching_catch()|0;
   $78 = tempRet0;
   $lpad$phi$index = $77;$lpad$phi$index8 = $78;
  } else {
   $16 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $16;
   $17 = ((($__psn)) + 4|0);
   $18 = ((($__nsn)) + 4|0);
   $19 = ((($__nsn)) + 8|0);
   $20 = ((($__psn)) + 8|0);
   $21 = $__flags & 512;
   $22 = ($21|0)!=(0);
   $23 = ((($__sym)) + 8|0);
   $24 = ((($__sym)) + 4|0);
   $25 = ((($__spaces)) + 4|0);
   $26 = ((($__spaces)) + 8|0);
   $27 = ((($__pat)) + 3|0);
   $28 = ((($__grp)) + 4|0);
   $863 = $__gbuf;$__p$0397 = 0;$__trailing_sign$0399 = 0;
   L4: while(1) {
    $29 = HEAP32[$__b>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      $864 = 1;
     } else {
      $31 = ((($29)) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ((($29)) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if ($35) {
       $36 = HEAP32[$29>>2]|0;
       $37 = ((($36)) + 36|0);
       $38 = HEAP32[$37>>2]|0;
       __THREW__ = 0;
       $39 = (invoke_ii($38|0,($29|0))|0);
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if ($41) {
        label = 26;
        break L4;
       } else {
        $$0$i$i$i$i30 = $39;
       }
      } else {
       $42 = HEAP32[$32>>2]|0;
       $$0$i$i$i$i30 = $42;
      }
      $43 = ($$0$i$i$i$i30|0)==(-1);
      if ($43) {
       HEAP32[$__b>>2] = 0;
       $864 = 1;
       break;
      } else {
       $$pre$i$i$i32 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i33 = ($$pre$i$i$i32|0)==(0|0);
       $864 = $phitmp$i$i$i33;
       break;
      }
     }
    } while(0);
    $44 = HEAP32[$__e>>2]|0;
    $45 = ($44|0)==(0|0);
    do {
     if ($45) {
      label = 16;
     } else {
      $46 = ((($44)) + 12|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ((($44)) + 16|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($47|0)==($49|0);
      if ($50) {
       $51 = HEAP32[$44>>2]|0;
       $52 = ((($51)) + 36|0);
       $53 = HEAP32[$52>>2]|0;
       __THREW__ = 0;
       $54 = (invoke_ii($53|0,($44|0))|0);
       $55 = __THREW__; __THREW__ = 0;
       $56 = $55&1;
       if ($56) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i36 = $54;
       }
      } else {
       $57 = HEAP32[$47>>2]|0;
       $$0$i$i1$i$i36 = $57;
      }
      $58 = ($$0$i$i1$i$i36|0)==(-1);
      if ($58) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($864) {
        $865 = $44;
        break;
       } else {
        $$lcssa357 = $863;$__trailing_sign$0$lcssa = $__trailing_sign$0399;
        label = 244;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($864) {
      $$lcssa357 = $863;$__trailing_sign$0$lcssa = $__trailing_sign$0399;
      label = 244;
      break;
     } else {
      $865 = 0;
     }
    }
    $59 = (($__pat) + ($__p$0397)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    L28: do {
     switch ($61|0) {
     case 1:  {
      $cond = ($__p$0397|0)==(3);
      if ($cond) {
       $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
      } else {
       $86 = HEAP32[$__b>>2]|0;
       $87 = ((($86)) + 12|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ((($86)) + 16|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ($88|0)==($90|0);
       if ($91) {
        $92 = HEAP32[$86>>2]|0;
        $93 = ((($92)) + 36|0);
        $94 = HEAP32[$93>>2]|0;
        __THREW__ = 0;
        $95 = (invoke_ii($94|0,($86|0))|0);
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         label = 26;
         break L4;
        } else {
         $$0$i$i45 = $95;
        }
       } else {
        $98 = HEAP32[$88>>2]|0;
        $$0$i$i45 = $98;
       }
       $99 = HEAP32[$__ct>>2]|0;
       $100 = ((($99)) + 12|0);
       $101 = HEAP32[$100>>2]|0;
       __THREW__ = 0;
       $102 = (invoke_iiii($101|0,($__ct|0),8192,($$0$i$i45|0))|0);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        label = 26;
        break L4;
       }
       if (!($102)) {
        label = 42;
        break L4;
       }
       $105 = HEAP32[$__b>>2]|0;
       $106 = ((($105)) + 12|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ((($105)) + 16|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($107|0)==($109|0);
       if ($110) {
        $111 = HEAP32[$105>>2]|0;
        $112 = ((($111)) + 40|0);
        $113 = HEAP32[$112>>2]|0;
        __THREW__ = 0;
        $114 = (invoke_ii($113|0,($105|0))|0);
        $115 = __THREW__; __THREW__ = 0;
        $116 = $115&1;
        if ($116) {
         label = 26;
         break L4;
        } else {
         $$0$i$i49 = $114;
        }
       } else {
        $117 = ((($107)) + 4|0);
        HEAP32[$106>>2] = $117;
        $118 = HEAP32[$107>>2]|0;
        $$0$i$i49 = $118;
       }
       __THREW__ = 0;
       invoke_vii(676,($__spaces|0),($$0$i$i49|0));
       $119 = __THREW__; __THREW__ = 0;
       $120 = $119&1;
       if ($120) {
        label = 26;
        break L4;
       } else {
        $$pre$i3$i$i59 = $865;$139 = $865;
        label = 44;
       }
      }
      break;
     }
     case 0:  {
      $123 = ($__p$0397|0)==(3);
      if ($123) {
       $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
      } else {
       $$pre$i3$i$i59 = $865;$139 = $865;
       label = 44;
      }
      break;
     }
     case 3:  {
      $190 = HEAP8[$__psn>>0]|0;
      $191 = $190 & 1;
      $192 = ($191<<24>>24)==(0);
      $193 = HEAP32[$17>>2]|0;
      $194 = $190&255;
      $195 = $194 >>> 1;
      $196 = $192 ? $195 : $193;
      $197 = HEAP8[$__nsn>>0]|0;
      $198 = $197 & 1;
      $199 = ($198<<24>>24)==(0);
      $200 = HEAP32[$18>>2]|0;
      $201 = $197&255;
      $202 = $201 >>> 1;
      $203 = $199 ? $202 : $200;
      $204 = (0 - ($203))|0;
      $205 = ($196|0)==($204|0);
      if ($205) {
       $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
      } else {
       $206 = ($196|0)==(0);
       if ($206) {
        $248 = HEAP32[$__b>>2]|0;
        $249 = ((($248)) + 12|0);
        $250 = HEAP32[$249>>2]|0;
        $251 = ((($248)) + 16|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = ($250|0)==($252|0);
        if ($253) {
         $254 = HEAP32[$248>>2]|0;
         $255 = ((($254)) + 36|0);
         $256 = HEAP32[$255>>2]|0;
         __THREW__ = 0;
         $257 = (invoke_ii($256|0,($248|0))|0);
         $258 = __THREW__; __THREW__ = 0;
         $259 = $258&1;
         if ($259) {
          label = 26;
          break L4;
         }
         $$pre299 = HEAP8[$__nsn>>0]|0;
         $$0$i$i110 = $257;$262 = $$pre299;
        } else {
         $260 = HEAP32[$250>>2]|0;
         $$0$i$i110 = $260;$262 = $197;
        }
        $261 = $262 & 1;
        $263 = ($261<<24>>24)==(0);
        $264 = HEAP32[$19>>2]|0;
        $265 = $263 ? $18 : $264;
        $266 = HEAP32[$265>>2]|0;
        $267 = ($$0$i$i110|0)==($266|0);
        if (!($267)) {
         $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
         break L28;
        }
        $268 = HEAP32[$__b>>2]|0;
        $269 = ((($268)) + 12|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = ((($268)) + 16|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($270|0)==($272|0);
        if ($273) {
         $274 = HEAP32[$268>>2]|0;
         $275 = ((($274)) + 40|0);
         $276 = HEAP32[$275>>2]|0;
         __THREW__ = 0;
         (invoke_ii($276|0,($268|0))|0);
         $277 = __THREW__; __THREW__ = 0;
         $278 = $277&1;
         if ($278) {
          label = 26;
          break L4;
         }
        } else {
         $279 = ((($270)) + 4|0);
         HEAP32[$269>>2] = $279;
        }
        HEAP8[$__neg>>0] = 1;
        $280 = HEAP8[$__nsn>>0]|0;
        $281 = $280 & 1;
        $282 = ($281<<24>>24)==(0);
        $283 = HEAP32[$18>>2]|0;
        $284 = $280&255;
        $285 = $284 >>> 1;
        $286 = $282 ? $285 : $283;
        $287 = ($286>>>0)>(1);
        $__nsn$__trailing_sign$0 = $287 ? $__nsn : $__trailing_sign$0399;
        $866 = $863;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L28;
       }
       $207 = ($203|0)==(0);
       $208 = HEAP32[$__b>>2]|0;
       $209 = ((($208)) + 12|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = ((($208)) + 16|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = ($210|0)==($212|0);
       if ($207) {
        if ($213) {
         $214 = HEAP32[$208>>2]|0;
         $215 = ((($214)) + 36|0);
         $216 = HEAP32[$215>>2]|0;
         __THREW__ = 0;
         $217 = (invoke_ii($216|0,($208|0))|0);
         $218 = __THREW__; __THREW__ = 0;
         $219 = $218&1;
         if ($219) {
          label = 26;
          break L4;
         }
         $$pre298 = HEAP8[$__psn>>0]|0;
         $$0$i$i89 = $217;$222 = $$pre298;
        } else {
         $220 = HEAP32[$210>>2]|0;
         $$0$i$i89 = $220;$222 = $190;
        }
        $221 = $222 & 1;
        $223 = ($221<<24>>24)==(0);
        $224 = HEAP32[$20>>2]|0;
        $225 = $223 ? $17 : $224;
        $226 = HEAP32[$225>>2]|0;
        $227 = ($$0$i$i89|0)==($226|0);
        if (!($227)) {
         HEAP8[$__neg>>0] = 1;
         $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
         break L28;
        }
        $228 = HEAP32[$__b>>2]|0;
        $229 = ((($228)) + 12|0);
        $230 = HEAP32[$229>>2]|0;
        $231 = ((($228)) + 16|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = ($230|0)==($232|0);
        if ($233) {
         $234 = HEAP32[$228>>2]|0;
         $235 = ((($234)) + 40|0);
         $236 = HEAP32[$235>>2]|0;
         __THREW__ = 0;
         (invoke_ii($236|0,($228|0))|0);
         $237 = __THREW__; __THREW__ = 0;
         $238 = $237&1;
         if ($238) {
          label = 26;
          break L4;
         }
        } else {
         $239 = ((($230)) + 4|0);
         HEAP32[$229>>2] = $239;
        }
        $240 = HEAP8[$__psn>>0]|0;
        $241 = $240 & 1;
        $242 = ($241<<24>>24)==(0);
        $243 = HEAP32[$17>>2]|0;
        $244 = $240&255;
        $245 = $244 >>> 1;
        $246 = $242 ? $245 : $243;
        $247 = ($246>>>0)>(1);
        $__psn$__trailing_sign$0 = $247 ? $__psn : $__trailing_sign$0399;
        $866 = $863;$__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L28;
       }
       if ($213) {
        $288 = HEAP32[$208>>2]|0;
        $289 = ((($288)) + 36|0);
        $290 = HEAP32[$289>>2]|0;
        __THREW__ = 0;
        $291 = (invoke_ii($290|0,($208|0))|0);
        $292 = __THREW__; __THREW__ = 0;
        $293 = $292&1;
        if ($293) {
         label = 26;
         break L4;
        }
        $$pre293 = HEAP8[$__psn>>0]|0;
        $$pre294 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = ((($$pre294)) + 12|0);
        $$pre295 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert296 = ((($$pre294)) + 16|0);
        $$pre297 = HEAP32[$$phi$trans$insert296>>2]|0;
        $$0$i$i122 = $291;$296 = $$pre293;$303 = $$pre294;$304 = $$pre295;$306 = $$pre297;
       } else {
        $294 = HEAP32[$210>>2]|0;
        $$0$i$i122 = $294;$296 = $190;$303 = $208;$304 = $210;$306 = $212;
       }
       $295 = $296 & 1;
       $297 = ($295<<24>>24)==(0);
       $298 = HEAP32[$20>>2]|0;
       $299 = $297 ? $17 : $298;
       $300 = HEAP32[$299>>2]|0;
       $301 = ($$0$i$i122|0)==($300|0);
       $302 = ((($303)) + 12|0);
       $305 = ($304|0)==($306|0);
       if ($301) {
        if ($305) {
         $307 = HEAP32[$303>>2]|0;
         $308 = ((($307)) + 40|0);
         $309 = HEAP32[$308>>2]|0;
         __THREW__ = 0;
         (invoke_ii($309|0,($303|0))|0);
         $310 = __THREW__; __THREW__ = 0;
         $311 = $310&1;
         if ($311) {
          label = 26;
          break L4;
         }
        } else {
         $312 = ((($304)) + 4|0);
         HEAP32[$302>>2] = $312;
        }
        $313 = HEAP8[$__psn>>0]|0;
        $314 = $313 & 1;
        $315 = ($314<<24>>24)==(0);
        $316 = HEAP32[$17>>2]|0;
        $317 = $313&255;
        $318 = $317 >>> 1;
        $319 = $315 ? $318 : $316;
        $320 = ($319>>>0)>(1);
        $__psn$__trailing_sign$010 = $320 ? $__psn : $__trailing_sign$0399;
        $866 = $863;$__trailing_sign$1 = $__psn$__trailing_sign$010;
        break L28;
       }
       if ($305) {
        $321 = HEAP32[$303>>2]|0;
        $322 = ((($321)) + 36|0);
        $323 = HEAP32[$322>>2]|0;
        __THREW__ = 0;
        $324 = (invoke_ii($323|0,($303|0))|0);
        $325 = __THREW__; __THREW__ = 0;
        $326 = $325&1;
        if ($326) {
         label = 26;
         break L4;
        } else {
         $$0$i$i144 = $324;
        }
       } else {
        $327 = HEAP32[$304>>2]|0;
        $$0$i$i144 = $327;
       }
       $328 = HEAP8[$__nsn>>0]|0;
       $329 = $328 & 1;
       $330 = ($329<<24>>24)==(0);
       $331 = HEAP32[$19>>2]|0;
       $332 = $330 ? $18 : $331;
       $333 = HEAP32[$332>>2]|0;
       $334 = ($$0$i$i144|0)==($333|0);
       if (!($334)) {
        label = 107;
        break L4;
       }
       $335 = HEAP32[$__b>>2]|0;
       $336 = ((($335)) + 12|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ((($335)) + 16|0);
       $339 = HEAP32[$338>>2]|0;
       $340 = ($337|0)==($339|0);
       if ($340) {
        $341 = HEAP32[$335>>2]|0;
        $342 = ((($341)) + 40|0);
        $343 = HEAP32[$342>>2]|0;
        __THREW__ = 0;
        (invoke_ii($343|0,($335|0))|0);
        $344 = __THREW__; __THREW__ = 0;
        $345 = $344&1;
        if ($345) {
         label = 26;
         break L4;
        }
       } else {
        $346 = ((($337)) + 4|0);
        HEAP32[$336>>2] = $346;
       }
       HEAP8[$__neg>>0] = 1;
       $347 = HEAP8[$__nsn>>0]|0;
       $348 = $347 & 1;
       $349 = ($348<<24>>24)==(0);
       $350 = HEAP32[$18>>2]|0;
       $351 = $347&255;
       $352 = $351 >>> 1;
       $353 = $349 ? $352 : $350;
       $354 = ($353>>>0)>(1);
       $__nsn$__trailing_sign$011 = $354 ? $__nsn : $__trailing_sign$0399;
       $866 = $863;$__trailing_sign$1 = $__nsn$__trailing_sign$011;
      }
      break;
     }
     case 2:  {
      $357 = ($__trailing_sign$0399|0)!=(0|0);
      $358 = ($__p$0397>>>0)<(2);
      $or$cond = $358 | $357;
      if (!($or$cond)) {
       $359 = ($__p$0397|0)==(2);
       $360 = HEAP8[$27>>0]|0;
       $361 = ($360<<24>>24)!=(0);
       $362 = $359 & $361;
       $brmerge = $22 | $362;
       if (!($brmerge)) {
        $866 = $863;$__trailing_sign$1 = 0;
        break L28;
       }
      }
      $363 = HEAP8[$__sym>>0]|0;
      $364 = $363 & 1;
      $365 = ($364<<24>>24)==(0);
      $366 = HEAP32[$23>>2]|0;
      $367 = $365 ? $24 : $366;
      $368 = $367;
      $369 = ($__p$0397|0)==(0);
      L97: do {
       if ($369) {
        $$ph = $366;$$ph345 = $363;$$ph346 = $368;
       } else {
        $380 = (($__p$0397) + -1)|0;
        $381 = (($__pat) + ($380)|0);
        $382 = HEAP8[$381>>0]|0;
        $switch = ($382&255)<(2);
        if ($switch) {
         $383 = $363 & 1;
         $384 = ($383<<24>>24)==(0);
         $385 = HEAP32[$24>>2]|0;
         $386 = $363&255;
         $387 = $386 >>> 1;
         $388 = $384 ? $24 : $366;
         $389 = $384 ? $387 : $385;
         $390 = (($388) + ($389<<2)|0);
         $391 = ($367|0)==($390|0);
         L100: do {
          if ($391) {
           $412 = $363;$414 = $366;$418 = $368;
          } else {
           $393 = $367;$868 = $368;
           while(1) {
            $392 = HEAP32[$393>>2]|0;
            $394 = HEAP32[$__ct>>2]|0;
            $395 = ((($394)) + 12|0);
            $396 = HEAP32[$395>>2]|0;
            __THREW__ = 0;
            $397 = (invoke_iiii($396|0,($__ct|0),8192,($392|0))|0);
            $398 = __THREW__; __THREW__ = 0;
            $399 = $398&1;
            if ($399) {
             label = 23;
             break L4;
            }
            if (!($397)) {
             $$lcssa418 = $868;
             break;
            }
            $400 = ((($393)) + 4|0);
            $401 = $400;
            $$pre284 = HEAP8[$__sym>>0]|0;
            $$pre285 = HEAP32[$23>>2]|0;
            $402 = $$pre284 & 1;
            $403 = ($402<<24>>24)==(0);
            $404 = HEAP32[$24>>2]|0;
            $405 = $$pre284&255;
            $406 = $405 >>> 1;
            $407 = $403 ? $24 : $$pre285;
            $408 = $403 ? $406 : $404;
            $409 = (($407) + ($408<<2)|0);
            $410 = ($400|0)==($409|0);
            if ($410) {
             $412 = $$pre284;$414 = $$pre285;$418 = $401;
             break L100;
            } else {
             $393 = $400;$868 = $401;
            }
           }
           $$pre286 = HEAP8[$__sym>>0]|0;
           $$pre287 = HEAP32[$23>>2]|0;
           $412 = $$pre286;$414 = $$pre287;$418 = $$lcssa418;
          }
         } while(0);
         $411 = $412 & 1;
         $413 = ($411<<24>>24)==(0);
         $415 = $413 ? $24 : $414;
         $416 = $415;
         $417 = (($418) - ($416))|0;
         $419 = $417 >> 2;
         $420 = HEAP8[$__spaces>>0]|0;
         $421 = $420 & 1;
         $422 = ($421<<24>>24)==(0);
         $423 = HEAP32[$25>>2]|0;
         $424 = $420&255;
         $425 = $424 >>> 1;
         $426 = $422 ? $425 : $423;
         $427 = ($426>>>0)<($419>>>0);
         if ($427) {
          $$ph = $414;$$ph345 = $412;$$ph346 = $416;
         } else {
          $428 = HEAP32[$26>>2]|0;
          $429 = $422 ? $25 : $428;
          $430 = (($429) + ($426<<2)|0);
          $431 = ($419|0)==(0);
          if ($431) {
           $$ph = $414;$$ph345 = $412;$$ph346 = $418;
          } else {
           $$sum = (($426) - ($419))|0;
           $432 = (($429) + ($$sum<<2)|0);
           $$in386 = $415;$434 = $432;
           while(1) {
            $433 = HEAP32[$434>>2]|0;
            $435 = HEAP32[$$in386>>2]|0;
            $436 = ($433|0)==($435|0);
            if (!($436)) {
             $$ph = $414;$$ph345 = $412;$$ph346 = $416;
             break L97;
            }
            $437 = ((($434)) + 4|0);
            $438 = ((($$in386)) + 4|0);
            $439 = ($437|0)==($430|0);
            if ($439) {
             $$ph = $414;$$ph345 = $412;$$ph346 = $418;
             break;
            } else {
             $$in386 = $438;$434 = $437;
            }
           }
          }
         }
        } else {
         $$ph = $366;$$ph345 = $363;$$ph346 = $368;
        }
       }
      } while(0);
      $370 = $$ph345 & 1;
      $371 = ($370<<24>>24)==(0);
      $372 = HEAP32[$24>>2]|0;
      $373 = $$ph345&255;
      $374 = $373 >>> 1;
      $375 = $371 ? $24 : $$ph;
      $376 = $371 ? $374 : $372;
      $377 = (($375) + ($376<<2)|0);
      $378 = $$ph346;
      $379 = ($378|0)==($377|0);
      L113: do {
       if ($379) {
        $$lcssa261 = $377;
       } else {
        $$pre$i3$i$i191391 = $865;$455 = $865;$485 = $378;
        while(1) {
         $440 = HEAP32[$__b>>2]|0;
         $441 = ($440|0)==(0|0);
         do {
          if ($441) {
           $470 = 1;
          } else {
           $442 = ((($440)) + 12|0);
           $443 = HEAP32[$442>>2]|0;
           $444 = ((($440)) + 16|0);
           $445 = HEAP32[$444>>2]|0;
           $446 = ($443|0)==($445|0);
           if ($446) {
            $447 = HEAP32[$440>>2]|0;
            $448 = ((($447)) + 36|0);
            $449 = HEAP32[$448>>2]|0;
            __THREW__ = 0;
            $450 = (invoke_ii($449|0,($440|0))|0);
            $451 = __THREW__; __THREW__ = 0;
            $452 = $451&1;
            if ($452) {
             label = 22;
             break L4;
            } else {
             $$0$i$i$i$i183 = $450;
            }
           } else {
            $453 = HEAP32[$443>>2]|0;
            $$0$i$i$i$i183 = $453;
           }
           $454 = ($$0$i$i$i$i183|0)==(-1);
           if ($454) {
            HEAP32[$__b>>2] = 0;
            $470 = 1;
            break;
           } else {
            $$pre$i$i$i185 = HEAP32[$__b>>2]|0;
            $phitmp$i$i$i186 = ($$pre$i$i$i185|0)==(0|0);
            $470 = $phitmp$i$i$i186;
            break;
           }
          }
         } while(0);
         $456 = ($455|0)==(0|0);
         do {
          if ($456) {
           $$pre$i3$i$i191291 = $$pre$i3$i$i191391;
           label = 136;
          } else {
           $457 = ((($455)) + 12|0);
           $458 = HEAP32[$457>>2]|0;
           $459 = ((($455)) + 16|0);
           $460 = HEAP32[$459>>2]|0;
           $461 = ($458|0)==($460|0);
           if ($461) {
            $462 = HEAP32[$455>>2]|0;
            $463 = ((($462)) + 36|0);
            $464 = HEAP32[$463>>2]|0;
            __THREW__ = 0;
            $465 = (invoke_ii($464|0,($455|0))|0);
            $466 = __THREW__; __THREW__ = 0;
            $467 = $466&1;
            if ($467) {
             label = 22;
             break L4;
            } else {
             $$0$i$i1$i$i189 = $465;
            }
           } else {
            $468 = HEAP32[$458>>2]|0;
            $$0$i$i1$i$i189 = $468;
           }
           $469 = ($$0$i$i1$i$i189|0)==(-1);
           if ($469) {
            HEAP32[$__e>>2] = 0;
            $$pre$i3$i$i191291 = 0;
            label = 136;
            break;
           } else {
            $phitmp$i4$i$i192 = ($$pre$i3$i$i191391|0)==(0|0);
            $tmp$i$i194 = $470 ^ $phitmp$i4$i$i192;
            if ($tmp$i$i194) {
             $$pre$i3$i$i191290 = $$pre$i3$i$i191391;$869 = $$pre$i3$i$i191391;
             break;
            } else {
             $$lcssa261 = $485;
             break L113;
            }
           }
          }
         } while(0);
         if ((label|0) == 136) {
          label = 0;
          if ($470) {
           $$lcssa261 = $485;
           break L113;
          } else {
           $$pre$i3$i$i191290 = $$pre$i3$i$i191291;$869 = 0;
          }
         }
         $471 = HEAP32[$__b>>2]|0;
         $472 = ((($471)) + 12|0);
         $473 = HEAP32[$472>>2]|0;
         $474 = ((($471)) + 16|0);
         $475 = HEAP32[$474>>2]|0;
         $476 = ($473|0)==($475|0);
         if ($476) {
          $477 = HEAP32[$471>>2]|0;
          $478 = ((($477)) + 36|0);
          $479 = HEAP32[$478>>2]|0;
          __THREW__ = 0;
          $480 = (invoke_ii($479|0,($471|0))|0);
          $481 = __THREW__; __THREW__ = 0;
          $482 = $481&1;
          if ($482) {
           label = 22;
           break L4;
          } else {
           $$0$i$i179 = $480;
          }
         } else {
          $483 = HEAP32[$473>>2]|0;
          $$0$i$i179 = $483;
         }
         $484 = HEAP32[$485>>2]|0;
         $486 = ($$0$i$i179|0)==($484|0);
         if (!($486)) {
          $$lcssa261 = $485;
          break L113;
         }
         $487 = HEAP32[$__b>>2]|0;
         $488 = ((($487)) + 12|0);
         $489 = HEAP32[$488>>2]|0;
         $490 = ((($487)) + 16|0);
         $491 = HEAP32[$490>>2]|0;
         $492 = ($489|0)==($491|0);
         if ($492) {
          $493 = HEAP32[$487>>2]|0;
          $494 = ((($493)) + 40|0);
          $495 = HEAP32[$494>>2]|0;
          __THREW__ = 0;
          (invoke_ii($495|0,($487|0))|0);
          $496 = __THREW__; __THREW__ = 0;
          $497 = $496&1;
          if ($497) {
           label = 22;
           break L4;
          }
         } else {
          $498 = ((($489)) + 4|0);
          HEAP32[$488>>2] = $498;
         }
         $499 = ((($485)) + 4|0);
         $$pre288 = HEAP8[$__sym>>0]|0;
         $$pre289 = HEAP32[$23>>2]|0;
         $500 = $$pre288 & 1;
         $501 = ($500<<24>>24)==(0);
         $502 = HEAP32[$24>>2]|0;
         $503 = $$pre288&255;
         $504 = $503 >>> 1;
         $505 = $501 ? $24 : $$pre289;
         $506 = $501 ? $504 : $502;
         $507 = (($505) + ($506<<2)|0);
         $508 = ($499|0)==($507|0);
         if ($508) {
          $$lcssa261 = $507;
          break;
         } else {
          $$pre$i3$i$i191391 = $$pre$i3$i$i191290;$455 = $869;$485 = $499;
         }
        }
       }
      } while(0);
      if ($22) {
       $509 = HEAP8[$__sym>>0]|0;
       $510 = $509 & 1;
       $511 = ($510<<24>>24)==(0);
       $512 = HEAP32[$23>>2]|0;
       $513 = HEAP32[$24>>2]|0;
       $514 = $509&255;
       $515 = $514 >>> 1;
       $516 = $511 ? $24 : $512;
       $517 = $511 ? $515 : $513;
       $518 = (($516) + ($517<<2)|0);
       $519 = ($$lcssa261|0)==($518|0);
       if ($519) {
        $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
       } else {
        label = 148;
        break L4;
       }
      } else {
       $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
      }
      break;
     }
     case 4:  {
      $62 = HEAP32[$__ts>>2]|0;
      $$pre$i3$i$i166 = $865;$537 = $865;$591 = $863;$__ng$0 = 0;
      L150: while(1) {
       $522 = HEAP32[$__b>>2]|0;
       $523 = ($522|0)==(0|0);
       do {
        if ($523) {
         $552 = 1;
        } else {
         $524 = ((($522)) + 12|0);
         $525 = HEAP32[$524>>2]|0;
         $526 = ((($522)) + 16|0);
         $527 = HEAP32[$526>>2]|0;
         $528 = ($525|0)==($527|0);
         if ($528) {
          $529 = HEAP32[$522>>2]|0;
          $530 = ((($529)) + 36|0);
          $531 = HEAP32[$530>>2]|0;
          __THREW__ = 0;
          $532 = (invoke_ii($531|0,($522|0))|0);
          $533 = __THREW__; __THREW__ = 0;
          $534 = $533&1;
          if ($534) {
           label = 25;
           break L4;
          } else {
           $$0$i$i$i$i158 = $532;
          }
         } else {
          $535 = HEAP32[$525>>2]|0;
          $$0$i$i$i$i158 = $535;
         }
         $536 = ($$0$i$i$i$i158|0)==(-1);
         if ($536) {
          HEAP32[$__b>>2] = 0;
          $552 = 1;
          break;
         } else {
          $$pre$i$i$i160 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i161 = ($$pre$i$i$i160|0)==(0|0);
          $552 = $phitmp$i$i$i161;
          break;
         }
        }
       } while(0);
       $538 = ($537|0)==(0|0);
       do {
        if ($538) {
         $$pre$i3$i$i166275 = $$pre$i3$i$i166;
         label = 162;
        } else {
         $539 = ((($537)) + 12|0);
         $540 = HEAP32[$539>>2]|0;
         $541 = ((($537)) + 16|0);
         $542 = HEAP32[$541>>2]|0;
         $543 = ($540|0)==($542|0);
         if ($543) {
          $544 = HEAP32[$537>>2]|0;
          $545 = ((($544)) + 36|0);
          $546 = HEAP32[$545>>2]|0;
          __THREW__ = 0;
          $547 = (invoke_ii($546|0,($537|0))|0);
          $548 = __THREW__; __THREW__ = 0;
          $549 = $548&1;
          if ($549) {
           label = 25;
           break L4;
          } else {
           $$0$i$i1$i$i164 = $547;
          }
         } else {
          $550 = HEAP32[$540>>2]|0;
          $$0$i$i1$i$i164 = $550;
         }
         $551 = ($$0$i$i1$i$i164|0)==(-1);
         if ($551) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i166275 = 0;
          label = 162;
          break;
         } else {
          $phitmp$i4$i$i167 = ($$pre$i3$i$i166|0)==(0|0);
          $tmp$i$i169 = $552 ^ $phitmp$i4$i$i167;
          if ($tmp$i$i169) {
           $$pre$i3$i$i166277 = $$pre$i3$i$i166;$870 = $$pre$i3$i$i166;
           break;
          } else {
           $$lcssa416 = $591;$$pre$i3$i$i134 = $$pre$i3$i$i166;$__ng$0$lcssa417 = $__ng$0;
           break L150;
          }
         }
        }
       } while(0);
       if ((label|0) == 162) {
        label = 0;
        if ($552) {
         $$lcssa416 = $591;$$pre$i3$i$i134 = $$pre$i3$i$i166275;$__ng$0$lcssa417 = $__ng$0;
         break;
        } else {
         $$pre$i3$i$i166277 = $$pre$i3$i$i166275;$870 = 0;
        }
       }
       $553 = HEAP32[$__b>>2]|0;
       $554 = ((($553)) + 12|0);
       $555 = HEAP32[$554>>2]|0;
       $556 = ((($553)) + 16|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ($555|0)==($557|0);
       if ($558) {
        $559 = HEAP32[$553>>2]|0;
        $560 = ((($559)) + 36|0);
        $561 = HEAP32[$560>>2]|0;
        __THREW__ = 0;
        $562 = (invoke_ii($561|0,($553|0))|0);
        $563 = __THREW__; __THREW__ = 0;
        $564 = $563&1;
        if ($564) {
         label = 25;
         break L4;
        } else {
         $$0$i$i155 = $562;
        }
       } else {
        $565 = HEAP32[$555>>2]|0;
        $$0$i$i155 = $565;
       }
       $566 = HEAP32[$__ct>>2]|0;
       $567 = ((($566)) + 12|0);
       $568 = HEAP32[$567>>2]|0;
       __THREW__ = 0;
       $569 = (invoke_iiii($568|0,($__ct|0),2048,($$0$i$i155|0))|0);
       $570 = __THREW__; __THREW__ = 0;
       $571 = $570&1;
       if ($571) {
        label = 25;
        break L4;
       }
       if ($569) {
        $572 = HEAP32[$__wn>>2]|0;
        $573 = HEAP32[$0>>2]|0;
        $574 = ($572|0)==($573|0);
        if ($574) {
         __THREW__ = 0;
         invoke_viii(677,($__wb|0),($__wn|0),($0|0));
         $575 = __THREW__; __THREW__ = 0;
         $576 = $575&1;
         if ($576) {
          label = 25;
          break L4;
         }
         $$pre279 = HEAP32[$__wn>>2]|0;
         $578 = $$pre279;
        } else {
         $578 = $572;
        }
        $577 = ((($578)) + 4|0);
        HEAP32[$__wn>>2] = $577;
        HEAP32[$578>>2] = $$0$i$i155;
        $579 = (($__ng$0) + 1)|0;
        $871 = $591;$__ng$1 = $579;
       } else {
        $580 = HEAP8[$__grp>>0]|0;
        $581 = $580 & 1;
        $582 = ($581<<24>>24)==(0);
        $583 = HEAP32[$28>>2]|0;
        $584 = $580&255;
        $585 = $584 >>> 1;
        $586 = $582 ? $585 : $583;
        $587 = ($586|0)!=(0);
        $588 = ($__ng$0|0)!=(0);
        $or$cond7 = $588 & $587;
        $589 = ($$0$i$i155|0)==($62|0);
        $or$cond13 = $589 & $or$cond7;
        if (!($or$cond13)) {
         $$lcssa416 = $591;$$pre$i3$i$i134 = $$pre$i3$i$i166277;$__ng$0$lcssa417 = $__ng$0;
         break;
        }
        $590 = HEAP32[$__ge>>2]|0;
        $592 = ($591|0)==($590|0);
        if ($592) {
         __THREW__ = 0;
         invoke_viii(670,($__gb|0),($__gn|0),($__ge|0));
         $593 = __THREW__; __THREW__ = 0;
         $594 = $593&1;
         if ($594) {
          label = 25;
          break L4;
         }
         $$pre = HEAP32[$__gn>>2]|0;
         $596 = $$pre;
        } else {
         $596 = $591;
        }
        $595 = ((($596)) + 4|0);
        HEAP32[$__gn>>2] = $595;
        HEAP32[$596>>2] = $__ng$0;
        $871 = $595;$__ng$1 = 0;
       }
       $597 = HEAP32[$__b>>2]|0;
       $598 = ((($597)) + 12|0);
       $599 = HEAP32[$598>>2]|0;
       $600 = ((($597)) + 16|0);
       $601 = HEAP32[$600>>2]|0;
       $602 = ($599|0)==($601|0);
       if ($602) {
        $603 = HEAP32[$597>>2]|0;
        $604 = ((($603)) + 40|0);
        $605 = HEAP32[$604>>2]|0;
        __THREW__ = 0;
        (invoke_ii($605|0,($597|0))|0);
        $606 = __THREW__; __THREW__ = 0;
        $607 = $606&1;
        if ($607) {
         label = 25;
         break L4;
        } else {
         $$pre$i3$i$i166 = $$pre$i3$i$i166277;$537 = $870;$591 = $871;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $608 = ((($599)) + 4|0);
        HEAP32[$598>>2] = $608;
        $$pre$i3$i$i166 = $$pre$i3$i$i166277;$537 = $870;$591 = $871;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $609 = HEAP32[$__gb>>2]|0;
      $610 = ($609|0)!=($$lcssa416|0);
      $611 = ($__ng$0$lcssa417|0)!=(0);
      $or$cond9 = $611 & $610;
      if ($or$cond9) {
       $612 = HEAP32[$__ge>>2]|0;
       $613 = ($$lcssa416|0)==($612|0);
       if ($613) {
        __THREW__ = 0;
        invoke_viii(670,($__gb|0),($__gn|0),($__ge|0));
        $614 = __THREW__; __THREW__ = 0;
        $615 = $614&1;
        if ($615) {
         label = 26;
         break L4;
        }
        $$pre281 = HEAP32[$__gn>>2]|0;
        $617 = $$pre281;
       } else {
        $617 = $$lcssa416;
       }
       $616 = ((($617)) + 4|0);
       HEAP32[$__gn>>2] = $616;
       HEAP32[$617>>2] = $__ng$0$lcssa417;
       $872 = $616;
      } else {
       $872 = $$lcssa416;
      }
      $618 = HEAP32[$__fd>>2]|0;
      $619 = ($618|0)>(0);
      if ($619) {
       $620 = HEAP32[$__b>>2]|0;
       $621 = ($620|0)==(0|0);
       do {
        if ($621) {
         $873 = 1;
        } else {
         $622 = ((($620)) + 12|0);
         $623 = HEAP32[$622>>2]|0;
         $624 = ((($620)) + 16|0);
         $625 = HEAP32[$624>>2]|0;
         $626 = ($623|0)==($625|0);
         if ($626) {
          $627 = HEAP32[$620>>2]|0;
          $628 = ((($627)) + 36|0);
          $629 = HEAP32[$628>>2]|0;
          __THREW__ = 0;
          $630 = (invoke_ii($629|0,($620|0))|0);
          $631 = __THREW__; __THREW__ = 0;
          $632 = $631&1;
          if ($632) {
           label = 26;
           break L4;
          } else {
           $$0$i$i$i$i126 = $630;
          }
         } else {
          $633 = HEAP32[$623>>2]|0;
          $$0$i$i$i$i126 = $633;
         }
         $634 = ($$0$i$i$i$i126|0)==(-1);
         if ($634) {
          HEAP32[$__b>>2] = 0;
          $873 = 1;
          break;
         } else {
          $$pre$i$i$i128 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i129 = ($$pre$i$i$i128|0)==(0|0);
          $873 = $phitmp$i$i$i129;
          break;
         }
        }
       } while(0);
       $635 = ($$pre$i3$i$i134|0)==(0|0);
       do {
        if ($635) {
         label = 200;
        } else {
         $636 = ((($$pre$i3$i$i134)) + 12|0);
         $637 = HEAP32[$636>>2]|0;
         $638 = ((($$pre$i3$i$i134)) + 16|0);
         $639 = HEAP32[$638>>2]|0;
         $640 = ($637|0)==($639|0);
         if ($640) {
          $641 = HEAP32[$$pre$i3$i$i134>>2]|0;
          $642 = ((($641)) + 36|0);
          $643 = HEAP32[$642>>2]|0;
          __THREW__ = 0;
          $644 = (invoke_ii($643|0,($$pre$i3$i$i134|0))|0);
          $645 = __THREW__; __THREW__ = 0;
          $646 = $645&1;
          if ($646) {
           label = 26;
           break L4;
          } else {
           $$0$i$i1$i$i132 = $644;
          }
         } else {
          $647 = HEAP32[$637>>2]|0;
          $$0$i$i1$i$i132 = $647;
         }
         $648 = ($$0$i$i1$i$i132|0)==(-1);
         if ($648) {
          HEAP32[$__e>>2] = 0;
          label = 200;
          break;
         } else {
          if ($873) {
           $874 = $$pre$i3$i$i134;
           break;
          } else {
           label = 206;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 200) {
        label = 0;
        if ($873) {
         label = 206;
         break L4;
        } else {
         $874 = 0;
        }
       }
       $649 = HEAP32[$__b>>2]|0;
       $650 = ((($649)) + 12|0);
       $651 = HEAP32[$650>>2]|0;
       $652 = ((($649)) + 16|0);
       $653 = HEAP32[$652>>2]|0;
       $654 = ($651|0)==($653|0);
       if ($654) {
        $655 = HEAP32[$649>>2]|0;
        $656 = ((($655)) + 36|0);
        $657 = HEAP32[$656>>2]|0;
        __THREW__ = 0;
        $658 = (invoke_ii($657|0,($649|0))|0);
        $659 = __THREW__; __THREW__ = 0;
        $660 = $659&1;
        if ($660) {
         label = 26;
         break L4;
        } else {
         $$0$i$i119 = $658;
        }
       } else {
        $661 = HEAP32[$651>>2]|0;
        $$0$i$i119 = $661;
       }
       $662 = HEAP32[$__dp>>2]|0;
       $663 = ($$0$i$i119|0)==($662|0);
       if (!($663)) {
        label = 206;
        break L4;
       }
       $666 = HEAP32[$__b>>2]|0;
       $667 = ((($666)) + 12|0);
       $668 = HEAP32[$667>>2]|0;
       $669 = ((($666)) + 16|0);
       $670 = HEAP32[$669>>2]|0;
       $671 = ($668|0)==($670|0);
       if ($671) {
        $672 = HEAP32[$666>>2]|0;
        $673 = ((($672)) + 40|0);
        $674 = HEAP32[$673>>2]|0;
        __THREW__ = 0;
        (invoke_ii($674|0,($666|0))|0);
        $675 = __THREW__; __THREW__ = 0;
        $676 = $675&1;
        if ($676) {
         label = 26;
         break L4;
        }
       } else {
        $677 = ((($668)) + 4|0);
        HEAP32[$667>>2] = $677;
       }
       $678 = ($618|0)>(0);
       if ($678) {
        $$pre$i3$i$i100382 = $874;$694 = $874;$752 = $618;
        while(1) {
         $679 = HEAP32[$__b>>2]|0;
         $680 = ($679|0)==(0|0);
         do {
          if ($680) {
           $709 = 1;
          } else {
           $681 = ((($679)) + 12|0);
           $682 = HEAP32[$681>>2]|0;
           $683 = ((($679)) + 16|0);
           $684 = HEAP32[$683>>2]|0;
           $685 = ($682|0)==($684|0);
           if ($685) {
            $686 = HEAP32[$679>>2]|0;
            $687 = ((($686)) + 36|0);
            $688 = HEAP32[$687>>2]|0;
            __THREW__ = 0;
            $689 = (invoke_ii($688|0,($679|0))|0);
            $690 = __THREW__; __THREW__ = 0;
            $691 = $690&1;
            if ($691) {
             label = 24;
             break L4;
            } else {
             $$0$i$i$i$i92 = $689;
            }
           } else {
            $692 = HEAP32[$682>>2]|0;
            $$0$i$i$i$i92 = $692;
           }
           $693 = ($$0$i$i$i$i92|0)==(-1);
           if ($693) {
            HEAP32[$__b>>2] = 0;
            $709 = 1;
            break;
           } else {
            $$pre$i$i$i94 = HEAP32[$__b>>2]|0;
            $phitmp$i$i$i95 = ($$pre$i$i$i94|0)==(0|0);
            $709 = $phitmp$i$i$i95;
            break;
           }
          }
         } while(0);
         $695 = ($694|0)==(0|0);
         do {
          if ($695) {
           $$pre$i3$i$i100282$ph = $$pre$i3$i$i100382;
           label = 224;
          } else {
           $696 = ((($694)) + 12|0);
           $697 = HEAP32[$696>>2]|0;
           $698 = ((($694)) + 16|0);
           $699 = HEAP32[$698>>2]|0;
           $700 = ($697|0)==($699|0);
           if ($700) {
            $701 = HEAP32[$694>>2]|0;
            $702 = ((($701)) + 36|0);
            $703 = HEAP32[$702>>2]|0;
            __THREW__ = 0;
            $704 = (invoke_ii($703|0,($694|0))|0);
            $705 = __THREW__; __THREW__ = 0;
            $706 = $705&1;
            if ($706) {
             label = 24;
             break L4;
            } else {
             $$0$i$i1$i$i98 = $704;
            }
           } else {
            $707 = HEAP32[$697>>2]|0;
            $$0$i$i1$i$i98 = $707;
           }
           $708 = ($$0$i$i1$i$i98|0)==(-1);
           if ($708) {
            HEAP32[$__e>>2] = 0;
            $$pre$i3$i$i100282$ph = 0;
            label = 224;
            break;
           } else {
            $phitmp$i4$i$i101 = ($$pre$i3$i$i100382|0)==(0|0);
            $tmp$i$i103 = $709 ^ $phitmp$i4$i$i101;
            if ($tmp$i$i103) {
             $$pre$i3$i$i100282306 = $$pre$i3$i$i100382;$875 = $$pre$i3$i$i100382;
             break;
            } else {
             label = 231;
             break L4;
            }
           }
          }
         } while(0);
         if ((label|0) == 224) {
          label = 0;
          if ($709) {
           label = 231;
           break L4;
          } else {
           $$pre$i3$i$i100282306 = $$pre$i3$i$i100282$ph;$875 = 0;
          }
         }
         $710 = HEAP32[$__b>>2]|0;
         $711 = ((($710)) + 12|0);
         $712 = HEAP32[$711>>2]|0;
         $713 = ((($710)) + 16|0);
         $714 = HEAP32[$713>>2]|0;
         $715 = ($712|0)==($714|0);
         if ($715) {
          $716 = HEAP32[$710>>2]|0;
          $717 = ((($716)) + 36|0);
          $718 = HEAP32[$717>>2]|0;
          __THREW__ = 0;
          $719 = (invoke_ii($718|0,($710|0))|0);
          $720 = __THREW__; __THREW__ = 0;
          $721 = $720&1;
          if ($721) {
           label = 24;
           break L4;
          } else {
           $$0$i$i86 = $719;
          }
         } else {
          $722 = HEAP32[$712>>2]|0;
          $$0$i$i86 = $722;
         }
         $723 = HEAP32[$__ct>>2]|0;
         $724 = ((($723)) + 12|0);
         $725 = HEAP32[$724>>2]|0;
         __THREW__ = 0;
         $726 = (invoke_iiii($725|0,($__ct|0),2048,($$0$i$i86|0))|0);
         $727 = __THREW__; __THREW__ = 0;
         $728 = $727&1;
         if ($728) {
          label = 24;
          break L4;
         }
         if (!($726)) {
          label = 231;
          break L4;
         }
         $731 = HEAP32[$__wn>>2]|0;
         $732 = HEAP32[$0>>2]|0;
         $733 = ($731|0)==($732|0);
         if ($733) {
          __THREW__ = 0;
          invoke_viii(677,($__wb|0),($__wn|0),($0|0));
          $734 = __THREW__; __THREW__ = 0;
          $735 = $734&1;
          if ($735) {
           label = 24;
           break L4;
          }
         }
         $736 = HEAP32[$__b>>2]|0;
         $737 = ((($736)) + 12|0);
         $738 = HEAP32[$737>>2]|0;
         $739 = ((($736)) + 16|0);
         $740 = HEAP32[$739>>2]|0;
         $741 = ($738|0)==($740|0);
         if ($741) {
          $742 = HEAP32[$736>>2]|0;
          $743 = ((($742)) + 36|0);
          $744 = HEAP32[$743>>2]|0;
          __THREW__ = 0;
          $745 = (invoke_ii($744|0,($736|0))|0);
          $746 = __THREW__; __THREW__ = 0;
          $747 = $746&1;
          if ($747) {
           label = 24;
           break L4;
          } else {
           $$0$i$i78 = $745;
          }
         } else {
          $748 = HEAP32[$738>>2]|0;
          $$0$i$i78 = $748;
         }
         $749 = HEAP32[$__wn>>2]|0;
         $750 = ((($749)) + 4|0);
         HEAP32[$__wn>>2] = $750;
         HEAP32[$749>>2] = $$0$i$i78;
         $751 = (($752) + -1)|0;
         HEAP32[$__fd>>2] = $751;
         $753 = HEAP32[$__b>>2]|0;
         $754 = ((($753)) + 12|0);
         $755 = HEAP32[$754>>2]|0;
         $756 = ((($753)) + 16|0);
         $757 = HEAP32[$756>>2]|0;
         $758 = ($755|0)==($757|0);
         if ($758) {
          $759 = HEAP32[$753>>2]|0;
          $760 = ((($759)) + 40|0);
          $761 = HEAP32[$760>>2]|0;
          __THREW__ = 0;
          (invoke_ii($761|0,($753|0))|0);
          $762 = __THREW__; __THREW__ = 0;
          $763 = $762&1;
          if ($763) {
           label = 24;
           break L4;
          }
         } else {
          $765 = ((($755)) + 4|0);
          HEAP32[$754>>2] = $765;
         }
         $764 = ($752|0)>(1);
         if ($764) {
          $$pre$i3$i$i100382 = $$pre$i3$i$i100282306;$694 = $875;$752 = $751;
         } else {
          break;
         }
        }
       }
      }
      $766 = HEAP32[$__wn>>2]|0;
      $767 = HEAP32[$__wb>>2]|0;
      $768 = ($766|0)==($767|0);
      if ($768) {
       label = 242;
       break L4;
      } else {
       $866 = $872;$__trailing_sign$1 = $__trailing_sign$0399;
      }
      break;
     }
     default: {
      $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
     }
     }
    } while(0);
    L278: do {
     if ((label|0) == 44) {
      while(1) {
       label = 0;
       $124 = HEAP32[$__b>>2]|0;
       $125 = ($124|0)==(0|0);
       do {
        if ($125) {
         $154 = 1;
        } else {
         $126 = ((($124)) + 12|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = ((($124)) + 16|0);
         $129 = HEAP32[$128>>2]|0;
         $130 = ($127|0)==($129|0);
         if ($130) {
          $131 = HEAP32[$124>>2]|0;
          $132 = ((($131)) + 36|0);
          $133 = HEAP32[$132>>2]|0;
          __THREW__ = 0;
          $134 = (invoke_ii($133|0,($124|0))|0);
          $135 = __THREW__; __THREW__ = 0;
          $136 = $135&1;
          if ($136) {
           label = 21;
           break L4;
          } else {
           $$0$i$i$i$i51 = $134;
          }
         } else {
          $137 = HEAP32[$127>>2]|0;
          $$0$i$i$i$i51 = $137;
         }
         $138 = ($$0$i$i$i$i51|0)==(-1);
         if ($138) {
          HEAP32[$__b>>2] = 0;
          $154 = 1;
          break;
         } else {
          $$pre$i$i$i53 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i54 = ($$pre$i$i$i53|0)==(0|0);
          $154 = $phitmp$i$i$i54;
          break;
         }
        }
       } while(0);
       $140 = ($139|0)==(0|0);
       do {
        if ($140) {
         $$pre$i3$i$i59300 = $$pre$i3$i$i59;
         label = 57;
        } else {
         $141 = ((($139)) + 12|0);
         $142 = HEAP32[$141>>2]|0;
         $143 = ((($139)) + 16|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = ($142|0)==($144|0);
         if ($145) {
          $146 = HEAP32[$139>>2]|0;
          $147 = ((($146)) + 36|0);
          $148 = HEAP32[$147>>2]|0;
          __THREW__ = 0;
          $149 = (invoke_ii($148|0,($139|0))|0);
          $150 = __THREW__; __THREW__ = 0;
          $151 = $150&1;
          if ($151) {
           label = 21;
           break L4;
          } else {
           $$0$i$i1$i$i57 = $149;
          }
         } else {
          $152 = HEAP32[$142>>2]|0;
          $$0$i$i1$i$i57 = $152;
         }
         $153 = ($$0$i$i1$i$i57|0)==(-1);
         if ($153) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i59300 = 0;
          label = 57;
          break;
         } else {
          $phitmp$i4$i$i60 = ($$pre$i3$i$i59|0)==(0|0);
          $tmp$i$i62 = $154 ^ $phitmp$i4$i$i60;
          if ($tmp$i$i62) {
           $$pre$i3$i$i59302 = $$pre$i3$i$i59;$867 = $$pre$i3$i$i59;
           break;
          } else {
           $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
           break L278;
          }
         }
        }
       } while(0);
       if ((label|0) == 57) {
        label = 0;
        if ($154) {
         $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
         break L278;
        } else {
         $$pre$i3$i$i59302 = $$pre$i3$i$i59300;$867 = 0;
        }
       }
       $155 = HEAP32[$__b>>2]|0;
       $156 = ((($155)) + 12|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ((($155)) + 16|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($157|0)==($159|0);
       if ($160) {
        $161 = HEAP32[$155>>2]|0;
        $162 = ((($161)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($155|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         label = 21;
         break L4;
        } else {
         $$0$i$i66 = $164;
        }
       } else {
        $167 = HEAP32[$157>>2]|0;
        $$0$i$i66 = $167;
       }
       $168 = HEAP32[$__ct>>2]|0;
       $169 = ((($168)) + 12|0);
       $170 = HEAP32[$169>>2]|0;
       __THREW__ = 0;
       $171 = (invoke_iiii($170|0,($__ct|0),8192,($$0$i$i66|0))|0);
       $172 = __THREW__; __THREW__ = 0;
       $173 = $172&1;
       if ($173) {
        label = 21;
        break L4;
       }
       if (!($171)) {
        $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
        break L278;
       }
       $174 = HEAP32[$__b>>2]|0;
       $175 = ((($174)) + 12|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ((($174)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($176|0)==($178|0);
       if ($179) {
        $180 = HEAP32[$174>>2]|0;
        $181 = ((($180)) + 40|0);
        $182 = HEAP32[$181>>2]|0;
        __THREW__ = 0;
        $183 = (invoke_ii($182|0,($174|0))|0);
        $184 = __THREW__; __THREW__ = 0;
        $185 = $184&1;
        if ($185) {
         label = 21;
         break L4;
        } else {
         $$0$i$i73 = $183;
        }
       } else {
        $186 = ((($176)) + 4|0);
        HEAP32[$175>>2] = $186;
        $187 = HEAP32[$176>>2]|0;
        $$0$i$i73 = $187;
       }
       __THREW__ = 0;
       invoke_vii(676,($__spaces|0),($$0$i$i73|0));
       $188 = __THREW__; __THREW__ = 0;
       $189 = $188&1;
       if ($189) {
        label = 21;
        break L4;
       } else {
        $$pre$i3$i$i59 = $$pre$i3$i$i59302;$139 = $867;
        label = 44;
       }
      }
     }
    } while(0);
    $771 = (($__p$0397) + 1)|0;
    $772 = ($771>>>0)<(4);
    if ($772) {
     $863 = $866;$__p$0397 = $771;$__trailing_sign$0399 = $__trailing_sign$1;
    } else {
     $$lcssa357 = $866;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 244;
     break;
    }
   }
   L314:    switch (label|0) {
    case 21: {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $lpad$phi$index = $65;$lpad$phi$index8 = $66;
     break L1;
     break;
    }
    case 22: {
     $67 = ___cxa_find_matching_catch()|0;
     $68 = tempRet0;
     $lpad$phi$index = $67;$lpad$phi$index8 = $68;
     break L1;
     break;
    }
    case 23: {
     $69 = ___cxa_find_matching_catch()|0;
     $70 = tempRet0;
     $lpad$phi$index = $69;$lpad$phi$index8 = $70;
     break L1;
     break;
    }
    case 24: {
     $71 = ___cxa_find_matching_catch()|0;
     $72 = tempRet0;
     $lpad$phi$index = $71;$lpad$phi$index8 = $72;
     break L1;
     break;
    }
    case 25: {
     $73 = ___cxa_find_matching_catch()|0;
     $74 = tempRet0;
     $lpad$phi$index = $73;$lpad$phi$index8 = $74;
     break L1;
     break;
    }
    case 26: {
     $75 = ___cxa_find_matching_catch()|0;
     $76 = tempRet0;
     $lpad$phi$index = $75;$lpad$phi$index8 = $76;
     break L1;
     break;
    }
    case 42: {
     $121 = HEAP32[$__err>>2]|0;
     $122 = $121 | 4;
     HEAP32[$__err>>2] = $122;
     $$0 = 0;
     break;
    }
    case 107: {
     $355 = HEAP32[$__err>>2]|0;
     $356 = $355 | 4;
     HEAP32[$__err>>2] = $356;
     $$0 = 0;
     break;
    }
    case 148: {
     $520 = HEAP32[$__err>>2]|0;
     $521 = $520 | 4;
     HEAP32[$__err>>2] = $521;
     $$0 = 0;
     break;
    }
    case 206: {
     $664 = HEAP32[$__err>>2]|0;
     $665 = $664 | 4;
     HEAP32[$__err>>2] = $665;
     $$0 = 0;
     break;
    }
    case 231: {
     $729 = HEAP32[$__err>>2]|0;
     $730 = $729 | 4;
     HEAP32[$__err>>2] = $730;
     $$0 = 0;
     break;
    }
    case 242: {
     $769 = HEAP32[$__err>>2]|0;
     $770 = $769 | 4;
     HEAP32[$__err>>2] = $770;
     $$0 = 0;
     break;
    }
    case 244: {
     $773 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L316: do {
      if (!($773)) {
       $774 = ((($__trailing_sign$0$lcssa)) + 4|0);
       $775 = ((($__trailing_sign$0$lcssa)) + 8|0);
       $__i$0 = 1;
       L318: while(1) {
        $776 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $777 = $776 & 1;
        $778 = ($777<<24>>24)==(0);
        if ($778) {
         $780 = $776&255;
         $781 = $780 >>> 1;
         $783 = $781;
        } else {
         $779 = HEAP32[$774>>2]|0;
         $783 = $779;
        }
        $782 = ($__i$0>>>0)<($783>>>0);
        if (!($782)) {
         break L316;
        }
        $784 = HEAP32[$__b>>2]|0;
        $785 = ($784|0)==(0|0);
        do {
         if ($785) {
          $876 = 1;
         } else {
          $786 = ((($784)) + 12|0);
          $787 = HEAP32[$786>>2]|0;
          $788 = ((($784)) + 16|0);
          $789 = HEAP32[$788>>2]|0;
          $790 = ($787|0)==($789|0);
          if ($790) {
           $791 = HEAP32[$784>>2]|0;
           $792 = ((($791)) + 36|0);
           $793 = HEAP32[$792>>2]|0;
           __THREW__ = 0;
           $794 = (invoke_ii($793|0,($784|0))|0);
           $795 = __THREW__; __THREW__ = 0;
           $796 = $795&1;
           if ($796) {
            label = 20;
            break L318;
           } else {
            $$0$i$i$i$i = $794;
           }
          } else {
           $797 = HEAP32[$787>>2]|0;
           $$0$i$i$i$i = $797;
          }
          $798 = ($$0$i$i$i$i|0)==(-1);
          if ($798) {
           HEAP32[$__b>>2] = 0;
           $876 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $876 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $799 = HEAP32[$__e>>2]|0;
        $800 = ($799|0)==(0|0);
        do {
         if ($800) {
          label = 263;
         } else {
          $801 = ((($799)) + 12|0);
          $802 = HEAP32[$801>>2]|0;
          $803 = ((($799)) + 16|0);
          $804 = HEAP32[$803>>2]|0;
          $805 = ($802|0)==($804|0);
          if ($805) {
           $806 = HEAP32[$799>>2]|0;
           $807 = ((($806)) + 36|0);
           $808 = HEAP32[$807>>2]|0;
           __THREW__ = 0;
           $809 = (invoke_ii($808|0,($799|0))|0);
           $810 = __THREW__; __THREW__ = 0;
           $811 = $810&1;
           if ($811) {
            label = 20;
            break L318;
           } else {
            $$0$i$i1$i$i = $809;
           }
          } else {
           $812 = HEAP32[$802>>2]|0;
           $$0$i$i1$i$i = $812;
          }
          $813 = ($$0$i$i1$i$i|0)==(-1);
          if ($813) {
           HEAP32[$__e>>2] = 0;
           label = 263;
           break;
          } else {
           if ($876) {
            break;
           } else {
            label = 271;
            break L318;
           }
          }
         }
        } while(0);
        if ((label|0) == 263) {
         label = 0;
         if ($876) {
          label = 271;
          break;
         }
        }
        $814 = HEAP32[$__b>>2]|0;
        $815 = ((($814)) + 12|0);
        $816 = HEAP32[$815>>2]|0;
        $817 = ((($814)) + 16|0);
        $818 = HEAP32[$817>>2]|0;
        $819 = ($816|0)==($818|0);
        if ($819) {
         $820 = HEAP32[$814>>2]|0;
         $821 = ((($820)) + 36|0);
         $822 = HEAP32[$821>>2]|0;
         __THREW__ = 0;
         $823 = (invoke_ii($822|0,($814|0))|0);
         $824 = __THREW__; __THREW__ = 0;
         $825 = $824&1;
         if ($825) {
          label = 20;
          break;
         } else {
          $$0$i$i = $823;
         }
        } else {
         $826 = HEAP32[$816>>2]|0;
         $$0$i$i = $826;
        }
        $827 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $828 = $827 & 1;
        $829 = ($828<<24>>24)==(0);
        if ($829) {
         $832 = $774;
        } else {
         $830 = HEAP32[$775>>2]|0;
         $832 = $830;
        }
        $831 = (($832) + ($__i$0<<2)|0);
        $833 = HEAP32[$831>>2]|0;
        $834 = ($$0$i$i|0)==($833|0);
        if (!($834)) {
         label = 271;
         break;
        }
        $837 = (($__i$0) + 1)|0;
        $838 = HEAP32[$__b>>2]|0;
        $839 = ((($838)) + 12|0);
        $840 = HEAP32[$839>>2]|0;
        $841 = ((($838)) + 16|0);
        $842 = HEAP32[$841>>2]|0;
        $843 = ($840|0)==($842|0);
        if ($843) {
         $844 = HEAP32[$838>>2]|0;
         $845 = ((($844)) + 40|0);
         $846 = HEAP32[$845>>2]|0;
         __THREW__ = 0;
         (invoke_ii($846|0,($838|0))|0);
         $847 = __THREW__; __THREW__ = 0;
         $848 = $847&1;
         if ($848) {
          label = 20;
          break;
         } else {
          $__i$0 = $837;
          continue;
         }
        } else {
         $849 = ((($840)) + 4|0);
         HEAP32[$839>>2] = $849;
         $__i$0 = $837;
         continue;
        }
       }
       if ((label|0) == 20) {
        $63 = ___cxa_find_matching_catch()|0;
        $64 = tempRet0;
        $lpad$phi$index = $63;$lpad$phi$index8 = $64;
        break L1;
       }
       else if ((label|0) == 271) {
        $835 = HEAP32[$__err>>2]|0;
        $836 = $835 | 4;
        HEAP32[$__err>>2] = $836;
        $$0 = 0;
        break L314;
       }
      }
     } while(0);
     $850 = HEAP32[$__gb>>2]|0;
     $851 = ($850|0)==($$lcssa357|0);
     if ($851) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$850,$$lcssa357,$__et);
      $852 = HEAP32[$__et>>2]|0;
      $853 = ($852|0)==(0);
      if ($853) {
       $$0 = 1;
      } else {
       $854 = HEAP32[$__err>>2]|0;
       $855 = $854 | 4;
       HEAP32[$__err>>2] = $855;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $856 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $857 = ($856|0)==(0|0);
   if (!($857)) {
    $858 = HEAP32[$2>>2]|0;
    __THREW__ = 0;
    invoke_vi($858|0,($856|0));
    $859 = __THREW__; __THREW__ = 0;
    $860 = $859&1;
    if ($860) {
     $861 = ___cxa_find_matching_catch(0|0)|0;
     $862 = tempRet0;
     ___clang_call_terminate($861);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $79 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $80 = ($79|0)==(0|0);
 if (!($80)) {
  $81 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($81|0,($79|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  if ($83) {
   $84 = ___cxa_find_matching_catch(0|0)|0;
   $85 = tempRet0;
   ___clang_call_terminate($84);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$013 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 424|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 428|0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (665);
 $3 = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 $4 = (invoke_ii(558,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$011 = $33;$$019 = $34;$95 = $__wbuf;
  label = 38;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(559,($__loc|0),(11856|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if (!($9)) {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $10;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $14 = (invoke_iiiiiiiiiiii(674,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     if ($14) {
      $17 = HEAP8[$__v>>0]|0;
      $18 = $17 & 1;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       HEAP8[$__v>>0] = 0;
      } else {
       $20 = ((($__v)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP32[$21>>2] = 0;
      }
      $22 = ((($__v)) + 4|0);
      HEAP32[$22>>2] = 0;
      $23 = HEAP8[$__neg>>0]|0;
      $24 = ($23<<24>>24)==(0);
      if (!($24)) {
       $25 = HEAP32[$7>>2]|0;
       $26 = ((($25)) + 44|0);
       $27 = HEAP32[$26>>2]|0;
       __THREW__ = 0;
       $28 = (invoke_iii($27|0,($7|0),45)|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(676,($__v|0),($28|0));
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if ($32) {
        break;
       }
      }
      $35 = HEAP32[$7>>2]|0;
      $36 = ((($35)) + 44|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_iii($37|0,($7|0),48)|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       break;
      }
      $41 = HEAP32[$__wb>>2]|0;
      $42 = HEAP32[$__wn>>2]|0;
      $43 = ((($42)) + -4|0);
      $44 = ($41>>>0)<($43>>>0);
      L18: do {
       if ($44) {
        $__w$013 = $41;
        while(1) {
         $45 = HEAP32[$__w$013>>2]|0;
         $46 = ($45|0)==($38|0);
         if (!($46)) {
          $__w$0$lcssa = $__w$013;
          break L18;
         }
         $47 = ((($__w$013)) + 4|0);
         $48 = ($47>>>0)<($43>>>0);
         if ($48) {
          $__w$013 = $47;
         } else {
          $__w$0$lcssa = $47;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $41;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(678,($__v|0),($__w$0$lcssa|0),($42|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       break;
      }
     }
     $51 = HEAP32[$__b>>2]|0;
     $52 = ($51|0)==(0|0);
     do {
      if ($52) {
       $100 = 1;
      } else {
       $53 = ((($51)) + 12|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ((($51)) + 16|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($54|0)==($56|0);
       if ($57) {
        $58 = HEAP32[$51>>2]|0;
        $59 = ((($58)) + 36|0);
        $60 = HEAP32[$59>>2]|0;
        __THREW__ = 0;
        $61 = (invoke_ii($60|0,($51|0))|0);
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         break L4;
        } else {
         $$0$i$i$i$i = $61;
        }
       } else {
        $64 = HEAP32[$54>>2]|0;
        $$0$i$i$i$i = $64;
       }
       $65 = ($$0$i$i$i$i|0)==(-1);
       if ($65) {
        HEAP32[$__b>>2] = 0;
        $100 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $100 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $66 = ($10|0)==(0);
     do {
      if ($66) {
       label = 30;
      } else {
       $67 = ((($13)) + 12|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ((($13)) + 16|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($68|0)==($70|0);
       if ($71) {
        $72 = $10;
        $73 = HEAP32[$72>>2]|0;
        $74 = ((($73)) + 36|0);
        $75 = HEAP32[$74>>2]|0;
        __THREW__ = 0;
        $76 = (invoke_ii($75|0,($13|0))|0);
        $77 = __THREW__; __THREW__ = 0;
        $78 = $77&1;
        if ($78) {
         break L4;
        } else {
         $$0$i$i1$i$i = $76;
        }
       } else {
        $79 = HEAP32[$68>>2]|0;
        $$0$i$i1$i$i = $79;
       }
       $80 = ($$0$i$i1$i$i|0)==(-1);
       if ($80) {
        HEAP32[$__e>>2] = 0;
        label = 30;
        break;
       } else {
        if ($100) {
         break;
        } else {
         label = 32;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 30) {
      if ($100) {
       label = 32;
      }
     }
     if ((label|0) == 32) {
      $81 = HEAP32[$__err>>2]|0;
      $82 = $81 | 2;
      HEAP32[$__err>>2] = $82;
     }
     $83 = HEAP32[$__b>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
     $84 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $85 = ($84|0)==(0|0);
     if (!($85)) {
      $86 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($86|0,($84|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       $89 = ___cxa_find_matching_catch(0|0)|0;
       $90 = tempRet0;
       ___clang_call_terminate($89);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($83|0);
    }
   }
  } while(0);
  $91 = ___cxa_find_matching_catch()|0;
  $92 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   $$0110 = $92;$$012 = $91;
  } else {
   $$011 = $91;$$019 = $92;$95 = $$pre;
   label = 38;
  }
 }
 if ((label|0) == 38) {
  $94 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($94|0,($95|0));
  $96 = __THREW__; __THREW__ = 0;
  $97 = $96&1;
  if ($97) {
   $98 = ___cxa_find_matching_catch(0|0)|0;
   $99 = tempRet0;
   ___clang_call_terminate($98);
   // unreachable;
  } else {
   $$0110 = $$019;$$012 = $$011;
  }
 }
 ___resumeException($$012|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 do {
  if ($__intl) {
   $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11600)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
   $14 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
   $15 = HEAP32[$10>>2]|0;
   $16 = ((($15)) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
   $18 = HEAP8[$__nsn>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    HEAP8[$__nsn>>0] = 0;
   } else {
    $21 = ((($__nsn)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$22>>2] = 0;
   }
   $23 = ((($__nsn)) + 4|0);
   HEAP32[$23>>2] = 0;
   __THREW__ = 0;
   invoke_vii(679,($__nsn|0),0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $26 = ___cxa_find_matching_catch(0|0)|0;
    $27 = tempRet0;
    ___clang_call_terminate($26);
    // unreachable;
   }
   ;HEAP32[$__nsn>>2]=HEAP32[$1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
   HEAP32[$1>>2] = 0;
   $28 = ((($1)) + 4|0);
   HEAP32[$28>>2] = 0;
   $29 = ((($1)) + 8|0);
   HEAP32[$29>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
   $30 = HEAP32[$10>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   FUNCTION_TABLE_vii[$32 & 1023]($2,$10);
   $33 = HEAP8[$__psn>>0]|0;
   $34 = $33 & 1;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    HEAP8[$__psn>>0] = 0;
   } else {
    $36 = ((($__psn)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    HEAP32[$37>>2] = 0;
   }
   $38 = ((($__psn)) + 4|0);
   HEAP32[$38>>2] = 0;
   __THREW__ = 0;
   invoke_vii(679,($__psn|0),0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $41 = ___cxa_find_matching_catch(0|0)|0;
    $42 = tempRet0;
    ___clang_call_terminate($41);
    // unreachable;
   }
   ;HEAP32[$__psn>>2]=HEAP32[$2>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
   HEAP32[$2>>2] = 0;
   $43 = ((($2)) + 4|0);
   HEAP32[$43>>2] = 0;
   $44 = ((($2)) + 8|0);
   HEAP32[$44>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2);
   $45 = HEAP32[$10>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($10)|0);
   HEAP32[$__dp>>2] = $48;
   $49 = HEAP32[$10>>2]|0;
   $50 = ((($49)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_ii[$51 & 1023]($10)|0);
   HEAP32[$__ts>>2] = $52;
   $53 = HEAP32[$10>>2]|0;
   $54 = ((($53)) + 20|0);
   $55 = HEAP32[$54>>2]|0;
   FUNCTION_TABLE_vii[$55 & 1023]($3,$10);
   $56 = HEAP8[$__grp>>0]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $62 = ((($__grp)) + 1|0);
    HEAP8[$62>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $59 = ((($__grp)) + 8|0);
    $60 = HEAP32[$59>>2]|0;
    HEAP8[$60>>0] = 0;
    $61 = ((($__grp)) + 4|0);
    HEAP32[$61>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__grp|0),0);
   $63 = __THREW__; __THREW__ = 0;
   $64 = $63&1;
   if ($64) {
    $65 = ___cxa_find_matching_catch(0|0)|0;
    $66 = tempRet0;
    ___clang_call_terminate($65);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$3>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
   HEAP32[$3>>2] = 0;
   $67 = ((($3)) + 4|0);
   HEAP32[$67>>2] = 0;
   $68 = ((($3)) + 8|0);
   HEAP32[$68>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $69 = HEAP32[$10>>2]|0;
   $70 = ((($69)) + 24|0);
   $71 = HEAP32[$70>>2]|0;
   FUNCTION_TABLE_vii[$71 & 1023]($4,$10);
   $72 = HEAP8[$__sym>>0]|0;
   $73 = $72 & 1;
   $74 = ($73<<24>>24)==(0);
   if ($74) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $75 = ((($__sym)) + 8|0);
    $76 = HEAP32[$75>>2]|0;
    HEAP32[$76>>2] = 0;
   }
   $77 = ((($__sym)) + 4|0);
   HEAP32[$77>>2] = 0;
   __THREW__ = 0;
   invoke_vii(679,($__sym|0),0);
   $78 = __THREW__; __THREW__ = 0;
   $79 = $78&1;
   if ($79) {
    $80 = ___cxa_find_matching_catch(0|0)|0;
    $81 = tempRet0;
    ___clang_call_terminate($80);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$4>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
    HEAP32[$4>>2] = 0;
    $82 = ((($4)) + 4|0);
    HEAP32[$82>>2] = 0;
    $83 = ((($4)) + 8|0);
    HEAP32[$83>>2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
    $84 = HEAP32[$10>>2]|0;
    $85 = ((($84)) + 36|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (FUNCTION_TABLE_ii[$86 & 1023]($10)|0);
    $storemerge = $87;
    break;
   }
  } else {
   $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11536)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($89)) + 44|0);
   $91 = HEAP32[$90>>2]|0;
   FUNCTION_TABLE_vii[$91 & 1023]($5,$88);
   $92 = HEAP32[$5>>2]|0;
   HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
   $93 = HEAP32[$88>>2]|0;
   $94 = ((($93)) + 32|0);
   $95 = HEAP32[$94>>2]|0;
   FUNCTION_TABLE_vii[$95 & 1023]($6,$88);
   $96 = HEAP8[$__nsn>>0]|0;
   $97 = $96 & 1;
   $98 = ($97<<24>>24)==(0);
   if ($98) {
    HEAP8[$__nsn>>0] = 0;
   } else {
    $99 = ((($__nsn)) + 8|0);
    $100 = HEAP32[$99>>2]|0;
    HEAP32[$100>>2] = 0;
   }
   $101 = ((($__nsn)) + 4|0);
   HEAP32[$101>>2] = 0;
   __THREW__ = 0;
   invoke_vii(679,($__nsn|0),0);
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   if ($103) {
    $104 = ___cxa_find_matching_catch(0|0)|0;
    $105 = tempRet0;
    ___clang_call_terminate($104);
    // unreachable;
   }
   ;HEAP32[$__nsn>>2]=HEAP32[$6>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
   HEAP32[$6>>2] = 0;
   $106 = ((($6)) + 4|0);
   HEAP32[$106>>2] = 0;
   $107 = ((($6)) + 8|0);
   HEAP32[$107>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
   $108 = HEAP32[$88>>2]|0;
   $109 = ((($108)) + 28|0);
   $110 = HEAP32[$109>>2]|0;
   FUNCTION_TABLE_vii[$110 & 1023]($7,$88);
   $111 = HEAP8[$__psn>>0]|0;
   $112 = $111 & 1;
   $113 = ($112<<24>>24)==(0);
   if ($113) {
    HEAP8[$__psn>>0] = 0;
   } else {
    $114 = ((($__psn)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    HEAP32[$115>>2] = 0;
   }
   $116 = ((($__psn)) + 4|0);
   HEAP32[$116>>2] = 0;
   __THREW__ = 0;
   invoke_vii(679,($__psn|0),0);
   $117 = __THREW__; __THREW__ = 0;
   $118 = $117&1;
   if ($118) {
    $119 = ___cxa_find_matching_catch(0|0)|0;
    $120 = tempRet0;
    ___clang_call_terminate($119);
    // unreachable;
   }
   ;HEAP32[$__psn>>2]=HEAP32[$7>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
   HEAP32[$7>>2] = 0;
   $121 = ((($7)) + 4|0);
   HEAP32[$121>>2] = 0;
   $122 = ((($7)) + 8|0);
   HEAP32[$122>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
   $123 = HEAP32[$88>>2]|0;
   $124 = ((($123)) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 1023]($88)|0);
   HEAP32[$__dp>>2] = $126;
   $127 = HEAP32[$88>>2]|0;
   $128 = ((($127)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (FUNCTION_TABLE_ii[$129 & 1023]($88)|0);
   HEAP32[$__ts>>2] = $130;
   $131 = HEAP32[$88>>2]|0;
   $132 = ((($131)) + 20|0);
   $133 = HEAP32[$132>>2]|0;
   FUNCTION_TABLE_vii[$133 & 1023]($8,$88);
   $134 = HEAP8[$__grp>>0]|0;
   $135 = $134 & 1;
   $136 = ($135<<24>>24)==(0);
   if ($136) {
    $140 = ((($__grp)) + 1|0);
    HEAP8[$140>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $137 = ((($__grp)) + 8|0);
    $138 = HEAP32[$137>>2]|0;
    HEAP8[$138>>0] = 0;
    $139 = ((($__grp)) + 4|0);
    HEAP32[$139>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__grp|0),0);
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    $143 = ___cxa_find_matching_catch(0|0)|0;
    $144 = tempRet0;
    ___clang_call_terminate($143);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$8>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
   HEAP32[$8>>2] = 0;
   $145 = ((($8)) + 4|0);
   HEAP32[$145>>2] = 0;
   $146 = ((($8)) + 8|0);
   HEAP32[$146>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
   $147 = HEAP32[$88>>2]|0;
   $148 = ((($147)) + 24|0);
   $149 = HEAP32[$148>>2]|0;
   FUNCTION_TABLE_vii[$149 & 1023]($9,$88);
   $150 = HEAP8[$__sym>>0]|0;
   $151 = $150 & 1;
   $152 = ($151<<24>>24)==(0);
   if ($152) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $153 = ((($__sym)) + 8|0);
    $154 = HEAP32[$153>>2]|0;
    HEAP32[$154>>2] = 0;
   }
   $155 = ((($__sym)) + 4|0);
   HEAP32[$155>>2] = 0;
   __THREW__ = 0;
   invoke_vii(679,($__sym|0),0);
   $156 = __THREW__; __THREW__ = 0;
   $157 = $156&1;
   if ($157) {
    $158 = ___cxa_find_matching_catch(0|0)|0;
    $159 = tempRet0;
    ___clang_call_terminate($158);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
    HEAP32[$9>>2] = 0;
    $160 = ((($9)) + 4|0);
    HEAP32[$160>>2] = 0;
    $161 = ((($9)) + 8|0);
    HEAP32[$161>>2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
    $162 = HEAP32[$88>>2]|0;
    $163 = ((($162)) + 36|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = (FUNCTION_TABLE_ii[$164 & 1023]($88)|0);
    $storemerge = $165;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre20 = 0, $$pre20$pre = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 288|0;
 $__bb = sp + 72|0;
 $__digits = sp + 188|0;
 $__loc = sp + 68|0;
 $__pat = sp + 184|0;
 $__dp = sp + 181|0;
 $__ts = sp + 180|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 80|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $1 = (_snprintf($__buf,100,29869,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(649)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $137 = 0;$138 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $6 = (invoke_iiiii(654,($__bb|0),($3|0),(29869|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $137 = 0;$138 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(655);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $137 = 0;$138 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $15 = $$pre;
     } else {
      $15 = $9;
     }
     $16 = $15;
     $17 = (_malloc($6)|0);
     $18 = $17;
     $19 = ($17|0)==(0|0);
     if ($19) {
      __THREW__ = 0;
      invoke_v(655);
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       $137 = $16;$138 = $18;
       label = 7;
      } else {
       $124 = $18;$127 = $16;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $124 = $18;$127 = $16;$__db$0 = $17;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $124 = 0;$127 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  $22 = (invoke_ii(558,($__iob|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $137 = $127;$138 = $124;
   label = 7;
  } else {
   HEAP32[$__loc>>2] = $22;
   __THREW__ = 0;
   $25 = (invoke_iii(559,($__loc|0),(11864|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    label = 22;
   } else {
    $28 = HEAP32[$__bb>>2]|0;
    $29 = (($28) + ($__n$0)|0);
    $30 = HEAP32[$25>>2]|0;
    $31 = ((($30)) + 32|0);
    $32 = HEAP32[$31>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($32|0,($25|0),($28|0),($29|0),($__db$0|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     label = 22;
    } else {
     $35 = ($__n$0|0)==(0);
     if ($35) {
      $45 = 0;
     } else {
      $36 = HEAP32[$__bb>>2]|0;
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(45);
      $45 = $38;
     }
     HEAP32[$__grp>>2] = 0;
     $39 = ((($__grp)) + 4|0);
     HEAP32[$39>>2] = 0;
     $40 = ((($__grp)) + 8|0);
     HEAP32[$40>>2] = 0;
     HEAP32[$__sym>>2] = 0;
     $41 = ((($__sym)) + 4|0);
     HEAP32[$41>>2] = 0;
     $42 = ((($__sym)) + 8|0);
     HEAP32[$42>>2] = 0;
     HEAP32[$__sn>>2] = 0;
     $43 = ((($__sn)) + 4|0);
     HEAP32[$43>>2] = 0;
     $44 = ((($__sn)) + 8|0);
     HEAP32[$44>>2] = 0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(680,($__intl|0),($45|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $100 = ___cxa_find_matching_catch()|0;
      $101 = tempRet0;
      $$0 = $100;$$01 = $101;$$pre20 = $22;
     } else {
      $48 = HEAP32[$__fd>>2]|0;
      $49 = ($__n$0|0)>($48|0);
      if ($49) {
       $50 = (($__n$0) - ($48))|0;
       $51 = $50 << 1;
       $52 = HEAP8[$__sn>>0]|0;
       $53 = $52 & 1;
       $54 = ($53<<24>>24)==(0);
       $55 = ((($__sn)) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = $52&255;
       $58 = $57 >>> 1;
       $59 = $54 ? $58 : $56;
       $60 = HEAP8[$__sym>>0]|0;
       $61 = $60 & 1;
       $62 = ($61<<24>>24)==(0);
       $63 = ((($__sym)) + 4|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = $60&255;
       $66 = $65 >>> 1;
       $67 = $62 ? $66 : $64;
       $68 = $51 | 1;
       $69 = (($68) + ($48))|0;
       $70 = (($69) + ($59))|0;
       $71 = (($70) + ($67))|0;
       $91 = $71;
      } else {
       $72 = HEAP8[$__sn>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       $75 = ((($__sn)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $72&255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = HEAP8[$__sym>>0]|0;
       $81 = $80 & 1;
       $82 = ($81<<24>>24)==(0);
       $83 = ((($__sym)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $80&255;
       $86 = $85 >>> 1;
       $87 = $82 ? $86 : $84;
       $88 = (($48) + 2)|0;
       $89 = (($88) + ($79))|0;
       $90 = (($89) + ($87))|0;
       $91 = $90;
      }
      $92 = ($91>>>0)>(100);
      if ($92) {
       $93 = (_malloc($91)|0);
       $94 = $93;
       $95 = ($93|0)==(0|0);
       if ($95) {
        __THREW__ = 0;
        invoke_v(655);
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         $104 = $94;
        } else {
         $120 = $94;$__mb$0 = 0;
         label = 26;
        }
       } else {
        $120 = $94;$__mb$0 = $93;
        label = 26;
       }
      } else {
       $120 = 0;$__mb$0 = $__mbuf;
       label = 26;
      }
      if ((label|0) == 26) {
       $107 = ((($__iob)) + 4|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($__db$0) + ($__n$0)|0);
       $110 = HEAP8[$__dp>>0]|0;
       $111 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(681,($__mb$0|0),($__mi|0),($__me|0),($108|0),($__db$0|0),($109|0),($25|0),($45|0),($__pat|0),($110|0),($111|0),($__grp|0),($__sym|0),($__sn|0),($48|0));
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        $104 = $120;
       } else {
        $114 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $114;
        $115 = HEAP32[$__mi>>2]|0;
        $116 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        $117 = (invoke_iiiiiii(560,($$byval_copy|0),($__mb$0|0),($115|0),($116|0),($__iob|0),($__fl|0))|0);
        $118 = __THREW__; __THREW__ = 0;
        $119 = $118&1;
        if ($119) {
         $104 = $120;
        } else {
         $121 = ($120|0)==(0);
         if ($121) {
          $123 = $22;
         } else {
          $122 = $120;
          _free($122);
          $$pre22 = HEAP32[$__loc>>2]|0;
          $123 = $$pre22;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         (__ZNSt3__114__shared_count16__release_sharedEv($123)|0);
         $125 = ($124|0)==(0);
         if (!($125)) {
          $126 = $124;
          _free($126);
         }
         $128 = ($127|0)==(0);
         if (!($128)) {
          $129 = $127;
          _free($129);
         }
         STACKTOP = sp;return ($117|0);
        }
       }
      }
      $102 = ___cxa_find_matching_catch()|0;
      $103 = tempRet0;
      $105 = ($104|0)==(0);
      if ($105) {
       $$0 = $102;$$01 = $103;$$pre20 = $22;
      } else {
       $106 = $104;
       _free($106);
       $$pre20$pre = HEAP32[$__loc>>2]|0;
       $$0 = $102;$$01 = $103;$$pre20 = $$pre20$pre;
      }
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $$1 = $$0;$$12 = $$01;$130 = $$pre20;
    }
   }
   if ((label|0) == 22) {
    $98 = ___cxa_find_matching_catch()|0;
    $99 = tempRet0;
    $$1 = $98;$$12 = $99;$130 = $22;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($130)|0);
   $$2 = $$1;$$23 = $$12;$131 = $124;$134 = $127;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$131 = $138;$134 = $137;
 }
 $132 = ($131|0)==(0);
 if (!($132)) {
  $133 = $131;
  _free($133);
 }
 $135 = ($134|0)==(0);
 if (!($135)) {
  $136 = $134;
  _free($136);
 }
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$pre$phi39Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 do {
  if ($__intl) {
   $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11472)|0);
   $13 = HEAP32[$12>>2]|0;
   do {
    if ($__neg) {
     $14 = ((($13)) + 44|0);
     $15 = HEAP32[$14>>2]|0;
     FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
     $16 = HEAP32[$0>>2]|0;
     HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
     $17 = HEAP32[$12>>2]|0;
     $18 = ((($17)) + 32|0);
     $19 = HEAP32[$18>>2]|0;
     FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
     $20 = HEAP8[$__sn>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $26 = ((($__sn)) + 1|0);
      HEAP8[$26>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $23 = ((($__sn)) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      HEAP8[$24>>0] = 0;
      $25 = ((($__sn)) + 4|0);
      HEAP32[$25>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(673,($__sn|0),0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $29 = ___cxa_find_matching_catch(0|0)|0;
      $30 = tempRet0;
      ___clang_call_terminate($29);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$1>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
      HEAP32[$1>>2] = 0;
      $31 = ((($1)) + 4|0);
      HEAP32[$31>>2] = 0;
      $32 = ((($1)) + 8|0);
      HEAP32[$32>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
      $$pre$phiZ2D = $12;
      break;
     }
    } else {
     $33 = ((($13)) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     FUNCTION_TABLE_vii[$34 & 1023]($2,$12);
     $35 = HEAP32[$2>>2]|0;
     HEAP8[$__pat>>0]=$35&255;HEAP8[$__pat+1>>0]=($35>>8)&255;HEAP8[$__pat+2>>0]=($35>>16)&255;HEAP8[$__pat+3>>0]=$35>>24;
     $36 = HEAP32[$12>>2]|0;
     $37 = ((($36)) + 28|0);
     $38 = HEAP32[$37>>2]|0;
     FUNCTION_TABLE_vii[$38 & 1023]($3,$12);
     $39 = HEAP8[$__sn>>0]|0;
     $40 = $39 & 1;
     $41 = ($40<<24>>24)==(0);
     if ($41) {
      $45 = ((($__sn)) + 1|0);
      HEAP8[$45>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $42 = ((($__sn)) + 8|0);
      $43 = HEAP32[$42>>2]|0;
      HEAP8[$43>>0] = 0;
      $44 = ((($__sn)) + 4|0);
      HEAP32[$44>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(673,($__sn|0),0);
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $48 = ___cxa_find_matching_catch(0|0)|0;
      $49 = tempRet0;
      ___clang_call_terminate($48);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$3>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
      HEAP32[$3>>2] = 0;
      $50 = ((($3)) + 4|0);
      HEAP32[$50>>2] = 0;
      $51 = ((($3)) + 8|0);
      HEAP32[$51>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
      $$pre$phiZ2D = $12;
      break;
     }
    }
   } while(0);
   $52 = HEAP32[$12>>2]|0;
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
   HEAP8[$__dp>>0] = $55;
   $56 = HEAP32[$12>>2]|0;
   $57 = ((($56)) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (FUNCTION_TABLE_ii[$58 & 1023]($12)|0);
   HEAP8[$__ts>>0] = $59;
   $60 = HEAP32[$$pre$phiZ2D>>2]|0;
   $61 = ((($60)) + 20|0);
   $62 = HEAP32[$61>>2]|0;
   FUNCTION_TABLE_vii[$62 & 1023]($4,$12);
   $63 = HEAP8[$__grp>>0]|0;
   $64 = $63 & 1;
   $65 = ($64<<24>>24)==(0);
   if ($65) {
    $69 = ((($__grp)) + 1|0);
    HEAP8[$69>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $66 = ((($__grp)) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    HEAP8[$67>>0] = 0;
    $68 = ((($__grp)) + 4|0);
    HEAP32[$68>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__grp|0),0);
   $70 = __THREW__; __THREW__ = 0;
   $71 = $70&1;
   if ($71) {
    $72 = ___cxa_find_matching_catch(0|0)|0;
    $73 = tempRet0;
    ___clang_call_terminate($72);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$4>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
   HEAP32[$4>>2] = 0;
   $74 = ((($4)) + 4|0);
   HEAP32[$74>>2] = 0;
   $75 = ((($4)) + 8|0);
   HEAP32[$75>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
   $76 = HEAP32[$$pre$phiZ2D>>2]|0;
   $77 = ((($76)) + 24|0);
   $78 = HEAP32[$77>>2]|0;
   FUNCTION_TABLE_vii[$78 & 1023]($5,$12);
   $79 = HEAP8[$__sym>>0]|0;
   $80 = $79 & 1;
   $81 = ($80<<24>>24)==(0);
   if ($81) {
    $85 = ((($__sym)) + 1|0);
    HEAP8[$85>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $82 = ((($__sym)) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    HEAP8[$83>>0] = 0;
    $84 = ((($__sym)) + 4|0);
    HEAP32[$84>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__sym|0),0);
   $86 = __THREW__; __THREW__ = 0;
   $87 = $86&1;
   if ($87) {
    $88 = ___cxa_find_matching_catch(0|0)|0;
    $89 = tempRet0;
    ___clang_call_terminate($88);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$5>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
    HEAP32[$5>>2] = 0;
    $90 = ((($5)) + 4|0);
    HEAP32[$90>>2] = 0;
    $91 = ((($5)) + 8|0);
    HEAP32[$91>>2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
    $92 = HEAP32[$12>>2]|0;
    $93 = ((($92)) + 36|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (FUNCTION_TABLE_ii[$94 & 1023]($12)|0);
    $storemerge = $95;
    break;
   }
  } else {
   $96 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11408)|0);
   $97 = HEAP32[$96>>2]|0;
   do {
    if ($__neg) {
     $98 = ((($97)) + 44|0);
     $99 = HEAP32[$98>>2]|0;
     FUNCTION_TABLE_vii[$99 & 1023]($6,$96);
     $100 = HEAP32[$6>>2]|0;
     HEAP8[$__pat>>0]=$100&255;HEAP8[$__pat+1>>0]=($100>>8)&255;HEAP8[$__pat+2>>0]=($100>>16)&255;HEAP8[$__pat+3>>0]=$100>>24;
     $101 = HEAP32[$96>>2]|0;
     $102 = ((($101)) + 32|0);
     $103 = HEAP32[$102>>2]|0;
     FUNCTION_TABLE_vii[$103 & 1023]($7,$96);
     $104 = HEAP8[$__sn>>0]|0;
     $105 = $104 & 1;
     $106 = ($105<<24>>24)==(0);
     if ($106) {
      $110 = ((($__sn)) + 1|0);
      HEAP8[$110>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $107 = ((($__sn)) + 8|0);
      $108 = HEAP32[$107>>2]|0;
      HEAP8[$108>>0] = 0;
      $109 = ((($__sn)) + 4|0);
      HEAP32[$109>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(673,($__sn|0),0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      $113 = ___cxa_find_matching_catch(0|0)|0;
      $114 = tempRet0;
      ___clang_call_terminate($113);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
      HEAP32[$7>>2] = 0;
      $115 = ((($7)) + 4|0);
      HEAP32[$115>>2] = 0;
      $116 = ((($7)) + 8|0);
      HEAP32[$116>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
      $$pre$phi39Z2D = $96;
      break;
     }
    } else {
     $117 = ((($97)) + 40|0);
     $118 = HEAP32[$117>>2]|0;
     FUNCTION_TABLE_vii[$118 & 1023]($8,$96);
     $119 = HEAP32[$8>>2]|0;
     HEAP8[$__pat>>0]=$119&255;HEAP8[$__pat+1>>0]=($119>>8)&255;HEAP8[$__pat+2>>0]=($119>>16)&255;HEAP8[$__pat+3>>0]=$119>>24;
     $120 = HEAP32[$96>>2]|0;
     $121 = ((($120)) + 28|0);
     $122 = HEAP32[$121>>2]|0;
     FUNCTION_TABLE_vii[$122 & 1023]($9,$96);
     $123 = HEAP8[$__sn>>0]|0;
     $124 = $123 & 1;
     $125 = ($124<<24>>24)==(0);
     if ($125) {
      $129 = ((($__sn)) + 1|0);
      HEAP8[$129>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $126 = ((($__sn)) + 8|0);
      $127 = HEAP32[$126>>2]|0;
      HEAP8[$127>>0] = 0;
      $128 = ((($__sn)) + 4|0);
      HEAP32[$128>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(673,($__sn|0),0);
     $130 = __THREW__; __THREW__ = 0;
     $131 = $130&1;
     if ($131) {
      $132 = ___cxa_find_matching_catch(0|0)|0;
      $133 = tempRet0;
      ___clang_call_terminate($132);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$9>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
      HEAP32[$9>>2] = 0;
      $134 = ((($9)) + 4|0);
      HEAP32[$134>>2] = 0;
      $135 = ((($9)) + 8|0);
      HEAP32[$135>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      $$pre$phi39Z2D = $96;
      break;
     }
    }
   } while(0);
   $136 = HEAP32[$96>>2]|0;
   $137 = ((($136)) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (FUNCTION_TABLE_ii[$138 & 1023]($96)|0);
   HEAP8[$__dp>>0] = $139;
   $140 = HEAP32[$96>>2]|0;
   $141 = ((($140)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (FUNCTION_TABLE_ii[$142 & 1023]($96)|0);
   HEAP8[$__ts>>0] = $143;
   $144 = HEAP32[$$pre$phi39Z2D>>2]|0;
   $145 = ((($144)) + 20|0);
   $146 = HEAP32[$145>>2]|0;
   FUNCTION_TABLE_vii[$146 & 1023]($10,$96);
   $147 = HEAP8[$__grp>>0]|0;
   $148 = $147 & 1;
   $149 = ($148<<24>>24)==(0);
   if ($149) {
    $153 = ((($__grp)) + 1|0);
    HEAP8[$153>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $150 = ((($__grp)) + 8|0);
    $151 = HEAP32[$150>>2]|0;
    HEAP8[$151>>0] = 0;
    $152 = ((($__grp)) + 4|0);
    HEAP32[$152>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__grp|0),0);
   $154 = __THREW__; __THREW__ = 0;
   $155 = $154&1;
   if ($155) {
    $156 = ___cxa_find_matching_catch(0|0)|0;
    $157 = tempRet0;
    ___clang_call_terminate($156);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$10>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
   HEAP32[$10>>2] = 0;
   $158 = ((($10)) + 4|0);
   HEAP32[$158>>2] = 0;
   $159 = ((($10)) + 8|0);
   HEAP32[$159>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $160 = HEAP32[$$pre$phi39Z2D>>2]|0;
   $161 = ((($160)) + 24|0);
   $162 = HEAP32[$161>>2]|0;
   FUNCTION_TABLE_vii[$162 & 1023]($11,$96);
   $163 = HEAP8[$__sym>>0]|0;
   $164 = $163 & 1;
   $165 = ($164<<24>>24)==(0);
   if ($165) {
    $169 = ((($__sym)) + 1|0);
    HEAP8[$169>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $166 = ((($__sym)) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    HEAP8[$167>>0] = 0;
    $168 = ((($__sym)) + 4|0);
    HEAP32[$168>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__sym|0),0);
   $170 = __THREW__; __THREW__ = 0;
   $171 = $170&1;
   if ($171) {
    $172 = ___cxa_find_matching_catch(0|0)|0;
    $173 = tempRet0;
    ___clang_call_terminate($172);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$11>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
    HEAP32[$11>>2] = 0;
    $174 = ((($11)) + 4|0);
    HEAP32[$174>>2] = 0;
    $175 = ((($11)) + 8|0);
    HEAP32[$175>>2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
    $176 = HEAP32[$96>>2]|0;
    $177 = ((($176)) + 36|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (FUNCTION_TABLE_ii[$178 & 1023]($96)|0);
    $storemerge = $179;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$$027 = 0, $$0$i$i$lcssa = 0, $$0$i$i35 = 0, $$0$i$i9$lcssa = 0, $$0$i$i958 = 0, $$01$i$i56 = 0, $$062 = 0, $$2 = 0, $$lcssa = 0, $$lcssa34 = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa26 = 0, $__d$036 = 0, $__d$142 = 0, $__d$2 = 0, $__d$351 = 0, $__f$043 = 0, $__f$146 = 0;
 var $__gl$0$ph = 0, $__gl$054 = 0, $__gl$1 = 0, $__ig$053 = 0, $__ig$1 = 0, $__ng$052 = 0, $__ng$1 = 0, $__p$061 = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep$sum = 0, $scevgep29 = 0, $umax28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 4|0);
 $1 = ((($__sn)) + 8|0);
 $2 = ((($__sn)) + 1|0);
 $3 = ((($__sym)) + 4|0);
 $4 = $__flags & 512;
 $5 = ($4|0)==(0);
 $6 = ((($__sym)) + 8|0);
 $7 = ((($__sym)) + 1|0);
 $8 = ((($__ct)) + 8|0);
 $9 = ($__fd|0)>(0);
 $10 = ((($__grp)) + 4|0);
 $11 = ((($__grp)) + 8|0);
 $12 = ((($__grp)) + 1|0);
 $13 = (($__fd) + 1)|0;
 $14 = (-2 - ($__fd))|0;
 $15 = ($__fd|0)<(0);
 $$op = $__fd ^ -1;
 $16 = $15 ? $$op : -1;
 $17 = (($14) - ($16))|0;
 $18 = ($__fd|0)>(0);
 $$062 = $__db;$__p$061 = 0;
 while(1) {
  $19 = (($__pat) + ($__p$061)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  switch ($21|0) {
  case 0:  {
   $22 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $22;
   $$2 = $$062;
   break;
  }
  case 1:  {
   $23 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $23;
   $24 = HEAP32[$__ct>>2]|0;
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (FUNCTION_TABLE_iii[$26 & 1023]($__ct,32)|0);
   $28 = HEAP32[$__me>>2]|0;
   $29 = ((($28)) + 1|0);
   HEAP32[$__me>>2] = $29;
   HEAP8[$28>>0] = $27;
   $$2 = $$062;
   break;
  }
  case 3:  {
   $30 = HEAP8[$__sn>>0]|0;
   $31 = $30 & 1;
   $32 = ($31<<24>>24)==(0);
   $33 = HEAP32[$0>>2]|0;
   $34 = $30&255;
   $35 = $34 >>> 1;
   $36 = $32 ? $35 : $33;
   $37 = ($36|0)==(0);
   if ($37) {
    $$2 = $$062;
   } else {
    $38 = HEAP32[$1>>2]|0;
    $39 = $32 ? $2 : $38;
    $40 = HEAP8[$39>>0]|0;
    $41 = HEAP32[$__me>>2]|0;
    $42 = ((($41)) + 1|0);
    HEAP32[$__me>>2] = $42;
    HEAP8[$41>>0] = $40;
    $$2 = $$062;
   }
   break;
  }
  case 2:  {
   $43 = HEAP8[$__sym>>0]|0;
   $44 = $43 & 1;
   $45 = ($44<<24>>24)==(0);
   $46 = HEAP32[$3>>2]|0;
   $47 = $43&255;
   $48 = $47 >>> 1;
   $49 = $45 ? $48 : $46;
   $50 = ($49|0)==(0);
   $or$cond = $5 | $50;
   if ($or$cond) {
    $$2 = $$062;
   } else {
    $51 = HEAP32[$6>>2]|0;
    $52 = $45 ? $7 : $51;
    $53 = (($52) + ($49)|0);
    $54 = HEAP32[$__me>>2]|0;
    $55 = ($49|0)==(0);
    if ($55) {
     $$0$i$i9$lcssa = $54;
    } else {
     $$0$i$i958 = $54;$57 = $52;
     while(1) {
      $56 = HEAP8[$57>>0]|0;
      HEAP8[$$0$i$i958>>0] = $56;
      $58 = ((($57)) + 1|0);
      $59 = ((($$0$i$i958)) + 1|0);
      $60 = ($58|0)==($53|0);
      if ($60) {
       $$0$i$i9$lcssa = $59;
       break;
      } else {
       $$0$i$i958 = $59;$57 = $58;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$i$i9$lcssa;
    $$2 = $$062;
   }
   break;
  }
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = ((($$062)) + 1|0);
   $$$0 = $__neg ? $62 : $$062;
   $$$027 = $$$0;
   $63 = HEAP32[$8>>2]|0;
   $64 = ($$$0>>>0)<($__de>>>0);
   L15: do {
    if ($64) {
     $__d$036 = $$$0;
     while(1) {
      $65 = HEAP8[$__d$036>>0]|0;
      $isascii1$i = ($65<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$036;
       break L15;
      }
      $66 = $65 << 24 >> 24;
      $67 = (($63) + ($66<<1)|0);
      $68 = HEAP16[$67>>1]|0;
      $69 = $68 & 2048;
      $70 = ($69<<16>>16)==(0);
      if ($70) {
       $__d$0$lcssa = $__d$036;
       break L15;
      }
      $71 = ((($__d$036)) + 1|0);
      $72 = ($71>>>0)<($__de>>>0);
      if ($72) {
       $__d$036 = $71;
      } else {
       $__d$0$lcssa = $71;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa26 = $__d$0$lcssa;
   if ($9) {
    $73 = (-2 - ($__d$0$lcssa26))|0;
    $74 = ($__d$0$lcssa26>>>0)>($$$027>>>0);
    $75 = $74 ? $$$027 : $__d$0$lcssa26;
    $76 = $75 ^ -1;
    $77 = (($73) - ($76))|0;
    $78 = ($17>>>0)>($77>>>0);
    $umax28 = $78 ? $17 : $77;
    $79 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    $80 = $79 & $18;
    if ($80) {
     $__d$142 = $__d$0$lcssa;$__f$043 = $__fd;
     while(1) {
      $81 = ((($__d$142)) + -1|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = HEAP32[$__me>>2]|0;
      $84 = ((($83)) + 1|0);
      HEAP32[$__me>>2] = $84;
      HEAP8[$83>>0] = $82;
      $85 = (($__f$043) + -1)|0;
      $86 = ($81>>>0)>($$$0>>>0);
      $87 = ($__f$043|0)>(1);
      $88 = $86 & $87;
      if ($88) {
       $__d$142 = $81;$__f$043 = $85;
      } else {
       $$lcssa = $87;
       break;
      }
     }
    } else {
     $$lcssa = $18;
    }
    $89 = (($13) + ($umax28))|0;
    $scevgep$sum = (($umax28) + 1)|0;
    $scevgep29 = (($__d$0$lcssa) + ($scevgep$sum)|0);
    if ($$lcssa) {
     $90 = HEAP32[$__ct>>2]|0;
     $91 = ((($90)) + 28|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (FUNCTION_TABLE_iii[$92 & 1023]($__ct,48)|0);
     $97 = $93;
    } else {
     $97 = 0;
    }
    $94 = ($89|0)>(0);
    $95 = HEAP32[$__me>>2]|0;
    $96 = ((($95)) + 1|0);
    HEAP32[$__me>>2] = $96;
    if ($94) {
     $98 = $95;$__f$146 = $89;
     while(1) {
      HEAP8[$98>>0] = $97;
      $99 = (($__f$146) + -1)|0;
      $100 = ($__f$146|0)>(1);
      $101 = HEAP32[$__me>>2]|0;
      $102 = ((($101)) + 1|0);
      HEAP32[$__me>>2] = $102;
      if ($100) {
       $98 = $101;$__f$146 = $99;
      } else {
       $$lcssa34 = $101;
       break;
      }
     }
    } else {
     $$lcssa34 = $95;
    }
    HEAP8[$$lcssa34>>0] = $__dp;
    $__d$2 = $scevgep29;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $103 = ($__d$2|0)==($$$0|0);
   if ($103) {
    $104 = HEAP32[$__ct>>2]|0;
    $105 = ((($104)) + 28|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (FUNCTION_TABLE_iii[$106 & 1023]($__ct,48)|0);
    $108 = HEAP32[$__me>>2]|0;
    $109 = ((($108)) + 1|0);
    HEAP32[$__me>>2] = $109;
    HEAP8[$108>>0] = $107;
   } else {
    $110 = HEAP8[$__grp>>0]|0;
    $111 = $110 & 1;
    $112 = ($111<<24>>24)==(0);
    $113 = HEAP32[$10>>2]|0;
    $114 = $110&255;
    $115 = $114 >>> 1;
    $116 = $112 ? $115 : $113;
    $117 = ($116|0)==(0);
    if ($117) {
     $__gl$0$ph = -1;
    } else {
     $118 = HEAP32[$11>>2]|0;
     $119 = $112 ? $12 : $118;
     $120 = HEAP8[$119>>0]|0;
     $121 = $120 << 24 >> 24;
     $__gl$0$ph = $121;
    }
    $122 = ($__d$2|0)==($$$0|0);
    if (!($122)) {
     $__d$351 = $__d$2;$__gl$054 = $__gl$0$ph;$__ig$053 = 0;$__ng$052 = 0;
     while(1) {
      $123 = ($__ng$052|0)==($__gl$054|0);
      if ($123) {
       $124 = HEAP32[$__me>>2]|0;
       $125 = ((($124)) + 1|0);
       HEAP32[$__me>>2] = $125;
       HEAP8[$124>>0] = $__ts;
       $126 = (($__ig$053) + 1)|0;
       $127 = HEAP8[$__grp>>0]|0;
       $128 = $127 & 1;
       $129 = ($128<<24>>24)==(0);
       $130 = HEAP32[$10>>2]|0;
       $131 = $127&255;
       $132 = $131 >>> 1;
       $133 = $129 ? $132 : $130;
       $134 = ($126>>>0)<($133>>>0);
       if ($134) {
        $135 = HEAP32[$11>>2]|0;
        $136 = $129 ? $12 : $135;
        $137 = (($136) + ($126)|0);
        $138 = HEAP8[$137>>0]|0;
        $139 = ($138<<24>>24)==(127);
        $140 = $138 << 24 >> 24;
        $$ = $139 ? -1 : $140;
        $__gl$1 = $$;$__ig$1 = $126;$__ng$1 = 0;
       } else {
        $__gl$1 = $__ng$052;$__ig$1 = $126;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$054;$__ig$1 = $__ig$053;$__ng$1 = $__ng$052;
      }
      $141 = ((($__d$351)) + -1|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = HEAP32[$__me>>2]|0;
      $144 = ((($143)) + 1|0);
      HEAP32[$__me>>2] = $144;
      HEAP8[$143>>0] = $142;
      $145 = (($__ng$1) + 1)|0;
      $146 = ($141|0)==($$$0|0);
      if ($146) {
       break;
      } else {
       $__d$351 = $141;$__gl$054 = $__gl$1;$__ig$053 = $__ig$1;$__ng$052 = $145;
      }
     }
    }
   }
   $147 = HEAP32[$__me>>2]|0;
   $148 = ($61|0)==($147|0);
   if ($148) {
    $$2 = $$$0;
   } else {
    $149 = ((($147)) + -1|0);
    $150 = ($61>>>0)<($149>>>0);
    if ($150) {
     $$01$i$i56 = $61;$153 = $149;
     while(1) {
      $151 = HEAP8[$$01$i$i56>>0]|0;
      $152 = HEAP8[$153>>0]|0;
      HEAP8[$$01$i$i56>>0] = $152;
      HEAP8[$153>>0] = $151;
      $154 = ((($$01$i$i56)) + 1|0);
      $155 = ((($153)) + -1|0);
      $156 = ($154>>>0)<($155>>>0);
      if ($156) {
       $$01$i$i56 = $154;$153 = $155;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$062;
  }
  }
  $157 = (($__p$061) + 1)|0;
  $exitcond = ($157|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$062 = $$2;$__p$061 = $157;
  }
 }
 $158 = HEAP8[$__sn>>0]|0;
 $159 = $158 & 1;
 $160 = ($159<<24>>24)==(0);
 $161 = HEAP32[$0>>2]|0;
 $162 = $158&255;
 $163 = $162 >>> 1;
 $164 = $160 ? $163 : $161;
 $165 = ($164>>>0)>(1);
 if ($165) {
  $166 = HEAP32[$1>>2]|0;
  $167 = $160 ? $2 : $166;
  $168 = (($167) + ($164)|0);
  $169 = HEAP32[$__me>>2]|0;
  $170 = ($164|0)==(1);
  if ($170) {
   $$0$i$i$lcssa = $169;
  } else {
   $171 = ((($167)) + 1|0);
   $$0$i$i35 = $169;$173 = $171;
   while(1) {
    $172 = HEAP8[$173>>0]|0;
    HEAP8[$$0$i$i35>>0] = $172;
    $174 = ((($$0$i$i35)) + 1|0);
    $175 = ((($173)) + 1|0);
    $176 = ($175|0)==($168|0);
    if ($176) {
     $$0$i$i$lcssa = $174;
     break;
    } else {
     $$0$i$i35 = $174;$173 = $175;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$i$i$lcssa;
 }
 $177 = $__flags & 176;
 switch ($177|0) {
 case 32:  {
  $178 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $178;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre18 = 0, $$pre19 = 0, $$pre19$pre = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 56|0;
 $__loc = sp + 52|0;
 $__pat = sp + 164|0;
 $__dp = sp + 161|0;
 $__ts = sp + 160|0;
 $__grp = sp + 40|0;
 $__sym = sp + 28|0;
 $__sn = sp + 16|0;
 $__fd = sp + 12|0;
 $__mbuf = sp + 60|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 $1 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(559,($__loc|0),(11864|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 13;
  } else {
   $5 = HEAP8[$__digits>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   $8 = ((($__digits)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12|0)==(0);
   if ($13) {
    $32 = 0;
   } else {
    $14 = ((($__digits)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($__digits)) + 1|0);
    $17 = $7 ? $16 : $15;
    $18 = HEAP8[$17>>0]|0;
    $19 = HEAP32[$2>>2]|0;
    $20 = ((($19)) + 28|0);
    $21 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    $22 = (invoke_iii($21|0,($2|0),45)|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 13;
     break;
    }
    $25 = ($18<<24>>24)==($22<<24>>24);
    $32 = $25;
   }
   HEAP32[$__grp>>2] = 0;
   $26 = ((($__grp)) + 4|0);
   HEAP32[$26>>2] = 0;
   $27 = ((($__grp)) + 8|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$__sym>>2] = 0;
   $28 = ((($__sym)) + 4|0);
   HEAP32[$28>>2] = 0;
   $29 = ((($__sym)) + 8|0);
   HEAP32[$29>>2] = 0;
   HEAP32[$__sn>>2] = 0;
   $30 = ((($__sn)) + 4|0);
   HEAP32[$30>>2] = 0;
   $31 = ((($__sn)) + 8|0);
   HEAP32[$31>>2] = 0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(680,($__intl|0),($32|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $94 = ___cxa_find_matching_catch()|0;
    $95 = tempRet0;
    $$0 = $94;$$01 = $95;$$pre19 = $1;
   } else {
    $35 = HEAP8[$__digits>>0]|0;
    $36 = $35 & 1;
    $37 = ($36<<24>>24)==(0);
    $38 = HEAP32[$8>>2]|0;
    $39 = $35&255;
    $40 = $39 >>> 1;
    $41 = $37 ? $40 : $38;
    $42 = HEAP32[$__fd>>2]|0;
    $43 = ($41|0)>($42|0);
    if ($43) {
     $44 = (($41) - ($42))|0;
     $45 = $44 << 1;
     $46 = HEAP8[$__sn>>0]|0;
     $47 = $46 & 1;
     $48 = ($47<<24>>24)==(0);
     $49 = ((($__sn)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $46&255;
     $52 = $51 >>> 1;
     $53 = $48 ? $52 : $50;
     $54 = HEAP8[$__sym>>0]|0;
     $55 = $54 & 1;
     $56 = ($55<<24>>24)==(0);
     $57 = ((($__sym)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $54&255;
     $60 = $59 >>> 1;
     $61 = $56 ? $60 : $58;
     $62 = $45 | 1;
     $63 = (($62) + ($42))|0;
     $64 = (($63) + ($53))|0;
     $65 = (($64) + ($61))|0;
     $85 = $65;
    } else {
     $66 = HEAP8[$__sn>>0]|0;
     $67 = $66 & 1;
     $68 = ($67<<24>>24)==(0);
     $69 = ((($__sn)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $66&255;
     $72 = $71 >>> 1;
     $73 = $68 ? $72 : $70;
     $74 = HEAP8[$__sym>>0]|0;
     $75 = $74 & 1;
     $76 = ($75<<24>>24)==(0);
     $77 = ((($__sym)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $74&255;
     $80 = $79 >>> 1;
     $81 = $76 ? $80 : $78;
     $82 = (($42) + 2)|0;
     $83 = (($82) + ($73))|0;
     $84 = (($83) + ($81))|0;
     $85 = $84;
    }
    $86 = ($85>>>0)>(100);
    if ($86) {
     $87 = (_malloc($85)|0);
     $88 = $87;
     $89 = ($87|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(655);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $98 = $88;
      } else {
       $$pre = HEAP8[$__digits>>0]|0;
       $$pre18 = HEAP32[$8>>2]|0;
       $104 = $$pre;$112 = $$pre18;$125 = $88;$__mb$0 = 0;
       label = 17;
      }
     } else {
      $104 = $35;$112 = $38;$125 = $88;$__mb$0 = $87;
      label = 17;
     }
    } else {
     $104 = $35;$112 = $38;$125 = 0;$__mb$0 = $__mbuf;
     label = 17;
    }
    if ((label|0) == 17) {
     $101 = ((($__iob)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $104 & 1;
     $105 = ($103<<24>>24)==(0);
     $106 = ((($__digits)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ((($__digits)) + 1|0);
     $109 = $105 ? $108 : $107;
     $110 = $104&255;
     $111 = $110 >>> 1;
     $113 = $105 ? $111 : $112;
     $114 = (($109) + ($113)|0);
     $115 = HEAP8[$__dp>>0]|0;
     $116 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(681,($__mb$0|0),($__mi|0),($__me|0),($102|0),($109|0),($114|0),($2|0),($32|0),($__pat|0),($115|0),($116|0),($__grp|0),($__sym|0),($__sn|0),($42|0));
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      $98 = $125;
     } else {
      $119 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $119;
      $120 = HEAP32[$__mi>>2]|0;
      $121 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      $122 = (invoke_iiiiiii(560,($$byval_copy|0),($__mb$0|0),($120|0),($121|0),($__iob|0),($__fl|0))|0);
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $98 = $125;
      } else {
       $126 = ($125|0)==(0);
       if ($126) {
        $128 = $1;
       } else {
        $127 = $125;
        _free($127);
        $$pre21 = HEAP32[$__loc>>2]|0;
        $128 = $$pre21;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       (__ZNSt3__114__shared_count16__release_sharedEv($128)|0);
       STACKTOP = sp;return ($122|0);
      }
     }
    }
    $96 = ___cxa_find_matching_catch()|0;
    $97 = tempRet0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0 = $96;$$01 = $97;$$pre19 = $1;
    } else {
     $100 = $98;
     _free($100);
     $$pre19$pre = HEAP32[$__loc>>2]|0;
     $$0 = $96;$$01 = $97;$$pre19 = $$pre19$pre;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $$1 = $$0;$$12 = $$01;$129 = $$pre19;
  }
 } while(0);
 if ((label|0) == 13) {
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;$129 = $1;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($129)|0);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre17$pre = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0;
 var $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 892|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 900|0;
 $__bb = sp + 888|0;
 $__digits = sp + 488|0;
 $__loc = sp + 480|0;
 $__pat = sp + 896|0;
 $__dp = sp + 476|0;
 $__ts = sp + 472|0;
 $__grp = sp + 460|0;
 $__sym = sp + 448|0;
 $__sn = sp + 436|0;
 $__fd = sp + 432|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $1 = (_snprintf($__buf,100,29869,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(649)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $139 = 0;$140 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $6 = (invoke_iiiii(654,($__bb|0),($3|0),(29869|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $139 = 0;$140 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(655);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $139 = 0;$140 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $15 = $$pre;
     } else {
      $15 = $9;
     }
     $16 = $15;
     $17 = $6 << 2;
     $18 = (_malloc($17)|0);
     $19 = $18;
     $20 = ($18|0)==(0|0);
     if ($20) {
      __THREW__ = 0;
      invoke_v(655);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       $139 = $16;$140 = $19;
       label = 7;
      } else {
       $126 = $19;$129 = $16;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $126 = $19;$129 = $16;$__db$0 = $18;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $126 = 0;$129 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  $23 = (invoke_ii(558,($__iob|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $139 = $129;$140 = $126;
   label = 7;
  } else {
   HEAP32[$__loc>>2] = $23;
   __THREW__ = 0;
   $26 = (invoke_iii(559,($__loc|0),(11856|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    label = 22;
   } else {
    $29 = HEAP32[$__bb>>2]|0;
    $30 = (($29) + ($__n$0)|0);
    $31 = HEAP32[$26>>2]|0;
    $32 = ((($31)) + 48|0);
    $33 = HEAP32[$32>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($33|0,($26|0),($29|0),($30|0),($__db$0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     label = 22;
    } else {
     $36 = ($__n$0|0)==(0);
     if ($36) {
      $46 = 0;
     } else {
      $37 = HEAP32[$__bb>>2]|0;
      $38 = HEAP8[$37>>0]|0;
      $39 = ($38<<24>>24)==(45);
      $46 = $39;
     }
     HEAP32[$__grp>>2] = 0;
     $40 = ((($__grp)) + 4|0);
     HEAP32[$40>>2] = 0;
     $41 = ((($__grp)) + 8|0);
     HEAP32[$41>>2] = 0;
     HEAP32[$__sym>>2] = 0;
     $42 = ((($__sym)) + 4|0);
     HEAP32[$42>>2] = 0;
     $43 = ((($__sym)) + 8|0);
     HEAP32[$43>>2] = 0;
     HEAP32[$__sn>>2] = 0;
     $44 = ((($__sn)) + 4|0);
     HEAP32[$44>>2] = 0;
     $45 = ((($__sn)) + 8|0);
     HEAP32[$45>>2] = 0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(682,($__intl|0),($46|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      $102 = ___cxa_find_matching_catch()|0;
      $103 = tempRet0;
      $$0 = $102;$$01 = $103;$$pre17 = $23;
     } else {
      $49 = HEAP32[$__fd>>2]|0;
      $50 = ($__n$0|0)>($49|0);
      if ($50) {
       $51 = (($__n$0) - ($49))|0;
       $52 = $51 << 1;
       $53 = HEAP8[$__sn>>0]|0;
       $54 = $53 & 1;
       $55 = ($54<<24>>24)==(0);
       $56 = ((($__sn)) + 4|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = $53&255;
       $59 = $58 >>> 1;
       $60 = $55 ? $59 : $57;
       $61 = HEAP8[$__sym>>0]|0;
       $62 = $61 & 1;
       $63 = ($62<<24>>24)==(0);
       $64 = ((($__sym)) + 4|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = $61&255;
       $67 = $66 >>> 1;
       $68 = $63 ? $67 : $65;
       $69 = $52 | 1;
       $70 = (($69) + ($49))|0;
       $71 = (($70) + ($60))|0;
       $72 = (($71) + ($68))|0;
       $92 = $72;
      } else {
       $73 = HEAP8[$__sn>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       $76 = ((($__sn)) + 4|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $73&255;
       $79 = $78 >>> 1;
       $80 = $75 ? $79 : $77;
       $81 = HEAP8[$__sym>>0]|0;
       $82 = $81 & 1;
       $83 = ($82<<24>>24)==(0);
       $84 = ((($__sym)) + 4|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = $81&255;
       $87 = $86 >>> 1;
       $88 = $83 ? $87 : $85;
       $89 = (($49) + 2)|0;
       $90 = (($89) + ($80))|0;
       $91 = (($90) + ($88))|0;
       $92 = $91;
      }
      $93 = ($92>>>0)>(100);
      if ($93) {
       $94 = $92 << 2;
       $95 = (_malloc($94)|0);
       $96 = $95;
       $97 = ($95|0)==(0|0);
       if ($97) {
        __THREW__ = 0;
        invoke_v(655);
        $98 = __THREW__; __THREW__ = 0;
        $99 = $98&1;
        if ($99) {
         $106 = $96;
        } else {
         $122 = $96;$__mb$0 = 0;
         label = 26;
        }
       } else {
        $122 = $96;$__mb$0 = $95;
        label = 26;
       }
      } else {
       $122 = 0;$__mb$0 = $__mbuf;
       label = 26;
      }
      if ((label|0) == 26) {
       $109 = ((($__iob)) + 4|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (($__db$0) + ($__n$0<<2)|0);
       $112 = HEAP32[$__dp>>2]|0;
       $113 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(683,($__mb$0|0),($__mi|0),($__me|0),($110|0),($__db$0|0),($111|0),($26|0),($46|0),($__pat|0),($112|0),($113|0),($__grp|0),($__sym|0),($__sn|0),($49|0));
       $114 = __THREW__; __THREW__ = 0;
       $115 = $114&1;
       if ($115) {
        $106 = $122;
       } else {
        $116 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $116;
        $117 = HEAP32[$__mi>>2]|0;
        $118 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        $119 = (invoke_iiiiiii(661,($$byval_copy|0),($__mb$0|0),($117|0),($118|0),($__iob|0),($__fl|0))|0);
        $120 = __THREW__; __THREW__ = 0;
        $121 = $120&1;
        if ($121) {
         $106 = $122;
        } else {
         $123 = ($122|0)==(0);
         if ($123) {
          $125 = $23;
         } else {
          $124 = $122;
          _free($124);
          $$pre19 = HEAP32[$__loc>>2]|0;
          $125 = $$pre19;
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
         $127 = ($126|0)==(0);
         if (!($127)) {
          $128 = $126;
          _free($128);
         }
         $130 = ($129|0)==(0);
         if (!($130)) {
          $131 = $129;
          _free($131);
         }
         STACKTOP = sp;return ($119|0);
        }
       }
      }
      $104 = ___cxa_find_matching_catch()|0;
      $105 = tempRet0;
      $107 = ($106|0)==(0);
      if ($107) {
       $$0 = $104;$$01 = $105;$$pre17 = $23;
      } else {
       $108 = $106;
       _free($108);
       $$pre17$pre = HEAP32[$__loc>>2]|0;
       $$0 = $104;$$01 = $105;$$pre17 = $$pre17$pre;
      }
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $$1 = $$0;$$12 = $$01;$132 = $$pre17;
    }
   }
   if ((label|0) == 22) {
    $100 = ___cxa_find_matching_catch()|0;
    $101 = tempRet0;
    $$1 = $100;$$12 = $101;$132 = $23;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($132)|0);
   $$2 = $$1;$$23 = $$12;$133 = $126;$136 = $129;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$133 = $140;$136 = $139;
 }
 $134 = ($133|0)==(0);
 if (!($134)) {
  $135 = $133;
  _free($135);
 }
 $137 = ($136|0)==(0);
 if (!($137)) {
  $138 = $136;
  _free($138);
 }
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 do {
  if ($__intl) {
   $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11600)|0);
   $13 = HEAP32[$12>>2]|0;
   do {
    if ($__neg) {
     $14 = ((($13)) + 44|0);
     $15 = HEAP32[$14>>2]|0;
     FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
     $16 = HEAP32[$0>>2]|0;
     HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
     $17 = HEAP32[$12>>2]|0;
     $18 = ((($17)) + 32|0);
     $19 = HEAP32[$18>>2]|0;
     FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
     $20 = HEAP8[$__sn>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $23 = ((($__sn)) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      HEAP32[$24>>2] = 0;
     }
     $25 = ((($__sn)) + 4|0);
     HEAP32[$25>>2] = 0;
     __THREW__ = 0;
     invoke_vii(679,($__sn|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      $28 = ___cxa_find_matching_catch(0|0)|0;
      $29 = tempRet0;
      ___clang_call_terminate($28);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$1>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
      HEAP32[$1>>2] = 0;
      $30 = ((($1)) + 4|0);
      HEAP32[$30>>2] = 0;
      $31 = ((($1)) + 8|0);
      HEAP32[$31>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
      break;
     }
    } else {
     $32 = ((($13)) + 40|0);
     $33 = HEAP32[$32>>2]|0;
     FUNCTION_TABLE_vii[$33 & 1023]($2,$12);
     $34 = HEAP32[$2>>2]|0;
     HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
     $35 = HEAP32[$12>>2]|0;
     $36 = ((($35)) + 28|0);
     $37 = HEAP32[$36>>2]|0;
     FUNCTION_TABLE_vii[$37 & 1023]($3,$12);
     $38 = HEAP8[$__sn>>0]|0;
     $39 = $38 & 1;
     $40 = ($39<<24>>24)==(0);
     if ($40) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $41 = ((($__sn)) + 8|0);
      $42 = HEAP32[$41>>2]|0;
      HEAP32[$42>>2] = 0;
     }
     $43 = ((($__sn)) + 4|0);
     HEAP32[$43>>2] = 0;
     __THREW__ = 0;
     invoke_vii(679,($__sn|0),0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $46 = ___cxa_find_matching_catch(0|0)|0;
      $47 = tempRet0;
      ___clang_call_terminate($46);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$3>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
      HEAP32[$3>>2] = 0;
      $48 = ((($3)) + 4|0);
      HEAP32[$48>>2] = 0;
      $49 = ((($3)) + 8|0);
      HEAP32[$49>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
      break;
     }
    }
   } while(0);
   $50 = HEAP32[$12>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_ii[$52 & 1023]($12)|0);
   HEAP32[$__dp>>2] = $53;
   $54 = HEAP32[$12>>2]|0;
   $55 = ((($54)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (FUNCTION_TABLE_ii[$56 & 1023]($12)|0);
   HEAP32[$__ts>>2] = $57;
   $58 = HEAP32[$12>>2]|0;
   $59 = ((($58)) + 20|0);
   $60 = HEAP32[$59>>2]|0;
   FUNCTION_TABLE_vii[$60 & 1023]($4,$12);
   $61 = HEAP8[$__grp>>0]|0;
   $62 = $61 & 1;
   $63 = ($62<<24>>24)==(0);
   if ($63) {
    $67 = ((($__grp)) + 1|0);
    HEAP8[$67>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $64 = ((($__grp)) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    HEAP8[$65>>0] = 0;
    $66 = ((($__grp)) + 4|0);
    HEAP32[$66>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__grp|0),0);
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if ($69) {
    $70 = ___cxa_find_matching_catch(0|0)|0;
    $71 = tempRet0;
    ___clang_call_terminate($70);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$4>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
   HEAP32[$4>>2] = 0;
   $72 = ((($4)) + 4|0);
   HEAP32[$72>>2] = 0;
   $73 = ((($4)) + 8|0);
   HEAP32[$73>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
   $74 = HEAP32[$12>>2]|0;
   $75 = ((($74)) + 24|0);
   $76 = HEAP32[$75>>2]|0;
   FUNCTION_TABLE_vii[$76 & 1023]($5,$12);
   $77 = HEAP8[$__sym>>0]|0;
   $78 = $77 & 1;
   $79 = ($78<<24>>24)==(0);
   if ($79) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $80 = ((($__sym)) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    HEAP32[$81>>2] = 0;
   }
   $82 = ((($__sym)) + 4|0);
   HEAP32[$82>>2] = 0;
   __THREW__ = 0;
   invoke_vii(679,($__sym|0),0);
   $83 = __THREW__; __THREW__ = 0;
   $84 = $83&1;
   if ($84) {
    $85 = ___cxa_find_matching_catch(0|0)|0;
    $86 = tempRet0;
    ___clang_call_terminate($85);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$5>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
    HEAP32[$5>>2] = 0;
    $87 = ((($5)) + 4|0);
    HEAP32[$87>>2] = 0;
    $88 = ((($5)) + 8|0);
    HEAP32[$88>>2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($5);
    $89 = HEAP32[$12>>2]|0;
    $90 = ((($89)) + 36|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (FUNCTION_TABLE_ii[$91 & 1023]($12)|0);
    $storemerge = $92;
    break;
   }
  } else {
   $93 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11536)|0);
   $94 = HEAP32[$93>>2]|0;
   do {
    if ($__neg) {
     $95 = ((($94)) + 44|0);
     $96 = HEAP32[$95>>2]|0;
     FUNCTION_TABLE_vii[$96 & 1023]($6,$93);
     $97 = HEAP32[$6>>2]|0;
     HEAP8[$__pat>>0]=$97&255;HEAP8[$__pat+1>>0]=($97>>8)&255;HEAP8[$__pat+2>>0]=($97>>16)&255;HEAP8[$__pat+3>>0]=$97>>24;
     $98 = HEAP32[$93>>2]|0;
     $99 = ((($98)) + 32|0);
     $100 = HEAP32[$99>>2]|0;
     FUNCTION_TABLE_vii[$100 & 1023]($7,$93);
     $101 = HEAP8[$__sn>>0]|0;
     $102 = $101 & 1;
     $103 = ($102<<24>>24)==(0);
     if ($103) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $104 = ((($__sn)) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      HEAP32[$105>>2] = 0;
     }
     $106 = ((($__sn)) + 4|0);
     HEAP32[$106>>2] = 0;
     __THREW__ = 0;
     invoke_vii(679,($__sn|0),0);
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      $109 = ___cxa_find_matching_catch(0|0)|0;
      $110 = tempRet0;
      ___clang_call_terminate($109);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
      HEAP32[$7>>2] = 0;
      $111 = ((($7)) + 4|0);
      HEAP32[$111>>2] = 0;
      $112 = ((($7)) + 8|0);
      HEAP32[$112>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
      break;
     }
    } else {
     $113 = ((($94)) + 40|0);
     $114 = HEAP32[$113>>2]|0;
     FUNCTION_TABLE_vii[$114 & 1023]($8,$93);
     $115 = HEAP32[$8>>2]|0;
     HEAP8[$__pat>>0]=$115&255;HEAP8[$__pat+1>>0]=($115>>8)&255;HEAP8[$__pat+2>>0]=($115>>16)&255;HEAP8[$__pat+3>>0]=$115>>24;
     $116 = HEAP32[$93>>2]|0;
     $117 = ((($116)) + 28|0);
     $118 = HEAP32[$117>>2]|0;
     FUNCTION_TABLE_vii[$118 & 1023]($9,$93);
     $119 = HEAP8[$__sn>>0]|0;
     $120 = $119 & 1;
     $121 = ($120<<24>>24)==(0);
     if ($121) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $122 = ((($__sn)) + 8|0);
      $123 = HEAP32[$122>>2]|0;
      HEAP32[$123>>2] = 0;
     }
     $124 = ((($__sn)) + 4|0);
     HEAP32[$124>>2] = 0;
     __THREW__ = 0;
     invoke_vii(679,($__sn|0),0);
     $125 = __THREW__; __THREW__ = 0;
     $126 = $125&1;
     if ($126) {
      $127 = ___cxa_find_matching_catch(0|0)|0;
      $128 = tempRet0;
      ___clang_call_terminate($127);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$9>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
      HEAP32[$9>>2] = 0;
      $129 = ((($9)) + 4|0);
      HEAP32[$129>>2] = 0;
      $130 = ((($9)) + 8|0);
      HEAP32[$130>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
      break;
     }
    }
   } while(0);
   $131 = HEAP32[$93>>2]|0;
   $132 = ((($131)) + 12|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (FUNCTION_TABLE_ii[$133 & 1023]($93)|0);
   HEAP32[$__dp>>2] = $134;
   $135 = HEAP32[$93>>2]|0;
   $136 = ((($135)) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (FUNCTION_TABLE_ii[$137 & 1023]($93)|0);
   HEAP32[$__ts>>2] = $138;
   $139 = HEAP32[$93>>2]|0;
   $140 = ((($139)) + 20|0);
   $141 = HEAP32[$140>>2]|0;
   FUNCTION_TABLE_vii[$141 & 1023]($10,$93);
   $142 = HEAP8[$__grp>>0]|0;
   $143 = $142 & 1;
   $144 = ($143<<24>>24)==(0);
   if ($144) {
    $148 = ((($__grp)) + 1|0);
    HEAP8[$148>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $145 = ((($__grp)) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    HEAP8[$146>>0] = 0;
    $147 = ((($__grp)) + 4|0);
    HEAP32[$147>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(673,($__grp|0),0);
   $149 = __THREW__; __THREW__ = 0;
   $150 = $149&1;
   if ($150) {
    $151 = ___cxa_find_matching_catch(0|0)|0;
    $152 = tempRet0;
    ___clang_call_terminate($151);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$10>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
   HEAP32[$10>>2] = 0;
   $153 = ((($10)) + 4|0);
   HEAP32[$153>>2] = 0;
   $154 = ((($10)) + 8|0);
   HEAP32[$154>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $155 = HEAP32[$93>>2]|0;
   $156 = ((($155)) + 24|0);
   $157 = HEAP32[$156>>2]|0;
   FUNCTION_TABLE_vii[$157 & 1023]($11,$93);
   $158 = HEAP8[$__sym>>0]|0;
   $159 = $158 & 1;
   $160 = ($159<<24>>24)==(0);
   if ($160) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $161 = ((($__sym)) + 8|0);
    $162 = HEAP32[$161>>2]|0;
    HEAP32[$162>>2] = 0;
   }
   $163 = ((($__sym)) + 4|0);
   HEAP32[$163>>2] = 0;
   __THREW__ = 0;
   invoke_vii(679,($__sym|0),0);
   $164 = __THREW__; __THREW__ = 0;
   $165 = $164&1;
   if ($165) {
    $166 = ___cxa_find_matching_catch(0|0)|0;
    $167 = tempRet0;
    ___clang_call_terminate($166);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$11>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
    HEAP32[$11>>2] = 0;
    $168 = ((($11)) + 4|0);
    HEAP32[$168>>2] = 0;
    $169 = ((($11)) + 8|0);
    HEAP32[$169>>2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
    $170 = HEAP32[$93>>2]|0;
    $171 = ((($170)) + 36|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = (FUNCTION_TABLE_ii[$172 & 1023]($93)|0);
    $storemerge = $173;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0$i$i30 = 0, $$0$i$i954 = 0, $$01$i$i52 = 0, $$057 = 0, $$2 = 0, $$lcssa = 0, $$lcssa63 = 0, $$lcssa64 = 0, $$lcssa65 = 0, $$lcssa67 = 0, $$op = 0, $$pre29 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0;
 var $__d$031 = 0, $__d$1$lcssa = 0, $__d$137 = 0, $__d$2 = 0, $__d$347 = 0, $__f$0$lcssa = 0, $__f$038 = 0, $__f$143 = 0, $__gl$0$ph = 0, $__gl$050 = 0, $__gl$1 = 0, $__ig$049 = 0, $__ig$1 = 0, $__me$promoted = 0, $__me$promoted66 = 0, $__ng$048 = 0, $__ng$1 = 0, $__p$056 = 0, $exitcond = 0, $or$cond = 0;
 var $scevgep$i = 0, $scevgep$i10 = 0, $scevgep$sum = 0, $scevgep26 = 0, $scevgep27$sum = 0, $scevgep28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 4|0);
 $1 = ((($__sn)) + 8|0);
 $2 = ((($__sym)) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = ((($__sym)) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = ((($__grp)) + 4|0);
 $8 = ((($__grp)) + 8|0);
 $9 = ((($__grp)) + 1|0);
 $10 = ($__fd|0)>(0);
 $$057 = $__db;$__p$056 = 0;
 while(1) {
  $11 = (($__pat) + ($__p$056)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  switch ($13|0) {
  case 0:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $$2 = $$057;
   break;
  }
  case 1:  {
   $15 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $15;
   $16 = HEAP32[$__ct>>2]|0;
   $17 = ((($16)) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iii[$18 & 1023]($__ct,32)|0);
   $20 = HEAP32[$__me>>2]|0;
   $21 = ((($20)) + 4|0);
   HEAP32[$__me>>2] = $21;
   HEAP32[$20>>2] = $19;
   $$2 = $$057;
   break;
  }
  case 3:  {
   $22 = HEAP8[$__sn>>0]|0;
   $23 = $22 & 1;
   $24 = ($23<<24>>24)==(0);
   $25 = HEAP32[$0>>2]|0;
   $26 = $22&255;
   $27 = $26 >>> 1;
   $28 = $24 ? $27 : $25;
   $29 = ($28|0)==(0);
   if ($29) {
    $$2 = $$057;
   } else {
    $30 = HEAP32[$1>>2]|0;
    $31 = $24 ? $0 : $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$__me>>2]|0;
    $34 = ((($33)) + 4|0);
    HEAP32[$__me>>2] = $34;
    HEAP32[$33>>2] = $32;
    $$2 = $$057;
   }
   break;
  }
  case 2:  {
   $35 = HEAP8[$__sym>>0]|0;
   $36 = $35 & 1;
   $37 = ($36<<24>>24)==(0);
   $38 = HEAP32[$2>>2]|0;
   $39 = $35&255;
   $40 = $39 >>> 1;
   $41 = $37 ? $40 : $38;
   $42 = ($41|0)==(0);
   $or$cond = $4 | $42;
   if ($or$cond) {
    $$2 = $$057;
   } else {
    $43 = HEAP32[$5>>2]|0;
    $44 = $37 ? $2 : $43;
    $45 = (($44) + ($41<<2)|0);
    $46 = HEAP32[$__me>>2]|0;
    $47 = ($41|0)==(0);
    if (!($47)) {
     $$0$i$i954 = $46;$49 = $44;
     while(1) {
      $48 = HEAP32[$49>>2]|0;
      HEAP32[$$0$i$i954>>2] = $48;
      $50 = ((($49)) + 4|0);
      $51 = ((($$0$i$i954)) + 4|0);
      $52 = ($50|0)==($45|0);
      if ($52) {
       break;
      } else {
       $$0$i$i954 = $51;$49 = $50;
      }
     }
    }
    $scevgep$i10 = (($46) + ($41<<2)|0);
    HEAP32[$__me>>2] = $scevgep$i10;
    $$2 = $$057;
   }
   break;
  }
  case 4:  {
   $53 = HEAP32[$__me>>2]|0;
   $54 = ((($$057)) + 4|0);
   $$$0 = $__neg ? $54 : $$057;
   $55 = ($$$0>>>0)<($__de>>>0);
   L15: do {
    if ($55) {
     $__d$031 = $$$0;
     while(1) {
      $56 = HEAP32[$__d$031>>2]|0;
      $57 = HEAP32[$__ct>>2]|0;
      $58 = ((($57)) + 12|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (FUNCTION_TABLE_iiii[$59 & 1023]($__ct,2048,$56)|0);
      if (!($60)) {
       $__d$0$lcssa = $__d$031;
       break L15;
      }
      $61 = ((($__d$031)) + 4|0);
      $62 = ($61>>>0)<($__de>>>0);
      if ($62) {
       $__d$031 = $61;
      } else {
       $__d$0$lcssa = $61;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $63 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    $64 = $63 & $10;
    if ($64) {
     $__me$promoted66 = HEAP32[$__me>>2]|0;
     $68 = $__me$promoted66;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $65 = ((($__d$137)) + -4|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ((($68)) + 4|0);
      HEAP32[$68>>2] = $66;
      $69 = (($__f$038) + -1)|0;
      $70 = ($65>>>0)>($$$0>>>0);
      $71 = ($__f$038|0)>(1);
      $72 = $70 & $71;
      if ($72) {
       $68 = $67;$__d$137 = $65;$__f$038 = $69;
      } else {
       $$lcssa63 = $65;$$lcssa64 = $69;$$lcssa65 = $71;$$lcssa67 = $67;
       break;
      }
     }
     HEAP32[$__me>>2] = $$lcssa67;
     $$lcssa = $$lcssa65;$__d$1$lcssa = $$lcssa63;$__f$0$lcssa = $$lcssa64;
    } else {
     $$lcssa = $10;$__d$1$lcssa = $__d$0$lcssa;$__f$0$lcssa = $__fd;
    }
    if ($$lcssa) {
     $73 = HEAP32[$__ct>>2]|0;
     $74 = ((($73)) + 44|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_iii[$75 & 1023]($__ct,48)|0);
     $83 = $76;
    } else {
     $83 = 0;
    }
    $__me$promoted = HEAP32[$__me>>2]|0;
    $77 = ($__f$0$lcssa|0)<(0);
    $$op = $__f$0$lcssa ^ -1;
    $78 = $77 ? $$op : -1;
    $79 = (($__f$0$lcssa) + ($78))|0;
    $80 = ($__f$0$lcssa|0)>(0);
    if ($80) {
     $82 = $__me$promoted;$__f$143 = $__f$0$lcssa;
     while(1) {
      $81 = ((($82)) + 4|0);
      HEAP32[$82>>2] = $83;
      $84 = (($__f$143) + -1)|0;
      $85 = ($__f$143|0)>(1);
      if ($85) {
       $82 = $81;$__f$143 = $84;
      } else {
       break;
      }
     }
    }
    $scevgep$sum = (($79) + 2)|0;
    $scevgep26 = (($__me$promoted) + ($scevgep$sum<<2)|0);
    $scevgep27$sum = (($79) + 1)|0;
    $scevgep28 = (($__me$promoted) + ($scevgep27$sum<<2)|0);
    HEAP32[$__me>>2] = $scevgep26;
    HEAP32[$scevgep28>>2] = $__dp;
    $__d$2 = $__d$1$lcssa;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $86 = ($__d$2|0)==($$$0|0);
   if ($86) {
    $87 = HEAP32[$__ct>>2]|0;
    $88 = ((($87)) + 44|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (FUNCTION_TABLE_iii[$89 & 1023]($__ct,48)|0);
    $91 = HEAP32[$__me>>2]|0;
    $92 = ((($91)) + 4|0);
    HEAP32[$__me>>2] = $92;
    HEAP32[$91>>2] = $90;
    $130 = $92;
   } else {
    $93 = HEAP8[$__grp>>0]|0;
    $94 = $93 & 1;
    $95 = ($94<<24>>24)==(0);
    $96 = HEAP32[$7>>2]|0;
    $97 = $93&255;
    $98 = $97 >>> 1;
    $99 = $95 ? $98 : $96;
    $100 = ($99|0)==(0);
    if ($100) {
     $__gl$0$ph = -1;
    } else {
     $101 = HEAP32[$8>>2]|0;
     $102 = $95 ? $9 : $101;
     $103 = HEAP8[$102>>0]|0;
     $104 = $103 << 24 >> 24;
     $__gl$0$ph = $104;
    }
    $105 = ($__d$2|0)==($$$0|0);
    if (!($105)) {
     $__d$347 = $__d$2;$__gl$050 = $__gl$0$ph;$__ig$049 = 0;$__ng$048 = 0;
     while(1) {
      $106 = ($__ng$048|0)==($__gl$050|0);
      $107 = HEAP32[$__me>>2]|0;
      if ($106) {
       $108 = ((($107)) + 4|0);
       HEAP32[$__me>>2] = $108;
       HEAP32[$107>>2] = $__ts;
       $109 = (($__ig$049) + 1)|0;
       $110 = HEAP8[$__grp>>0]|0;
       $111 = $110 & 1;
       $112 = ($111<<24>>24)==(0);
       $113 = $110&255;
       $114 = $113 >>> 1;
       $115 = $112 ? $114 : $96;
       $116 = ($109>>>0)<($115>>>0);
       if ($116) {
        $117 = HEAP32[$8>>2]|0;
        $118 = $112 ? $9 : $117;
        $119 = (($118) + ($109)|0);
        $120 = HEAP8[$119>>0]|0;
        $121 = ($120<<24>>24)==(127);
        $122 = $120 << 24 >> 24;
        $$ = $121 ? -1 : $122;
        $126 = $108;$__gl$1 = $$;$__ig$1 = $109;$__ng$1 = 0;
       } else {
        $126 = $108;$__gl$1 = $__ng$048;$__ig$1 = $109;$__ng$1 = 0;
       }
      } else {
       $126 = $107;$__gl$1 = $__gl$050;$__ig$1 = $__ig$049;$__ng$1 = $__ng$048;
      }
      $123 = ((($__d$347)) + -4|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ((($126)) + 4|0);
      HEAP32[$__me>>2] = $125;
      HEAP32[$126>>2] = $124;
      $127 = (($__ng$1) + 1)|0;
      $128 = ($123|0)==($$$0|0);
      if ($128) {
       break;
      } else {
       $__d$347 = $123;$__gl$050 = $__gl$1;$__ig$049 = $__ig$1;$__ng$048 = $127;
      }
     }
    }
    $$pre29 = HEAP32[$__me>>2]|0;
    $130 = $$pre29;
   }
   $129 = ($53|0)==($130|0);
   if ($129) {
    $$2 = $$$0;
   } else {
    $131 = ((($130)) + -4|0);
    $132 = ($53>>>0)<($131>>>0);
    if ($132) {
     $$01$i$i52 = $53;$135 = $131;
     while(1) {
      $133 = HEAP32[$$01$i$i52>>2]|0;
      $134 = HEAP32[$135>>2]|0;
      HEAP32[$$01$i$i52>>2] = $134;
      HEAP32[$135>>2] = $133;
      $136 = ((($$01$i$i52)) + 4|0);
      $137 = ((($135)) + -4|0);
      $138 = ($136>>>0)<($137>>>0);
      if ($138) {
       $$01$i$i52 = $136;$135 = $137;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$057;
  }
  }
  $139 = (($__p$056) + 1)|0;
  $exitcond = ($139|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$057 = $$2;$__p$056 = $139;
  }
 }
 $140 = HEAP8[$__sn>>0]|0;
 $141 = $140 & 1;
 $142 = ($141<<24>>24)==(0);
 $143 = HEAP32[$0>>2]|0;
 $144 = $140&255;
 $145 = $144 >>> 1;
 $146 = $142 ? $145 : $143;
 $147 = ($146>>>0)>(1);
 if ($147) {
  $148 = HEAP32[$1>>2]|0;
  $149 = $142 ? $0 : $148;
  $150 = ((($149)) + 4|0);
  $151 = (($149) + ($146<<2)|0);
  $152 = HEAP32[$__me>>2]|0;
  $153 = $150;
  $154 = $151;
  $155 = (($154) - ($153))|0;
  $156 = ($146|0)==(1);
  if (!($156)) {
   $$0$i$i30 = $152;$158 = $150;
   while(1) {
    $157 = HEAP32[$158>>2]|0;
    HEAP32[$$0$i$i30>>2] = $157;
    $159 = ((($158)) + 4|0);
    $160 = ((($$0$i$i30)) + 4|0);
    $161 = ($159|0)==($151|0);
    if ($161) {
     break;
    } else {
     $$0$i$i30 = $160;$158 = $159;
    }
   }
  }
  $162 = $155 >>> 2;
  $scevgep$i = (($152) + ($162<<2)|0);
  HEAP32[$__me>>2] = $scevgep$i;
 }
 $163 = $__flags & 176;
 switch ($163|0) {
 case 32:  {
  $164 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $164;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $$pre18$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0;
 var $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 468|0;
 $__loc = sp + 464|0;
 $__pat = sp + 472|0;
 $__dp = sp + 460|0;
 $__ts = sp + 456|0;
 $__grp = sp + 444|0;
 $__sym = sp + 432|0;
 $__sn = sp + 420|0;
 $__fd = sp + 416|0;
 $__mbuf = sp + 16|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 $1 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(559,($__loc|0),(11856|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 13;
  } else {
   $5 = HEAP8[$__digits>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   $8 = ((($__digits)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12|0)==(0);
   if ($13) {
    $31 = 0;
   } else {
    $14 = ((($__digits)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $7 ? $8 : $15;
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$2>>2]|0;
    $19 = ((($18)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($2|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 13;
     break;
    }
    $24 = ($17|0)==($21|0);
    $31 = $24;
   }
   HEAP32[$__grp>>2] = 0;
   $25 = ((($__grp)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = ((($__grp)) + 8|0);
   HEAP32[$26>>2] = 0;
   HEAP32[$__sym>>2] = 0;
   $27 = ((($__sym)) + 4|0);
   HEAP32[$27>>2] = 0;
   $28 = ((($__sym)) + 8|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$__sn>>2] = 0;
   $29 = ((($__sn)) + 4|0);
   HEAP32[$29>>2] = 0;
   $30 = ((($__sn)) + 8|0);
   HEAP32[$30>>2] = 0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(682,($__intl|0),($31|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $94 = ___cxa_find_matching_catch()|0;
    $95 = tempRet0;
    $$0 = $94;$$01 = $95;$$pre18 = $1;
   } else {
    $34 = HEAP8[$__digits>>0]|0;
    $35 = $34 & 1;
    $36 = ($35<<24>>24)==(0);
    $37 = HEAP32[$8>>2]|0;
    $38 = $34&255;
    $39 = $38 >>> 1;
    $40 = $36 ? $39 : $37;
    $41 = HEAP32[$__fd>>2]|0;
    $42 = ($40|0)>($41|0);
    if ($42) {
     $43 = (($40) - ($41))|0;
     $44 = $43 << 1;
     $45 = HEAP8[$__sn>>0]|0;
     $46 = $45 & 1;
     $47 = ($46<<24>>24)==(0);
     $48 = ((($__sn)) + 4|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $45&255;
     $51 = $50 >>> 1;
     $52 = $47 ? $51 : $49;
     $53 = HEAP8[$__sym>>0]|0;
     $54 = $53 & 1;
     $55 = ($54<<24>>24)==(0);
     $56 = ((($__sym)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $53&255;
     $59 = $58 >>> 1;
     $60 = $55 ? $59 : $57;
     $61 = $44 | 1;
     $62 = (($61) + ($41))|0;
     $63 = (($62) + ($52))|0;
     $64 = (($63) + ($60))|0;
     $84 = $64;
    } else {
     $65 = HEAP8[$__sn>>0]|0;
     $66 = $65 & 1;
     $67 = ($66<<24>>24)==(0);
     $68 = ((($__sn)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $65&255;
     $71 = $70 >>> 1;
     $72 = $67 ? $71 : $69;
     $73 = HEAP8[$__sym>>0]|0;
     $74 = $73 & 1;
     $75 = ($74<<24>>24)==(0);
     $76 = ((($__sym)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $73&255;
     $79 = $78 >>> 1;
     $80 = $75 ? $79 : $77;
     $81 = (($41) + 2)|0;
     $82 = (($81) + ($72))|0;
     $83 = (($82) + ($80))|0;
     $84 = $83;
    }
    $85 = ($84>>>0)>(100);
    if ($85) {
     $86 = $84 << 2;
     $87 = (_malloc($86)|0);
     $88 = $87;
     $89 = ($87|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(655);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $98 = $88;
      } else {
       $$pre = HEAP8[$__digits>>0]|0;
       $$pre17 = HEAP32[$8>>2]|0;
       $104 = $$pre;$111 = $$pre17;$124 = $88;$__mb$0 = 0;
       label = 17;
      }
     } else {
      $104 = $34;$111 = $37;$124 = $88;$__mb$0 = $87;
      label = 17;
     }
    } else {
     $104 = $34;$111 = $37;$124 = 0;$__mb$0 = $__mbuf;
     label = 17;
    }
    if ((label|0) == 17) {
     $101 = ((($__iob)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $104 & 1;
     $105 = ($103<<24>>24)==(0);
     $106 = ((($__digits)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $105 ? $8 : $107;
     $109 = $104&255;
     $110 = $109 >>> 1;
     $112 = $105 ? $110 : $111;
     $113 = (($108) + ($112<<2)|0);
     $114 = HEAP32[$__dp>>2]|0;
     $115 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(683,($__mb$0|0),($__mi|0),($__me|0),($102|0),($108|0),($113|0),($2|0),($31|0),($__pat|0),($114|0),($115|0),($__grp|0),($__sym|0),($__sn|0),($41|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      $98 = $124;
     } else {
      $118 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $118;
      $119 = HEAP32[$__mi>>2]|0;
      $120 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      $121 = (invoke_iiiiiii(661,($$byval_copy|0),($__mb$0|0),($119|0),($120|0),($__iob|0),($__fl|0))|0);
      $122 = __THREW__; __THREW__ = 0;
      $123 = $122&1;
      if ($123) {
       $98 = $124;
      } else {
       $125 = ($124|0)==(0);
       if ($125) {
        $127 = $1;
       } else {
        $126 = $124;
        _free($126);
        $$pre20 = HEAP32[$__loc>>2]|0;
        $127 = $$pre20;
       }
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       (__ZNSt3__114__shared_count16__release_sharedEv($127)|0);
       STACKTOP = sp;return ($121|0);
      }
     }
    }
    $96 = ___cxa_find_matching_catch()|0;
    $97 = tempRet0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0 = $96;$$01 = $97;$$pre18 = $1;
    } else {
     $100 = $98;
     _free($100);
     $$pre18$pre = HEAP32[$__loc>>2]|0;
     $$0 = $96;$$01 = $97;$$pre18 = $$pre18$pre;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $$1 = $$0;$$12 = $$01;$128 = $$pre18;
  }
 } while(0);
 if ((label|0) == 13) {
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;$128 = $1;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($128)|0);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__18messagesIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__nm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__nm)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i15 = 0, $$0$i817 = 0, $$02 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 HEAP32[$__ndflt>>2] = 0;
 $0 = ((($__ndflt)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__ndflt)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__dflt>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 $5 = ((($__dflt)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($__dflt)) + 1|0);
 $8 = $4 ? $7 : $6;
 $9 = ((($__dflt)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2&255;
 $12 = $11 >>> 1;
 $13 = $4 ? $12 : $10;
 $14 = (($8) + ($13)|0);
 $15 = ($13|0)>(0);
 L1: do {
  if ($15) {
   $$0$i817 = $8;
   while(1) {
    $16 = HEAP8[$$0$i817>>0]|0;
    __THREW__ = 0;
    invoke_vii(555,($__ndflt|0),($16|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($$0$i817)) + 1|0);
    $20 = ($19>>>0)<($14>>>0);
    if ($20) {
     $$0$i817 = $19;
    } else {
     label = 4;
     break L1;
    }
   }
   $35 = ___cxa_find_matching_catch()|0;
   $36 = tempRet0;
   $lpad$phi$index = $35;$lpad$phi$index2 = $36;
   label = 7;
  } else {
   label = 4;
  }
 } while(0);
 L6: do {
  if ((label|0) == 4) {
   $21 = ($__c|0)==(-1);
   $22 = $__c << 1;
   $23 = $22;
   $24 = $21 ? (-1) : $23;
   $25 = HEAP8[$__ndflt>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   $28 = ((($__ndflt)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($__ndflt)) + 1|0);
   $31 = $27 ? $30 : $29;
   __THREW__ = 0;
   $32 = (invoke_iiiii(684,($24|0),($__set|0),($__msgid|0),($31|0))|0);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $37 = ___cxa_find_matching_catch()|0;
    $38 = tempRet0;
    $lpad$phi$index = $37;$lpad$phi$index2 = $38;
    label = 7;
    break;
   }
   HEAP32[$agg$result>>2] = 0;
   $39 = ((($agg$result)) + 4|0);
   HEAP32[$39>>2] = 0;
   $40 = ((($agg$result)) + 8|0);
   HEAP32[$40>>2] = 0;
   $41 = (_strlen($32)|0);
   $42 = (($32) + ($41)|0);
   $43 = ($41|0)>(0);
   L11: do {
    if ($43) {
     $$0$i15 = $32;
     while(1) {
      $44 = HEAP8[$$0$i15>>0]|0;
      __THREW__ = 0;
      invoke_vii(555,($agg$result|0),($44|0));
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       break;
      }
      $47 = ((($$0$i15)) + 1|0);
      $48 = ($47>>>0)<($42>>>0);
      if ($48) {
       $$0$i15 = $47;
      } else {
       break L11;
      }
     }
     $49 = ___cxa_find_matching_catch()|0;
     $50 = tempRet0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
     $$02 = $49;$$03 = $50;
     break L6;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 7) {
  $$02 = $lpad$phi$index;$$03 = $lpad$phi$index2;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($$02|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__nm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__nm)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i1440 = 0, $$0$i35 = 0, $$1 = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i12 = 0, $__buf$i = 0, $__buf$i11 = 0, $__mb$i = 0, $__mb$i10 = 0, $__ndflt = 0, $__nn$i = 0, $__p$0$i1638 = 0, $__p$0$i34 = 0, $__wn$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index10 = 0, $lpad$phi30$index = 0, $lpad$phi30$index3 = 0, $or$cond$i = 0, $or$cond$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i10 = sp + 184|0;
 $__buf$i11 = sp + 192|0;
 $__bn$i12 = sp + 180|0;
 $__wn$i = sp + 176|0;
 $__mb$i = sp + 168|0;
 $__buf$i = sp + 40|0;
 $__bn$i = sp + 32|0;
 $__nn$i = sp + 28|0;
 $__ndflt = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 HEAP32[$__ndflt>>2] = 0;
 $2 = ((($__ndflt)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($__ndflt)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$0>>2] = (12340);
 $5 = HEAP8[$__dflt>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__dflt)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($__dflt)) + 4|0);
 $11 = $7 ? $10 : $9;
 $12 = HEAP32[$10>>2]|0;
 $13 = $5&255;
 $14 = $13 >>> 1;
 $15 = $7 ? $14 : $12;
 $16 = (($11) + ($15<<2)|0);
 $17 = ((($__buf$i11)) + 32|0);
 $18 = ($15|0)>(0);
 L1: do {
  if ($18) {
   $$0$i1440 = $11;
   L2: while(1) {
    HEAP32[$__wn$i>>2] = $$0$i1440;
    $19 = HEAP32[$0>>2]|0;
    $20 = ((($19)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    $22 = (invoke_iiiiiiiii($21|0,($0|0),($__mb$i10|0),($$0$i1440|0),($16|0),($__wn$i|0),($__buf$i11|0),($17|0),($__bn$i12|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 12;
     break;
    }
    $25 = ($22|0)==(2);
    $26 = HEAP32[$__wn$i>>2]|0;
    $27 = ($26|0)==($$0$i1440|0);
    $or$cond$i15 = $25 | $27;
    if ($or$cond$i15) {
     label = 5;
     break;
    }
    $28 = HEAP32[$__bn$i12>>2]|0;
    $29 = ($__buf$i11>>>0)<($28>>>0);
    if ($29) {
     $__p$0$i1638 = $__buf$i11;
     while(1) {
      $33 = HEAP8[$__p$0$i1638>>0]|0;
      __THREW__ = 0;
      invoke_vii(555,($__ndflt|0),($33|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       label = 11;
       break L2;
      }
      $36 = ((($__p$0$i1638)) + 1|0);
      $37 = HEAP32[$__bn$i12>>2]|0;
      $38 = ($36>>>0)<($37>>>0);
      if ($38) {
       $__p$0$i1638 = $36;
      } else {
       break;
      }
     }
    }
    $39 = HEAP32[$__wn$i>>2]|0;
    $40 = ($39>>>0)<($16>>>0);
    $41 = ($22|0)!=(2);
    $42 = $41 & $40;
    if ($42) {
     $$0$i1440 = $39;
    } else {
     label = 9;
     break L1;
    }
   }
   if ((label|0) == 5) {
    __THREW__ = 0;
    invoke_vi(667,(29806|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = ___cxa_find_matching_catch()|0;
    $32 = tempRet0;
    $lpad$phi30$index = $31;$lpad$phi30$index3 = $32;
   }
   else if ((label|0) == 11) {
    $59 = ___cxa_find_matching_catch()|0;
    $60 = tempRet0;
    $lpad$phi30$index = $59;$lpad$phi30$index3 = $60;
   }
   else if ((label|0) == 12) {
    $61 = ___cxa_find_matching_catch()|0;
    $62 = tempRet0;
    $lpad$phi30$index = $61;$lpad$phi30$index3 = $62;
   }
   $$1 = $lpad$phi30$index;$$14 = $lpad$phi30$index3;
  } else {
   label = 9;
  }
 } while(0);
 L16: do {
  if ((label|0) == 9) {
   $43 = ($__c|0)==(-1);
   $44 = $__c << 1;
   $45 = $44;
   $46 = $43 ? (-1) : $45;
   $47 = HEAP8[$__ndflt>>0]|0;
   $48 = $47 & 1;
   $49 = ($48<<24>>24)==(0);
   $50 = ((($__ndflt)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($__ndflt)) + 1|0);
   $53 = $49 ? $52 : $51;
   __THREW__ = 0;
   $54 = (invoke_iiiii(684,($46|0),($__set|0),($__msgid|0),($53|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    $$1 = $57;$$14 = $58;
    break;
   }
   HEAP32[$agg$result>>2] = 0;
   $63 = ((($agg$result)) + 4|0);
   HEAP32[$63>>2] = 0;
   $64 = ((($agg$result)) + 8|0);
   HEAP32[$64>>2] = 0;
   $65 = ((($1)) + 4|0);
   HEAP32[$65>>2] = 0;
   HEAP32[$1>>2] = (12388);
   $66 = (_strlen($54)|0);
   $67 = (($54) + ($66)|0);
   $68 = $67;
   $69 = ((($__buf$i)) + 128|0);
   $70 = ($66|0)>(0);
   L21: do {
    if ($70) {
     $$0$i35 = $54;
     L22: while(1) {
      HEAP32[$__nn$i>>2] = $$0$i35;
      $71 = HEAP32[$1>>2]|0;
      $72 = ((($71)) + 16|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = $$0$i35;
      $75 = (($68) - ($74))|0;
      $76 = ($75|0)>(32);
      $77 = ((($$0$i35)) + 32|0);
      $78 = $76 ? $77 : $67;
      __THREW__ = 0;
      $79 = (invoke_iiiiiiiii($73|0,($1|0),($__mb$i|0),($$0$i35|0),($78|0),($__nn$i|0),($__buf$i|0),($69|0),($__bn$i|0))|0);
      $80 = __THREW__; __THREW__ = 0;
      $81 = $80&1;
      if ($81) {
       label = 24;
       break;
      }
      $82 = ($79|0)==(2);
      $83 = HEAP32[$__nn$i>>2]|0;
      $84 = ($83|0)==($$0$i35|0);
      $or$cond$i = $82 | $84;
      if ($or$cond$i) {
       label = 18;
       break;
      }
      $85 = HEAP32[$__bn$i>>2]|0;
      $86 = ($__buf$i>>>0)<($85>>>0);
      if ($86) {
       $__p$0$i34 = $__buf$i;
       while(1) {
        $90 = HEAP32[$__p$0$i34>>2]|0;
        __THREW__ = 0;
        invoke_vii(676,($agg$result|0),($90|0));
        $91 = __THREW__; __THREW__ = 0;
        $92 = $91&1;
        if ($92) {
         label = 23;
         break L22;
        }
        $93 = ((($__p$0$i34)) + 4|0);
        $94 = HEAP32[$__bn$i>>2]|0;
        $95 = ($93>>>0)<($94>>>0);
        if ($95) {
         $__p$0$i34 = $93;
        } else {
         break;
        }
       }
      }
      $96 = HEAP32[$__nn$i>>2]|0;
      $97 = ($96>>>0)<($67>>>0);
      $98 = ($79|0)!=(2);
      $99 = $98 & $97;
      if ($99) {
       $$0$i35 = $96;
      } else {
       break L21;
      }
     }
     if ((label|0) == 18) {
      __THREW__ = 0;
      invoke_vi(667,(29806|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = ___cxa_find_matching_catch()|0;
      $89 = tempRet0;
      $lpad$phi$index = $88;$lpad$phi$index10 = $89;
     }
     else if ((label|0) == 23) {
      $100 = ___cxa_find_matching_catch()|0;
      $101 = tempRet0;
      $lpad$phi$index = $100;$lpad$phi$index10 = $101;
     }
     else if ((label|0) == 24) {
      $102 = ___cxa_find_matching_catch()|0;
      $103 = tempRet0;
      $lpad$phi$index = $102;$lpad$phi$index10 = $103;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$result);
     $$1 = $lpad$phi$index;$$14 = $lpad$phi$index10;
     break L16;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
   STACKTOP = sp;return;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (11840);
 $2 = ((($this)) + 8|0);
 __THREW__ = 0;
 invoke_vii(685,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $83 = ___cxa_find_matching_catch()|0;
  $84 = tempRet0;
  $$1 = $84;$$12 = $83;
 } else {
  $5 = ((($this)) + 144|0);
  __THREW__ = 0;
  invoke_viii(528,($5|0),(29736|0),1);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $85 = ___cxa_find_matching_catch()|0;
   $86 = tempRet0;
   $$0 = $86;$$01 = $85;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = ((($this)) + 12|0);
   $$pre$i$i$i = HEAP32[$9>>2]|0;
   $10 = ($$pre$i$i$i|0)==($8|0);
   if (!($10)) {
    $12 = $$pre$i$i$i;
    while(1) {
     $11 = ((($12)) + -4|0);
     $13 = ($11|0)==($8|0);
     if ($13) {
      $$lcssa = $11;
      break;
     } else {
      $12 = $11;
     }
    }
    HEAP32[$9>>2] = $$lcssa;
   }
   HEAP32[(1740)>>2] = 0;
   HEAP32[1736>>2] = (10768);
   __THREW__ = 0;
   invoke_vii(686,($this|0),(1736|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   do {
    if ($15) {
     label = 42;
    } else {
     HEAP32[(1748)>>2] = 0;
     HEAP32[1744>>2] = (10808);
     __THREW__ = 0;
     invoke_vii(687,($this|0),(1744|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if ($17) {
      label = 42;
     } else {
      HEAP32[(1756)>>2] = 0;
      HEAP32[1752>>2] = (11880);
      HEAP32[(1760)>>2] = 0;
      HEAP8[(1764)>>0] = 0;
      $18 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
      HEAP32[(1760)>>2] = $18;
      __THREW__ = 0;
      invoke_vii(688,($this|0),(1752|0));
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       label = 42;
      } else {
       HEAP32[(1772)>>2] = 0;
       HEAP32[1768>>2] = (12128);
       __THREW__ = 0;
       invoke_vii(689,($this|0),(1768|0));
       $21 = __THREW__; __THREW__ = 0;
       $22 = $21&1;
       if ($22) {
        label = 42;
       } else {
        HEAP32[(1780)>>2] = 0;
        HEAP32[1776>>2] = (12196);
        __THREW__ = 0;
        invoke_vii(690,($this|0),(1776|0));
        $23 = __THREW__; __THREW__ = 0;
        $24 = $23&1;
        if ($24) {
         label = 42;
        } else {
         __THREW__ = 0;
         invoke_vii(691,(1784|0),1);
         $25 = __THREW__; __THREW__ = 0;
         $26 = $25&1;
         if ($26) {
          label = 42;
         } else {
          __THREW__ = 0;
          invoke_vii(692,($this|0),(1784|0));
          $27 = __THREW__; __THREW__ = 0;
          $28 = $27&1;
          if ($28) {
           label = 42;
          } else {
           HEAP32[(1804)>>2] = 0;
           HEAP32[1800>>2] = (12244);
           __THREW__ = 0;
           invoke_vii(693,($this|0),(1800|0));
           $29 = __THREW__; __THREW__ = 0;
           $30 = $29&1;
           if ($30) {
            label = 42;
           } else {
            HEAP32[(1812)>>2] = 0;
            HEAP32[1808>>2] = (12292);
            __THREW__ = 0;
            invoke_vii(694,($this|0),(1808|0));
            $31 = __THREW__; __THREW__ = 0;
            $32 = $31&1;
            if ($32) {
             label = 42;
            } else {
             __ZNSt3__18numpunctIcEC2Ej(1816,1);
             __THREW__ = 0;
             invoke_vii(695,($this|0),(1816|0));
             $33 = __THREW__; __THREW__ = 0;
             $34 = $33&1;
             if ($34) {
              label = 42;
             } else {
              __ZNSt3__18numpunctIwEC2Ej(1840,1);
              __THREW__ = 0;
              invoke_vii(696,($this|0),(1840|0));
              $35 = __THREW__; __THREW__ = 0;
              $36 = $35&1;
              if ($36) {
               label = 42;
              } else {
               HEAP32[(1876)>>2] = 0;
               HEAP32[1872>>2] = (10848);
               __THREW__ = 0;
               invoke_vii(697,($this|0),(1872|0));
               $37 = __THREW__; __THREW__ = 0;
               $38 = $37&1;
               if ($38) {
                label = 42;
               } else {
                HEAP32[(1884)>>2] = 0;
                HEAP32[1880>>2] = (10920);
                __THREW__ = 0;
                invoke_vii(698,($this|0),(1880|0));
                $39 = __THREW__; __THREW__ = 0;
                $40 = $39&1;
                if ($40) {
                 label = 42;
                } else {
                 HEAP32[(1892)>>2] = 0;
                 HEAP32[1888>>2] = (10992);
                 __THREW__ = 0;
                 invoke_vii(699,($this|0),(1888|0));
                 $41 = __THREW__; __THREW__ = 0;
                 $42 = $41&1;
                 if ($42) {
                  label = 42;
                 } else {
                  HEAP32[(1900)>>2] = 0;
                  HEAP32[1896>>2] = (11052);
                  __THREW__ = 0;
                  invoke_vii(700,($this|0),(1896|0));
                  $43 = __THREW__; __THREW__ = 0;
                  $44 = $43&1;
                  if ($44) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1908)>>2] = 0;
                  HEAP32[1904>>2] = (11360);
                  __THREW__ = 0;
                  invoke_vii(701,($this|0),(1904|0));
                  $45 = __THREW__; __THREW__ = 0;
                  $46 = $45&1;
                  if ($46) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1916)>>2] = 0;
                  HEAP32[1912>>2] = (11424);
                  __THREW__ = 0;
                  invoke_vii(702,($this|0),(1912|0));
                  $47 = __THREW__; __THREW__ = 0;
                  $48 = $47&1;
                  if ($48) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1924)>>2] = 0;
                  HEAP32[1920>>2] = (11488);
                  __THREW__ = 0;
                  invoke_vii(703,($this|0),(1920|0));
                  $49 = __THREW__; __THREW__ = 0;
                  $50 = $49&1;
                  if ($50) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1932)>>2] = 0;
                  HEAP32[1928>>2] = (11552);
                  __THREW__ = 0;
                  invoke_vii(704,($this|0),(1928|0));
                  $51 = __THREW__; __THREW__ = 0;
                  $52 = $51&1;
                  if ($52) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1940)>>2] = 0;
                  HEAP32[1936>>2] = (11616);
                  __THREW__ = 0;
                  invoke_vii(705,($this|0),(1936|0));
                  $53 = __THREW__; __THREW__ = 0;
                  $54 = $53&1;
                  if ($54) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1948)>>2] = 0;
                  HEAP32[1944>>2] = (11652);
                  __THREW__ = 0;
                  invoke_vii(706,($this|0),(1944|0));
                  $55 = __THREW__; __THREW__ = 0;
                  $56 = $55&1;
                  if ($56) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1956)>>2] = 0;
                  HEAP32[1952>>2] = (11688);
                  __THREW__ = 0;
                  invoke_vii(707,($this|0),(1952|0));
                  $57 = __THREW__; __THREW__ = 0;
                  $58 = $57&1;
                  if ($58) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1964)>>2] = 0;
                  HEAP32[1960>>2] = (11724);
                  __THREW__ = 0;
                  invoke_vii(708,($this|0),(1960|0));
                  $59 = __THREW__; __THREW__ = 0;
                  $60 = $59&1;
                  if ($60) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1972)>>2] = 0;
                  HEAP32[1968>>2] = (11112);
                  HEAP32[(1976)>>2] = (11160);
                  __THREW__ = 0;
                  invoke_vii(709,($this|0),(1968|0));
                  $61 = __THREW__; __THREW__ = 0;
                  $62 = $61&1;
                  if ($62) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1988)>>2] = 0;
                  HEAP32[1984>>2] = (11204);
                  HEAP32[(1992)>>2] = (11252);
                  __THREW__ = 0;
                  invoke_vii(710,($this|0),(1984|0));
                  $63 = __THREW__; __THREW__ = 0;
                  $64 = $63&1;
                  if ($64) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2004)>>2] = 0;
                  HEAP32[2000>>2] = (12108);
                  __THREW__ = 0;
                  $65 = (invoke_i(649)|0);
                  $66 = __THREW__; __THREW__ = 0;
                  $67 = $66&1;
                  if ($67) {
                   $68 = ___cxa_find_matching_catch()|0;
                   $69 = tempRet0;
                   $eh$lpad$body$index3Z2D = $69;$eh$lpad$body$indexZ2D = $68;
                   break;
                  }
                  HEAP32[(2008)>>2] = $65;
                  HEAP32[2000>>2] = (11296);
                  __THREW__ = 0;
                  invoke_vii(711,($this|0),(2000|0));
                  $70 = __THREW__; __THREW__ = 0;
                  $71 = $70&1;
                  if ($71) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2020)>>2] = 0;
                  HEAP32[2016>>2] = (12108);
                  __THREW__ = 0;
                  $72 = (invoke_i(649)|0);
                  $73 = __THREW__; __THREW__ = 0;
                  $74 = $73&1;
                  if ($74) {
                   $75 = ___cxa_find_matching_catch()|0;
                   $76 = tempRet0;
                   $eh$lpad$body$index3Z2D = $76;$eh$lpad$body$indexZ2D = $75;
                   break;
                  }
                  HEAP32[(2024)>>2] = $72;
                  HEAP32[2016>>2] = (11328);
                  __THREW__ = 0;
                  invoke_vii(712,($this|0),(2016|0));
                  $77 = __THREW__; __THREW__ = 0;
                  $78 = $77&1;
                  if ($78) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2036)>>2] = 0;
                  HEAP32[2032>>2] = (11760);
                  __THREW__ = 0;
                  invoke_vii(713,($this|0),(2032|0));
                  $79 = __THREW__; __THREW__ = 0;
                  $80 = $79&1;
                  if ($80) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2044)>>2] = 0;
                  HEAP32[2040>>2] = (11800);
                  __THREW__ = 0;
                  invoke_vii(714,($this|0),(2040|0));
                  $81 = __THREW__; __THREW__ = 0;
                  $82 = $81&1;
                  if ($82) {
                   label = 42;
                   break;
                  }
                  return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 42) {
    $87 = ___cxa_find_matching_catch()|0;
    $88 = tempRet0;
    $eh$lpad$body$index3Z2D = $88;$eh$lpad$body$indexZ2D = $87;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $$0 = $eh$lpad$body$index3Z2D;$$01 = $eh$lpad$body$indexZ2D;
  }
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
  $$1 = $$0;$$12 = $$01;
 }
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2048>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2048|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(715)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((2048|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[12628>>2] = 12624;
     ___cxa_guard_release((2048|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[12628>>2]|0;
 return ($6|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $16 = $3;
  } else {
   $9 = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(716,($0|0),($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $$pre = HEAP32[$0>>2]|0;
    $16 = $$pre;
    break;
   }
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   $14 = ($f|0)==(0|0);
   if (!($14)) {
    (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   }
   ___resumeException($12|0);
   // unreachable;
  }
 } while(0);
 $15 = (($16) + ($id<<2)|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $20 = $16;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  $$pre2 = HEAP32[$0>>2]|0;
  $20 = $$pre2;
 }
 $19 = (($20) + ($id<<2)|0);
 HEAP32[$19>>2] = $f;
 return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (11840);
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $6 = $3;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
   }
   $9 = (($i$01) + 1)|0;
   $10 = HEAP32[$1>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = $10;
   $13 = $11;
   $14 = (($12) - ($13))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $6 = $11;$i$01 = $9;
   } else {
    break;
   }
  }
 }
 $17 = ((($this)) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($17);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = ((($this)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(464|0),(86|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(2056,1);
 HEAP32[12624>>2] = 2056;
 return (12624|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[12632>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return (12632|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2216>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2216|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(717)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((2216|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[12636>>2] = 12632;
     ___cxa_guard_release((2216|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[12636>>2]|0;
 return ($6|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(718)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 return;
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = ((($__p$i)) + 4|0);
  HEAP32[$2>>2] = (719);
  $3 = ((($__p$i)) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,720);
 }
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 return ($2|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$this>>2]|0;
  $2 = ((($1)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_vi[$3 & 1023]($this);
 }
 return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11852>>2]|0;HEAP32[11852>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
  $1 = (($0) + ($c<<1)|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2 & $m;
  $4 = ($3<<16>>16)!=(0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 return ($5|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(721)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$015 = 0, $$06 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $3 = ($low|0)==($high|0);
 if (!($3)) {
  $$015 = $low;$$06 = $vec;
  while(1) {
   $4 = HEAP32[$$015>>2]|0;
   $isascii = ($4>>>0)<(128);
   if ($isascii) {
    $5 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $6 = (($5) + ($4<<1)|0);
    $7 = HEAP16[$6>>1]|0;
    $8 = $7&65535;
    $10 = $8;
   } else {
    $10 = 0;
   }
   $9 = $10&65535;
   HEAP16[$$06>>1] = $9;
   $11 = ((($$015)) + 4|0);
   $12 = ((($$06)) + 2|0);
   $13 = ($11|0)==($high|0);
   if ($13) {
    break;
   } else {
    $$015 = $11;$$06 = $12;
   }
  }
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $high;
  } else {
   $$01 = $low;
   while(1) {
    $1 = HEAP32[$$01>>2]|0;
    $isascii = ($1>>>0)<(128);
    if ($isascii) {
     $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
     $3 = (($2) + ($1<<1)|0);
     $4 = HEAP16[$3>>1]|0;
     $5 = $4 & $m;
     $6 = ($5<<16>>16)==(0);
     if (!($6)) {
      $$0$lcssa = $$01;
      break L1;
     }
    }
    $7 = ((($$01)) + 4|0);
    $8 = ($7|0)==($high|0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while(0);
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $high;
  } else {
   $$01 = $low;
   while(1) {
    $1 = HEAP32[$$01>>2]|0;
    $isascii = ($1>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$01;
     break L1;
    }
    $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $3 = (($2) + ($1<<1)|0);
    $4 = HEAP16[$3>>1]|0;
    $5 = $4 & $m;
    $6 = ($5<<16>>16)==(0);
    if ($6) {
     $$0$lcssa = $$01;
     break L1;
    }
    $7 = ((($$01)) + 4|0);
    $8 = ($7|0)==($high|0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while(0);
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(722)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $3 = ($low|0)==($high|0);
 if (!($3)) {
  $$04 = $low;
  while(1) {
   $4 = HEAP32[$$04>>2]|0;
   $isascii = ($4>>>0)<(128);
   if ($isascii) {
    $5 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
    $6 = (($5) + ($4<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = $7;
   } else {
    $8 = $4;
   }
   HEAP32[$$04>>2] = $8;
   $9 = ((($$04)) + 4|0);
   $10 = ($9|0)==($high|0);
   if ($10) {
    break;
   } else {
    $$04 = $9;
   }
  }
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(723)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $3 = ($low|0)==($high|0);
 if (!($3)) {
  $$04 = $low;
  while(1) {
   $4 = HEAP32[$$04>>2]|0;
   $isascii = ($4>>>0)<(128);
   if ($isascii) {
    $5 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
    $6 = (($5) + ($4<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = $7;
   } else {
    $8 = $4;
   }
   HEAP32[$$04>>2] = $8;
   $9 = ((($$04)) + 4|0);
   $10 = ($9|0)==($high|0);
   if ($10) {
    break;
   } else {
    $$04 = $9;
   }
  }
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   $2 = $1 << 24 >> 24;
   HEAP32[$$03>>2] = $2;
   $3 = ((($$012)) + 1|0);
   $4 = ((($$03)) + 4|0);
   $5 = ($3|0)==($high|0);
   if ($5) {
    break;
   } else {
    $$012 = $3;$$03 = $4;
   }
  }
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$015 = 0, $$06 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $3 = ($low|0)==($high|0);
 if (!($3)) {
  $$015 = $low;$$06 = $dest;
  while(1) {
   $4 = HEAP32[$$015>>2]|0;
   $isascii = ($4>>>0)<(128);
   $5 = $4&255;
   $$dfault = $isascii ? $5 : $dfault;
   HEAP8[$$06>>0] = $$dfault;
   $6 = ((($$015)) + 4|0);
   $7 = ((($$06)) + 1|0);
   $8 = ($6|0)==($high|0);
   if ($8) {
    break;
   } else {
    $$015 = $6;$$06 = $7;
   }
  }
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (11880);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($this)) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c&255;
  $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$02 = $low;
  while(1) {
   $1 = HEAP8[$$02>>0]|0;
   $isascii1 = ($1<<24>>24)>(-1);
   if ($isascii1) {
    $2 = $1 << 24 >> 24;
    $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
    $4 = (($3) + ($2<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5&255;
    $7 = $6;
   } else {
    $7 = $1;
   }
   HEAP8[$$02>>0] = $7;
   $8 = ((($$02)) + 1|0);
   $9 = ($8|0)==($high|0);
   if ($9) {
    break;
   } else {
    $$02 = $8;
   }
  }
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c << 24 >> 24;
  $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$02 = $low;
  while(1) {
   $1 = HEAP8[$$02>>0]|0;
   $isascii1 = ($1<<24>>24)>(-1);
   if ($isascii1) {
    $2 = $1 << 24 >> 24;
    $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
    $4 = (($3) + ($2<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5&255;
    $7 = $6;
   } else {
    $7 = $1;
   }
   HEAP8[$$02>>0] = $7;
   $8 = ((($$02)) + 1|0);
   $9 = ($8|0)==($high|0);
   if ($9) {
    break;
   } else {
    $$02 = $8;
   }
  }
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = ((($$012)) + 1|0);
   $3 = ((($$03)) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$013 = $low;$$04 = $dest;
  while(1) {
   $1 = HEAP8[$$013>>0]|0;
   $isascii2 = ($1<<24>>24)>(-1);
   $$dfault = $isascii2 ? $1 : $dfault;
   HEAP8[$$04>>0] = $$dfault;
   $2 = ((($$013)) + 1|0);
   $3 = ((($$04)) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    break;
   } else {
    $$013 = $2;$$04 = $3;
   }
  }
 }
 return ($high|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (11948);
 __THREW__ = 0;
 $2 = (invoke_i(649)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = ((($this)) + 8|0);
  HEAP32[$5>>2] = $2;
  return;
 }
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$01$be = 0, $$01128 = 0, $$01128$lcssa170 = 0, $$02$be = 0, $$02127 = 0, $$02127$lcssa177 = 0, $$1$lcssa = 0, $$1113 = 0, $$lcssa = 0, $$lcssa183 = 0, $$lcssa191 = 0, $$pre = 0, $$pre59 = 0, $$pre60 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$0133 = 0, $fend$1$be = 0, $fend$1129 = 0, $fend$2$lcssa = 0, $fend$2120 = 0, $n$0117 = 0, $not$ = 0, $or$cond = 0, $or$cond126 = 0, $p$0118 = 0, $save_state = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   $fend$0$lcssa = $frm_end;
  } else {
   $fend$0133 = $frm;
   while(1) {
    $1 = HEAP32[$fend$0133>>2]|0;
    $2 = ($1|0)==(0);
    if ($2) {
     $fend$0$lcssa = $fend$0133;
     break L1;
    }
    $3 = ((($fend$0133)) + 4|0);
    $4 = ($3|0)==($frm_end|0);
    if ($4) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$0133 = $3;
    }
   }
  }
 } while(0);
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $5 = $to_end;
 $6 = ((($this)) + 8|0);
 $7 = ($frm|0)==($frm_end|0);
 $8 = ($to|0)==($to_end|0);
 $or$cond126 = $8 | $7;
 L6: do {
  if ($or$cond126) {
   $111 = $frm;
   label = 47;
  } else {
   $$01128 = $frm;$$02127 = $to;$fend$1129 = $fend$0$lcssa;
   L7: while(1) {
    $9 = $st;
    $10 = $9;
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 4)|0;
    $13 = $12;
    $14 = HEAP32[$13>>2]|0;
    $15 = $save_state;
    $16 = $15;
    HEAP32[$16>>2] = $11;
    $17 = (($15) + 4)|0;
    $18 = $17;
    HEAP32[$18>>2] = $14;
    $19 = $fend$1129;
    $20 = $$01128;
    $21 = (($19) - ($20))|0;
    $22 = $21 >> 2;
    $23 = $$02127;
    $24 = (($5) - ($23))|0;
    $25 = HEAP32[$6>>2]|0;
    $26 = (_uselocale($25)|0);
    __THREW__ = 0;
    $27 = (invoke_iiiiii(724,($$02127|0),($frm_nxt|0),($22|0),($24|0),($st|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $$lcssa183 = $26;
     label = 9;
     break;
    }
    $30 = ($26|0)==(0|0);
    if (!($30)) {
     __THREW__ = 0;
     (invoke_ii(664,($26|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      label = 8;
      break;
     }
    }
    switch ($27|0) {
    case 0:  {
     $$0 = 1;
     break L6;
     break;
    }
    case -1:  {
     $$01128$lcssa170 = $$01128;$$02127$lcssa177 = $$02127;
     label = 14;
     break L7;
     break;
    }
    default: {
    }
    }
    $69 = HEAP32[$to_nxt>>2]|0;
    $70 = (($69) + ($27)|0);
    HEAP32[$to_nxt>>2] = $70;
    $71 = ($70|0)==($to_end|0);
    if ($71) {
     label = 27;
     break;
    }
    $72 = ($fend$1129|0)==($frm_end|0);
    if ($72) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $$01$be = $$pre;$$02$be = $70;$fend$1$be = $frm_end;
    } else {
     $75 = HEAP32[$6>>2]|0;
     $76 = (_uselocale($75)|0);
     __THREW__ = 0;
     $77 = (invoke_iiii(725,($tmp|0),0,($st|0))|0);
     $78 = __THREW__; __THREW__ = 0;
     $79 = $78&1;
     if ($79) {
      $$lcssa191 = $76;
      label = 35;
      break;
     }
     $80 = ($76|0)==(0|0);
     if (!($80)) {
      __THREW__ = 0;
      (invoke_ii(664,($76|0))|0);
      $81 = __THREW__; __THREW__ = 0;
      $82 = $81&1;
      if ($82) {
       label = 34;
       break;
      }
     }
     $92 = ($77|0)==(-1);
     if ($92) {
      $$0 = 2;
      break L6;
     }
     $93 = HEAP32[$to_nxt>>2]|0;
     $94 = $93;
     $95 = (($5) - ($94))|0;
     $96 = ($77>>>0)>($95>>>0);
     if ($96) {
      $$0 = 1;
      break L6;
     }
     $97 = ($77|0)==(0);
     if (!($97)) {
      $n$0117 = $77;$p$0118 = $tmp;
      while(1) {
       $98 = ((($p$0118)) + 1|0);
       $99 = HEAP8[$p$0118>>0]|0;
       $100 = HEAP32[$to_nxt>>2]|0;
       $101 = ((($100)) + 1|0);
       HEAP32[$to_nxt>>2] = $101;
       HEAP8[$100>>0] = $99;
       $102 = (($n$0117) + -1)|0;
       $103 = ($102|0)==(0);
       if ($103) {
        break;
       } else {
        $n$0117 = $102;$p$0118 = $98;
       }
      }
     }
     $104 = HEAP32[$frm_nxt>>2]|0;
     $105 = ((($104)) + 4|0);
     HEAP32[$frm_nxt>>2] = $105;
     $106 = ($105|0)==($frm_end|0);
     L28: do {
      if ($106) {
       $fend$2$lcssa = $frm_end;
      } else {
       $fend$2120 = $105;
       while(1) {
        $107 = HEAP32[$fend$2120>>2]|0;
        $108 = ($107|0)==(0);
        if ($108) {
         $fend$2$lcssa = $fend$2120;
         break L28;
        }
        $109 = ((($fend$2120)) + 4|0);
        $110 = ($109|0)==($frm_end|0);
        if ($110) {
         $fend$2$lcssa = $frm_end;
         break;
        } else {
         $fend$2120 = $109;
        }
       }
      }
     } while(0);
     $$pre59 = HEAP32[$to_nxt>>2]|0;
     $$01$be = $105;$$02$be = $$pre59;$fend$1$be = $fend$2$lcssa;
    }
    $73 = ($$01$be|0)==($frm_end|0);
    $74 = ($$02$be|0)==($to_end|0);
    $or$cond = $74 | $73;
    if ($or$cond) {
     $111 = $$01$be;
     label = 47;
     break L6;
    } else {
     $$01128 = $$01$be;$$02127 = $$02$be;$fend$1129 = $fend$1$be;
    }
   }
   if ((label|0) == 8) {
    $33 = ___cxa_find_matching_catch(0|0)|0;
    $34 = tempRet0;
    ___clang_call_terminate($33);
    // unreachable;
   }
   else if ((label|0) == 9) {
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $37 = ($$lcssa183|0)==(0|0);
    if (!($37)) {
     __THREW__ = 0;
     (invoke_ii(664,($$lcssa183|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      $40 = ___cxa_find_matching_catch(0|0)|0;
      $41 = tempRet0;
      ___clang_call_terminate($40);
      // unreachable;
     }
    }
    ___resumeException($35|0);
    // unreachable;
   }
   else if ((label|0) == 14) {
    HEAP32[$to_nxt>>2] = $$02127$lcssa177;
    $42 = HEAP32[$frm_nxt>>2]|0;
    $43 = ($$01128$lcssa170|0)==($42|0);
    L42: do {
     if ($43) {
      $$1$lcssa = $$01128$lcssa170;
     } else {
      $$1113 = $$01128$lcssa170;$47 = $$02127$lcssa177;
      while(1) {
       $44 = HEAP32[$$1113>>2]|0;
       $45 = HEAP32[$6>>2]|0;
       $46 = (_uselocale($45)|0);
       __THREW__ = 0;
       $48 = (invoke_iiii(725,($47|0),($44|0),($save_state|0))|0);
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        $$lcssa = $46;
        break;
       }
       $51 = ($46|0)==(0|0);
       if (!($51)) {
        __THREW__ = 0;
        (invoke_ii(664,($46|0))|0);
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        if ($53) {
         label = 18;
         break;
        }
       }
       $63 = ($48|0)==(-1);
       if ($63) {
        $$1$lcssa = $$1113;
        break L42;
       }
       $64 = HEAP32[$to_nxt>>2]|0;
       $65 = (($64) + ($48)|0);
       HEAP32[$to_nxt>>2] = $65;
       $66 = ((($$1113)) + 4|0);
       $67 = HEAP32[$frm_nxt>>2]|0;
       $68 = ($66|0)==($67|0);
       if ($68) {
        $$1$lcssa = $66;
        break L42;
       } else {
        $$1113 = $66;$47 = $65;
       }
      }
      if ((label|0) == 18) {
       $54 = ___cxa_find_matching_catch(0|0)|0;
       $55 = tempRet0;
       ___clang_call_terminate($54);
       // unreachable;
      }
      $56 = ___cxa_find_matching_catch()|0;
      $57 = tempRet0;
      $58 = ($$lcssa|0)==(0|0);
      if (!($58)) {
       __THREW__ = 0;
       (invoke_ii(664,($$lcssa|0))|0);
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if ($60) {
        $61 = ___cxa_find_matching_catch(0|0)|0;
        $62 = tempRet0;
        ___clang_call_terminate($61);
        // unreachable;
       }
      }
      ___resumeException($56|0);
      // unreachable;
     }
    } while(0);
    HEAP32[$frm_nxt>>2] = $$1$lcssa;
    $$0 = 2;
    break;
   }
   else if ((label|0) == 27) {
    $$pre60 = HEAP32[$frm_nxt>>2]|0;
    $111 = $$pre60;
    label = 47;
    break;
   }
   else if ((label|0) == 34) {
    $83 = ___cxa_find_matching_catch(0|0)|0;
    $84 = tempRet0;
    ___clang_call_terminate($83);
    // unreachable;
   }
   else if ((label|0) == 35) {
    $85 = ___cxa_find_matching_catch()|0;
    $86 = tempRet0;
    $87 = ($$lcssa191|0)==(0|0);
    if (!($87)) {
     __THREW__ = 0;
     (invoke_ii(664,($$lcssa191|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      $90 = ___cxa_find_matching_catch(0|0)|0;
      $91 = tempRet0;
      ___clang_call_terminate($90);
      // unreachable;
     }
    }
    ___resumeException($85|0);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 47) {
  $not$ = ($111|0)!=($frm_end|0);
  $112 = $not$&1;
  $$0 = $112;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$01$be = 0, $$01165 = 0, $$01165$lcssa223 = 0, $$02$be = 0, $$02164 = 0, $$02164$lcssa230 = 0, $$1$lcssa = 0, $$1157 = 0, $$1157$lcssa215 = 0, $$1157$lcssa216 = 0, $$2 = 0, $$lcssa = 0, $$lcssa238 = 0, $$lcssa244 = 0, $$lcssa252 = 0, $$pre = 0, $$pre80 = 0, $$pre81 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$0169 = 0, $fend$1$be = 0, $fend$1166 = 0, $fend$2$lcssa = 0, $fend$2158 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond163 = 0, $save_state = 0, $storemerge156 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   $fend$0$lcssa = $frm_end;
  } else {
   $fend$0169 = $frm;
   while(1) {
    $1 = HEAP8[$fend$0169>>0]|0;
    $2 = ($1<<24>>24)==(0);
    if ($2) {
     $fend$0$lcssa = $fend$0169;
     break L1;
    }
    $3 = ((($fend$0169)) + 1|0);
    $4 = ($3|0)==($frm_end|0);
    if ($4) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$0169 = $3;
    }
   }
  }
 } while(0);
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $5 = $to_end;
 $6 = ((($this)) + 8|0);
 $7 = ($frm|0)==($frm_end|0);
 $8 = ($to|0)==($to_end|0);
 $or$cond163 = $8 | $7;
 L6: do {
  if ($or$cond163) {
   $103 = $frm;
   label = 47;
  } else {
   $$01165 = $frm;$$02164 = $to;$fend$1166 = $fend$0$lcssa;
   L7: while(1) {
    $9 = $st;
    $10 = $9;
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 4)|0;
    $13 = $12;
    $14 = HEAP32[$13>>2]|0;
    $15 = $save_state;
    $16 = $15;
    HEAP32[$16>>2] = $11;
    $17 = (($15) + 4)|0;
    $18 = $17;
    HEAP32[$18>>2] = $14;
    $19 = $fend$1166;
    $20 = $$01165;
    $21 = (($19) - ($20))|0;
    $22 = $$02164;
    $23 = (($5) - ($22))|0;
    $24 = $23 >> 2;
    $25 = HEAP32[$6>>2]|0;
    $26 = (_uselocale($25)|0);
    __THREW__ = 0;
    $27 = (invoke_iiiiii(726,($$02164|0),($frm_nxt|0),($21|0),($24|0),($st|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $$lcssa244 = $26;
     label = 9;
     break;
    }
    $30 = ($26|0)==(0|0);
    if (!($30)) {
     __THREW__ = 0;
     (invoke_ii(664,($26|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      label = 8;
      break;
     }
    }
    switch ($27|0) {
    case 0:  {
     $$0 = 2;
     break L6;
     break;
    }
    case -1:  {
     $$01165$lcssa223 = $$01165;$$02164$lcssa230 = $$02164;$$lcssa238 = $19;
     label = 14;
     break L7;
     break;
    }
    default: {
    }
    }
    $70 = HEAP32[$to_nxt>>2]|0;
    $71 = (($70) + ($27<<2)|0);
    HEAP32[$to_nxt>>2] = $71;
    $72 = ($71|0)==($to_end|0);
    if ($72) {
     label = 31;
     break;
    }
    $73 = ($fend$1166|0)==($frm_end|0);
    $$pre = HEAP32[$frm_nxt>>2]|0;
    if ($73) {
     $$01$be = $$pre;$$02$be = $71;$fend$1$be = $frm_end;
    } else {
     $76 = HEAP32[$6>>2]|0;
     $77 = (_uselocale($76)|0);
     __THREW__ = 0;
     $78 = (invoke_iiiii(727,($71|0),($$pre|0),1,($st|0))|0);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      $$lcssa252 = $77;
      label = 38;
      break;
     }
     $81 = ($77|0)==(0|0);
     if (!($81)) {
      __THREW__ = 0;
      (invoke_ii(664,($77|0))|0);
      $82 = __THREW__; __THREW__ = 0;
      $83 = $82&1;
      if ($83) {
       label = 37;
       break;
      }
     }
     $93 = ($78|0)==(0);
     if (!($93)) {
      $$0 = 2;
      break L6;
     }
     $94 = HEAP32[$to_nxt>>2]|0;
     $95 = ((($94)) + 4|0);
     HEAP32[$to_nxt>>2] = $95;
     $96 = HEAP32[$frm_nxt>>2]|0;
     $97 = ((($96)) + 1|0);
     HEAP32[$frm_nxt>>2] = $97;
     $98 = ($97|0)==($frm_end|0);
     L22: do {
      if ($98) {
       $fend$2$lcssa = $frm_end;
      } else {
       $fend$2158 = $97;
       while(1) {
        $99 = HEAP8[$fend$2158>>0]|0;
        $100 = ($99<<24>>24)==(0);
        if ($100) {
         $fend$2$lcssa = $fend$2158;
         break L22;
        }
        $101 = ((($fend$2158)) + 1|0);
        $102 = ($101|0)==($frm_end|0);
        if ($102) {
         $fend$2$lcssa = $frm_end;
         break;
        } else {
         $fend$2158 = $101;
        }
       }
      }
     } while(0);
     $$pre80 = HEAP32[$to_nxt>>2]|0;
     $$01$be = $97;$$02$be = $$pre80;$fend$1$be = $fend$2$lcssa;
    }
    $74 = ($$01$be|0)==($frm_end|0);
    $75 = ($$02$be|0)==($to_end|0);
    $or$cond = $75 | $74;
    if ($or$cond) {
     $103 = $$01$be;
     label = 47;
     break L6;
    } else {
     $$01165 = $$01$be;$$02164 = $$02$be;$fend$1166 = $fend$1$be;
    }
   }
   if ((label|0) == 8) {
    $33 = ___cxa_find_matching_catch(0|0)|0;
    $34 = tempRet0;
    ___clang_call_terminate($33);
    // unreachable;
   }
   else if ((label|0) == 9) {
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $37 = ($$lcssa244|0)==(0|0);
    if (!($37)) {
     __THREW__ = 0;
     (invoke_ii(664,($$lcssa244|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      $40 = ___cxa_find_matching_catch(0|0)|0;
      $41 = tempRet0;
      ___clang_call_terminate($40);
      // unreachable;
     }
    }
    ___resumeException($35|0);
    // unreachable;
   }
   else if ((label|0) == 14) {
    HEAP32[$to_nxt>>2] = $$02164$lcssa230;
    $42 = HEAP32[$frm_nxt>>2]|0;
    $43 = ($$01165$lcssa223|0)==($42|0);
    L36: do {
     if ($43) {
      $$1$lcssa = $$01165$lcssa223;
     } else {
      $$1157 = $$01165$lcssa223;$storemerge156 = $$02164$lcssa230;
      L37: while(1) {
       $44 = $$1157;
       $45 = (($$lcssa238) - ($44))|0;
       $46 = HEAP32[$6>>2]|0;
       $47 = (_uselocale($46)|0);
       __THREW__ = 0;
       $48 = (invoke_iiiii(727,($storemerge156|0),($$1157|0),($45|0),($save_state|0))|0);
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        $$lcssa = $47;
        label = 19;
        break;
       }
       $51 = ($47|0)==(0|0);
       if (!($51)) {
        __THREW__ = 0;
        (invoke_ii(664,($47|0))|0);
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        if ($53) {
         label = 18;
         break;
        }
       }
       switch ($48|0) {
       case -1:  {
        $$1157$lcssa215 = $$1157;
        label = 25;
        break L37;
        break;
       }
       case -2:  {
        $$1157$lcssa216 = $$1157;
        label = 26;
        break L37;
        break;
       }
       case 0:  {
        $63 = ((($$1157)) + 1|0);
        $$2 = $63;
        break;
       }
       default: {
        $64 = (($$1157) + ($48)|0);
        $$2 = $64;
       }
       }
       $65 = HEAP32[$to_nxt>>2]|0;
       $66 = ((($65)) + 4|0);
       HEAP32[$to_nxt>>2] = $66;
       $67 = HEAP32[$frm_nxt>>2]|0;
       $68 = ($$2|0)==($67|0);
       if ($68) {
        $$1$lcssa = $$2;
        break L36;
       } else {
        $$1157 = $$2;$storemerge156 = $66;
       }
      }
      if ((label|0) == 18) {
       $54 = ___cxa_find_matching_catch(0|0)|0;
       $55 = tempRet0;
       ___clang_call_terminate($54);
       // unreachable;
      }
      else if ((label|0) == 19) {
       $56 = ___cxa_find_matching_catch()|0;
       $57 = tempRet0;
       $58 = ($$lcssa|0)==(0|0);
       if (!($58)) {
        __THREW__ = 0;
        (invoke_ii(664,($$lcssa|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         $61 = ___cxa_find_matching_catch(0|0)|0;
         $62 = tempRet0;
         ___clang_call_terminate($61);
         // unreachable;
        }
       }
       ___resumeException($56|0);
       // unreachable;
      }
      else if ((label|0) == 25) {
       HEAP32[$frm_nxt>>2] = $$1157$lcssa215;
       $$0 = 2;
       break L6;
      }
      else if ((label|0) == 26) {
       HEAP32[$frm_nxt>>2] = $$1157$lcssa216;
       $$0 = 1;
       break L6;
      }
     }
    } while(0);
    HEAP32[$frm_nxt>>2] = $$1$lcssa;
    $not$3 = ($$1$lcssa|0)!=($frm_end|0);
    $69 = $not$3&1;
    $$0 = $69;
    break;
   }
   else if ((label|0) == 31) {
    $$pre81 = HEAP32[$frm_nxt>>2]|0;
    $103 = $$pre81;
    label = 47;
    break;
   }
   else if ((label|0) == 37) {
    $84 = ___cxa_find_matching_catch(0|0)|0;
    $85 = tempRet0;
    ___clang_call_terminate($84);
    // unreachable;
   }
   else if ((label|0) == 38) {
    $86 = ___cxa_find_matching_catch()|0;
    $87 = tempRet0;
    $88 = ($$lcssa252|0)==(0|0);
    if (!($88)) {
     __THREW__ = 0;
     (invoke_ii(664,($$lcssa252|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      $91 = ___cxa_find_matching_catch(0|0)|0;
      $92 = tempRet0;
      ___clang_call_terminate($91);
      // unreachable;
     }
    }
    ___resumeException($86|0);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 47) {
  $not$ = ($103|0)!=($frm_end|0);
  $104 = $not$&1;
  $$0 = $104;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale($1)|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(725,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if (!($13)) {
   __THREW__ = 0;
   (invoke_ii(664,($2|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   }
  }
  ___resumeException($11|0);
  // unreachable;
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(664,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 switch ($3|0) {
 case 0: case -1:  {
  $$0 = 2;
  break;
 }
 default: {
  $18 = (($3) + -1)|0;
  $19 = HEAP32[$to_nxt>>2]|0;
  $20 = $to_end;
  $21 = $19;
  $22 = (($20) - ($21))|0;
  $23 = ($18>>>0)>($22>>>0);
  if ($23) {
   $$0 = 1;
  } else {
   $24 = ($18|0)==(0);
   if ($24) {
    $$0 = 0;
   } else {
    $n$02 = $18;$p$03 = $tmp;
    while(1) {
     $25 = ((($p$03)) + 1|0);
     $26 = HEAP8[$p$03>>0]|0;
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = ((($27)) + 1|0);
     HEAP32[$to_nxt>>2] = $28;
     HEAP8[$27>>0] = $26;
     $29 = (($n$02) + -1)|0;
     $30 = ($29|0)==(0);
     if ($30) {
      $$0 = 0;
      break;
     } else {
      $n$02 = $29;$p$03 = $25;
     }
    }
   }
  }
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(664,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 16;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iiii(728,(0|0),(0|0),4)|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $13 = ___cxa_find_matching_catch(0|0)|0;
    $14 = tempRet0;
    $15 = ($2|0)==(0|0);
    if ($15) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(664,($2|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    $18 = ___cxa_find_matching_catch(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   }
   $8 = ($2|0)==(0|0);
   if (!($8)) {
    __THREW__ = 0;
    (invoke_ii(664,($2|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch(0|0)|0;
     $12 = tempRet0;
     ___clang_call_terminate($11);
     // unreachable;
    }
   }
   $20 = ($5|0)==(0);
   if ($20) {
    $21 = HEAP32[$0>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     $23 = (invoke_ii(664,($21|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 16;
      break;
     }
     $26 = ($23|0)==(0|0);
     if ($26) {
      $$0 = 0;
     } else {
      __THREW__ = 0;
      (invoke_ii(664,($23|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       $29 = ___cxa_find_matching_catch(0|0)|0;
       $30 = tempRet0;
       ___clang_call_terminate($29);
       // unreachable;
      } else {
       $$0 = 0;
      }
     }
    }
   } else {
    $$0 = -1;
   }
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 16) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  $eh$lpad$body$indexZ2D = $31;
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$0115 = 0, $$1 = 0, $$lcssa = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$016 = 0, $nbytes$1 = 0, $nwchar_t$017 = 0, $or$cond = 0, $or$cond14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $frm_end;
 $1 = ((($this)) + 8|0);
 $2 = ($mx|0)==(0);
 $3 = ($frm|0)==($frm_end|0);
 $or$cond14 = $3 | $2;
 L1: do {
  if ($or$cond14) {
   $nbytes$0$lcssa = 0;
  } else {
   $$0115 = $frm;$nbytes$016 = 0;$nwchar_t$017 = 0;
   while(1) {
    $4 = $$0115;
    $5 = (($0) - ($4))|0;
    $6 = HEAP32[$1>>2]|0;
    $7 = (_uselocale($6)|0);
    __THREW__ = 0;
    $8 = (invoke_iiii(729,($$0115|0),($5|0),($st|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $$lcssa = $7;
     break;
    }
    $11 = ($7|0)==(0|0);
    if (!($11)) {
     __THREW__ = 0;
     (invoke_ii(664,($7|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 5;
      break;
     }
    }
    switch ($8|0) {
    case -2: case -1:  {
     $nbytes$0$lcssa = $nbytes$016;
     break L1;
     break;
    }
    case 0:  {
     $23 = ((($$0115)) + 1|0);
     $$1 = $23;$$pn = 1;
     break;
    }
    default: {
     $24 = (($$0115) + ($8)|0);
     $$1 = $24;$$pn = $8;
    }
    }
    $nbytes$1 = (($$pn) + ($nbytes$016))|0;
    $25 = (($nwchar_t$017) + 1)|0;
    $26 = ($25>>>0)>=($mx>>>0);
    $27 = ($$1|0)==($frm_end|0);
    $or$cond = $27 | $26;
    if ($or$cond) {
     $nbytes$0$lcssa = $nbytes$1;
     break L1;
    } else {
     $$0115 = $$1;$nbytes$016 = $nbytes$1;$nwchar_t$017 = $25;
    }
   }
   if ((label|0) == 5) {
    $14 = ___cxa_find_matching_catch(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
   $16 = ___cxa_find_matching_catch()|0;
   $17 = tempRet0;
   $18 = ($$lcssa|0)==(0|0);
   if (!($18)) {
    __THREW__ = 0;
    (invoke_ii(664,($$lcssa|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    }
   }
   ___resumeException($16|0);
   // unreachable;
  }
 } while(0);
 return ($nbytes$0$lcssa|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
 } else {
  __THREW__ = 0;
  $3 = (invoke_ii(664,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  }
  $6 = ($3|0)==(0|0);
  if ($6) {
   $11 = 4;
  } else {
   __THREW__ = 0;
   (invoke_ii(664,($3|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch(0|0)|0;
    $10 = tempRet0;
    ___clang_call_terminate($9);
    // unreachable;
   } else {
    $11 = 4;
   }
  }
 }
 return ($11|0);
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIcEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (12028);
 $2 = ((($this)) + 8|0);
 HEAP8[$2>>0] = 46;
 $3 = ((($this)) + 9|0);
 HEAP8[$3>>0] = 44;
 $4 = ((($this)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 return;
}
function __ZNSt3__18numpunctIwEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (12068);
 $2 = ((($this)) + 8|0);
 HEAP32[$2>>2] = 46;
 $3 = ((($this)) + 12|0);
 HEAP32[$3>>2] = 44;
 $4 = ((($this)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (12028);
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (12068);
 $0 = ((($this)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,29875,4);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(12640)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,12640,$0);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,29880,5);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(12660)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,12660,$0);
 return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0 = 8;
  break;
 }
 case 8:  {
  $$0 = 16;
  break;
 }
 case 0:  {
  $$0 = 0;
  break;
 }
 default: {
  $$0 = 10;
 }
 }
 return ($$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2224>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2224|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2232>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2232|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 12684;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((12852)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      ___cxa_guard_release((2232|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(730,(12684|0),(29886|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(730,((12696)|0),(29893|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      (invoke_iii(730,((12708)|0),(29900|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iii(730,((12720)|0),(29908|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __THREW__ = 0;
        (invoke_iii(730,((12732)|0),(29918|0))|0);
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         (invoke_iii(730,((12744)|0),(29927|0))|0);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          (invoke_iii(730,((12756)|0),(29934|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           (invoke_iii(730,((12768)|0),(29943|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            (invoke_iii(730,((12780)|0),(29947|0))|0);
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             (invoke_iii(730,((12792)|0),(29951|0))|0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              (invoke_iii(730,((12804)|0),(29955|0))|0);
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               (invoke_iii(730,((12816)|0),(29959|0))|0);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                (invoke_iii(730,((12828)|0),(29963|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 (invoke_iii(730,((12840)|0),(29967|0))|0);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  HEAP32[12852>>2] = 12684;
                  ___cxa_guard_release((2224|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = ___cxa_find_matching_catch()|0;
    $43 = tempRet0;
    ___cxa_guard_abort((2224|0));
    ___resumeException($42|0);
    // unreachable;
   }
  }
 } while(0);
 $41 = HEAP32[12852>>2]|0;
 return ($41|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2240>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2240|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2248>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2248|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 12856;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((13024)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      ___cxa_guard_release((2248|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(731,(12856|0),(13024|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(731,((12868)|0),(13052|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      (invoke_iii(731,((12880)|0),(13080|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iii(731,((12892)|0),(13112|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __THREW__ = 0;
        (invoke_iii(731,((12904)|0),(13152|0))|0);
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         (invoke_iii(731,((12916)|0),(13188|0))|0);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          (invoke_iii(731,((12928)|0),(13216|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           (invoke_iii(731,((12940)|0),(13252|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            (invoke_iii(731,((12952)|0),(13268|0))|0);
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             (invoke_iii(731,((12964)|0),(13284|0))|0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              (invoke_iii(731,((12976)|0),(13300|0))|0);
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               (invoke_iii(731,((12988)|0),(13316|0))|0);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                (invoke_iii(731,((13000)|0),(13332|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 (invoke_iii(731,((13012)|0),(13348|0))|0);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  HEAP32[13364>>2] = 12856;
                  ___cxa_guard_release((2240|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = ___cxa_find_matching_catch()|0;
    $43 = tempRet0;
    ___cxa_guard_abort((2240|0));
    ___resumeException($42|0);
    // unreachable;
   }
  }
 } while(0);
 $41 = HEAP32[13364>>2]|0;
 return ($41|0);
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2256>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2256|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2264>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2264|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 13368;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((13656)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      ___cxa_guard_release((2264|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(730,(13368|0),(29971|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if (!($14)) {
      __THREW__ = 0;
      (invoke_iii(730,((13380)|0),(29979|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       __THREW__ = 0;
       (invoke_iii(730,((13392)|0),(29988|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if (!($18)) {
        __THREW__ = 0;
        (invoke_iii(730,((13404)|0),(29994|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if (!($20)) {
         __THREW__ = 0;
         (invoke_iii(730,((13416)|0),(30000|0))|0);
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if (!($22)) {
          __THREW__ = 0;
          (invoke_iii(730,((13428)|0),(30004|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if (!($24)) {
           __THREW__ = 0;
           (invoke_iii(730,((13440)|0),(30009|0))|0);
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if (!($26)) {
            __THREW__ = 0;
            (invoke_iii(730,((13452)|0),(30014|0))|0);
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if (!($28)) {
             __THREW__ = 0;
             (invoke_iii(730,((13464)|0),(30021|0))|0);
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if (!($30)) {
              __THREW__ = 0;
              (invoke_iii(730,((13476)|0),(30031|0))|0);
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if (!($32)) {
               __THREW__ = 0;
               (invoke_iii(730,((13488)|0),(30039|0))|0);
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                __THREW__ = 0;
                (invoke_iii(730,((13500)|0),(30048|0))|0);
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if (!($36)) {
                 __THREW__ = 0;
                 (invoke_iii(730,((13512)|0),(30057|0))|0);
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if (!($38)) {
                  __THREW__ = 0;
                  (invoke_iii(730,((13524)|0),(30061|0))|0);
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if (!($40)) {
                   __THREW__ = 0;
                   (invoke_iii(730,((13536)|0),(30065|0))|0);
                   $41 = __THREW__; __THREW__ = 0;
                   $42 = $41&1;
                   if (!($42)) {
                    __THREW__ = 0;
                    (invoke_iii(730,((13548)|0),(30069|0))|0);
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(730,((13560)|0),(30000|0))|0);
                    $45 = __THREW__; __THREW__ = 0;
                    $46 = $45&1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(730,((13572)|0),(30073|0))|0);
                    $47 = __THREW__; __THREW__ = 0;
                    $48 = $47&1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(730,((13584)|0),(30077|0))|0);
                    $49 = __THREW__; __THREW__ = 0;
                    $50 = $49&1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(730,((13596)|0),(30081|0))|0);
                    $51 = __THREW__; __THREW__ = 0;
                    $52 = $51&1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(730,((13608)|0),(30085|0))|0);
                    $53 = __THREW__; __THREW__ = 0;
                    $54 = $53&1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(730,((13620)|0),(30089|0))|0);
                    $55 = __THREW__; __THREW__ = 0;
                    $56 = $55&1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(730,((13632)|0),(30093|0))|0);
                    $57 = __THREW__; __THREW__ = 0;
                    $58 = $57&1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(730,((13644)|0),(30097|0))|0);
                    $59 = __THREW__; __THREW__ = 0;
                    $60 = $59&1;
                    if ($60) {
                     break;
                    }
                    HEAP32[13656>>2] = 13368;
                    ___cxa_guard_release((2256|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $62 = ___cxa_find_matching_catch()|0;
    $63 = tempRet0;
    ___cxa_guard_abort((2256|0));
    ___resumeException($62|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = HEAP32[13656>>2]|0;
 return ($61|0);
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2272>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2272|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2280>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2280|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 13660;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((13948)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      ___cxa_guard_release((2280|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(731,(13660|0),(13948|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if (!($14)) {
      __THREW__ = 0;
      (invoke_iii(731,((13672)|0),(13980|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       __THREW__ = 0;
       (invoke_iii(731,((13684)|0),(14016|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if (!($18)) {
        __THREW__ = 0;
        (invoke_iii(731,((13696)|0),(14040|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if (!($20)) {
         __THREW__ = 0;
         (invoke_iii(731,((13708)|0),(14064|0))|0);
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if (!($22)) {
          __THREW__ = 0;
          (invoke_iii(731,((13720)|0),(14080|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if (!($24)) {
           __THREW__ = 0;
           (invoke_iii(731,((13732)|0),(14100|0))|0);
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if (!($26)) {
            __THREW__ = 0;
            (invoke_iii(731,((13744)|0),(14120|0))|0);
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if (!($28)) {
             __THREW__ = 0;
             (invoke_iii(731,((13756)|0),(14148|0))|0);
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if (!($30)) {
              __THREW__ = 0;
              (invoke_iii(731,((13768)|0),(14188|0))|0);
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if (!($32)) {
               __THREW__ = 0;
               (invoke_iii(731,((13780)|0),(14220|0))|0);
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                __THREW__ = 0;
                (invoke_iii(731,((13792)|0),(14256|0))|0);
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if (!($36)) {
                 __THREW__ = 0;
                 (invoke_iii(731,((13804)|0),(14292|0))|0);
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if (!($38)) {
                  __THREW__ = 0;
                  (invoke_iii(731,((13816)|0),(14308|0))|0);
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if (!($40)) {
                   __THREW__ = 0;
                   (invoke_iii(731,((13828)|0),(14324|0))|0);
                   $41 = __THREW__; __THREW__ = 0;
                   $42 = $41&1;
                   if (!($42)) {
                    __THREW__ = 0;
                    (invoke_iii(731,((13840)|0),(14340|0))|0);
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(731,((13852)|0),(14064|0))|0);
                    $45 = __THREW__; __THREW__ = 0;
                    $46 = $45&1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(731,((13864)|0),(14356|0))|0);
                    $47 = __THREW__; __THREW__ = 0;
                    $48 = $47&1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(731,((13876)|0),(14372|0))|0);
                    $49 = __THREW__; __THREW__ = 0;
                    $50 = $49&1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(731,((13888)|0),(14388|0))|0);
                    $51 = __THREW__; __THREW__ = 0;
                    $52 = $51&1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(731,((13900)|0),(14404|0))|0);
                    $53 = __THREW__; __THREW__ = 0;
                    $54 = $53&1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(731,((13912)|0),(14420|0))|0);
                    $55 = __THREW__; __THREW__ = 0;
                    $56 = $55&1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(731,((13924)|0),(14436|0))|0);
                    $57 = __THREW__; __THREW__ = 0;
                    $58 = $57&1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(731,((13936)|0),(14452|0))|0);
                    $59 = __THREW__; __THREW__ = 0;
                    $60 = $59&1;
                    if ($60) {
                     break;
                    }
                    HEAP32[14468>>2] = 13660;
                    ___cxa_guard_release((2272|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $62 = ___cxa_find_matching_catch()|0;
    $63 = tempRet0;
    ___cxa_guard_abort((2272|0));
    ___resumeException($62|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = HEAP32[14468>>2]|0;
 return ($61|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2288>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2288|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2296>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2296|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 14472;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((14760)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      ___cxa_guard_release((2296|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(730,(14472|0),(30101|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(730,((14484)|0),(30104|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      HEAP32[14760>>2] = 14472;
      ___cxa_guard_release((2288|0));
      break;
     }
    }
    $18 = ___cxa_find_matching_catch()|0;
    $19 = tempRet0;
    ___cxa_guard_abort((2288|0));
    ___resumeException($18|0);
    // unreachable;
   }
  }
 } while(0);
 $17 = HEAP32[14760>>2]|0;
 return ($17|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2304>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2304|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2312>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2312|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 14764;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((15052)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      ___cxa_guard_release((2312|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(731,(14764|0),(15052|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(731,((14776)|0),(15064|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      HEAP32[15076>>2] = 14764;
      ___cxa_guard_release((2304|0));
      break;
     }
    }
    $18 = ___cxa_find_matching_catch()|0;
    $19 = tempRet0;
    ___cxa_guard_abort((2304|0));
    ___resumeException($18|0);
    // unreachable;
   }
  }
 } while(0);
 $17 = HEAP32[15076>>2]|0;
 return ($17|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2320>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2320|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(528,(15080|0),(30107|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2320|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     ___cxa_guard_release((2320|0));
     break;
    }
   }
  }
 } while(0);
 return (15080|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2328>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2328|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(732,(15092|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(733,(15128|0),(15092|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      ___cxa_guard_release((2328|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2328|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (15128|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2336>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2336|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(528,(15140|0),(30116|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2336|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     ___cxa_guard_release((2336|0));
     break;
    }
   }
  }
 } while(0);
 return (15140|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2344>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2344|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(732,(15152|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(733,(15188|0),(15152|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      ___cxa_guard_release((2344|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2344|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (15188|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2352>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2352|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(528,(15200|0),(30125|0),20);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2352|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     ___cxa_guard_release((2352|0));
     break;
    }
   }
  }
 } while(0);
 return (15200|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2360>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2360|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(732,(15212|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(733,(15296|0),(15212|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      ___cxa_guard_release((2360|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2360|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (15296|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2368>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2368|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(528,(15308|0),(30146|0),11);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2368|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     ___cxa_guard_release((2368|0));
     break;
    }
   }
  }
 } while(0);
 return (15308|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2376>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2376|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(732,(15320|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(733,(15368|0),(15320|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      ___cxa_guard_release((2376|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2376|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (15368|0);
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (11948);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(649)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = ($1|0)==($2|0);
   if (!($5)) {
    $6 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi(662,($6|0));
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     break;
    }
   }
   return;
  }
 } while(0);
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$040 = 0, $$085 = 0, $$lcssa = 0, $$lcssa117 = 0, $$ph$ph = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $$pre$i2$i$i16$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off090 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0104 = 0, $__ky1$091 = 0, $__ky2$098 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$0102 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$387 = 0, $__n_does_match$4 = 0, $__n_does_match$596 = 0;
 var $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$0101 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$386 = 0, $__n_might_match$4 = 0, $__st$0103 = 0, $__st$188 = 0, $__st$297 = 0, $__st$384 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $or$cond = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 do {
  if ($4) {
   $5 = (_malloc($3)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(655);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $18 = $5;
   $190 = $18;$__status$0 = $5;
   label = 11;
  } else {
   $190 = 0;$__status$0 = $__statbuf;
   label = 11;
  }
 } while(0);
 L6: do {
  if ((label|0) == 11) {
   $19 = ($__kb|0)==($__ke|0);
   if ($19) {
    $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
   } else {
    $__ky$0104 = $__kb;$__n_does_match$0102 = 0;$__n_might_match$0101 = $3;$__st$0103 = $__status$0;
    while(1) {
     $22 = HEAP8[$__ky$0104>>0]|0;
     $23 = $22 & 1;
     $24 = ($23<<24>>24)==(0);
     if ($24) {
      $27 = $22&255;
      $28 = $27 >>> 1;
      $29 = $28;
     } else {
      $25 = ((($__ky$0104)) + 4|0);
      $26 = HEAP32[$25>>2]|0;
      $29 = $26;
     }
     $30 = ($29|0)==(0);
     if ($30) {
      HEAP8[$__st$0103>>0] = 2;
      $31 = (($__n_might_match$0101) + -1)|0;
      $32 = (($__n_does_match$0102) + 1)|0;
      $__n_does_match$1 = $32;$__n_might_match$1 = $31;
     } else {
      HEAP8[$__st$0103>>0] = 1;
      $__n_does_match$1 = $__n_does_match$0102;$__n_might_match$1 = $__n_might_match$0101;
     }
     $33 = ((($__ky$0104)) + 12|0);
     $34 = ((($__st$0103)) + 1|0);
     $35 = ($33|0)==($__ke|0);
     if ($35) {
      $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
      break;
     } else {
      $__ky$0104 = $33;$__n_does_match$0102 = $__n_does_match$1;$__n_might_match$0101 = $__n_might_match$1;$__st$0103 = $34;
     }
    }
   }
   $20 = ($__kb|0)==($__ke|0);
   $21 = ($__kb|0)==($__ke|0);
   $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
   L20: while(1) {
    $36 = HEAP32[$__b>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      $50 = 0;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 5;
        break L20;
       }
       $49 = ($46|0)==(-1);
       if ($49) {
        HEAP32[$__b>>2] = 0;
        $50 = 0;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $50 = $$pre$i$i$i;
        break;
       }
      } else {
       $50 = $36;
      }
     }
    } while(0);
    $51 = ($50|0)==(0|0);
    $52 = HEAP32[$__e>>2]|0;
    $53 = ($52|0)==(0|0);
    if ($53) {
     $$pre$i2$i$i16 = 0;
    } else {
     $54 = ((($52)) + 12|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ((($52)) + 16|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($55|0)==($57|0);
     if ($58) {
      $59 = HEAP32[$52>>2]|0;
      $60 = ((($59)) + 36|0);
      $61 = HEAP32[$60>>2]|0;
      __THREW__ = 0;
      $62 = (invoke_ii($61|0,($52|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       label = 5;
       break;
      }
      $65 = ($62|0)==(-1);
      if ($65) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i16 = 0;
      } else {
       $$pre$i2$i$i16 = $52;
      }
     } else {
      $$pre$i2$i$i16 = $52;
     }
    }
    $66 = ($$pre$i2$i$i16|0)==(0|0);
    $tmp$i$i = $51 ^ $66;
    $67 = ($__n_might_match$2|0)!=(0);
    $68 = $67 & $tmp$i$i;
    $69 = HEAP32[$__b>>2]|0;
    if (!($68)) {
     $$lcssa = $66;$$lcssa117 = $69;$$pre$i2$i$i16$lcssa = $$pre$i2$i$i16;
     label = 64;
     break;
    }
    $70 = ((($69)) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ((($69)) + 16|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($71|0)==($73|0);
    if ($74) {
     $75 = HEAP32[$69>>2]|0;
     $76 = ((($75)) + 36|0);
     $77 = HEAP32[$76>>2]|0;
     __THREW__ = 0;
     $78 = (invoke_ii($77|0,($69|0))|0);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      label = 5;
      break;
     } else {
      $$0$i$i = $78;
     }
    } else {
     $81 = HEAP8[$71>>0]|0;
     $82 = $81&255;
     $$0$i$i = $82;
    }
    $83 = $$0$i$i&255;
    if ($__case_sensitive) {
     $__c$0 = $83;
    } else {
     $84 = HEAP32[$__ct>>2]|0;
     $85 = ((($84)) + 12|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_iii($86|0,($__ct|0),($83|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 5;
      break;
     } else {
      $__c$0 = $87;
     }
    }
    $90 = (($__indx$0) + 1)|0;
    if ($20) {
     $__consume$0$off0$lcssa = 0;$__n_does_match$3$lcssa = $__n_does_match$2;$__n_might_match$3$lcssa = $__n_might_match$2;
    } else {
     $__consume$0$off090 = 0;$__ky1$091 = $__kb;$__n_does_match$387 = $__n_does_match$2;$__n_might_match$386 = $__n_might_match$2;$__st$188 = $__status$0;
     while(1) {
      $91 = HEAP8[$__st$188>>0]|0;
      $92 = ($91<<24>>24)==(1);
      do {
       if ($92) {
        $93 = HEAP8[$__ky1$091>>0]|0;
        $94 = $93 & 1;
        $95 = ($94<<24>>24)==(0);
        if ($95) {
         $98 = ((($__ky1$091)) + 1|0);
         $100 = $98;
        } else {
         $96 = ((($__ky1$091)) + 8|0);
         $97 = HEAP32[$96>>2]|0;
         $100 = $97;
        }
        $99 = (($100) + ($__indx$0)|0);
        $101 = HEAP8[$99>>0]|0;
        if ($__case_sensitive) {
         $__kc$0 = $101;
        } else {
         $102 = HEAP32[$__ct>>2]|0;
         $103 = ((($102)) + 12|0);
         $104 = HEAP32[$103>>2]|0;
         __THREW__ = 0;
         $105 = (invoke_iii($104|0,($__ct|0),($101|0))|0);
         $106 = __THREW__; __THREW__ = 0;
         $107 = $106&1;
         if ($107) {
          label = 4;
          break L20;
         } else {
          $__kc$0 = $105;
         }
        }
        $108 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
        if (!($108)) {
         HEAP8[$__st$188>>0] = 0;
         $120 = (($__n_might_match$386) + -1)|0;
         $__consume$1$off0 = $__consume$0$off090;$__n_does_match$4 = $__n_does_match$387;$__n_might_match$4 = $120;
         break;
        }
        $109 = HEAP8[$__ky1$091>>0]|0;
        $110 = $109 & 1;
        $111 = ($110<<24>>24)==(0);
        if ($111) {
         $114 = $109&255;
         $115 = $114 >>> 1;
         $116 = $115;
        } else {
         $112 = ((($__ky1$091)) + 4|0);
         $113 = HEAP32[$112>>2]|0;
         $116 = $113;
        }
        $117 = ($116|0)==($90|0);
        if ($117) {
         HEAP8[$__st$188>>0] = 2;
         $118 = (($__n_might_match$386) + -1)|0;
         $119 = (($__n_does_match$387) + 1)|0;
         $__consume$1$off0 = 1;$__n_does_match$4 = $119;$__n_might_match$4 = $118;
        } else {
         $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$387;$__n_might_match$4 = $__n_might_match$386;
        }
       } else {
        $__consume$1$off0 = $__consume$0$off090;$__n_does_match$4 = $__n_does_match$387;$__n_might_match$4 = $__n_might_match$386;
       }
      } while(0);
      $121 = ((($__ky1$091)) + 12|0);
      $122 = ((($__st$188)) + 1|0);
      $123 = ($121|0)==($__ke|0);
      if ($123) {
       $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
       break;
      } else {
       $__consume$0$off090 = $__consume$1$off0;$__ky1$091 = $121;$__n_does_match$387 = $__n_does_match$4;$__n_might_match$386 = $__n_might_match$4;$__st$188 = $122;
      }
     }
    }
    if (!($__consume$0$off0$lcssa)) {
     $__indx$0 = $90;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    }
    $124 = HEAP32[$__b>>2]|0;
    $125 = ((($124)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($124)) + 16|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($126|0)==($128|0);
    if ($129) {
     $130 = HEAP32[$124>>2]|0;
     $131 = ((($130)) + 40|0);
     $132 = HEAP32[$131>>2]|0;
     __THREW__ = 0;
     (invoke_ii($132|0,($124|0))|0);
     $133 = __THREW__; __THREW__ = 0;
     $134 = $133&1;
     if ($134) {
      label = 5;
      break;
     }
    } else {
     $135 = ((($126)) + 1|0);
     HEAP32[$125>>2] = $135;
    }
    $136 = (($__n_does_match$3$lcssa) + ($__n_might_match$3$lcssa))|0;
    $137 = ($136>>>0)<(2);
    $or$cond = $137 | $21;
    if ($or$cond) {
     $__indx$0 = $90;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    } else {
     $__ky2$098 = $__kb;$__n_does_match$596 = $__n_does_match$3$lcssa;$__st$297 = $__status$0;
    }
    while(1) {
     $138 = HEAP8[$__st$297>>0]|0;
     $139 = ($138<<24>>24)==(2);
     if ($139) {
      $140 = HEAP8[$__ky2$098>>0]|0;
      $141 = $140 & 1;
      $142 = ($141<<24>>24)==(0);
      if ($142) {
       $145 = $140&255;
       $146 = $145 >>> 1;
       $147 = $146;
      } else {
       $143 = ((($__ky2$098)) + 4|0);
       $144 = HEAP32[$143>>2]|0;
       $147 = $144;
      }
      $148 = ($147|0)==($90|0);
      if ($148) {
       $__n_does_match$6 = $__n_does_match$596;
      } else {
       HEAP8[$__st$297>>0] = 0;
       $149 = (($__n_does_match$596) + -1)|0;
       $__n_does_match$6 = $149;
      }
     } else {
      $__n_does_match$6 = $__n_does_match$596;
     }
     $150 = ((($__ky2$098)) + 12|0);
     $151 = ((($__st$297)) + 1|0);
     $152 = ($150|0)==($__ke|0);
     if ($152) {
      $__indx$0 = $90;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
      continue L20;
     } else {
      $__ky2$098 = $150;$__n_does_match$596 = $__n_does_match$6;$__st$297 = $151;
     }
    }
   }
   if ((label|0) == 4) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $15 = $190;$lpad$phi$index = $9;$lpad$phi$index3 = $10;
    break;
   }
   else if ((label|0) == 5) {
    $11 = ___cxa_find_matching_catch()|0;
    $12 = tempRet0;
    $15 = $190;$lpad$phi$index = $11;$lpad$phi$index3 = $12;
    break;
   }
   else if ((label|0) == 64) {
    $153 = ($$lcssa117|0)==(0|0);
    do {
     if ($153) {
      $166 = 0;
     } else {
      $154 = ((($$lcssa117)) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ((($$lcssa117)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($155|0)==($157|0);
      if ($158) {
       $159 = HEAP32[$$lcssa117>>2]|0;
       $160 = ((($159)) + 36|0);
       $161 = HEAP32[$160>>2]|0;
       __THREW__ = 0;
       $162 = (invoke_ii($161|0,($$lcssa117|0))|0);
       $163 = __THREW__; __THREW__ = 0;
       $164 = $163&1;
       if ($164) {
        $$ph$ph = $190;
        label = 6;
        break L6;
       }
       $165 = ($162|0)==(-1);
       if ($165) {
        HEAP32[$__b>>2] = 0;
        $166 = 0;
        break;
       } else {
        $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
        $166 = $$pre$i$i$i12;
        break;
       }
      } else {
       $166 = $$lcssa117;
      }
     }
    } while(0);
    $167 = ($166|0)==(0|0);
    do {
     if ($$lcssa) {
      label = 76;
     } else {
      $168 = ((($$pre$i2$i$i16$lcssa)) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ((($$pre$i2$i$i16$lcssa)) + 16|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ($169|0)==($171|0);
      if ($172) {
       $173 = HEAP32[$$pre$i2$i$i16$lcssa>>2]|0;
       $174 = ((($173)) + 36|0);
       $175 = HEAP32[$174>>2]|0;
       __THREW__ = 0;
       $176 = (invoke_ii($175|0,($$pre$i2$i$i16$lcssa|0))|0);
       $177 = __THREW__; __THREW__ = 0;
       $178 = $177&1;
       if ($178) {
        $$ph$ph = $190;
        label = 6;
        break L6;
       }
       $179 = ($176|0)==(-1);
       if ($179) {
        HEAP32[$__e>>2] = 0;
        label = 76;
        break;
       }
      }
      if (!($167)) {
       label = 77;
      }
     }
    } while(0);
    if ((label|0) == 76) {
     if ($167) {
      label = 77;
     }
    }
    if ((label|0) == 77) {
     $180 = HEAP32[$__err>>2]|0;
     $181 = $180 | 2;
     HEAP32[$__err>>2] = $181;
    }
    $182 = ($__kb|0)==($__ke|0);
    L105: do {
     if ($182) {
      label = 81;
     } else {
      $$085 = $__kb;$__st$384 = $__status$0;
      while(1) {
       $183 = HEAP8[$__st$384>>0]|0;
       $184 = ($183<<24>>24)==(2);
       if ($184) {
        $$040 = $$085;
        break L105;
       }
       $185 = ((($$085)) + 12|0);
       $186 = ((($__st$384)) + 1|0);
       $187 = ($185|0)==($__ke|0);
       if ($187) {
        label = 81;
        break;
       } else {
        $$085 = $185;$__st$384 = $186;
       }
      }
     }
    } while(0);
    if ((label|0) == 81) {
     $188 = HEAP32[$__err>>2]|0;
     $189 = $188 | 4;
     HEAP32[$__err>>2] = $189;
     $$040 = $__ke;
    }
    $191 = ($190|0)==(0);
    if (!($191)) {
     $192 = $190;
     _free($192);
    }
    STACKTOP = sp;return ($$040|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $15 = $$ph$ph;$lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = $15;
  _free($17);
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(734,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 25;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$pre$i$i$i$lcssa;
      }
     } else {
      $138 = $$pre$i$i$i$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = ((($$pre$i2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($139)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($139) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(735,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 25;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($130) {
     $143 = 0;
    } else {
     $131 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $137 = ((($136)) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($$pre$i$i$i$lcssa|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       label = 25;
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $$pre$i$i$i$lcssa;
      }
     } else {
      $143 = $$pre$i$i$i$lcssa;
     }
    }
    $144 = ($143|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 49;
     } else {
      $146 = ((($$pre$i2$i$i)) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($$pre$i2$i$i)) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$$pre$i2$i$i>>2]|0;
       $152 = ((($151)) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 25;
        break L4;
       }
       $157 = ($154|0)==(-1);
       if ($157) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($144)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($144) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $158 = HEAP32[$__err>>2]|0;
     $159 = $158 | 2;
     HEAP32[$__err>>2] = $159;
    }
    $160 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($160|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(736,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 25;
   } else {
    HEAP16[$__v>>1] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$pre$i$i$i$lcssa;
      }
     } else {
      $138 = $$pre$i$i$i$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = ((($$pre$i2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($139)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($139) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(737,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 25;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$pre$i$i$i$lcssa;
      }
     } else {
      $138 = $$pre$i$i$i$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = ((($$pre$i2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($139)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($139) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(738,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 25;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$pre$i$i$i$lcssa;
      }
     } else {
      $138 = $$pre$i$i$i$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = ((($$pre$i2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($139)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($139) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(739,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 25;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($130) {
     $143 = 0;
    } else {
     $131 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $137 = ((($136)) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($$pre$i$i$i$lcssa|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       label = 25;
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $$pre$i$i$i$lcssa;
      }
     } else {
      $143 = $$pre$i$i$i$lcssa;
     }
    }
    $144 = ($143|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 49;
     } else {
      $146 = ((($$pre$i2$i$i)) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($$pre$i2$i$i)) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$$pre$i2$i$i>>2]|0;
       $152 = ((($151)) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 25;
        break L4;
       }
       $157 = ($154|0)==(-1);
       if ($157) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($144)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($144) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $158 = HEAP32[$__err>>2]|0;
     $159 = $158 | 2;
     HEAP32[$__err>>2] = $159;
    }
    $160 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($160|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 25;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(740,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 25;
   } else {
    HEAPF32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 25;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 49;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 25;
        break L4;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($141)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($141) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 25;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(741,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 25;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 25;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 49;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 25;
        break L4;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($141)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($141) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 25;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(742,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 25;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 25;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 49;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 25;
        break L4;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($141)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($141) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(664,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$044 = 0, $$081 = 0, $$lcssa = 0, $$ph$ph = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $$pre$i3$i$i19$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off086 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0100 = 0, $__ky1$087 = 0, $__ky2$094 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$098 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0;
 var $__n_does_match$3$lcssa = 0, $__n_does_match$383 = 0, $__n_does_match$4 = 0, $__n_does_match$592 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$097 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$382 = 0, $__n_might_match$4 = 0, $__st$099 = 0, $__st$184 = 0, $__st$293 = 0, $__st$380 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0;
 var $or$cond = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 do {
  if ($4) {
   $5 = (_malloc($3)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(655);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $18 = $5;
   $190 = $18;$__status$0 = $5;
   label = 11;
  } else {
   $190 = 0;$__status$0 = $__statbuf;
   label = 11;
  }
 } while(0);
 L6: do {
  if ((label|0) == 11) {
   $19 = ($__kb|0)==($__ke|0);
   if ($19) {
    $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
   } else {
    $__ky$0100 = $__kb;$__n_does_match$098 = 0;$__n_might_match$097 = $3;$__st$099 = $__status$0;
    while(1) {
     $22 = HEAP8[$__ky$0100>>0]|0;
     $23 = $22 & 1;
     $24 = ($23<<24>>24)==(0);
     if ($24) {
      $27 = $22&255;
      $28 = $27 >>> 1;
      $29 = $28;
     } else {
      $25 = ((($__ky$0100)) + 4|0);
      $26 = HEAP32[$25>>2]|0;
      $29 = $26;
     }
     $30 = ($29|0)==(0);
     if ($30) {
      HEAP8[$__st$099>>0] = 2;
      $31 = (($__n_might_match$097) + -1)|0;
      $32 = (($__n_does_match$098) + 1)|0;
      $__n_does_match$1 = $32;$__n_might_match$1 = $31;
     } else {
      HEAP8[$__st$099>>0] = 1;
      $__n_does_match$1 = $__n_does_match$098;$__n_might_match$1 = $__n_might_match$097;
     }
     $33 = ((($__ky$0100)) + 12|0);
     $34 = ((($__st$099)) + 1|0);
     $35 = ($33|0)==($__ke|0);
     if ($35) {
      $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
      break;
     } else {
      $__ky$0100 = $33;$__n_does_match$098 = $__n_does_match$1;$__n_might_match$097 = $__n_might_match$1;$__st$099 = $34;
     }
    }
   }
   $20 = ($__kb|0)==($__ke|0);
   $21 = ($__kb|0)==($__ke|0);
   $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
   L20: while(1) {
    $36 = HEAP32[$__b>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      $66 = 1;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 5;
        break L20;
       } else {
        $$0$i$i$i$i = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i$i$i = $49;
      }
      $50 = ($$0$i$i$i$i|0)==(-1);
      if ($50) {
       HEAP32[$__b>>2] = 0;
       $66 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $66 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $51 = HEAP32[$__e>>2]|0;
    $52 = ($51|0)==(0|0);
    if ($52) {
     $$pre$i3$i$i19 = 0;$67 = 1;
    } else {
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($51)) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     if ($57) {
      $58 = HEAP32[$51>>2]|0;
      $59 = ((($58)) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 5;
       break;
      } else {
       $$0$i$i1$i$i = $61;
      }
     } else {
      $64 = HEAP32[$54>>2]|0;
      $$0$i$i1$i$i = $64;
     }
     $65 = ($$0$i$i1$i$i|0)==(-1);
     if ($65) {
      HEAP32[$__e>>2] = 0;
      $$pre$i3$i$i19 = 0;$67 = 1;
     } else {
      $$pre$i3$i$i19 = $51;$67 = 0;
     }
    }
    $tmp$i$i = $66 ^ $67;
    $68 = ($__n_might_match$2|0)!=(0);
    $69 = $68 & $tmp$i$i;
    $70 = HEAP32[$__b>>2]|0;
    if (!($69)) {
     $$lcssa = $70;$$pre$i3$i$i19$lcssa = $$pre$i3$i$i19;
     label = 66;
     break;
    }
    $71 = ((($70)) + 12|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($70)) + 16|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($72|0)==($74|0);
    if ($75) {
     $76 = HEAP32[$70>>2]|0;
     $77 = ((($76)) + 36|0);
     $78 = HEAP32[$77>>2]|0;
     __THREW__ = 0;
     $79 = (invoke_ii($78|0,($70|0))|0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if ($81) {
      label = 5;
      break;
     } else {
      $$0$i$i = $79;
     }
    } else {
     $82 = HEAP32[$72>>2]|0;
     $$0$i$i = $82;
    }
    if ($__case_sensitive) {
     $__c$0 = $$0$i$i;
    } else {
     $83 = HEAP32[$__ct>>2]|0;
     $84 = ((($83)) + 28|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     $86 = (invoke_iii($85|0,($__ct|0),($$0$i$i|0))|0);
     $87 = __THREW__; __THREW__ = 0;
     $88 = $87&1;
     if ($88) {
      label = 5;
      break;
     } else {
      $__c$0 = $86;
     }
    }
    $89 = (($__indx$0) + 1)|0;
    if ($20) {
     $__consume$0$off0$lcssa = 0;$__n_does_match$3$lcssa = $__n_does_match$2;$__n_might_match$3$lcssa = $__n_might_match$2;
    } else {
     $__consume$0$off086 = 0;$__ky1$087 = $__kb;$__n_does_match$383 = $__n_does_match$2;$__n_might_match$382 = $__n_might_match$2;$__st$184 = $__status$0;
     while(1) {
      $90 = HEAP8[$__st$184>>0]|0;
      $91 = ($90<<24>>24)==(1);
      do {
       if ($91) {
        $92 = HEAP8[$__ky1$087>>0]|0;
        $93 = $92 & 1;
        $94 = ($93<<24>>24)==(0);
        if ($94) {
         $97 = ((($__ky1$087)) + 4|0);
         $99 = $97;
        } else {
         $95 = ((($__ky1$087)) + 8|0);
         $96 = HEAP32[$95>>2]|0;
         $99 = $96;
        }
        $98 = (($99) + ($__indx$0<<2)|0);
        $100 = HEAP32[$98>>2]|0;
        if ($__case_sensitive) {
         $__kc$0 = $100;
        } else {
         $101 = HEAP32[$__ct>>2]|0;
         $102 = ((($101)) + 28|0);
         $103 = HEAP32[$102>>2]|0;
         __THREW__ = 0;
         $104 = (invoke_iii($103|0,($__ct|0),($100|0))|0);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          label = 4;
          break L20;
         } else {
          $__kc$0 = $104;
         }
        }
        $107 = ($__c$0|0)==($__kc$0|0);
        if (!($107)) {
         HEAP8[$__st$184>>0] = 0;
         $119 = (($__n_might_match$382) + -1)|0;
         $__consume$1$off0 = $__consume$0$off086;$__n_does_match$4 = $__n_does_match$383;$__n_might_match$4 = $119;
         break;
        }
        $108 = HEAP8[$__ky1$087>>0]|0;
        $109 = $108 & 1;
        $110 = ($109<<24>>24)==(0);
        if ($110) {
         $113 = $108&255;
         $114 = $113 >>> 1;
         $115 = $114;
        } else {
         $111 = ((($__ky1$087)) + 4|0);
         $112 = HEAP32[$111>>2]|0;
         $115 = $112;
        }
        $116 = ($115|0)==($89|0);
        if ($116) {
         HEAP8[$__st$184>>0] = 2;
         $117 = (($__n_might_match$382) + -1)|0;
         $118 = (($__n_does_match$383) + 1)|0;
         $__consume$1$off0 = 1;$__n_does_match$4 = $118;$__n_might_match$4 = $117;
        } else {
         $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$383;$__n_might_match$4 = $__n_might_match$382;
        }
       } else {
        $__consume$1$off0 = $__consume$0$off086;$__n_does_match$4 = $__n_does_match$383;$__n_might_match$4 = $__n_might_match$382;
       }
      } while(0);
      $120 = ((($__ky1$087)) + 12|0);
      $121 = ((($__st$184)) + 1|0);
      $122 = ($120|0)==($__ke|0);
      if ($122) {
       $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
       break;
      } else {
       $__consume$0$off086 = $__consume$1$off0;$__ky1$087 = $120;$__n_does_match$383 = $__n_does_match$4;$__n_might_match$382 = $__n_might_match$4;$__st$184 = $121;
      }
     }
    }
    if (!($__consume$0$off0$lcssa)) {
     $__indx$0 = $89;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    }
    $123 = HEAP32[$__b>>2]|0;
    $124 = ((($123)) + 12|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ((($123)) + 16|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($125|0)==($127|0);
    if ($128) {
     $129 = HEAP32[$123>>2]|0;
     $130 = ((($129)) + 40|0);
     $131 = HEAP32[$130>>2]|0;
     __THREW__ = 0;
     (invoke_ii($131|0,($123|0))|0);
     $132 = __THREW__; __THREW__ = 0;
     $133 = $132&1;
     if ($133) {
      label = 5;
      break;
     }
    } else {
     $134 = ((($125)) + 4|0);
     HEAP32[$124>>2] = $134;
    }
    $135 = (($__n_does_match$3$lcssa) + ($__n_might_match$3$lcssa))|0;
    $136 = ($135>>>0)<(2);
    $or$cond = $136 | $21;
    if ($or$cond) {
     $__indx$0 = $89;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    } else {
     $__ky2$094 = $__kb;$__n_does_match$592 = $__n_does_match$3$lcssa;$__st$293 = $__status$0;
    }
    while(1) {
     $137 = HEAP8[$__st$293>>0]|0;
     $138 = ($137<<24>>24)==(2);
     if ($138) {
      $139 = HEAP8[$__ky2$094>>0]|0;
      $140 = $139 & 1;
      $141 = ($140<<24>>24)==(0);
      if ($141) {
       $144 = $139&255;
       $145 = $144 >>> 1;
       $146 = $145;
      } else {
       $142 = ((($__ky2$094)) + 4|0);
       $143 = HEAP32[$142>>2]|0;
       $146 = $143;
      }
      $147 = ($146|0)==($89|0);
      if ($147) {
       $__n_does_match$6 = $__n_does_match$592;
      } else {
       HEAP8[$__st$293>>0] = 0;
       $148 = (($__n_does_match$592) + -1)|0;
       $__n_does_match$6 = $148;
      }
     } else {
      $__n_does_match$6 = $__n_does_match$592;
     }
     $149 = ((($__ky2$094)) + 12|0);
     $150 = ((($__st$293)) + 1|0);
     $151 = ($149|0)==($__ke|0);
     if ($151) {
      $__indx$0 = $89;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
      continue L20;
     } else {
      $__ky2$094 = $149;$__n_does_match$592 = $__n_does_match$6;$__st$293 = $150;
     }
    }
   }
   if ((label|0) == 4) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $15 = $190;$lpad$phi$index = $9;$lpad$phi$index3 = $10;
    break;
   }
   else if ((label|0) == 5) {
    $11 = ___cxa_find_matching_catch()|0;
    $12 = tempRet0;
    $15 = $190;$lpad$phi$index = $11;$lpad$phi$index3 = $12;
    break;
   }
   else if ((label|0) == 66) {
    $152 = ($$lcssa|0)==(0|0);
    do {
     if ($152) {
      $193 = 1;
     } else {
      $153 = ((($$lcssa)) + 12|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ((($$lcssa)) + 16|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ($154|0)==($156|0);
      if ($157) {
       $158 = HEAP32[$$lcssa>>2]|0;
       $159 = ((($158)) + 36|0);
       $160 = HEAP32[$159>>2]|0;
       __THREW__ = 0;
       $161 = (invoke_ii($160|0,($$lcssa|0))|0);
       $162 = __THREW__; __THREW__ = 0;
       $163 = $162&1;
       if ($163) {
        $$ph$ph = $190;
        label = 6;
        break L6;
       } else {
        $$0$i$i$i$i11 = $161;
       }
      } else {
       $164 = HEAP32[$154>>2]|0;
       $$0$i$i$i$i11 = $164;
      }
      $165 = ($$0$i$i$i$i11|0)==(-1);
      if ($165) {
       HEAP32[$__b>>2] = 0;
       $193 = 1;
       break;
      } else {
       $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
       $193 = $phitmp$i$i$i14;
       break;
      }
     }
    } while(0);
    $166 = ($$pre$i3$i$i19$lcssa|0)==(0|0);
    do {
     if ($166) {
      label = 79;
     } else {
      $167 = ((($$pre$i3$i$i19$lcssa)) + 12|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ((($$pre$i3$i$i19$lcssa)) + 16|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($168|0)==($170|0);
      if ($171) {
       $172 = HEAP32[$$pre$i3$i$i19$lcssa>>2]|0;
       $173 = ((($172)) + 36|0);
       $174 = HEAP32[$173>>2]|0;
       __THREW__ = 0;
       $175 = (invoke_ii($174|0,($$pre$i3$i$i19$lcssa|0))|0);
       $176 = __THREW__; __THREW__ = 0;
       $177 = $176&1;
       if ($177) {
        $$ph$ph = $190;
        label = 6;
        break L6;
       } else {
        $$0$i$i1$i$i17 = $175;
       }
      } else {
       $178 = HEAP32[$168>>2]|0;
       $$0$i$i1$i$i17 = $178;
      }
      $179 = ($$0$i$i1$i$i17|0)==(-1);
      if ($179) {
       HEAP32[$__e>>2] = 0;
       label = 79;
       break;
      } else {
       if ($193) {
        break;
       } else {
        label = 81;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 79) {
     if ($193) {
      label = 81;
     }
    }
    if ((label|0) == 81) {
     $180 = HEAP32[$__err>>2]|0;
     $181 = $180 | 2;
     HEAP32[$__err>>2] = $181;
    }
    $182 = ($__kb|0)==($__ke|0);
    L113: do {
     if ($182) {
      label = 85;
     } else {
      $$081 = $__kb;$__st$380 = $__status$0;
      while(1) {
       $183 = HEAP8[$__st$380>>0]|0;
       $184 = ($183<<24>>24)==(2);
       if ($184) {
        $$044 = $$081;
        break L113;
       }
       $185 = ((($$081)) + 12|0);
       $186 = ((($__st$380)) + 1|0);
       $187 = ($185|0)==($__ke|0);
       if ($187) {
        label = 85;
        break;
       } else {
        $$081 = $185;$__st$380 = $186;
       }
      }
     }
    } while(0);
    if ((label|0) == 85) {
     $188 = HEAP32[$__err>>2]|0;
     $189 = $188 | 4;
     HEAP32[$__err>>2] = $189;
     $$044 = $__ke;
    }
    $191 = ($190|0)==(0);
    if (!($191)) {
     $192 = $190;
     _free($192);
    }
    STACKTOP = sp;return ($$044|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $15 = $$ph$ph;$lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = $15;
  _free($17);
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(734,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 26;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = ((($$pre$i3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$160 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$160 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$160 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($160) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($160) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(735,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 26;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($129) {
     $162 = 1;
    } else {
     $130 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $136 = ((($135)) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($$pre$i$i$i$lcssa|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $162 = 1;
     } else {
      $162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 51;
     } else {
      $144 = ((($$pre$i3$i$i)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ((($$pre$i3$i$i)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = ((($149)) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($162) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $157 = HEAP32[$__err>>2]|0;
     $158 = $157 | 2;
     HEAP32[$__err>>2] = $158;
    }
    $159 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($159|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(736,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 26;
   } else {
    HEAP16[$__v>>1] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = ((($$pre$i3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(737,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 26;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = ((($$pre$i3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(738,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 26;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = ((($$pre$i3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$160 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$160 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$160 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($160) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($160) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(739,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 26;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($129) {
     $162 = 1;
    } else {
     $130 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $136 = ((($135)) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($$pre$i$i$i$lcssa|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $162 = 1;
     } else {
      $162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 51;
     } else {
      $144 = ((($$pre$i3$i$i)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ((($$pre$i3$i$i)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = ((($149)) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($162) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $157 = HEAP32[$__err>>2]|0;
     $158 = $157 | 2;
     HEAP32[$__err>>2] = $158;
    }
    $159 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($159|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 26;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(740,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 26;
   } else {
    HEAPF32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 51;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($159) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 26;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(741,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 26;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 51;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($159) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(556,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 26;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(556,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(742,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 26;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 51;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($159) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(664,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(743,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(664,($0|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
  }
  ___resumeException($9|0);
  // unreachable;
 } else {
  $4 = ($0|0)==(0|0);
  if (!($4)) {
   __THREW__ = 0;
   (invoke_ii(664,($0|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $7 = ___cxa_find_matching_catch(0|0)|0;
    $8 = tempRet0;
    ___clang_call_terminate($7);
    // unreachable;
   }
  }
  STACKTOP = sp;return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$sroa$0$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$sroa$0$1 = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = $4 >> 2;
   $6 = ((($__iob)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>($5|0);
   $9 = (($7) - ($5))|0;
   $__ns$0 = $8 ? $9 : 0;
   $10 = $__op;
   $11 = (($10) - ($3))|0;
   $12 = $11 >> 2;
   $13 = ($11|0)>(0);
   if ($13) {
    $14 = HEAP32[$0>>2]|0;
    $15 = ((($14)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
    $18 = ($17|0)==($12|0);
    if (!($18)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$1 = 0;
     break;
    }
   }
   $19 = ($__ns$0|0)>(0);
   do {
    if ($19) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
     $20 = HEAP8[$__sp>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     $23 = ((($__sp)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($__sp)) + 4|0);
     $26 = $22 ? $25 : $24;
     $27 = HEAP32[$0>>2]|0;
     $28 = ((($27)) + 48|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     $30 = (invoke_iiii($29|0,($0|0),($26|0),($__ns$0|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      $34 = ___cxa_find_matching_catch()|0;
      $35 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      ___resumeException($34|0);
      // unreachable;
     }
     $33 = ($30|0)==($__ns$0|0);
     if ($33) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      $$sroa$0$1 = 0;
      break L1;
     }
    }
   } while(0);
   $36 = (($2) - ($10))|0;
   $37 = $36 >> 2;
   $38 = ($36|0)>(0);
   if ($38) {
    $39 = HEAP32[$0>>2]|0;
    $40 = ((($39)) + 48|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
    $43 = ($42|0)==($37|0);
    if (!($43)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$1 = 0;
     break;
    }
   }
   HEAP32[$6>>2] = 0;
   $$sroa$0$1 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$1|0);
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i20$lcssa = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = ((($14)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($14)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = ((($21)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $157 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $157 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$01 = 0;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $isascii1$i = ($40<<24>>24)>(-1);
   if ($isascii1$i) {
    $sext = $$0$i$i << 24;
    $41 = $sext >> 24;
    $42 = ((($__ct)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($41<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45 & 2048;
    $47 = ($46<<16>>16)==(0);
    if (!($47)) {
     $50 = HEAP32[$__ct>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
     $54 = $53 << 24 >> 24;
     $55 = HEAP32[$__b>>2]|0;
     $56 = ((($55)) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($55)) + 16|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($57|0)==($59|0);
     if ($60) {
      $61 = HEAP32[$55>>2]|0;
      $62 = ((($61)) + 40|0);
      $63 = HEAP32[$62>>2]|0;
      (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
      $$0$in = $__n;$$pre$i2$i$i7 = $157;$79 = $157;$__r$0$in = $54;
     } else {
      $64 = ((($57)) + 1|0);
      HEAP32[$56>>2] = $64;
      $$0$in = $__n;$$pre$i2$i$i7 = $157;$79 = $157;$__r$0$in = $54;
     }
     while(1) {
      $__r$0 = (($__r$0$in) + -48)|0;
      $$0 = (($$0$in) + -1)|0;
      $65 = HEAP32[$__b>>2]|0;
      $66 = ($65|0)==(0|0);
      do {
       if ($66) {
        $77 = 0;
       } else {
        $67 = ((($65)) + 12|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ((($65)) + 16|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($68|0)==($70|0);
        if ($71) {
         $72 = HEAP32[$65>>2]|0;
         $73 = ((($72)) + 36|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
         $76 = ($75|0)==(-1);
         if ($76) {
          HEAP32[$__b>>2] = 0;
          $77 = 0;
          break;
         } else {
          $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
          $77 = $$pre$i$i$i3;
          break;
         }
        } else {
         $77 = $65;
        }
       }
      } while(0);
      $78 = ($77|0)==(0|0);
      $80 = ($79|0)==(0|0);
      if ($80) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = 0;
      } else {
       $81 = ((($79)) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ((($79)) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82|0)==($84|0);
       if ($85) {
        $86 = HEAP32[$79>>2]|0;
        $87 = ((($86)) + 36|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (FUNCTION_TABLE_ii[$88 & 1023]($79)|0);
        $90 = ($89|0)==(-1);
        if ($90) {
         HEAP32[$__e>>2] = 0;
         $$pre$i2$i$i20 = 0;$91 = 0;
        } else {
         $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $$pre$i2$i$i7;
        }
       } else {
        $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $79;
       }
      }
      $92 = ($91|0)==(0|0);
      $tmp$i$i9 = $78 ^ $92;
      $93 = ($$0$in|0)>(1);
      $94 = $93 & $tmp$i$i9;
      $95 = HEAP32[$__b>>2]|0;
      if (!($94)) {
       $$lcssa = $95;$$pre$i2$i$i20$lcssa = $$pre$i2$i$i20;$__r$0$lcssa = $__r$0;
       break;
      }
      $96 = ((($95)) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ((($95)) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($97|0)==($99|0);
      if ($100) {
       $101 = HEAP32[$95>>2]|0;
       $102 = ((($101)) + 36|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (FUNCTION_TABLE_ii[$103 & 1023]($95)|0);
       $$0$i$i10 = $104;
      } else {
       $105 = HEAP8[$97>>0]|0;
       $106 = $105&255;
       $$0$i$i10 = $106;
      }
      $107 = $$0$i$i10&255;
      $isascii1$i12 = ($107<<24>>24)>(-1);
      if (!($isascii1$i12)) {
       $$01 = $__r$0;
       break L16;
      }
      $sext24 = $$0$i$i10 << 24;
      $108 = $sext24 >> 24;
      $109 = HEAP32[$42>>2]|0;
      $110 = (($109) + ($108<<1)|0);
      $111 = HEAP16[$110>>1]|0;
      $112 = $111 & 2048;
      $113 = ($112<<16>>16)==(0);
      if ($113) {
       $$01 = $__r$0;
       break L16;
      }
      $114 = ($__r$0*10)|0;
      $115 = HEAP32[$__ct>>2]|0;
      $116 = ((($115)) + 36|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (FUNCTION_TABLE_iiii[$117 & 1023]($__ct,$107,0)|0);
      $119 = $118 << 24 >> 24;
      $120 = (($119) + ($114))|0;
      $121 = HEAP32[$__b>>2]|0;
      $122 = ((($121)) + 12|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($121)) + 16|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($123|0)==($125|0);
      if ($126) {
       $127 = HEAP32[$121>>2]|0;
       $128 = ((($127)) + 40|0);
       $129 = HEAP32[$128>>2]|0;
       (FUNCTION_TABLE_ii[$129 & 1023]($121)|0);
       $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $120;
       continue;
      } else {
       $130 = ((($123)) + 1|0);
       HEAP32[$122>>2] = $130;
       $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $120;
       continue;
      }
     }
     $131 = ($$lcssa|0)==(0|0);
     do {
      if ($131) {
       $142 = 0;
      } else {
       $132 = ((($$lcssa)) + 12|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ((($$lcssa)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($133|0)==($135|0);
       if ($136) {
        $137 = HEAP32[$$lcssa>>2]|0;
        $138 = ((($137)) + 36|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (FUNCTION_TABLE_ii[$139 & 1023]($$lcssa)|0);
        $141 = ($140|0)==(-1);
        if ($141) {
         HEAP32[$__b>>2] = 0;
         $142 = 0;
         break;
        } else {
         $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
         $142 = $$pre$i$i$i16;
         break;
        }
       } else {
        $142 = $$lcssa;
       }
      }
     } while(0);
     $143 = ($142|0)==(0|0);
     $144 = ($$pre$i2$i$i20$lcssa|0)==(0|0);
     do {
      if ($144) {
       label = 50;
      } else {
       $145 = ((($$pre$i2$i$i20$lcssa)) + 12|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = ((($$pre$i2$i$i20$lcssa)) + 16|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($146|0)==($148|0);
       if ($149) {
        $150 = HEAP32[$$pre$i2$i$i20$lcssa>>2]|0;
        $151 = ((($150)) + 36|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = (FUNCTION_TABLE_ii[$152 & 1023]($$pre$i2$i$i20$lcssa)|0);
        $154 = ($153|0)==(-1);
        if ($154) {
         HEAP32[$__e>>2] = 0;
         label = 50;
         break;
        }
       }
       if ($143) {
        $$01 = $__r$0$lcssa;
        break L16;
       }
      }
     } while(0);
     if ((label|0) == 50) {
      if (!($143)) {
       $$01 = $__r$0$lcssa;
       break;
      }
     }
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
     $$01 = $__r$0$lcssa;
     break;
    }
   }
   $48 = HEAP32[$__err>>2]|0;
   $49 = $48 | 4;
   HEAP32[$__err>>2] = $49;
   $$01 = 0;
  }
 } while(0);
 return ($$01|0);
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $$pre$i3$i$i25$lcssa = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $148 = 1;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $148 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $148 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = ((($13)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($148) {
     $149 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($148) {
   label = 16;
  } else {
   $149 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$01 = 0;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = ((($39)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
   if (!($42)) {
    $43 = HEAP32[$__err>>2]|0;
    $44 = $43 | 4;
    HEAP32[$__err>>2] = $44;
    $$01 = 0;
    break;
   }
   $45 = HEAP32[$__ct>>2]|0;
   $46 = ((($45)) + 52|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
   $49 = $48 << 24 >> 24;
   $50 = HEAP32[$__b>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($50)) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)==($54|0);
   if ($55) {
    $56 = HEAP32[$50>>2]|0;
    $57 = ((($56)) + 40|0);
    $58 = HEAP32[$57>>2]|0;
    (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
    $$0$in = $__n;$$pre$i3$i$i10 = $149;$73 = $149;$__r$0$in = $49;
   } else {
    $59 = ((($52)) + 4|0);
    HEAP32[$51>>2] = $59;
    $$0$in = $__n;$$pre$i3$i$i10 = $149;$73 = $149;$__r$0$in = $49;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $60 = HEAP32[$__b>>2]|0;
    $61 = ($60|0)==(0|0);
    do {
     if ($61) {
      $86 = 1;
     } else {
      $62 = ((($60)) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ((($60)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = ((($67)) + 36|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
       $$0$i$i$i$i2 = $70;
      } else {
       $71 = HEAP32[$63>>2]|0;
       $$0$i$i$i$i2 = $71;
      }
      $72 = ($$0$i$i$i$i2|0)==(-1);
      if ($72) {
       HEAP32[$__b>>2] = 0;
       $86 = 1;
       break;
      } else {
       $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
       $86 = $phitmp$i$i$i5;
       break;
      }
     }
    } while(0);
    $74 = ($73|0)==(0|0);
    do {
     if ($74) {
      $$pre$i3$i$i25 = $$pre$i3$i$i10;$150 = 0;$87 = 1;
     } else {
      $75 = ((($73)) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($73)) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)==($78|0);
      if ($79) {
       $80 = HEAP32[$73>>2]|0;
       $81 = ((($80)) + 36|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (FUNCTION_TABLE_ii[$82 & 1023]($73)|0);
       $$0$i$i1$i$i8 = $83;
      } else {
       $84 = HEAP32[$76>>2]|0;
       $$0$i$i1$i$i8 = $84;
      }
      $85 = ($$0$i$i1$i$i8|0)==(-1);
      if ($85) {
       HEAP32[$__e>>2] = 0;
       $$pre$i3$i$i25 = 0;$150 = 0;$87 = 1;
       break;
      } else {
       $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
       $$pre$i3$i$i25 = $$pre$i3$i$i10;$150 = $$pre$i3$i$i10;$87 = $phitmp$i4$i$i11;
       break;
      }
     }
    } while(0);
    $tmp$i$i13 = $86 ^ $87;
    $88 = ($$0$in|0)>(1);
    $89 = $88 & $tmp$i$i13;
    $90 = HEAP32[$__b>>2]|0;
    if (!($89)) {
     $$lcssa = $90;$$pre$i3$i$i25$lcssa = $$pre$i3$i$i25;$__r$0$lcssa = $__r$0;
     break;
    }
    $91 = ((($90)) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($90)) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$90>>2]|0;
     $97 = ((($96)) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (FUNCTION_TABLE_ii[$98 & 1023]($90)|0);
     $$0$i$i14 = $99;
    } else {
     $100 = HEAP32[$92>>2]|0;
     $$0$i$i14 = $100;
    }
    $101 = HEAP32[$__ct>>2]|0;
    $102 = ((($101)) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (FUNCTION_TABLE_iiii[$103 & 1023]($__ct,2048,$$0$i$i14)|0);
    if (!($104)) {
     $$01 = $__r$0;
     break L22;
    }
    $105 = ($__r$0*10)|0;
    $106 = HEAP32[$__ct>>2]|0;
    $107 = ((($106)) + 52|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (FUNCTION_TABLE_iiii[$108 & 1023]($__ct,$$0$i$i14,0)|0);
    $110 = $109 << 24 >> 24;
    $111 = (($110) + ($105))|0;
    $112 = HEAP32[$__b>>2]|0;
    $113 = ((($112)) + 12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($112)) + 16|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($114|0)==($116|0);
    if ($117) {
     $118 = HEAP32[$112>>2]|0;
     $119 = ((($118)) + 40|0);
     $120 = HEAP32[$119>>2]|0;
     (FUNCTION_TABLE_ii[$120 & 1023]($112)|0);
     $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $150;$__r$0$in = $111;
     continue;
    } else {
     $121 = ((($114)) + 4|0);
     HEAP32[$113>>2] = $121;
     $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $150;$__r$0$in = $111;
     continue;
    }
   }
   $122 = ($$lcssa|0)==(0|0);
   do {
    if ($122) {
     $151 = 1;
    } else {
     $123 = ((($$lcssa)) + 12|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($$lcssa)) + 16|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($124|0)==($126|0);
     if ($127) {
      $128 = HEAP32[$$lcssa>>2]|0;
      $129 = ((($128)) + 36|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (FUNCTION_TABLE_ii[$130 & 1023]($$lcssa)|0);
      $$0$i$i$i$i17 = $131;
     } else {
      $132 = HEAP32[$124>>2]|0;
      $$0$i$i$i$i17 = $132;
     }
     $133 = ($$0$i$i$i$i17|0)==(-1);
     if ($133) {
      HEAP32[$__b>>2] = 0;
      $151 = 1;
      break;
     } else {
      $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
      $151 = $phitmp$i$i$i20;
      break;
     }
    }
   } while(0);
   $134 = ($$pre$i3$i$i25$lcssa|0)==(0|0);
   do {
    if ($134) {
     label = 60;
    } else {
     $135 = ((($$pre$i3$i$i25$lcssa)) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ((($$pre$i3$i$i25$lcssa)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$$pre$i3$i$i25$lcssa>>2]|0;
      $141 = ((($140)) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (FUNCTION_TABLE_ii[$142 & 1023]($$pre$i3$i$i25$lcssa)|0);
      $$0$i$i1$i$i23 = $143;
     } else {
      $144 = HEAP32[$136>>2]|0;
      $$0$i$i1$i$i23 = $144;
     }
     $145 = ($$0$i$i1$i$i23|0)==(-1);
     if ($145) {
      HEAP32[$__e>>2] = 0;
      label = 60;
      break;
     } else {
      if ($151) {
       $$01 = $__r$0$lcssa;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 60) {
    if (!($151)) {
     $$01 = $__r$0$lcssa;
     break;
    }
   }
   $146 = HEAP32[$__err>>2]|0;
   $147 = $146 | 2;
   HEAP32[$__err>>2] = $147;
   $$01 = $__r$0$lcssa;
  }
 } while(0);
 return ($$01|0);
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(665|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $16 = $14;
   HEAP32[$__b>>2] = $16;
   $25 = $14;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $17 = $14;
   HEAP32[$__b>>2] = $17;
   $18 = ($$pr|0)==(0|0);
   if ($18) {
    $25 = $14;
   } else {
    $19 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($19|0,($$pr|0));
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     $22 = ___cxa_find_matching_catch(0|0)|0;
     $23 = tempRet0;
     ___clang_call_terminate($22);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (744);
 $24 = (($25) + ($12)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($$)|0);
 HEAP32[$__e>>2] = $27;
 return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(665|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $17 = $15;
   HEAP32[$__b>>2] = $17;
   $27 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $18 = $15;
   HEAP32[$__b>>2] = $18;
   $19 = ($$pr|0)==(0|0);
   if ($19) {
    $27 = $15;
   } else {
    $20 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($20|0,($$pr|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     $23 = ___cxa_find_matching_catch(0|0)|0;
     $24 = tempRet0;
     ___clang_call_terminate($23);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $27 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (744);
 $25 = $$ >>> 2;
 $26 = (($27) + ($13<<2)|0);
 HEAP32[$__n>>2] = $26;
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + ($25<<2)|0);
 HEAP32[$__e>>2] = $29;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$04 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep1 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$41 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$41 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 do {
  if (!($13)) {
   $14 = (($15) - ($16))|0;
   $17 = ($14>>>0)<($12>>>0);
   if ($17) {
    $18 = (($16) + ($12))|0;
    $19 = (($18) - ($15))|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $21 = $$pre;
   } else {
    $21 = $41;
   }
   $20 = $21 & 1;
   $22 = ($20<<24>>24)==(0);
   if ($22) {
    $25 = ((($this)) + 1|0);
    $29 = $25;
   } else {
    $23 = ((($this)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = (($16) - ($0))|0;
   $scevgep = (($__last) + ($26)|0);
   $scevgep1 = $scevgep;
   $27 = ($__first|0)==($__last|0);
   if (!($27)) {
    $28 = (($29) + ($16)|0);
    $$03 = $__first;$__p$04 = $28;
    while(1) {
     $30 = HEAP8[$$03>>0]|0;
     HEAP8[$__p$04>>0] = $30;
     $31 = ((($__p$04)) + 1|0);
     $32 = ((($$03)) + 1|0);
     $33 = ($32|0)==($__last|0);
     if ($33) {
      break;
     } else {
      $$03 = $32;$__p$04 = $31;
     }
    }
   }
   $scevgep2 = (($29) + ($scevgep1)|0);
   HEAP8[$scevgep2>>0] = 0;
   $34 = (($16) + ($12))|0;
   $35 = HEAP8[$this>>0]|0;
   $36 = $35 & 1;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $39 = $34 << 1;
    $40 = $39&255;
    HEAP8[$this>>0] = $40;
    break;
   } else {
    $38 = ((($this)) + 4|0);
    HEAP32[$38>>2] = $34;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(665|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $17 = $15;
   HEAP32[$__b>>2] = $17;
   $27 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $18 = $15;
   HEAP32[$__b>>2] = $18;
   $19 = ($$pr|0)==(0|0);
   if ($19) {
    $27 = $15;
   } else {
    $20 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($20|0,($$pr|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     $23 = ___cxa_find_matching_catch(0|0)|0;
     $24 = tempRet0;
     ___clang_call_terminate($23);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $27 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (744);
 $25 = $$ >>> 2;
 $26 = (($27) + ($13<<2)|0);
 HEAP32[$__n>>2] = $26;
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + ($25<<2)|0);
 HEAP32[$__e>>2] = $29;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$04 = 0, $phitmp$i = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$45 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$45 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 do {
  if (!($14)) {
   $15 = (($16) - ($17))|0;
   $18 = ($15>>>0)<($13>>>0);
   if ($18) {
    $19 = (($17) + ($13))|0;
    $20 = (($19) - ($16))|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $22 = $$pre;
   } else {
    $22 = $45;
   }
   $21 = $22 & 1;
   $23 = ($21<<24>>24)==(0);
   if ($23) {
    $26 = ((($this)) + 4|0);
    $33 = $26;
   } else {
    $24 = ((($this)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $33 = $25;
   }
   $27 = $__last;
   $28 = (($27) - ($0))|0;
   $29 = $28 >>> 2;
   $30 = (($17) + ($29))|0;
   $31 = ($__first|0)==($__last|0);
   if (!($31)) {
    $32 = (($33) + ($17<<2)|0);
    $$03 = $__first;$__p$04 = $32;
    while(1) {
     $34 = HEAP32[$$03>>2]|0;
     HEAP32[$__p$04>>2] = $34;
     $35 = ((($__p$04)) + 4|0);
     $36 = ((($$03)) + 4|0);
     $37 = ($36|0)==($__last|0);
     if ($37) {
      break;
     } else {
      $$03 = $36;$__p$04 = $35;
     }
    }
   }
   $scevgep = (($33) + ($30<<2)|0);
   HEAP32[$scevgep>>2] = 0;
   $38 = (($17) + ($13))|0;
   $39 = HEAP8[$this>>0]|0;
   $40 = $39 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $43 = $38 << 1;
    $44 = $43&255;
    HEAP8[$this>>0] = $44;
    break;
   } else {
    $42 = ((($this)) + 4|0);
    HEAP32[$42>>2] = $38;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 do {
  if (!($3)) {
   __THREW__ = 0;
   invoke_vii(745,($this|0),($__n|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $6 = ___cxa_find_matching_catch()|0;
    $7 = tempRet0;
    __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
    ___resumeException($6|0);
    // unreachable;
   } else {
    __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10792)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10832)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11864)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11856)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11924)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11932)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11988)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11996)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12004)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12012)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10904)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10976)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11036)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11096)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11408)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11472)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11536)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11600)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11636)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11672)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11708)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11744)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11188)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11280)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11312)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11344)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11784)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11824)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$lcssa = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if (!($1)) {
   $2 = ((($this)) + 4|0);
   $$pre$i$i = HEAP32[$2>>2]|0;
   $3 = ($$pre$i$i|0)==($0|0);
   if (!($3)) {
    $5 = $$pre$i$i;
    while(1) {
     $4 = ((($5)) + -4|0);
     $6 = ($4|0)==($0|0);
     if ($6) {
      $$lcssa = $4;
      break;
     } else {
      $5 = $4;
     }
    }
    HEAP32[$2>>2] = $$lcssa;
   }
   $7 = ((($this)) + 16|0);
   $8 = ($7|0)==($0|0);
   if ($8) {
    $9 = ((($this)) + 128|0);
    HEAP8[$9>>0] = 0;
    break;
   } else {
    __ZdlPv($0);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
 } else {
  $9 = ($6>>>0)>($__sz>>>0);
  if ($9) {
   $10 = (($2) + ($__sz<<2)|0);
   $11 = ($1|0)==($10|0);
   if (!($11)) {
    $13 = $1;
    while(1) {
     $12 = ((($13)) + -4|0);
     $14 = ($12|0)==($10|0);
     if ($14) {
      $$lcssa = $12;
      break;
     } else {
      $13 = $12;
     }
    }
    HEAP32[$0>>2] = $$lcssa;
   }
  }
 }
 return;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 if ($8) {
  $9 = (($3) + ($id<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 return ($12|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__vp)) + 4|0);
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $1 = HEAP32[$__vp>>2]|0;
 $2 = $$field2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$field2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$field;
  $10 = $9;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$field)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 FUNCTION_TABLE_vi[$10 & 1023]($3);
 return;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre1 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre1) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$0 = 1;
  } else {
   $5 = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = ((($6)) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = ((($8)) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $10 = $frm_end;
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $11 = ($$pre>>>0)<($frm_end>>>0);
   if ($11) {
    $13 = $$pre;
    while(1) {
     $12 = HEAP16[$13>>1]|0;
     $14 = $12&65535;
     $15 = ($14>>>0)>($Maxcode>>>0);
     if ($15) {
      $$0 = 2;
      break L4;
     }
     $16 = ($12&65535)<(128);
     do {
      if ($16) {
       $17 = HEAP32[$to_nxt>>2]|0;
       $18 = $17;
       $19 = (($$pre1) - ($18))|0;
       $20 = ($19|0)<(1);
       if ($20) {
        $$0 = 1;
        break L4;
       }
       $21 = $12&255;
       $22 = ((($17)) + 1|0);
       HEAP32[$to_nxt>>2] = $22;
       HEAP8[$17>>0] = $21;
      } else {
       $23 = ($12&65535)<(2048);
       if ($23) {
        $24 = HEAP32[$to_nxt>>2]|0;
        $25 = $24;
        $26 = (($$pre1) - ($25))|0;
        $27 = ($26|0)<(2);
        if ($27) {
         $$0 = 1;
         break L4;
        }
        $28 = $14 >>> 6;
        $29 = $28 | 192;
        $30 = $29&255;
        $31 = ((($24)) + 1|0);
        HEAP32[$to_nxt>>2] = $31;
        HEAP8[$24>>0] = $30;
        $32 = $14 & 63;
        $33 = $32 | 128;
        $34 = $33&255;
        $35 = HEAP32[$to_nxt>>2]|0;
        $36 = ((($35)) + 1|0);
        HEAP32[$to_nxt>>2] = $36;
        HEAP8[$35>>0] = $34;
        break;
       }
       $37 = ($12&65535)<(55296);
       if ($37) {
        $38 = HEAP32[$to_nxt>>2]|0;
        $39 = $38;
        $40 = (($$pre1) - ($39))|0;
        $41 = ($40|0)<(3);
        if ($41) {
         $$0 = 1;
         break L4;
        }
        $42 = $14 >>> 12;
        $43 = $42 | 224;
        $44 = $43&255;
        $45 = ((($38)) + 1|0);
        HEAP32[$to_nxt>>2] = $45;
        HEAP8[$38>>0] = $44;
        $46 = $14 >>> 6;
        $47 = $46 & 63;
        $48 = $47 | 128;
        $49 = $48&255;
        $50 = HEAP32[$to_nxt>>2]|0;
        $51 = ((($50)) + 1|0);
        HEAP32[$to_nxt>>2] = $51;
        HEAP8[$50>>0] = $49;
        $52 = $14 & 63;
        $53 = $52 | 128;
        $54 = $53&255;
        $55 = HEAP32[$to_nxt>>2]|0;
        $56 = ((($55)) + 1|0);
        HEAP32[$to_nxt>>2] = $56;
        HEAP8[$55>>0] = $54;
        break;
       }
       $57 = ($12&65535)<(56320);
       if (!($57)) {
        $109 = ($12&65535)<(57344);
        if ($109) {
         $$0 = 2;
         break L4;
        }
        $110 = HEAP32[$to_nxt>>2]|0;
        $111 = $110;
        $112 = (($$pre1) - ($111))|0;
        $113 = ($112|0)<(3);
        if ($113) {
         $$0 = 1;
         break L4;
        }
        $114 = $14 >>> 12;
        $115 = $114 | 224;
        $116 = $115&255;
        $117 = ((($110)) + 1|0);
        HEAP32[$to_nxt>>2] = $117;
        HEAP8[$110>>0] = $116;
        $118 = $14 >>> 6;
        $119 = $118 & 63;
        $120 = $119 | 128;
        $121 = $120&255;
        $122 = HEAP32[$to_nxt>>2]|0;
        $123 = ((($122)) + 1|0);
        HEAP32[$to_nxt>>2] = $123;
        HEAP8[$122>>0] = $121;
        $124 = $14 & 63;
        $125 = $124 | 128;
        $126 = $125&255;
        $127 = HEAP32[$to_nxt>>2]|0;
        $128 = ((($127)) + 1|0);
        HEAP32[$to_nxt>>2] = $128;
        HEAP8[$127>>0] = $126;
        break;
       }
       $58 = $13;
       $59 = (($10) - ($58))|0;
       $60 = ($59|0)<(4);
       if ($60) {
        $$0 = 1;
        break L4;
       }
       $61 = ((($13)) + 2|0);
       $62 = HEAP16[$61>>1]|0;
       $63 = $62&65535;
       $64 = $63 & 64512;
       $65 = ($64|0)==(56320);
       if (!($65)) {
        $$0 = 2;
        break L4;
       }
       $66 = HEAP32[$to_nxt>>2]|0;
       $67 = $66;
       $68 = (($$pre1) - ($67))|0;
       $69 = ($68|0)<(4);
       if ($69) {
        $$0 = 1;
        break L4;
       }
       $70 = $14 & 960;
       $71 = $70 << 10;
       $72 = (($71) + 65536)|0;
       $73 = $14 << 10;
       $74 = $73 & 64512;
       $75 = $72 | $74;
       $76 = $63 & 1023;
       $77 = $75 | $76;
       $78 = ($77>>>0)>($Maxcode>>>0);
       if ($78) {
        $$0 = 2;
        break L4;
       }
       HEAP32[$frm_nxt>>2] = $61;
       $79 = $70 >>> 6;
       $80 = (($79) + 1)|0;
       $81 = $80 >>> 2;
       $82 = $81 | 240;
       $83 = $82&255;
       $84 = HEAP32[$to_nxt>>2]|0;
       $85 = ((($84)) + 1|0);
       HEAP32[$to_nxt>>2] = $85;
       HEAP8[$84>>0] = $83;
       $86 = $80 << 4;
       $87 = $86 & 48;
       $88 = $14 >>> 2;
       $89 = $88 & 15;
       $90 = $89 | $87;
       $91 = $90 | 128;
       $92 = $91&255;
       $93 = HEAP32[$to_nxt>>2]|0;
       $94 = ((($93)) + 1|0);
       HEAP32[$to_nxt>>2] = $94;
       HEAP8[$93>>0] = $92;
       $95 = $14 << 4;
       $96 = $95 & 48;
       $97 = $63 >>> 6;
       $98 = $97 & 15;
       $99 = $96 | $98;
       $100 = $99 | 128;
       $101 = $100&255;
       $102 = HEAP32[$to_nxt>>2]|0;
       $103 = ((($102)) + 1|0);
       HEAP32[$to_nxt>>2] = $103;
       HEAP8[$102>>0] = $101;
       $104 = $63 & 63;
       $105 = $104 | 128;
       $106 = $105&255;
       $107 = HEAP32[$to_nxt>>2]|0;
       $108 = ((($107)) + 1|0);
       HEAP32[$to_nxt>>2] = $108;
       HEAP8[$107>>0] = $106;
      }
     } while(0);
     $129 = HEAP32[$frm_nxt>>2]|0;
     $130 = ((($129)) + 2|0);
     HEAP32[$frm_nxt>>2] = $130;
     $131 = ($130>>>0)<($frm_end>>>0);
     if ($131) {
      $13 = $130;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre4 = $frm_end;
  $$pre = $to;$$pre$phiZ2D = $$pre4;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = ((($2)) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = ((($2)) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$pre = HEAP32[$to_nxt>>2]|0;
      $$pre = $$pre$pre;$$pre$phiZ2D = $3;
     } else {
      $$pre = $to;$$pre$phiZ2D = $3;
     }
    } else {
     $$pre = $to;$$pre$phiZ2D = $3;
    }
   } else {
    $$pre = $to;$$pre$phiZ2D = $3;
   }
  } else {
   $$pre = $to;$$pre$phiZ2D = $3;
  }
 }
 $16 = $to_end;
 $17 = HEAP32[$frm_nxt>>2]|0;
 $18 = ($17>>>0)<($frm_end>>>0);
 $19 = ($$pre>>>0)<($to_end>>>0);
 $20 = $18 & $19;
 L9: do {
  if ($20) {
   $22 = $17;$27 = $$pre;
   while(1) {
    $21 = HEAP8[$22>>0]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0 = 2;
     break L9;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$27>>1] = $26;
      $28 = ((($22)) + 1|0);
      HEAP32[$frm_nxt>>2] = $28;
     } else {
      $29 = ($21&255)<(194);
      if ($29) {
       $$0 = 2;
       break L9;
      }
      $30 = ($21&255)<(224);
      if ($30) {
       $31 = $22;
       $32 = (($$pre$phiZ2D) - ($31))|0;
       $33 = ($32|0)<(2);
       if ($33) {
        $$0 = 1;
        break L9;
       }
       $34 = ((($22)) + 1|0);
       $35 = HEAP8[$34>>0]|0;
       $36 = $35&255;
       $37 = $36 & 192;
       $38 = ($37|0)==(128);
       if (!($38)) {
        $$0 = 2;
        break L9;
       }
       $39 = $23 << 6;
       $40 = $39 & 1984;
       $41 = $36 & 63;
       $42 = $41 | $40;
       $43 = ($42>>>0)>($Maxcode>>>0);
       if ($43) {
        $$0 = 2;
        break L9;
       }
       $44 = $42&65535;
       HEAP16[$27>>1] = $44;
       $45 = ((($22)) + 2|0);
       HEAP32[$frm_nxt>>2] = $45;
       break;
      }
      $46 = ($21&255)<(240);
      if ($46) {
       $47 = $22;
       $48 = (($$pre$phiZ2D) - ($47))|0;
       $49 = ($48|0)<(3);
       if ($49) {
        $$0 = 1;
        break L9;
       }
       $50 = ((($22)) + 1|0);
       $51 = HEAP8[$50>>0]|0;
       $52 = ((($22)) + 2|0);
       $53 = HEAP8[$52>>0]|0;
       switch ($23|0) {
       case 224:  {
        $54 = $51 & -32;
        $55 = ($54<<24>>24)==(-96);
        if (!($55)) {
         $$0 = 2;
         break L9;
        }
        break;
       }
       case 237:  {
        $56 = $51 & -32;
        $57 = ($56<<24>>24)==(-128);
        if (!($57)) {
         $$0 = 2;
         break L9;
        }
        break;
       }
       default: {
        $58 = $51 & -64;
        $59 = ($58<<24>>24)==(-128);
        if (!($59)) {
         $$0 = 2;
         break L9;
        }
       }
       }
       $60 = $53&255;
       $61 = $60 & 192;
       $62 = ($61|0)==(128);
       if (!($62)) {
        $$0 = 2;
        break L9;
       }
       $63 = $23 << 12;
       $64 = $51&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $60 & 63;
       $69 = $67 | $68;
       $70 = $69 & 65535;
       $71 = ($70>>>0)>($Maxcode>>>0);
       if ($71) {
        $$0 = 2;
        break L9;
       }
       $72 = $69&65535;
       HEAP16[$27>>1] = $72;
       $73 = ((($22)) + 3|0);
       HEAP32[$frm_nxt>>2] = $73;
       break;
      }
      $74 = ($21&255)<(245);
      if (!($74)) {
       $$0 = 2;
       break L9;
      }
      $75 = $22;
      $76 = (($$pre$phiZ2D) - ($75))|0;
      $77 = ($76|0)<(4);
      if ($77) {
       $$0 = 1;
       break L9;
      }
      $78 = ((($22)) + 1|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = ((($22)) + 2|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = ((($22)) + 3|0);
      $83 = HEAP8[$82>>0]|0;
      switch ($23|0) {
      case 240:  {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        $$0 = 2;
        break L9;
       }
       break;
      }
      case 244:  {
       $85 = $79 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        $$0 = 2;
        break L9;
       }
       break;
      }
      default: {
       $87 = $79 & -64;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        $$0 = 2;
        break L9;
       }
      }
      }
      $89 = $81&255;
      $90 = $89 & 192;
      $91 = ($90|0)==(128);
      if (!($91)) {
       $$0 = 2;
       break L9;
      }
      $92 = $83&255;
      $93 = $92 & 192;
      $94 = ($93|0)==(128);
      if (!($94)) {
       $$0 = 2;
       break L9;
      }
      $95 = $27;
      $96 = (($16) - ($95))|0;
      $97 = ($96|0)<(4);
      if ($97) {
       $$0 = 1;
       break L9;
      }
      $98 = $23 & 7;
      $99 = $98 << 18;
      $100 = $79&255;
      $101 = $100 << 12;
      $102 = $101 & 258048;
      $103 = $102 | $99;
      $104 = $89 << 6;
      $105 = $104 & 4032;
      $106 = $103 | $105;
      $107 = $92 & 63;
      $108 = $106 | $107;
      $109 = ($108>>>0)>($Maxcode>>>0);
      if ($109) {
       $$0 = 2;
       break L9;
      }
      $110 = $98 << 2;
      $111 = $100 >>> 4;
      $112 = $111 & 3;
      $113 = $112 | $110;
      $114 = $113 << 6;
      $115 = (($114) + 16320)|0;
      $116 = $100 << 2;
      $117 = $116 & 60;
      $118 = $89 >>> 4;
      $119 = $118 & 3;
      $120 = $117 | $119;
      $121 = $120 | $115;
      $122 = $121 | 55296;
      $123 = $122&65535;
      HEAP16[$27>>1] = $123;
      $124 = $104 & 960;
      $125 = $107 | $124;
      $126 = $125 | 56320;
      $127 = $126&65535;
      $128 = ((($27)) + 2|0);
      HEAP32[$to_nxt>>2] = $128;
      HEAP16[$128>>1] = $127;
      $129 = HEAP32[$frm_nxt>>2]|0;
      $130 = ((($129)) + 4|0);
      HEAP32[$frm_nxt>>2] = $130;
     }
    } while(0);
    $131 = HEAP32[$to_nxt>>2]|0;
    $132 = ((($131)) + 2|0);
    HEAP32[$to_nxt>>2] = $132;
    $133 = HEAP32[$frm_nxt>>2]|0;
    $134 = ($133>>>0)<($frm_end>>>0);
    $135 = ($132>>>0)<($to_end>>>0);
    $136 = $134 & $135;
    if ($136) {
     $22 = $133;$27 = $132;
    } else {
     $$lcssa = $134;
     label = 39;
     break;
    }
   }
  } else {
   $$lcssa = $18;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $137 = $$lcssa&1;
  $$0 = $137;
 }
 return ($$0|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$lcssa86 = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$150 = 0, $frm_nxt$2 = 0, $nchar16_t$049 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = $frm_end;
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm;
  $3 = (($$pre) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = ((($frm)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = ((($frm)) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = ((($frm)) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $14 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $15 = ($mx|0)!=(0);
 $or$cond48 = $15 & $14;
 L7: do {
  if ($or$cond48) {
   $frm_nxt$150 = $frm_nxt$1$ph;$nchar16_t$049 = 0;
   L8: while(1) {
    $16 = HEAP8[$frm_nxt$150>>0]|0;
    $17 = $16&255;
    $18 = ($17>>>0)>($Maxcode>>>0);
    if ($18) {
     $frm_nxt$1$lcssa = $frm_nxt$150;
     label = 42;
     break L7;
    }
    $19 = ($16<<24>>24)>(-1);
    do {
     if ($19) {
      $20 = ((($frm_nxt$150)) + 1|0);
      $frm_nxt$2 = $20;$nchar16_t$1 = $nchar16_t$049;
     } else {
      $21 = ($16&255)<(194);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $22 = ($16&255)<(224);
      if ($22) {
       $23 = $frm_nxt$150;
       $24 = (($$pre) - ($23))|0;
       $25 = ($24|0)<(2);
       if ($25) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $26 = ((($frm_nxt$150)) + 1|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = $27&255;
       $29 = $28 & 192;
       $30 = ($29|0)==(128);
       if (!($30)) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $31 = $17 << 6;
       $32 = $31 & 1984;
       $33 = $28 & 63;
       $34 = $33 | $32;
       $35 = ($34>>>0)>($Maxcode>>>0);
       if ($35) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $36 = ((($frm_nxt$150)) + 2|0);
       $frm_nxt$2 = $36;$nchar16_t$1 = $nchar16_t$049;
       break;
      }
      $37 = ($16&255)<(240);
      if ($37) {
       $38 = $frm_nxt$150;
       $39 = (($$pre) - ($38))|0;
       $40 = ($39|0)<(3);
       if ($40) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $41 = ((($frm_nxt$150)) + 1|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = ((($frm_nxt$150)) + 2|0);
       $44 = HEAP8[$43>>0]|0;
       switch ($17|0) {
       case 224:  {
        $45 = $42 & -32;
        $46 = ($45<<24>>24)==(-96);
        if (!($46)) {
         $$lcssa85 = $38;
         label = 20;
         break L8;
        }
        break;
       }
       case 237:  {
        $49 = $42 & -32;
        $50 = ($49<<24>>24)==(-128);
        if (!($50)) {
         $$lcssa84 = $38;
         label = 22;
         break L8;
        }
        break;
       }
       default: {
        $53 = $42 & -64;
        $54 = ($53<<24>>24)==(-128);
        if (!($54)) {
         $$lcssa86 = $38;
         label = 24;
         break L8;
        }
       }
       }
       $57 = $44&255;
       $58 = $57 & 192;
       $59 = ($58|0)==(128);
       if (!($59)) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $60 = $17 << 12;
       $61 = $60 & 61440;
       $62 = $42&255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = ($67>>>0)>($Maxcode>>>0);
       if ($68) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $69 = ((($frm_nxt$150)) + 3|0);
       $frm_nxt$2 = $69;$nchar16_t$1 = $nchar16_t$049;
       break;
      }
      $70 = ($16&255)<(245);
      if (!($70)) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $71 = $frm_nxt$150;
      $72 = (($$pre) - ($71))|0;
      $73 = ($72|0)<(4);
      $74 = (($mx) - ($nchar16_t$049))|0;
      $75 = ($74>>>0)<(2);
      $or$cond2 = $75 | $73;
      if ($or$cond2) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $76 = ((($frm_nxt$150)) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = ((($frm_nxt$150)) + 2|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = ((($frm_nxt$150)) + 3|0);
      $81 = HEAP8[$80>>0]|0;
      switch ($17|0) {
      case 240:  {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        $$lcssa82 = $71;
        label = 32;
        break L8;
       }
       break;
      }
      case 244:  {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        $$lcssa = $71;
        label = 34;
        break L8;
       }
       break;
      }
      default: {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        $$lcssa83 = $71;
        label = 36;
        break L8;
       }
      }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $99 = $17 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $111 = (($nchar16_t$049) + 1)|0;
      $112 = ((($frm_nxt$150)) + 4|0);
      $frm_nxt$2 = $112;$nchar16_t$1 = $111;
     }
    } while(0);
    $113 = (($nchar16_t$1) + 1)|0;
    $114 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $115 = ($113>>>0)<($mx>>>0);
    $or$cond = $115 & $114;
    if ($or$cond) {
     $frm_nxt$150 = $frm_nxt$2;$nchar16_t$049 = $113;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     label = 42;
     break L7;
    }
   }
   if ((label|0) == 20) {
    $47 = $frm;
    $48 = (($$lcssa85) - ($47))|0;
    $$0 = $48;
    break;
   }
   else if ((label|0) == 22) {
    $51 = $frm;
    $52 = (($$lcssa84) - ($51))|0;
    $$0 = $52;
    break;
   }
   else if ((label|0) == 24) {
    $55 = $frm;
    $56 = (($$lcssa86) - ($55))|0;
    $$0 = $56;
    break;
   }
   else if ((label|0) == 32) {
    $83 = $frm;
    $84 = (($$lcssa82) - ($83))|0;
    $$0 = $84;
    break;
   }
   else if ((label|0) == 34) {
    $87 = $frm;
    $88 = (($$lcssa) - ($87))|0;
    $$0 = $88;
    break;
   }
   else if ((label|0) == 36) {
    $91 = $frm;
    $92 = (($$lcssa83) - ($91))|0;
    $$0 = $92;
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
   label = 42;
  }
 } while(0);
 if ((label|0) == 42) {
  $116 = $frm_nxt$1$lcssa;
  $117 = $frm;
  $118 = (($116) - ($117))|0;
  $$0 = $118;
 }
 return ($$0|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre1 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre1) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$0 = 1;
  } else {
   $5 = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = ((($6)) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = ((($8)) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $10 = ($$pre>>>0)<($frm_end>>>0);
   if ($10) {
    $12 = $$pre;
    while(1) {
     $11 = HEAP32[$12>>2]|0;
     $13 = $11 & -2048;
     $14 = ($13|0)==(55296);
     $15 = ($11>>>0)>($Maxcode>>>0);
     $or$cond = $15 | $14;
     if ($or$cond) {
      $$0 = 2;
      break L4;
     }
     $16 = ($11>>>0)<(128);
     do {
      if ($16) {
       $17 = HEAP32[$to_nxt>>2]|0;
       $18 = $17;
       $19 = (($$pre1) - ($18))|0;
       $20 = ($19|0)<(1);
       if ($20) {
        $$0 = 1;
        break L4;
       }
       $21 = $11&255;
       $22 = ((($17)) + 1|0);
       HEAP32[$to_nxt>>2] = $22;
       HEAP8[$17>>0] = $21;
      } else {
       $23 = ($11>>>0)<(2048);
       if ($23) {
        $24 = HEAP32[$to_nxt>>2]|0;
        $25 = $24;
        $26 = (($$pre1) - ($25))|0;
        $27 = ($26|0)<(2);
        if ($27) {
         $$0 = 1;
         break L4;
        }
        $28 = $11 >>> 6;
        $29 = $28 | 192;
        $30 = $29&255;
        $31 = ((($24)) + 1|0);
        HEAP32[$to_nxt>>2] = $31;
        HEAP8[$24>>0] = $30;
        $32 = $11 & 63;
        $33 = $32 | 128;
        $34 = $33&255;
        $35 = HEAP32[$to_nxt>>2]|0;
        $36 = ((($35)) + 1|0);
        HEAP32[$to_nxt>>2] = $36;
        HEAP8[$35>>0] = $34;
        break;
       }
       $37 = ($11>>>0)<(65536);
       $38 = HEAP32[$to_nxt>>2]|0;
       $39 = $38;
       $40 = (($$pre1) - ($39))|0;
       if ($37) {
        $41 = ($40|0)<(3);
        if ($41) {
         $$0 = 1;
         break L4;
        }
        $42 = $11 >>> 12;
        $43 = $42 | 224;
        $44 = $43&255;
        $45 = ((($38)) + 1|0);
        HEAP32[$to_nxt>>2] = $45;
        HEAP8[$38>>0] = $44;
        $46 = $11 >>> 6;
        $47 = $46 & 63;
        $48 = $47 | 128;
        $49 = $48&255;
        $50 = HEAP32[$to_nxt>>2]|0;
        $51 = ((($50)) + 1|0);
        HEAP32[$to_nxt>>2] = $51;
        HEAP8[$50>>0] = $49;
        $52 = $11 & 63;
        $53 = $52 | 128;
        $54 = $53&255;
        $55 = HEAP32[$to_nxt>>2]|0;
        $56 = ((($55)) + 1|0);
        HEAP32[$to_nxt>>2] = $56;
        HEAP8[$55>>0] = $54;
        break;
       } else {
        $57 = ($40|0)<(4);
        if ($57) {
         $$0 = 1;
         break L4;
        }
        $58 = $11 >>> 18;
        $59 = $58 | 240;
        $60 = $59&255;
        $61 = ((($38)) + 1|0);
        HEAP32[$to_nxt>>2] = $61;
        HEAP8[$38>>0] = $60;
        $62 = $11 >>> 12;
        $63 = $62 & 63;
        $64 = $63 | 128;
        $65 = $64&255;
        $66 = HEAP32[$to_nxt>>2]|0;
        $67 = ((($66)) + 1|0);
        HEAP32[$to_nxt>>2] = $67;
        HEAP8[$66>>0] = $65;
        $68 = $11 >>> 6;
        $69 = $68 & 63;
        $70 = $69 | 128;
        $71 = $70&255;
        $72 = HEAP32[$to_nxt>>2]|0;
        $73 = ((($72)) + 1|0);
        HEAP32[$to_nxt>>2] = $73;
        HEAP8[$72>>0] = $71;
        $74 = $11 & 63;
        $75 = $74 | 128;
        $76 = $75&255;
        $77 = HEAP32[$to_nxt>>2]|0;
        $78 = ((($77)) + 1|0);
        HEAP32[$to_nxt>>2] = $78;
        HEAP8[$77>>0] = $76;
        break;
       }
      }
     } while(0);
     $79 = HEAP32[$frm_nxt>>2]|0;
     $80 = ((($79)) + 4|0);
     HEAP32[$frm_nxt>>2] = $80;
     $81 = ($80>>>0)<($frm_end>>>0);
     if ($81) {
      $12 = $80;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre4 = $frm_end;
  $$pre = $to;$$pre$phiZ2D = $$pre4;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = ((($2)) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = ((($2)) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$pre = HEAP32[$to_nxt>>2]|0;
      $$pre = $$pre$pre;$$pre$phiZ2D = $3;
     } else {
      $$pre = $to;$$pre$phiZ2D = $3;
     }
    } else {
     $$pre = $to;$$pre$phiZ2D = $3;
    }
   } else {
    $$pre = $to;$$pre$phiZ2D = $3;
   }
  } else {
   $$pre = $to;$$pre$phiZ2D = $3;
  }
 }
 $16 = HEAP32[$frm_nxt>>2]|0;
 $17 = ($16>>>0)<($frm_end>>>0);
 $18 = ($$pre>>>0)<($to_end>>>0);
 $19 = $17 & $18;
 L9: do {
  if ($19) {
   $21 = $16;$25 = $$pre;
   while(1) {
    $20 = HEAP8[$21>>0]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0 = 2;
       break L9;
      }
      HEAP32[$25>>2] = $22;
      $26 = ((($21)) + 1|0);
      HEAP32[$frm_nxt>>2] = $26;
     } else {
      $27 = ($20&255)<(194);
      if ($27) {
       $$0 = 2;
       break L9;
      }
      $28 = ($20&255)<(224);
      if ($28) {
       $29 = $21;
       $30 = (($$pre$phiZ2D) - ($29))|0;
       $31 = ($30|0)<(2);
       if ($31) {
        $$0 = 1;
        break L9;
       }
       $32 = ((($21)) + 1|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = $33&255;
       $35 = $34 & 192;
       $36 = ($35|0)==(128);
       if (!($36)) {
        $$0 = 2;
        break L9;
       }
       $37 = $22 << 6;
       $38 = $37 & 1984;
       $39 = $34 & 63;
       $40 = $39 | $38;
       $41 = ($40>>>0)>($Maxcode>>>0);
       if ($41) {
        $$0 = 2;
        break L9;
       }
       HEAP32[$25>>2] = $40;
       $42 = ((($21)) + 2|0);
       HEAP32[$frm_nxt>>2] = $42;
       break;
      }
      $43 = ($20&255)<(240);
      if ($43) {
       $44 = $21;
       $45 = (($$pre$phiZ2D) - ($44))|0;
       $46 = ($45|0)<(3);
       if ($46) {
        $$0 = 1;
        break L9;
       }
       $47 = ((($21)) + 1|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = ((($21)) + 2|0);
       $50 = HEAP8[$49>>0]|0;
       switch ($22|0) {
       case 224:  {
        $51 = $48 & -32;
        $52 = ($51<<24>>24)==(-96);
        if (!($52)) {
         $$0 = 2;
         break L9;
        }
        break;
       }
       case 237:  {
        $53 = $48 & -32;
        $54 = ($53<<24>>24)==(-128);
        if (!($54)) {
         $$0 = 2;
         break L9;
        }
        break;
       }
       default: {
        $55 = $48 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         break L9;
        }
       }
       }
       $57 = $50&255;
       $58 = $57 & 192;
       $59 = ($58|0)==(128);
       if (!($59)) {
        $$0 = 2;
        break L9;
       }
       $60 = $22 << 12;
       $61 = $60 & 61440;
       $62 = $48&255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = ($67>>>0)>($Maxcode>>>0);
       if ($68) {
        $$0 = 2;
        break L9;
       }
       HEAP32[$25>>2] = $67;
       $69 = ((($21)) + 3|0);
       HEAP32[$frm_nxt>>2] = $69;
       break;
      }
      $70 = ($20&255)<(245);
      if (!($70)) {
       $$0 = 2;
       break L9;
      }
      $71 = $21;
      $72 = (($$pre$phiZ2D) - ($71))|0;
      $73 = ($72|0)<(4);
      if ($73) {
       $$0 = 1;
       break L9;
      }
      $74 = ((($21)) + 1|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = ((($21)) + 2|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = ((($21)) + 3|0);
      $79 = HEAP8[$78>>0]|0;
      switch ($22|0) {
      case 240:  {
       $$off = (($75) + 112)<<24>>24;
       $80 = ($$off&255)<(48);
       if (!($80)) {
        $$0 = 2;
        break L9;
       }
       break;
      }
      case 244:  {
       $81 = $75 & -16;
       $82 = ($81<<24>>24)==(-128);
       if (!($82)) {
        $$0 = 2;
        break L9;
       }
       break;
      }
      default: {
       $83 = $75 & -64;
       $84 = ($83<<24>>24)==(-128);
       if (!($84)) {
        $$0 = 2;
        break L9;
       }
      }
      }
      $85 = $77&255;
      $86 = $85 & 192;
      $87 = ($86|0)==(128);
      if (!($87)) {
       $$0 = 2;
       break L9;
      }
      $88 = $79&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       break L9;
      }
      $91 = $22 << 18;
      $92 = $91 & 1835008;
      $93 = $75&255;
      $94 = $93 << 12;
      $95 = $94 & 258048;
      $96 = $95 | $92;
      $97 = $85 << 6;
      $98 = $97 & 4032;
      $99 = $96 | $98;
      $100 = $88 & 63;
      $101 = $99 | $100;
      $102 = ($101>>>0)>($Maxcode>>>0);
      if ($102) {
       $$0 = 2;
       break L9;
      }
      HEAP32[$25>>2] = $101;
      $103 = ((($21)) + 4|0);
      HEAP32[$frm_nxt>>2] = $103;
     }
    } while(0);
    $104 = HEAP32[$to_nxt>>2]|0;
    $105 = ((($104)) + 4|0);
    HEAP32[$to_nxt>>2] = $105;
    $106 = HEAP32[$frm_nxt>>2]|0;
    $107 = ($106>>>0)<($frm_end>>>0);
    $108 = ($105>>>0)<($to_end>>>0);
    $109 = $107 & $108;
    if ($109) {
     $21 = $106;$25 = $105;
    } else {
     $$lcssa = $107;
     label = 38;
     break;
    }
   }
  } else {
   $$lcssa = $17;
   label = 38;
  }
 } while(0);
 if ((label|0) == 38) {
  $110 = $$lcssa&1;
  $$0 = $110;
 }
 return ($$0|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa80 = 0, $$lcssa81 = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$148 = 0, $frm_nxt$2 = 0, $nchar32_t$047 = 0, $or$cond = 0, $or$cond46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = $frm_end;
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm;
  $3 = (($$pre) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = ((($frm)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = ((($frm)) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = ((($frm)) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $14 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $15 = ($mx|0)!=(0);
 $or$cond46 = $15 & $14;
 L7: do {
  if ($or$cond46) {
   $frm_nxt$148 = $frm_nxt$1$ph;$nchar32_t$047 = 0;
   L8: while(1) {
    $16 = HEAP8[$frm_nxt$148>>0]|0;
    $17 = $16&255;
    $18 = ($16<<24>>24)>(-1);
    do {
     if ($18) {
      $19 = ($17>>>0)>($Maxcode>>>0);
      if ($19) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $20 = ((($frm_nxt$148)) + 1|0);
      $frm_nxt$2 = $20;
     } else {
      $21 = ($16&255)<(194);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $22 = ($16&255)<(224);
      if ($22) {
       $23 = $frm_nxt$148;
       $24 = (($$pre) - ($23))|0;
       $25 = ($24|0)<(2);
       if ($25) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $26 = ((($frm_nxt$148)) + 1|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = $27&255;
       $29 = $28 & 192;
       $30 = ($29|0)==(128);
       if (!($30)) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $31 = $17 << 6;
       $32 = $31 & 1984;
       $33 = $28 & 63;
       $34 = $33 | $32;
       $35 = ($34>>>0)>($Maxcode>>>0);
       if ($35) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $36 = ((($frm_nxt$148)) + 2|0);
       $frm_nxt$2 = $36;
       break;
      }
      $37 = ($16&255)<(240);
      if ($37) {
       $38 = $frm_nxt$148;
       $39 = (($$pre) - ($38))|0;
       $40 = ($39|0)<(3);
       if ($40) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $41 = ((($frm_nxt$148)) + 1|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = ((($frm_nxt$148)) + 2|0);
       $44 = HEAP8[$43>>0]|0;
       switch ($17|0) {
       case 224:  {
        $45 = $42 & -32;
        $46 = ($45<<24>>24)==(-96);
        if (!($46)) {
         $$lcssa83 = $38;
         label = 20;
         break L8;
        }
        break;
       }
       case 237:  {
        $49 = $42 & -32;
        $50 = ($49<<24>>24)==(-128);
        if (!($50)) {
         $$lcssa82 = $38;
         label = 22;
         break L8;
        }
        break;
       }
       default: {
        $53 = $42 & -64;
        $54 = ($53<<24>>24)==(-128);
        if (!($54)) {
         $$lcssa84 = $38;
         label = 24;
         break L8;
        }
       }
       }
       $57 = $44&255;
       $58 = $57 & 192;
       $59 = ($58|0)==(128);
       if (!($59)) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $60 = $17 << 12;
       $61 = $60 & 61440;
       $62 = $42&255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = ($67>>>0)>($Maxcode>>>0);
       if ($68) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $69 = ((($frm_nxt$148)) + 3|0);
       $frm_nxt$2 = $69;
       break;
      }
      $70 = ($16&255)<(245);
      if (!($70)) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $71 = $frm_nxt$148;
      $72 = (($$pre) - ($71))|0;
      $73 = ($72|0)<(4);
      if ($73) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $74 = ((($frm_nxt$148)) + 1|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = ((($frm_nxt$148)) + 2|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = ((($frm_nxt$148)) + 3|0);
      $79 = HEAP8[$78>>0]|0;
      switch ($17|0) {
      case 240:  {
       $$off = (($75) + 112)<<24>>24;
       $80 = ($$off&255)<(48);
       if (!($80)) {
        $$lcssa80 = $71;
        label = 32;
        break L8;
       }
       break;
      }
      case 244:  {
       $83 = $75 & -16;
       $84 = ($83<<24>>24)==(-128);
       if (!($84)) {
        $$lcssa = $71;
        label = 34;
        break L8;
       }
       break;
      }
      default: {
       $87 = $75 & -64;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        $$lcssa81 = $71;
        label = 36;
        break L8;
       }
      }
      }
      $91 = $77&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $94 = $79&255;
      $95 = $94 & 192;
      $96 = ($95|0)==(128);
      if (!($96)) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $97 = $17 << 18;
      $98 = $97 & 1835008;
      $99 = $75&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $91 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $94 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $109 = ((($frm_nxt$148)) + 4|0);
      $frm_nxt$2 = $109;
     }
    } while(0);
    $110 = (($nchar32_t$047) + 1)|0;
    $111 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $112 = ($110>>>0)<($mx>>>0);
    $or$cond = $112 & $111;
    if ($or$cond) {
     $frm_nxt$148 = $frm_nxt$2;$nchar32_t$047 = $110;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     label = 42;
     break L7;
    }
   }
   if ((label|0) == 20) {
    $47 = $frm;
    $48 = (($$lcssa83) - ($47))|0;
    $$0 = $48;
    break;
   }
   else if ((label|0) == 22) {
    $51 = $frm;
    $52 = (($$lcssa82) - ($51))|0;
    $$0 = $52;
    break;
   }
   else if ((label|0) == 24) {
    $55 = $frm;
    $56 = (($$lcssa84) - ($55))|0;
    $$0 = $56;
    break;
   }
   else if ((label|0) == 32) {
    $81 = $frm;
    $82 = (($$lcssa80) - ($81))|0;
    $$0 = $82;
    break;
   }
   else if ((label|0) == 34) {
    $85 = $frm;
    $86 = (($$lcssa) - ($85))|0;
    $$0 = $86;
    break;
   }
   else if ((label|0) == 36) {
    $89 = $frm;
    $90 = (($$lcssa81) - ($89))|0;
    $$0 = $90;
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
   label = 42;
  }
 } while(0);
 if ((label|0) == 42) {
  $113 = $frm_nxt$1$lcssa;
  $114 = $frm;
  $115 = (($113) - ($114))|0;
  $$0 = $115;
 }
 return ($$0|0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i1 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if ($8) {
  $9 = ((($this)) + 16|0);
  $10 = HEAP32[$this>>2]|0;
  $11 = $10;
  $12 = (($5) - ($11))|0;
  $13 = $12 >> 2;
  $14 = (($13) + ($__n))|0;
  $15 = ($14>>>0)>(1073741823);
  if ($15) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
   // unreachable;
  }
  $16 = (($4) - ($11))|0;
  $17 = $16 >> 2;
  $18 = ($17>>>0)<(536870911);
  if ($18) {
   $19 = $16 >> 1;
   $20 = ($19>>>0)<($14>>>0);
   $21 = $20 ? $14 : $19;
   $$0$i1 = $21;
  } else {
   $$0$i1 = 1073741823;
  }
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i1,$13,$9);
  $22 = ((($__v)) + 8|0);
  $$pre$i = HEAP32[$22>>2]|0;
  $23 = $__n << 2;
  _memset(($$pre$i|0),0,($23|0))|0;
  $scevgep = (($$pre$i) + ($__n<<2)|0);
  HEAP32[$22>>2] = $scevgep;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 } else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pre;
 while(1) {
  HEAP32[$1>>2] = 0;
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 4|0);
  HEAP32[$0>>2] = $3;
  $4 = (($$0) + -1)|0;
  $5 = ($4|0)==(0);
  if ($5) {
   break;
  } else {
   $$0 = $4;$1 = $3;
  }
 }
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = ((($__a)) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $$not$i$i = ($4<<24>>24)==(0);
   $5 = ($__cap>>>0)<(29);
   $or$cond$i$i = $5 & $$not$i$i;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (__Znwj($6)|0);
    $8 = $7;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $8;
 $9 = (($8) + ($__start<<2)|0);
 $10 = ((($this)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($this)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($__cap<<2)|0);
 $13 = ((($this)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__v)) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = ((($__v)) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = ((($this)) + 8|0);
 $17 = ((($__v)) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$lcssa = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $$pre$i$i$i = HEAP32[$2>>2]|0;
 $3 = ($$pre$i$i$i|0)==($1|0);
 if (!($3)) {
  $5 = $$pre$i$i$i;
  while(1) {
   $4 = ((($5)) + -4|0);
   $6 = ($4|0)==($1|0);
   if ($6) {
    $$lcssa = $4;
    break;
   } else {
    $5 = $4;
   }
  }
  HEAP32[$2>>2] = $$lcssa;
 }
 $7 = HEAP32[$this>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = ((($this)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($7|0);
   if ($11) {
    $12 = ((($10)) + 112|0);
    HEAP8[$12>>0] = 0;
    break;
   } else {
    __ZdlPv($7);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ((($this)) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $3 & $$not$i$i;
 if ($or$cond$i$i) {
  $4 = ((($this)) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = ((($this)) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = ((($this)) + 8|0);
 HEAP32[$9>>2] = $8;
 return;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
   }
   $10 = $4;
   $$0 = $10;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   if ($12) {
    HEAP32[$__err>>2] = 4;
    $13 = -1;$14 = -1;
   } else {
    $13 = $7;$14 = $6;
   }
  }
 } while(0);
 tempRet0 = ($13);
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(4294967295);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(4294967295);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(65535);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $18 = $6&65535;
    $$0 = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $18 = 0;$19 = 0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
   $5 = tempRet0;
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    HEAP32[$1>>2] = $2;
   }
   $8 = HEAP32[$__p2>>2]|0;
   $9 = ($8|0)==($__a_end|0);
   if (!($9)) {
    HEAP32[$__err>>2] = 4;
    $18 = 0;$19 = 0;
    break;
   }
   $10 = ($6|0)==(34);
   if ($10) {
    HEAP32[$__err>>2] = 4;
    $11 = ($5|0)>(0);
    $12 = ($4>>>0)>(0);
    $13 = ($5|0)==(0);
    $14 = $13 & $12;
    $15 = $11 | $14;
    $16 = $15 ? -1 : 0;
    $17 = $15 ? 2147483647 : -2147483648;
    tempRet0 = ($17);
    STACKTOP = sp;return ($16|0);
   } else {
    $18 = $5;$19 = $4;
   }
  }
 } while(0);
 tempRet0 = ($18);
 STACKTOP = sp;return ($19|0);
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 L1: do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
   $5 = tempRet0;
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    HEAP32[$1>>2] = $2;
   }
   $8 = HEAP32[$__p2>>2]|0;
   $9 = ($8|0)==($__a_end|0);
   if (!($9)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $10 = ($6|0)==(34);
   do {
    if ($10) {
     HEAP32[$__err>>2] = 4;
     $21 = ($5|0)>(0);
     $22 = ($4>>>0)>(0);
     $23 = ($5|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     if ($25) {
      $$0 = 2147483647;
      break L1;
     }
    } else {
     $11 = ($5|0)<(-1);
     $12 = ($4>>>0)<(2147483648);
     $13 = ($5|0)==(-1);
     $14 = $13 & $12;
     $15 = $11 | $14;
     if ($15) {
      HEAP32[$__err>>2] = 4;
      break;
     }
     $16 = ($5|0)>(0);
     $17 = ($4>>>0)>(2147483647);
     $18 = ($5|0)==(0);
     $19 = $18 & $17;
     $20 = $16 | $19;
     if ($20) {
      HEAP32[$__err>>2] = 4;
      $$0 = 2147483647;
      break L1;
     } else {
      $$0 = $4;
      break L1;
     }
    }
   } while(0);
   $$0 = -2147483648;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 1023]($this);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6124);
 $0 = ((($this)) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($msg)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($msg)) + 1|0);
 $7 = $3 ? $6 : $5;
 __THREW__ = 0;
 invoke_vii(746,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6124);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(746,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($msg)|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((15380|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((15408|0),(15380|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   HEAP32[$flag>>2] = 1;
   __THREW__ = 0;
   (invoke_ii(747,(15380|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    __THREW__ = 0;
    invoke_vi($func|0,($arg|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_ii(748,(15380|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      HEAP32[$flag>>2] = -1;
      __THREW__ = 0;
      (invoke_ii(747,(15380|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       __THREW__ = 0;
       (invoke_ii(749,(15408|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if (!($15)) {
        break;
       }
      }
     }
    }
   }
   $16 = ___cxa_find_matching_catch(0|0)|0;
   $17 = tempRet0;
   (___cxa_begin_catch(($16|0))|0);
   __THREW__ = 0;
   (invoke_ii(748,(15380|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    HEAP32[$flag>>2] = 0;
    __THREW__ = 0;
    (invoke_ii(747,(15380|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     __THREW__ = 0;
     (invoke_ii(749,(15408|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      __THREW__ = 0;
      invoke_v(439);
      $24 = __THREW__; __THREW__ = 0;
     }
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   __THREW__ = 0;
   invoke_v(440);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   } else {
    ___resumeException($25|0);
    // unreachable;
   }
  } else {
   (_pthread_mutex_unlock((15380|0))|0);
  }
 } while(0);
 return;
}
function runPostSets() {
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&1023](a1|0,+a2);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_viidii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viidii[index&1023](a1|0,a2|0,+a3,a4|0,a5|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_viidd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viidd[index&1023](a1|0,a2|0,+a3,+a4);
}


function dynCall_viidi(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0;
  FUNCTION_TABLE_viidi[index&511](a1|0,a2|0,+a3,a4|0);
}


function dynCall_id(index,a1) {
  index = index|0;
  a1=+a1;
  return FUNCTION_TABLE_id[index&1023](+a1)|0;
}


function dynCall_viddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viddd[index&511](a1|0,+a2,+a3,+a4);
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&1023](a1|0,+a2,+a3);
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
  FUNCTION_TABLE_viiiiiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&1023](a1|0);
}


function dynCall_viiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  FUNCTION_TABLE_viiiid[index&1023](a1|0,a2|0,a3|0,a4|0,+a5);
}


function dynCall_viiidi(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=a5|0;
  FUNCTION_TABLE_viiidi[index&1023](a1|0,a2|0,a3|0,+a4,a5|0);
}


function dynCall_vidddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  FUNCTION_TABLE_vidddd[index&511](a1|0,+a2,+a3,+a4,+a5);
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&1023](a1|0,a2|0,+a3);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  FUNCTION_TABLE_viiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_dii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return +FUNCTION_TABLE_dii[index&511](a1|0,a2|0);
}


function dynCall_vidddddd(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7;
  FUNCTION_TABLE_vidddddd[index&1023](a1|0,+a2,+a3,+a4,+a5,+a6,+a7);
}


function dynCall_d(index) {
  index = index|0;
  
  return +FUNCTION_TABLE_d[index&511]();
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_viiiidd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6;
  FUNCTION_TABLE_viiiidd[index&511](a1|0,a2|0,a3|0,a4|0,+a5,+a6);
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  FUNCTION_TABLE_viiid[index&511](a1|0,a2|0,a3|0,+a4);
}


function dynCall_vidiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_vidiii[index&1023](a1|0,+a2,a3|0,a4|0,a5|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&255](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_vdddi(index,a1,a2,a3,a4) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=a4|0;
  FUNCTION_TABLE_vdddi[index&1023](+a1,+a2,+a3,a4|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&1023](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(2);
}
function b3(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(3);
}
function _glFramebufferTexture2D__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _glFramebufferTexture2D(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function b4(p0) {
 p0 = p0|0; nullFunc_vi(4);
}
function _glDisableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _glDisableVertexAttribArray(p0|0);
}
function _glDeleteShader__wrapper(p0) {
 p0 = p0|0; _glDeleteShader(p0|0);
}
function _exit__wrapper(p0) {
 p0 = p0|0; _exit(p0|0);
}
function b5(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = p4|0; nullFunc_viidii(5);
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(6);
}
function _emscripten_log__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_log(p0|0,p1|0);
}
function _glDeleteBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glDeleteBuffers(p0|0,p1|0);
}
function _glDeleteTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glDeleteTextures(p0|0,p1|0);
}
function _glDeleteFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glDeleteFramebuffers(p0|0,p1|0);
}
function _glDeleteRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glDeleteRenderbuffers(p0|0,p1|0);
}
function _glGenBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glGenBuffers(p0|0,p1|0);
}
function _glBindBuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glBindBuffer(p0|0,p1|0);
}
function _glGenTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glGenTextures(p0|0,p1|0);
}
function _glBindTexture__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glBindTexture(p0|0,p1|0);
}
function _glGenRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glGenRenderbuffers(p0|0,p1|0);
}
function _glBindRenderbuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glBindRenderbuffer(p0|0,p1|0);
}
function _glGenFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glGenFramebuffers(p0|0,p1|0);
}
function _glBindFramebuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glBindFramebuffer(p0|0,p1|0);
}
function _emscripten_set_socket_error_callback__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_set_socket_error_callback(p0|0,p1|0);
}
function _emscripten_set_socket_open_callback__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_set_socket_open_callback(p0|0,p1|0);
}
function _emscripten_set_socket_close_callback__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_set_socket_close_callback(p0|0,p1|0);
}
function _emscripten_set_socket_message_callback__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_set_socket_message_callback(p0|0,p1|0);
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(7);return 0;
}
function b8(p0) {
 p0 = p0|0; nullFunc_ii(8);return 0;
}
function _gethostbyname__wrapper(p0) {
 p0 = p0|0; return _gethostbyname(p0|0)|0;
}
function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0;
}
function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_lock(p0|0)|0;
}
function _pthread_cond_broadcast__wrapper(p0) {
 p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0;
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3; nullFunc_viidd(9);
}
function b10(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0; nullFunc_viidi(10);
}
function b11(p0) {
 p0 = +p0; nullFunc_id(11);return 0;
}
function b12(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_viddd(12);
}
function _glUniform3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _glUniform3f(p0|0,+p1,+p2,+p3);
}
function b13(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(13);return 0;
}
function b14(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(14);
}
function b15(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(15);return 0;
}
function b16(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(16);
}
function b17(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(17);return +0;
}
function b18(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(18);
}
function _emscripten_set_main_loop__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_set_main_loop(p0|0,p1|0,p2|0);
}
function _glDrawArrays__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _glDrawArrays(p0|0,p1|0,p2|0);
}
function _glTexParameteri__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _glTexParameteri(p0|0,p1|0,p2|0);
}
function ___cxa_throw__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0);
}
function b19(p0) {
 p0 = p0|0; nullFunc_di(19);return +0;
}
function b20(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_viiiid(20);
}
function b21(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = p4|0; nullFunc_viiidi(21);
}
function b22(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_vidddd(22);
}
function b23(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(23);
}
function _glTexParameterf__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; _glTexParameterf(p0|0,p1|0,+p2);
}
function b24(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(24);
}
function b25(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(25);
}
function _glTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _glTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function b26(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(26);
}
function b27(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(27);return 0;
}
function _clock_gettime__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _clock_gettime(p0|0,p1|0)|0;
}
function b28(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(28);return 0;
}
function b29(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_dii(29);return +0;
}
function b30(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = +p6; nullFunc_vidddddd(30);
}
function b31() {
 ; nullFunc_d(31);return +0;
}
function b32(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(32);
}
function b33() {
 ; nullFunc_i(33);return 0;
}
function b34(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4;p5 = +p5; nullFunc_viiiidd(34);
}
function b35(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(35);return 0;
}
function b36(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_viiid(36);
}
function b37(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_vidiii(37);
}
function b38() {
 ; nullFunc_v(38);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_rethrow__wrapper() {
 ; ___cxa_rethrow();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b39(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(39);return 0;
}
function b40(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(40);return 0;
}
function b41(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = p3|0; nullFunc_vdddi(41);
}
function b42(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(42);
}
function ___assert_fail__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0);
}
function _glGetShaderInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _glGetProgramInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glGetProgramInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _glUniformMatrix4fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glUniformMatrix4fv(p0|0,p1|0,p2|0,p3|0);
}
function _glBufferData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glBufferData(p0|0,p1|0,p2|0,p3|0);
}
function _glRenderbufferStorage__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glRenderbufferStorage(p0|0,p1|0,p2|0,p3|0);
}
function _glFramebufferRenderbuffer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glFramebufferRenderbuffer(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b0,b0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b0,b0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiiiiid = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b1,b1,b1,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN3glm5tvec4IfLNS_9precisionE0EEC2Ef,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_viiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiiiEET_T0_T1_T2_,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN12InputHandler12key_callbackEP10GLFWwindowiiii,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,_glFramebufferTexture2D__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vi = [b4,__ZN16custom_exceptionD2Ev,__ZN16custom_exceptionD0Ev,b4,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN9exceptionD2Ev,__ZN9exceptionD0Ev,b4,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEED2Ev,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEED0Ev,b4,b4,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE7destroyEv,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE18destroy_deallocateEv,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEEclEv,b4,b4,__ZNSt3__110__function6__baseIFvvEED2Ev,__ZNSt3__110__function6__baseIFvvEED0Ev,b4,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EED2Ev,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EED0Ev,b4,b4,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EE7destroyEv,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EE18destroy_deallocateEv
,b4,b4,b4,__ZNSt3__110__function6__baseIFviPKcEED2Ev,__ZNSt3__110__function6__baseIFviPKcEED0Ev,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEED2Ev,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEED0Ev,b4,b4,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEE7destroyEv,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEE18destroy_deallocateEv,b4,b4,b4,__ZNSt3__110__function6__baseIFvPKciEED2Ev,__ZNSt3__110__function6__baseIFvPKciEED0Ev,__ZNSt3__117bad_function_callD2Ev,__ZNSt3__117bad_function_callD0Ev,b4,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b4,__ZNSt9exceptionD2Ev,__ZNSt9exceptionD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,b4,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b4
,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b4,b4,b4,b4,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b4,b4,b4,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__114error_categoryD2Ev,__ZNSt3__124__generic_error_categoryD0Ev,b4,b4,b4,b4,b4
,__ZNSt3__123__system_error_categoryD0Ev,b4,b4,b4,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b4,b4,b4,b4,b4,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD0Ev,b4,b4,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b4,b4,b4,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,b4,b4
,b4,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4
,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b4,b4,b4
,b4,b4,b4,b4,b4,b4,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev
,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,b4,b4,b4
,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,b4,b4,b4,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b4,b4
,b4,b4,b4,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b4,b4,b4,b4,b4,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b4,b4,b4,b4
,b4,b4,b4,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNK3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEE12validateThisEv,b4
,b4,b4,b4,b4,b4,__ZN3glm5tvec3IfLNS_9precisionE0EEC2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN5SceneC2Ev,b4,b4,__ZN5Scene6OnOpenEv,__ZN5Scene7OnCloseEv,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3glm5tvec4IfLNS_9precisionE0EEC2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_glDisableVertexAttribArray__wrapper,__ZN3glm7tmat4x4IfLNS_9precisionE0EEC2Ev,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,_glDeleteShader__wrapper,__ZN6Socket7cleanupEv,b4,b4,b4,b4,b4,b4,b4,__ZN12InputHandlerC2Ev,__ZN5TimerC2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,__ZN10MeshLoader4MeshC2Ev,b4,b4,b4,b4,b4,__ZN6Shader5ColorC2Ev,__ZN6Shader7TextureC2Ev,__ZN8Renderer9StarFieldC2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10MeshLoader6UVMapsC2Ev,b4
,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3gsl13static_boundsIJLin1EEEC2Ev,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,__ZN10MeshLoader6UVMaps7CleanUpEv,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,__ZN6Shader5Color13ReloadProgramEv,__ZN6Shader7Texture13ReloadProgramEv,b4,b4,b4,b4,b4,b4,b4,__ZN6Shader8RTShader13ReloadProgramEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_perror,_exit__wrapper,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b4,b4,_cleanup521,_cleanup526,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,_freelocale,b4,b4,__ZNSt3__112__do_nothingEPv,b4,__ZNSt3__121__throw_runtime_errorEPKc,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_free,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_viidii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3glm5tvec4IfLNS_9precisionE0EEC2IifiiEET_T0_T1_T2_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_vii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE7__cloneEPNS0_6__baseISA_EE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EE7__cloneEPNS0_6__baseISI_EE,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEE7__cloneEPNS0_6__baseISI_EE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv
,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b6,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b6,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b6,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b6,b6
,b6,b6,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b6,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__18messagesIcE8do_closeEi
,b6,b6,b6,b6,__ZNKSt3__18messagesIwE8do_closeEi,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b6,b6,b6,b6,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__113random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE7reserveEj,__ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEEC2Ej,__ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIRKjEEvOT_,__ZNSt3__16vectorIbNS_9allocatorIbEEEC2Ej,b6,__ZN3glm5tvec2IfLNS_9precisionE0EEC2IfLS1_0EEERKNS_5tvec3IT_XT0_EEE,b6,__ZN3glm9normalizeIfLNS_9precisionE0ENS_5tvec2EEET1_IT_XT0_EERKS5_
,b6,__ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEEC2Ej,__ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKS2_,b6,b6,b6,b6,b6,b6,__ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE,__ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE8allocateEj,__ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE18__construct_at_endEj,__ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8allocateEj,__ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endEj,b6,__ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE7reserveEj,b6,b6,__ZN5Asset5LayerC2EOS0_,__ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_,__ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_,__ZN5Asset5Layer7SurfaceC2EOS1_,__ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_,b6,__ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEEC2ERKS7_,__ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEEC2ERKS5_,__ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,b6,b6,b6
,__ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE8allocateEj,b6,__ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE8allocateEj,b6,__ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_,b6,__ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE8allocateEj,b6,b6,__ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEEC2ERKS7_,b6,__ZN16custom_exceptionC2EPKc,b6,_emscripten_log__wrapper,b6,__ZNSt3__16vectorIcNS_9allocatorIcEEE8allocateEj,__ZNSt3__16vectorIcNS_9allocatorIcEEE18__construct_at_endEj,__ZL7errorcbiPKc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,__ZNKSt3__16vectorI7MissileNS_9allocatorIS1_EEE17__annotate_shrinkEj,b6,b6,__ZN8Renderer9ParticlesC2EOS0_,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN3glm5tvec4IfLNS_9precisionE0EEC2ERKS2_,__ZN3glm7tmat4x4IfLNS_9precisionE0EEC2ENS_4ctorE,b6,__ZN7MissileC2ERKS_,__ZNSt3__16vectorI7MissileNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,__ZN3glmngIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_,b6,_glDeleteBuffers__wrapper,_glDeleteTextures__wrapper,_glDeleteFramebuffers__wrapper,_glDeleteRenderbuffers__wrapper,b6,b6,__ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE,__ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE,b6,__ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_glGenBuffers__wrapper,_glBindBuffer__wrapper,b6,b6,__ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE8allocateEj,b6,b6
,b6,b6,__ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_,b6,__ZL12ReadMeshFilePKcRN10MeshLoader4MeshE,b6,b6,b6,b6,b6,b6,b6,__ZN8Renderer4InitERK4AABB,b6,b6,b6,b6,__ZN12InputHandler21cursor_enter_callbackEP10GLFWwindowi,b6,b6,b6,__ZNSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE4seedEj,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__18ios_base4initEPv
,b6,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,b6,__ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv,__ZN9exceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b6,b6,b6,b6,b6,__ZNKSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE17__annotate_shrinkEj,__ZNKSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNKSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIPN5Asset5ModelENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,b6,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b6,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,b6,b6,b6,__ZNSt3__18ios_base5clearEj,b6,b6,_glGenTextures__wrapper,_glBindTexture__wrapper,b6,_glGenRenderbuffers__wrapper,_glBindRenderbuffer__wrapper,b6,_glGenFramebuffers__wrapper,_glBindFramebuffer__wrapper,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE7reserveEj,b6,b6,b6,b6,__ZNSt3__16vectorIhNS_9allocatorIhEEE8allocateEj,__ZNSt3__16vectorIhNS_9allocatorIhEEE18__construct_at_endEj,b6,b6,b6,b6,b6,__ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEE9push_backEOS3_,__ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEE10push_frontERKS3_,__ZNSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,b6,b6,b6,b6,b6
,b6,b6,__ZN6Socket6finishEi,b6,_emscripten_set_socket_error_callback__wrapper,b6,_emscripten_set_socket_open_callback__wrapper,__ZN6Socket13open_callbackEiPv,_emscripten_set_socket_close_callback__wrapper,__ZN6Socket14close_callbackEiPv,_emscripten_set_socket_message_callback__wrapper,__ZN6Socket16message_callbackEiPv,__ZNSt3__18functionIFvvEEC2ERKS2_,__ZNSt3__18functionIFviPKcEEC2ERKS4_,__ZNSt3__18functionIFvPKciEEC2ERKS4_,__ZN3gsl13static_boundsIJLin1EEEC2ESt16initializer_listIiE,__ZNKSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNKSt3__16vectorIN10MeshLoader7PolygonENS_9allocatorIS2_EEE17__annotate_shrinkEj,b6,__ZN3glm9normalizeIfLNS_9precisionE0ENS_5tvec3EEET1_IT_XT0_EERKS5_,b6,__ZNKSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endEj,b6,__ZNKSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE17__annotate_shrinkEj,__ZNKSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferIN10MeshLoader6UVMaps15st_SurfaceUVMapERNS_9allocatorIS3_EEE18__construct_at_endEj,__ZNSt3__16vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,__ZNSt3__114__split_bufferINS_6vectorIN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS4_EEEERNS5_IS7_EEE18__construct_at_endEj,__ZNSt3__16vectorINS0_IN10MeshLoader6UVMaps15st_SurfaceUVMapENS_9allocatorIS3_EEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE
,__ZNSt3__114__split_bufferIN10MeshLoader6NormalERNS_9allocatorIS2_EEE18__construct_at_endEj,__ZNSt3__16vectorIN10MeshLoader6NormalENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,b6,_abort_message,b6,b6,b6,b6,b6,b6,__ZNSt3__120__throw_system_errorEiPKc,b6,b6,b6,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b6,b6,b6,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt13runtime_errorC2EPKc,b6,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b6,b6,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b6,b6,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b6,b6,b6,b6,b6,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_
,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,b6,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,__ZNSt3__118__libcpp_refstringC2EPKc,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b7,b7,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b7,b7,b7
,b7,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b7,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b7,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b7,b7,b7,b7,b7,b7,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b7,b7,b7,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_ii = [b8,b8,b8,__ZNK16custom_exception4whatEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b8,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b8,b8,b8,b8,b8,__ZNKSt9exception4whatEv,b8,b8,__ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE7__cloneEv,b8,b8,b8,b8,b8,__ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE11target_typeEv,b8,b8,b8,b8,b8,__ZNKSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EE7__cloneEv,b8,b8,b8
,b8,b8,__ZNKSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EE11target_typeEv,b8,b8,b8,b8,__ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEE7__cloneEv,b8,b8,b8,b8,b8,__ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEE11target_typeEv,b8,b8,b8,b8,b8,b8,b8,__ZNKSt9bad_alloc4whatEv,b8,b8,b8,b8,__ZNKSt13runtime_error4whatEv,b8,b8,__ZNKSt8bad_cast4whatEv
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,___stdio_close,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__124__generic_error_category4nameEv,b8,b8,b8,b8
,b8,__ZNKSt3__123__system_error_category4nameEv,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__119__iostream_category4nameEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b8,b8,b8,b8,b8,b8,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv
,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b8,b8,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b8,b8,b8,b8,b8,b8,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b8
,b8,b8,b8,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b8,b8,b8,b8,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b8,b8,b8,b8,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b8,b8,b8,b8,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b8,b8,b8,b8,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b8,b8,b8,b8
,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b8,b8,b8,b8,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b8,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b8,b8,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv
,b8,b8,b8,b8,b8,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv
,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b8,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b8,b8,b8,b8,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b8,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b8,b8,b8,b8,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b8,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__Znwj,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__111char_traitsIcE6lengthEPKc,b8,__ZNSt3__113random_deviceclEv,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,_fclose,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__18ios_base6getlocEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_gethostbyname__wrapper,_htons,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,_uselocale,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_wcslen,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viidd = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,__ZN5Asset11ReconstructERN10MeshLoader4MeshEff,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viidi = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN3glm6rotateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S3_RKNS_5tvec3IS3_XT0_EEE,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_id = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__Z12__FLOAT_BITSf,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_viddd = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_glUniform3f__wrapper,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_iiiiiiiiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_vidd = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN12InputHandler19cursor_pos_callbackEP10GLFWwindowdd,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_iiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b15
,b15,b15,b15,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b15,b15,b15,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_sn_write,b15,___stdio_write,___stdio_seek,___stdout_write,b15,b15,b15,b15,b15,b15,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b15,b15,b15,b15
,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b15,b15
,b15,b15,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b15,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b15,b15,__ZNKSt3__15ctypeIcE9do_narrowEcc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__15ctypeIwE5do_isEtw,b15,b15,b15,b15,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b15,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b15,b15,__ZNKSt3__15ctypeIwE9do_narrowEwc,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN5Scene10GenTextureEjj,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,_fseek,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_socket,b15,b15,_fcntl,b15
,b15,_connect,b15,_inet_pton,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,_do_read,___stdio_read,b15,b15,b15,b15,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b15,b15,b15,b15,b15,b15,b15,b15,b15,_newlocale,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b15,b15,b15,b15,b15,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,_wcrtomb,b15,b15,_mbtowc,_mbrlen,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_vasprintf,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b16,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_diii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__119normal_distributionIdEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEdRT_RKNS1_10param_typeE,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_viii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EEclEOiOS5_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEEclEOS5_Oi,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__114error_category23default_error_conditionEi,b18,b18,__ZNKSt3__124__generic_error_category7messageEi
,b18,b18,__ZNKSt3__123__system_error_category23default_error_conditionEi,__ZNKSt3__123__system_error_category7messageEi,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__119__iostream_category7messageEi,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN3glmmiIfLNS_9precisionE0EEENS_5tvec2IT_XT0_EEERKS4_S6_,b18
,__ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE24__emplace_back_slow_pathIJRffEEEvDpOT_,b18,b18,__ZN3glmplIfLNS_9precisionE0EEENS_5tvec2IT_XT0_EEERKS4_S6_,b18,b18,__ZN3glmmlIfLNS_9precisionE0EEENS_5tvec2IT_XT0_EEERKS4_RKS3_,b18,__ZN3glmdvIfLNS_9precisionE0EEENS_5tvec2IT_XT0_EEERKS4_RKS3_,b18,b18,b18,b18,b18,b18,b18,b18,__ZN3glmmlIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_RKS3_,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN3gsl24contiguous_span_iteratorINS_4spanI6Layer2Lin1EJEEEEC2EPKS3_b,b18,b18
,b18,__ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_,b18,__ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_,b18,b18,b18,__ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE18__construct_at_endIPKS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_,__ZNSt3__16vectorIN5Asset5LayerENS_9allocatorIS2_EEE18__construct_at_endIPKS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_,b18,__ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__18functionIFvvEEC2INS_6__bindIM5SceneFvvEJPS5_EEEEET_PNS_9enable_ifIXaasr10__callableISA_EE5valuentsr7is_sameISA_S2_EE5valueEvE4typeE,__ZN5Scene7OnErrorEiPKc,__ZNSt3__18functionIFviPKcEEC2INS_6__bindIM5SceneFviS2_EJPS7_RNS_12placeholders4__phILi1EEERNSC_ILi2EEEEEEEET_PNS_9enable_ifIXaasr10__callableISI_EE5valuentsr7is_sameISI_S4_EE5valueEvE4typeE,__ZN5Scene9OnMessageEPKci,__ZNSt3__18functionIFvPKciEEC2INS_6__bindIM5SceneFvS2_iEJPS7_RNS_12placeholders4__phILi1EEERNSC_ILi2EEEEEEEET_PNS_9enable_ifIXaasr10__callableISI_EE5valuentsr7is_sameISI_S4_EE5valueEvE4typeE,b18
,_emscripten_set_main_loop__wrapper,b18,b18,__ZN3glm9translateIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_RKNS_5tvec3IS3_XT0_EEE,b18,b18,b18,b18,b18,b18,b18,__ZN3glmplIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,_glDrawArrays__wrapper,b18,b18,b18,b18,__ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_,b18
,__ZN3glmplIfLNS_9precisionE0EEENS_5tvec3IT_XT0_EEERKS4_S6_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__16vectorIN5Asset5Layer7SurfaceENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_,b18,__ZN8RendererC2ERN5Asset6AssetsERK4AABB,b18,__ZN6CameraC2Eii,b18,b18,b18,b18,b18,__ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EE8row_typeERKNS4_8col_typeERKS4_,__ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EE8col_typeERKS4_RKNS4_8row_typeE,b18,b18,b18,__ZNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endIPKS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_,b18,__ZNSt3__16vectorIN10MeshLoader8PolyLineENS_9allocatorIS2_EEE18__construct_at_endIPKS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_,__ZN3glm5tvec2IfLNS_9precisionE0EEC2ERKfS4_
,__ZNSt3__16vectorIN3glm5tvec2IfLNS1_9precisionE0EEENS_9allocatorIS4_EEE18__construct_at_endIPKS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_,b18,b18,b18,b18,b18,b18,b18,__Z5UnionRK4AABBS1_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b18,b18,__ZNSt3__124uniform_int_distributionIjEC2Ejj,b18,b18,_glTexParameteri__wrapper,b18,__ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S6_,b18,b18
,b18,b18,b18,b18,b18,___cxa_throw__wrapper,b18,b18,b18,__Z8LoadMeshPcjRN10MeshLoader4MeshE,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__124uniform_int_distributionIiEC2Eii,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__114__split_bufferIPN12InputHandler11ButtonClickERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN12_GLOBAL__N_110SumNormalsERNSt3__16vectorIN3glm5tvec3IfLNS2_9precisionE0EEENS0_9allocatorIS5_EEEEjPKS5_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b18,__ZNSt3__112system_errorC2ENS_10error_codeEPKc,b18,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b18,b18,b18,b18,b18,b18,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_di = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__118generate_canonicalIdLj53ENS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEET_RT1_,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_viiiid = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZN3glm5tvec4IfLNS_9precisionE0EEC2IiiifEET_T0_T1_T2_,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_viiidi = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZN5Asset11GenVerticesERKN10MeshLoader8PolyLineERKNSt3__16vectorIN3glm5tvec2IfLNS6_9precisionE0EEENS4_9allocatorIS9_EEEERKNS5_INS6_5tvec3IfLS8_0EEENSA_ISG_EEEEfRSI_,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZN3glm5tvec4IfLNS_9precisionE0EEC2IiifiEET_T0_T1_T2_,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_vidddd = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN3glm5tvec4IfLNS_9precisionE0EEC2Effff,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22];
var FUNCTION_TABLE_viid = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN3glmmlIfLNS_9precisionE0EEENS_5tvec4IT_XT0_EEERKS4_S3_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,_glTexParameterf__wrapper,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23];
var FUNCTION_TABLE_viiiiii = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b24,b24,b24,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b24,b24,b24,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b24
,b24,b24,b24,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN6ClientC2EPKctRK7Sessionbb
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24];
var FUNCTION_TABLE_viiiiiiiii = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,_glTexImage2D__wrapper,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25];
var FUNCTION_TABLE_viiiiiiiiii = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b26,b26,b26,b26,b26,b26,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b26,b26,b26,b26,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b26,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26];
var FUNCTION_TABLE_iii = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,b27,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE6targetERKSt9type_info,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,__ZNKSt3__110__function6__funcINS_6__bindIM5SceneFviPKcEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFviS5_EE6targetERKSt9type_info,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNKSt3__110__function6__funcINS_6__bindIM5SceneFvPKciEJPS3_RNS_12placeholders4__phILi1EEERNSA_ILi2EEEEEENS_9allocatorISF_EEFvS5_iEE6targetERKSt9type_info,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNKSt3__15ctypeIcE10do_toupperEc,b27,__ZNKSt3__15ctypeIcE10do_tolowerEc,b27,__ZNKSt3__15ctypeIcE8do_widenEc,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNKSt3__15ctypeIwE10do_toupperEw,b27,__ZNKSt3__15ctypeIwE10do_tolowerEw,b27,__ZNKSt3__15ctypeIwE8do_widenEc,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,__ZN3glm5tvec2IfLNS_9precisionE0EEaSERKS2_,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNK3gsl13static_boundsIJLin1EEE9linearizeERKNS_5indexILj1EEE
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,__ZN3glm7tmat4x4IfLNS_9precisionE0EEaSERKS2_,b27,b27,__ZN3glm7tmat4x4IfLNS_9precisionE0EEixEi,__ZNK3glm7tmat4x4IfLNS_9precisionE0EEixEi,__ZNK3glm5tvec3IfLNS_9precisionE0EEixEi,b27,b27,__ZN3glm5tvec4IfLNS_9precisionE0EEaSERKS2_,b27,b27,b27,b27,__ZNK3glm5tvec4IfLNS_9precisionE0EEixEi,b27,b27,__ZN3glm5tvec4IfLNS_9precisionE0EEixEi,b27,b27,b27,__ZN3glm5tvec3IfLNS_9precisionE0EEaSERKS2_,b27,b27,b27,b27,__ZN3glm7tmat4x4IfLNS_9precisionE0EEmLIfEERS2_RKNS0_IT_LS1_0EEE
,b27,b27,__ZN3glm5tvec3IfLNS_9precisionE0EEixEi,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,_printf,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNSt3__124uniform_int_distributionIjEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEjRT_,b27,b27,b27,b27,b27,b27
,b27,b27,__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNKSt3__16locale9use_facetERNS0_2idE,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_,b27,b27,b27,__ZN8Renderer9StarFieldaSEOS0_,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZN12_GLOBAL__N_19cmpUVVertEPKvS1_,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,_clock_gettime__wrapper,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,_isxdigit_l,_isdigit_l
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27];
var FUNCTION_TABLE_iiiiii = [b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b28,b28,b28,b28,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb
,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b28,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b28,b28,b28,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b28,b28,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b28,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b28,b28,b28,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b28,b28,b28,b28,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b28,b28,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b28,b28,b28,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b28
,b28,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b28,b28,b28,b28,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b28,b28,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b28,b28,b28,b28,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b28,b28,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,_wcsnrtombs,b28,_mbsnrtowcs,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28];
var FUNCTION_TABLE_dii = [b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,__ZN3glm3dotIfLNS_9precisionE0ENS_5tvec2EEET_RKT1_IS3_XT0_EES7_,b29,__ZN3glm8distanceIfLNS_9precisionE0ENS_5tvec2EEET_RKT1_IS3_XT0_EES7_,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29];
var FUNCTION_TABLE_vidddddd = [b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN3glm5orthoIfEENS_7tmat4x4IT_LNS_9precisionE0EEES2_S2_S2_S2_S2_S2_,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30];
var FUNCTION_TABLE_d = [b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,__ZN3glm6two_piIfEET_v,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31];
var FUNCTION_TABLE_viiiiiii = [b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b32,b32,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b32,b32
,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32];
var FUNCTION_TABLE_i = [b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,___cxa_get_globals_fast,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNSt3__16__clocEv,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNSt3__16locale5__imp12make_classicEv,b33,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv
,b33,b33,___ctype_b_loc,___ctype_toupper_loc,___ctype_tolower_loc,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33];
var FUNCTION_TABLE_viiiidd = [b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,__ZN5Asset11ReconstructERKNSt3__16vectorIN3glm5tvec3IfLNS2_9precisionE0EEENS0_9allocatorIS5_EEEERNS1_IN10MeshLoader8PolyLineENS6_ISC_EEEERKNS1_INS2_5tvec2IfLS4_0EEENS6_ISH_EEEEff,b34];
var FUNCTION_TABLE_iiiii = [b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b35,b35,b35,b35,b35,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,_fread,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b35,b35,b35,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b35,b35,b35,b35
,b35,b35,b35,b35,_mbsrtowcs,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,_catgets,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,_mbrtowc,b35,b35,b35,b35,b35,b35,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35,b35,b35];
var FUNCTION_TABLE_viiid = [b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,__ZN5Asset14GenLineNormalsERKNSt3__16vectorIN3glm5tvec3IfLNS2_9precisionE0EEENS0_9allocatorIS5_EEEERNS1_IN10MeshLoader8PolyLineENS6_ISC_EEEEf,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
,b36,b36,b36];
var FUNCTION_TABLE_vidiii = [b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,__ZN3glm5tvec4IfLNS_9precisionE0EEC2IfiiiEET_T0_T1_T2_,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37];
var FUNCTION_TABLE_v = [b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,___cxa_pure_virtual__wrapper,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,__ZL25default_terminate_handlerv,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,___cxa_rethrow__wrapper,___cxa_end_catch__wrapper,b38,b38,b38,b38,b38,b38,b38,b38
,b38,__Z9main_loopv,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,__ZSt17__throw_bad_allocv,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38,b38,b38];
var FUNCTION_TABLE_iiiiiiiii = [b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b39,b39
,b39,b39,b39,b39,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b39,b39,b39,b39,b39,b39,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39];
var FUNCTION_TABLE_iiiiid = [b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40
,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40
,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40
,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40
,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40
,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40
,b40,b40,b40,b40,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b40,b40,b40,b40,b40,b40,b40,b40,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40
,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40
,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40];
var FUNCTION_TABLE_vdddi = [b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,__Z14GenerateSquarefffRNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEEE,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41,b41
,b41,b41,b41,b41,b41];
var FUNCTION_TABLE_viiii = [b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b42,b42,b42,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b42,b42,b42,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b42,b42,b42,b42,__ZNKSt3__17collateIwE12do_transformEPKwS3_
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,___assert_fail__wrapper,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,__ZN3glm5tvec3IfLNS_9precisionE0EEC2ERKfS4_S4_,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,_glGetShaderInfoLog__wrapper,b42,_glGetProgramInfoLog__wrapper,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,_glUniformMatrix4fv__wrapper,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,__ZN6ProtoXC2EjRKN5Asset5ModelEj,b42,b42,b42,__ZNSt3__16vectorI6ProtoXNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJiRN5Asset5ModelEjEEEvDpOT_,b42,b42,b42,b42,b42,b42,_glBufferData__wrapper,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,__ZL8CalcAABBNSt3__16vectorIN3glm5tvec3IfLNS1_9precisionE0EEENS_9allocatorIS4_EEEEii,b42,b42,b42,b42,b42,b42,b42,b42,__ZN12InputHandler21mouse_button_callbackEP10GLFWwindowiii,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,_glRenderbufferStorage__wrapper,b42,b42,_glFramebufferRenderbuffer__wrapper,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,__ZN6Socket14error_callbackEiiPKcPv,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42,b42
,b42,b42,b42,b42,b42];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, _htonl: _htonl, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, _bitshift64Lshr: _bitshift64Lshr, _htons: _htons, _bitshift64Shl: _bitshift64Shl, _i64Subtract: _i64Subtract, ___errno_location: ___errno_location, _ntohs: _ntohs, __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vid: dynCall_vid, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_viidii: dynCall_viidii, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viidd: dynCall_viidd, dynCall_viidi: dynCall_viidi, dynCall_id: dynCall_id, dynCall_viddd: dynCall_viddd, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_vidd: dynCall_vidd, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_diii: dynCall_diii, dynCall_viii: dynCall_viii, dynCall_di: dynCall_di, dynCall_viiiid: dynCall_viiiid, dynCall_viiidi: dynCall_viiidi, dynCall_vidddd: dynCall_vidddd, dynCall_viid: dynCall_viid, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_dii: dynCall_dii, dynCall_vidddddd: dynCall_vidddddd, dynCall_d: dynCall_d, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_i: dynCall_i, dynCall_viiiidd: dynCall_viiiidd, dynCall_iiiii: dynCall_iiiii, dynCall_viiid: dynCall_viiid, dynCall_vidiii: dynCall_vidiii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_vdddi: dynCall_vdddi, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htonl.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ntohs.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htons.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _htons = Module["_htons"] = asm["_htons"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viidii = Module["dynCall_viidii"] = asm["dynCall_viidii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viidd = Module["dynCall_viidd"] = asm["dynCall_viidd"];
var dynCall_viidi = Module["dynCall_viidi"] = asm["dynCall_viidi"];
var dynCall_id = Module["dynCall_id"] = asm["dynCall_id"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_viiiid = Module["dynCall_viiiid"] = asm["dynCall_viiiid"];
var dynCall_viiidi = Module["dynCall_viiidi"] = asm["dynCall_viiidi"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_vidddddd = Module["dynCall_vidddddd"] = asm["dynCall_vidddddd"];
var dynCall_d = Module["dynCall_d"] = asm["dynCall_d"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_viiiidd = Module["dynCall_viiiidd"] = asm["dynCall_viiiidd"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
var dynCall_vidiii = Module["dynCall_vidiii"] = asm["dynCall_vidiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_vdddi = Module["dynCall_vdddi"] = asm["dynCall_vdddi"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



